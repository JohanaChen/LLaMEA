{"id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.43730144228570844, "feedback": "The algorithm HybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.28.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "63203bd8-74bf-4667-af83-c2e765389be6", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "65389330-f0ad-4647-a157-f47ada51717d", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "feaf96a8-09fe-4d86-bc54-9fbfd1aeeee2", "solution": "import numpy as np\n\nclass EnhancedDE_ASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased population size\n        self.de_mutation_factor = 0.9  # Adjusted mutation factor\n        self.cr = 0.8  # Adjusted crossover rate\n        self.initial_temperature = 150.0  # Higher initial temperature\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Adaptive Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature and parameters dynamically\n                temperature *= 0.98  # Faster cooling schedule\n                self.de_mutation_factor = 0.5 + 0.4 * (self.budget - evals_used) / self.budget\n                self.cr = 0.6 + 0.3 * (evals_used / self.budget)\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "EnhancedDE_ASA", "description": "Enhanced Differential Evolution with Adaptive Simulated Annealing and Dynamic Parameters.", "configspace": "", "generation": 3, "fitness": 0.3503415989711617, "feedback": "The algorithm EnhancedDE_ASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8166558061400511, 0.8166558061400511, 0.8166558061400511, 0.8296635999288209, 0.8296635999288209, 0.8296635999288209, 0.8120715397976735, 0.8120715397976735, 0.8120715397976735, 0.6852483174208784, 0.6852483174208784, 0.6852483174208784, 0.7022958184154946, 0.7022958184154946, 0.7022958184154946, 0.7146222705930666, 0.7146222705930666, 0.7146222705930666, 0.3851821940990596, 0.3851821940990596, 0.3851821940990596, 0.4006658928566219, 0.4006658928566219, 0.4006658928566219, 0.4736324758391558, 0.4736324758391558, 0.4736324758391558, 0.16872931392068113, 0.16872931392068113, 0.16872931392068113, 0.16313759872595457, 0.16313759872595457, 0.16313759872595457, 0.37248047858590505, 0.37248047858590505, 0.37248047858590505, 0.9760179190184891, 0.9760179190184891, 0.9760179190184891, 0.9813878662344151, 0.9813878662344151, 0.9813878662344151, 0.9834005351704306, 0.9834005351704306, 0.9834005351704306, 0.4965997294489829, 0.4965997294489829, 0.4965997294489829, 0.5235734420403642, 0.5235734420403642, 0.5235734420403642, 0.48568589496342685, 0.48568589496342685, 0.48568589496342685, 0.582967998745503, 0.582967998745503, 0.582967998745503, 0.5686166644793875, 0.5686166644793875, 0.5686166644793875, 0.6073402076205021, 0.6073402076205021, 0.6073402076205021, 0.24067907855882487, 0.24067907855882487, 0.24067907855882487, 0.3106301808725137, 0.3106301808725137, 0.3106301808725137, 0.3308713062571559, 0.3308713062571559, 0.3308713062571559, 0.23340267670506776, 0.23340267670506776, 0.23340267670506776, 0.3332282909170329, 0.3332282909170329, 0.3332282909170329, 0.24913305305812217, 0.24913305305812217, 0.24913305305812217, 0.12864823029555994, 0.12864823029555994, 0.12864823029555994, 0.11694286666137155, 0.11694286666137155, 0.11694286666137155, 0.1595740839662445, 0.1595740839662445, 0.1595740839662445, 0.2884009699103227, 0.2884009699103227, 0.2884009699103227, 0.2333122363197182, 0.2333122363197182, 0.2333122363197182, 0.3296734620734164, 0.3296734620734164, 0.3296734620734164, 0.08620111818929432, 0.08620111818929432, 0.08620111818929432, 0.05730013539394352, 0.05730013539394352, 0.05730013539394352, 0.06609692014684532, 0.06609692014684532, 0.06609692014684532, 0.2145845098405883, 0.2145845098405883, 0.2145845098405883, 0.231618060251642, 0.231618060251642, 0.231618060251642, 0.1886518483550338, 0.1886518483550338, 0.1886518483550338, 0.6249325530323805, 0.6249325530323805, 0.6249325530323805, 0.6048242255532699, 0.6048242255532699, 0.6048242255532699, 0.5797479023717828, 0.5797479023717828, 0.5797479023717828, 0.09646021896418622, 0.09646021896418622, 0.09646021896418622, 0.09395250866784277, 0.09395250866784277, 0.09395250866784277, 0.09980768045179411, 0.09980768045179411, 0.09980768045179411, 0.15417373693880676, 0.15417373693880676, 0.15417373693880676, 0.167726494073824, 0.167726494073824, 0.167726494073824, 0.1363453696722836, 0.1363453696722836, 0.1363453696722836, 0.37266089346508713, 0.37266089346508713, 0.37266089346508713, 0.36397846935972666, 0.36397846935972666, 0.36397846935972666, 0.4011123405371473, 0.4011123405371473, 0.4011123405371473, 0.24539071957302339, 0.24539071957302339, 0.24539071957302339, 0.23201735873095664, 0.23201735873095664, 0.23201735873095664, 0.2853621900683071, 0.2853621900683071, 0.2853621900683071, 0.1780613833481468, 0.1780613833481468, 0.1780613833481468, 0.19133273685350827, 0.19133273685350827, 0.19133273685350827, 0.18269292801551773, 0.18269292801551773, 0.18269292801551773, 0.24098523980185094, 0.24098523980185094, 0.24098523980185094, 0.44891396462461486, 0.44891396462461486, 0.44891396462461486, 0.17925198169280088, 0.17925198169280088, 0.17925198169280088, 0.6851952434411654, 0.6851952434411654, 0.6851952434411654, 0.1612347340693523, 0.1612347340693523, 0.1612347340693523, 0.6137791106935504, 0.6137791106935504, 0.6137791106935504, 0.19869074292378996, 0.19869074292378996, 0.19869074292378996, 0.1802501361377088, 0.1802501361377088, 0.1802501361377088, 0.20534148971490618, 0.20534148971490618, 0.20534148971490618, 0.19162280513393193, 0.19162280513393193, 0.19162280513393193, 0.18118546390066514, 0.18118546390066514, 0.18118546390066514, 0.17989558986464615, 0.17989558986464615, 0.17989558986464615, 0.0642798250513863, 0.0642798250513863, 0.0642798250513863, 0.07418504942807791, 0.07418504942807791, 0.07418504942807791, 0.08027944795004294, 0.08027944795004294, 0.08027944795004294]}, "mutation_prompt": null}
{"id": "0a7b5d7c-e25e-491c-aac0-d548f636965e", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "646c6622-37e2-4402-8a2b-337738da5cc5", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "56c5f3c3-7ce4-4915-a8c1-c836ca601b07", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "36a507f1-89e6-4264-bc25-64fa988e9d87", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "937dd3f6-a765-4109-a8fe-7f4d0de759d0", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "eb2f7466-d05a-407f-a055-3312c644ce3e", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "9d92638c-b354-4b92-897b-4b4258c35024", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "e38ac402-e6df-43b0-ab34-5da30f66c0e1", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "86f35d1e-00f6-4503-a688-8c6e949a2d7b", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "b279ed1a-9ad0-4535-a7b8-ccbe22b2b991", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "43946f0a-a6b8-4943-b97b-79d7728d20b8", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "a6a3be25-bdf6-4fdf-8aff-990f475bf8e5", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "12e87f77-95e8-4aa5-ad93-2f357d1ce193", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "55854096-3b34-4dff-bada-3260033a6cac", "solution": "import numpy as np\n\nclass EnhancedHybridDE_ASA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased size for better coverage\n        self.de_mutation_factor = 0.85  # Slightly adjusted for better exploration\n        self.cr = 0.95  # Increased crossover rate for diversity\n        self.temperature = 120.0  # Higher initial temperature for exploration\n        self.cooling_rate = 0.97  # Adaptive cooling schedule\n\n    def __call__(self, func):\n        np.random.seed(42)  # Changed seed for diverse initialization\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                acceptance_probability = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Adaptive temperature update\n                self.temperature *= self.cooling_rate\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_ASA", "description": "An enhanced hybrid metaheuristic algorithm combining Differential Evolution and Adaptive Simulated Annealing to balance global exploration and adaptive local exploitation for efficient black box optimization.", "configspace": "", "generation": 17, "fitness": 0.4034750476982205, "feedback": "The algorithm EnhancedHybridDE_ASA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.7703797999919588, 0.7703797999919588, 0.7703797999919588, 0.8103821778049692, 0.8103821778049692, 0.8103821778049692, 0.8107883067809609, 0.8107883067809609, 0.8107883067809609, 0.6605921444463169, 0.6605921444463169, 0.6605921444463169, 0.6607544253510902, 0.6607544253510902, 0.6607544253510902, 0.6784412356217997, 0.6784412356217997, 0.6784412356217997, 0.18790735102033218, 0.18790735102033218, 0.18790735102033218, 0.11478672575233828, 0.11478672575233828, 0.11478672575233828, 0.10290083230710156, 0.10290083230710156, 0.10290083230710156, 0.12357336650116979, 0.12357336650116979, 0.12357336650116979, 0.11733134230555498, 0.11733134230555498, 0.11733134230555498, 0.11726990155305228, 0.11726990155305228, 0.11726990155305228, 0.9748529948354402, 0.9748529948354402, 0.9748529948354402, 0.9606199204476878, 0.9606199204476878, 0.9606199204476878, 0.9914899792886838, 0.9914899792886838, 0.9914899792886838, 0.5360757196722971, 0.5360757196722971, 0.5360757196722971, 0.506227693257701, 0.506227693257701, 0.506227693257701, 0.5162587678425985, 0.5162587678425985, 0.5162587678425985, 0.7278108815233342, 0.7278108815233342, 0.7278108815233342, 0.7843574504302097, 0.7843574504302097, 0.7843574504302097, 0.8073042296540948, 0.8073042296540948, 0.8073042296540948, 0.49659799937780347, 0.49659799937780347, 0.49659799937780347, 0.4212945304931699, 0.4212945304931699, 0.4212945304931699, 0.5694334420927423, 0.5694334420927423, 0.5694334420927423, 0.1268069848972091, 0.1268069848972091, 0.1268069848972091, 0.5534791821380993, 0.5534791821380993, 0.5534791821380993, 0.49316441525368804, 0.49316441525368804, 0.49316441525368804, 0.47724779293415787, 0.47724779293415787, 0.47724779293415787, 0.46560477077901086, 0.46560477077901086, 0.46560477077901086, 0.47351804864035163, 0.47351804864035163, 0.47351804864035163, 0.6124411407021126, 0.6124411407021126, 0.6124411407021126, 0.5906763518150739, 0.5906763518150739, 0.5906763518150739, 0.6487434216121811, 0.6487434216121811, 0.6487434216121811, 0.2450035170324406, 0.2450035170324406, 0.2450035170324406, 0.3744118715456809, 0.3744118715456809, 0.3744118715456809, 0.22964130311162967, 0.22964130311162967, 0.22964130311162967, 0.36017675966547424, 0.36017675966547424, 0.36017675966547424, 0.359576372114618, 0.359576372114618, 0.359576372114618, 0.3496604165552877, 0.3496604165552877, 0.3496604165552877, 0.699134655953873, 0.699134655953873, 0.699134655953873, 0.7122699118468285, 0.7122699118468285, 0.7122699118468285, 0.6861763707289544, 0.6861763707289544, 0.6861763707289544, 0.12034952575378888, 0.12034952575378888, 0.12034952575378888, 0.13708629863991062, 0.13708629863991062, 0.13708629863991062, 0.09554355029400308, 0.09554355029400308, 0.09554355029400308, 0.35391443641839837, 0.35391443641839837, 0.35391443641839837, 0.0999282927641334, 0.0999282927641334, 0.0999282927641334, 0.2600712937074362, 0.2600712937074362, 0.2600712937074362, 0.37813872611000987, 0.37813872611000987, 0.37813872611000987, 0.35863537292582226, 0.35863537292582226, 0.35863537292582226, 0.3581463207889132, 0.3581463207889132, 0.3581463207889132, 0.30509930809470176, 0.30509930809470176, 0.30509930809470176, 0.29205316226316924, 0.29205316226316924, 0.29205316226316924, 0.2876527040148146, 0.2876527040148146, 0.2876527040148146, 0.22187187790903362, 0.22187187790903362, 0.22187187790903362, 0.19248547697880747, 0.19248547697880747, 0.19248547697880747, 0.17841327319075428, 0.17841327319075428, 0.17841327319075428, 0.33364393555471994, 0.33364393555471994, 0.33364393555471994, 0.488104583832242, 0.488104583832242, 0.488104583832242, 0.21724484460852123, 0.21724484460852123, 0.21724484460852123, 0.8143644837205262, 0.8143644837205262, 0.8143644837205262, 0.18190646945879274, 0.18190646945879274, 0.18190646945879274, 0.1590681826030943, 0.1590681826030943, 0.1590681826030943, 0.205270856370396, 0.205270856370396, 0.205270856370396, 0.1915813094321004, 0.1915813094321004, 0.1915813094321004, 0.19925919699336092, 0.19925919699336092, 0.19925919699336092, 0.1820992090953547, 0.1820992090953547, 0.1820992090953547, 0.17570621010719056, 0.17570621010719056, 0.17570621010719056, 0.15526725728703183, 0.15526725728703183, 0.15526725728703183, 0.06526018655770005, 0.06526018655770005, 0.06526018655770005, 0.0663266501647084, 0.0663266501647084, 0.0663266501647084, 0.07054593295336087, 0.07054593295336087, 0.07054593295336087]}, "mutation_prompt": null}
{"id": "ccf3940c-f7d3-487f-93a6-16a17fef14c5", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "1639dc7f-dadf-4fe2-976e-0355b4256992", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "2418068d-b72d-4307-a11c-5de133cc0d47", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "b2ed77bf-b0be-41fe-8125-e0fa4909c861", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "acbd03db-9743-41ee-ba8d-a4369f78f15f", "solution": "import numpy as np\n\nclass HybridDE_SA_Adaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 25  # Increased to enhance diversity\n        self.de_mutation_factor = 0.85  # Adjusted for better exploration\n        self.cr = 0.95  # Increased crossover rate\n        self.initial_temperature = 100.0\n        self.temperature = self.initial_temperature\n\n    def __call__(self, func):\n        np.random.seed(42)  # Changed seed for variability\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                acceptance_probability = np.exp((fitness[i] - trial_fitness) / self.temperature)\n                if trial_fitness < fitness[i] or np.random.rand() < acceptance_probability:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Adaptive temperature update\n                if trial_fitness < fitness[i]:\n                    self.temperature *= 0.95  # Faster temperature reduction\n                else:\n                    self.temperature += (self.initial_temperature - self.temperature) * 0.02  # Adaptive increase\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA_Adaptive", "description": "Enhanced hybrid algorithm integrating DE with a temperature-adaptive SA for improved convergence on BBOB tasks.", "configspace": "", "generation": 22, "fitness": 0.15101999552524525, "feedback": "The algorithm HybridDE_SA_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.18558545826894557, 0.18558545826894557, 0.18558545826894557, 0.1900168136679662, 0.1900168136679662, 0.1900168136679662, 0.15915749036325721, 0.15915749036325721, 0.15915749036325721, 0.13996064498929484, 0.13996064498929484, 0.13996064498929484, 0.11807836581891662, 0.11807836581891662, 0.11807836581891662, 0.1152224223326308, 0.1152224223326308, 0.1152224223326308, 0.06037283577931907, 0.06037283577931907, 0.06037283577931907, 0.04930286079817214, 0.04930286079817214, 0.04930286079817214, 0.048856114672931494, 0.048856114672931494, 0.048856114672931494, 0.04751387942496821, 0.04751387942496821, 0.04751387942496821, 0.042611273787919735, 0.042611273787919735, 0.042611273787919735, 0.0439416814569451, 0.0439416814569451, 0.0439416814569451, 0.754516511425914, 0.754516511425914, 0.754516511425914, 0.8728223139571887, 0.8728223139571887, 0.8728223139571887, 0.9671063603792148, 0.9671063603792148, 0.9671063603792148, 0.09622765955659585, 0.09622765955659585, 0.09622765955659585, 0.10813263579233046, 0.10813263579233046, 0.10813263579233046, 0.11364999825751909, 0.11364999825751909, 0.11364999825751909, 0.12784375242076018, 0.12784375242076018, 0.12784375242076018, 0.15873540069210124, 0.15873540069210124, 0.15873540069210124, 0.16218673129471795, 0.16218673129471795, 0.16218673129471795, 0.11378783375925572, 0.11378783375925572, 0.11378783375925572, 0.11185494647314576, 0.11185494647314576, 0.11185494647314576, 0.11360965536138024, 0.11360965536138024, 0.11360965536138024, 0.11557405655576236, 0.11557405655576236, 0.11557405655576236, 0.11958105806821417, 0.11958105806821417, 0.11958105806821417, 0.11515251657190362, 0.11515251657190362, 0.11515251657190362, 0.11928106177533515, 0.11928106177533515, 0.11928106177533515, 0.09460158003077701, 0.09460158003077701, 0.09460158003077701, 0.09195708986351203, 0.09195708986351203, 0.09195708986351203, 0.1588653465517358, 0.1588653465517358, 0.1588653465517358, 0.13558048602368522, 0.13558048602368522, 0.13558048602368522, 0.13671582615205757, 0.13671582615205757, 0.13671582615205757, 0.08200885197430785, 0.08200885197430785, 0.08200885197430785, 0.09400153491928143, 0.09400153491928143, 0.09400153491928143, 0.07034454733776196, 0.07034454733776196, 0.07034454733776196, 0.02201985166463305, 0.02201985166463305, 0.02201985166463305, 0.03292130049148889, 0.03292130049148889, 0.03292130049148889, 0.040851077979080386, 0.040851077979080386, 0.040851077979080386, 0.18568022731340283, 0.18568022731340283, 0.18568022731340283, 0.17163657081080363, 0.17163657081080363, 0.17163657081080363, 0.19054688887576077, 0.19054688887576077, 0.19054688887576077, 0.059602352374631296, 0.059602352374631296, 0.059602352374631296, 0.04514096624109565, 0.04514096624109565, 0.04514096624109565, 0.07065560441072305, 0.07065560441072305, 0.07065560441072305, 0.15099870723006426, 0.15099870723006426, 0.15099870723006426, 0.13324110672575173, 0.13324110672575173, 0.13324110672575173, 0.13728486974231402, 0.13728486974231402, 0.13728486974231402, 0.15269341905439393, 0.15269341905439393, 0.15269341905439393, 0.1484520893003144, 0.1484520893003144, 0.1484520893003144, 0.14680382016039473, 0.14680382016039473, 0.14680382016039473, 0.10380743491591093, 0.10380743491591093, 0.10380743491591093, 0.09497130454457348, 0.09497130454457348, 0.09497130454457348, 0.10683670156801128, 0.10683670156801128, 0.10683670156801128, 0.1624452950192915, 0.1624452950192915, 0.1624452950192915, 0.1491779877761763, 0.1491779877761763, 0.1491779877761763, 0.161596880204949, 0.161596880204949, 0.161596880204949, 0.17203650821355965, 0.17203650821355965, 0.17203650821355965, 0.1692929557869275, 0.1692929557869275, 0.1692929557869275, 0.17036041169968208, 0.17036041169968208, 0.17036041169968208, 0.1565499652054756, 0.1565499652054756, 0.1565499652054756, 0.13474852839857066, 0.13474852839857066, 0.13474852839857066, 0.21021992721130234, 0.21021992721130234, 0.21021992721130234, 0.16589659263049927, 0.16589659263049927, 0.16589659263049927, 0.11089029649823734, 0.11089029649823734, 0.11089029649823734, 0.17863006227698552, 0.17863006227698552, 0.17863006227698552, 0.18560522908768495, 0.18560522908768495, 0.18560522908768495, 0.19534130404488248, 0.19534130404488248, 0.19534130404488248, 0.189775936280824, 0.189775936280824, 0.189775936280824, 0.05102671523199387, 0.05102671523199387, 0.05102671523199387, 0.04680273653110578, 0.04680273653110578, 0.04680273653110578, 0.03414045576043445, 0.03414045576043445, 0.03414045576043445]}, "mutation_prompt": null}
{"id": "a8d416f2-fc27-47e5-81fc-685a0dddb10f", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "82e5e8ee-82b8-4e04-8995-52ff97cad9f2", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "75a28808-e02a-4d28-89a5-51f9aafc0237", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "bae70f69-26eb-4931-af28-5d1b99ca7e0a", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "cf44378a-dfb6-43a9-8c01-65a0c7f7450c", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "90054fca-cc72-49bd-9cda-455626fd8814", "solution": "import numpy as np\n\nclass HybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.temperature = 100.0  # Initial temperature for simulated annealing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = self.population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(self.population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        while evals_used < self.budget:\n            for i in range(self.population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                # Simulated Annealing acceptance\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / self.temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Update temperature\n                self.temperature *= 0.99\n\n                if evals_used >= self.budget:\n                    break\n\n        return best_solution, best_fitness", "name": "HybridDE_SA", "description": "A hybrid metaheuristic algorithm combining Differential Evolution and Simulated Annealing to balance global exploration and local exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8321507164115631, 0.8321507164115631, 0.8321507164115631, 0.8511300574798971, 0.8511300574798971, 0.8511300574798971, 0.8486735267409729, 0.8486735267409729, 0.8486735267409729, 0.7797257422613656, 0.7797257422613656, 0.7797257422613656, 0.7650661616432435, 0.7650661616432435, 0.7650661616432435, 0.7457597447577333, 0.7457597447577333, 0.7457597447577333, 0.4233773602537779, 0.4233773602537779, 0.4233773602537779, 0.15126516605308515, 0.15126516605308515, 0.15126516605308515, 0.1400887245242437, 0.1400887245242437, 0.1400887245242437, 0.1236905439438788, 0.1236905439438788, 0.1236905439438788, 0.11188657577592276, 0.11188657577592276, 0.11188657577592276, 0.13764679473793062, 0.13764679473793062, 0.13764679473793062, 0.9504682490062163, 0.9504682490062163, 0.9504682490062163, 0.9419093737105859, 0.9419093737105859, 0.9419093737105859, 0.9550966974424908, 0.9550966974424908, 0.9550966974424908, 0.6187221286875126, 0.6187221286875126, 0.6187221286875126, 0.6397665166328195, 0.6397665166328195, 0.6397665166328195, 0.0875741590386302, 0.0875741590386302, 0.0875741590386302, 0.8358041731527618, 0.8358041731527618, 0.8358041731527618, 0.8796548472945966, 0.8796548472945966, 0.8796548472945966, 0.8206819238400689, 0.8206819238400689, 0.8206819238400689, 0.47204010269149355, 0.47204010269149355, 0.47204010269149355, 0.5476069457261536, 0.5476069457261536, 0.5476069457261536, 0.5440302558082837, 0.5440302558082837, 0.5440302558082837, 0.00964759275002014, 0.00964759275002014, 0.00964759275002014, 0.6754193009559637, 0.6754193009559637, 0.6754193009559637, 0.5492155180345848, 0.5492155180345848, 0.5492155180345848, 0.5223912002760789, 0.5223912002760789, 0.5223912002760789, 0.5745225627861151, 0.5745225627861151, 0.5745225627861151, 0.5439320663852516, 0.5439320663852516, 0.5439320663852516, 0.6431114251399406, 0.6431114251399406, 0.6431114251399406, 0.6565570716979129, 0.6565570716979129, 0.6565570716979129, 0.7043320592986677, 0.7043320592986677, 0.7043320592986677, 0.3538388303302914, 0.3538388303302914, 0.3538388303302914, 0.44780804486718817, 0.44780804486718817, 0.44780804486718817, 0.2845704690233597, 0.2845704690233597, 0.2845704690233597, 0.4779632593676951, 0.4779632593676951, 0.4779632593676951, 0.4930164037318081, 0.4930164037318081, 0.4930164037318081, 0.43409382337386127, 0.43409382337386127, 0.43409382337386127, 0.752690141052933, 0.752690141052933, 0.752690141052933, 0.7633546049970441, 0.7633546049970441, 0.7633546049970441, 0.7693443048267299, 0.7693443048267299, 0.7693443048267299, 0.1630946929921847, 0.1630946929921847, 0.1630946929921847, 0.08600346857196783, 0.08600346857196783, 0.08600346857196783, 0.13051647994725513, 0.13051647994725513, 0.13051647994725513, 0.14853604812803822, 0.14853604812803822, 0.14853604812803822, 0.1672507543171785, 0.1672507543171785, 0.1672507543171785, 0.48026436818147966, 0.48026436818147966, 0.48026436818147966, 0.4406827123050715, 0.4406827123050715, 0.4406827123050715, 0.3914278979801449, 0.3914278979801449, 0.3914278979801449, 0.5026643329207577, 0.5026643329207577, 0.5026643329207577, 0.31878863558982506, 0.31878863558982506, 0.31878863558982506, 0.3302948538663929, 0.3302948538663929, 0.3302948538663929, 0.3658241185350526, 0.3658241185350526, 0.3658241185350526, 0.20121398856826822, 0.20121398856826822, 0.20121398856826822, 0.19207024494712377, 0.19207024494712377, 0.19207024494712377, 0.16331884505596195, 0.16331884505596195, 0.16331884505596195, 0.3805255529313435, 0.3805255529313435, 0.3805255529313435, 0.22196503775266463, 0.22196503775266463, 0.22196503775266463, 0.4556118330280682, 0.4556118330280682, 0.4556118330280682, 0.15964633887617363, 0.15964633887617363, 0.15964633887617363, 0.16497963765920654, 0.16497963765920654, 0.16497963765920654, 0.8601192091143004, 0.8601192091143004, 0.8601192091143004, 0.16645303458029326, 0.16645303458029326, 0.16645303458029326, 0.15202131856700873, 0.15202131856700873, 0.15202131856700873, 0.1923829334515691, 0.1923829334515691, 0.1923829334515691, 0.1922128210163898, 0.1922128210163898, 0.1922128210163898, 0.1987573671317434, 0.1987573671317434, 0.1987573671317434, 0.17780459368378765, 0.17780459368378765, 0.17780459368378765, 0.07587548115863008, 0.07587548115863008, 0.07587548115863008, 0.0700018763256487, 0.0700018763256487, 0.0700018763256487, 0.07577020087680397, 0.07577020087680397, 0.07577020087680397]}, "mutation_prompt": null}
{"id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85  # Crossover rate\n        self.initial_temperature = 90.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive population and dynamic temperature scaling to improve optimization efficiency.", "configspace": "", "generation": 29, "fitness": 0.4578167970116047, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.26.", "error": "", "parent_id": "0f0e9b74-3de7-4a6a-8838-8140d05a5d00", "metadata": {"aucs": [0.8468919310943874, 0.8468919310943874, 0.8468919310943874, 0.855326845256036, 0.855326845256036, 0.855326845256036, 0.840585818510729, 0.840585818510729, 0.840585818510729, 0.7421502225994087, 0.7421502225994087, 0.7421502225994087, 0.7565967426826964, 0.7565967426826964, 0.7565967426826964, 0.7529706990344701, 0.7529706990344701, 0.7529706990344701, 0.1426316867338121, 0.1426316867338121, 0.1426316867338121, 0.1393595997145456, 0.1393595997145456, 0.1393595997145456, 0.346361861358952, 0.346361861358952, 0.346361861358952, 0.12796918324697348, 0.12796918324697348, 0.12796918324697348, 0.12998578595405197, 0.12998578595405197, 0.12998578595405197, 0.4384317578292998, 0.4384317578292998, 0.4384317578292998, 0.9800275354110715, 0.9800275354110715, 0.9800275354110715, 0.9709783235644224, 0.9709783235644224, 0.9709783235644224, 0.9647029289037511, 0.9647029289037511, 0.9647029289037511, 0.6719250947414241, 0.6719250947414241, 0.6719250947414241, 0.6767349851271116, 0.6767349851271116, 0.6767349851271116, 0.6743179399450236, 0.6743179399450236, 0.6743179399450236, 0.7554426351222618, 0.7554426351222618, 0.7554426351222618, 0.8045587627588684, 0.8045587627588684, 0.8045587627588684, 0.789440049633421, 0.789440049633421, 0.789440049633421, 0.5599611561643695, 0.5599611561643695, 0.5599611561643695, 0.5312170838321281, 0.5312170838321281, 0.5312170838321281, 0.31069217560039875, 0.31069217560039875, 0.31069217560039875, 0.5705737337777981, 0.5705737337777981, 0.5705737337777981, 0.47093641060904434, 0.47093641060904434, 0.47093641060904434, 0.5354314122267088, 0.5354314122267088, 0.5354314122267088, 0.40209798712958045, 0.40209798712958045, 0.40209798712958045, 0.3642507993681433, 0.3642507993681433, 0.3642507993681433, 0.36548811236299594, 0.36548811236299594, 0.36548811236299594, 0.6010219767218168, 0.6010219767218168, 0.6010219767218168, 0.4609618964641864, 0.4609618964641864, 0.4609618964641864, 0.5761842567852868, 0.5761842567852868, 0.5761842567852868, 0.3364280873101432, 0.3364280873101432, 0.3364280873101432, 0.22436347168490534, 0.22436347168490534, 0.22436347168490534, 0.14370855196094, 0.14370855196094, 0.14370855196094, 0.3524508486544361, 0.3524508486544361, 0.3524508486544361, 0.42998297521643003, 0.42998297521643003, 0.42998297521643003, 0.40461796342897893, 0.40461796342897893, 0.40461796342897893, 0.767539242818753, 0.767539242818753, 0.767539242818753, 0.7820799575508199, 0.7820799575508199, 0.7820799575508199, 0.7721908539180269, 0.7721908539180269, 0.7721908539180269, 0.08871119087527446, 0.08871119087527446, 0.08871119087527446, 0.4523511087454457, 0.4523511087454457, 0.4523511087454457, 0.12192703851923581, 0.12192703851923581, 0.12192703851923581, 0.17742652326152386, 0.17742652326152386, 0.17742652326152386, 0.1691254363011272, 0.1691254363011272, 0.1691254363011272, 0.13695950957186487, 0.13695950957186487, 0.13695950957186487, 0.5120997367697984, 0.5120997367697984, 0.5120997367697984, 0.475690916960933, 0.475690916960933, 0.475690916960933, 0.6194688146950851, 0.6194688146950851, 0.6194688146950851, 0.3926061801832482, 0.3926061801832482, 0.3926061801832482, 0.38871989635931936, 0.38871989635931936, 0.38871989635931936, 0.4965386730534258, 0.4965386730534258, 0.4965386730534258, 0.17734482677275265, 0.17734482677275265, 0.17734482677275265, 0.20046836796037482, 0.20046836796037482, 0.20046836796037482, 0.21420361868707027, 0.21420361868707027, 0.21420361868707027, 0.20793856943168032, 0.20793856943168032, 0.20793856943168032, 0.5560334904990389, 0.5560334904990389, 0.5560334904990389, 0.5843537762800062, 0.5843537762800062, 0.5843537762800062, 0.839870673924596, 0.839870673924596, 0.839870673924596, 0.19313196633563656, 0.19313196633563656, 0.19313196633563656, 0.1648444773432981, 0.1648444773432981, 0.1648444773432981, 0.7458213972665602, 0.7458213972665602, 0.7458213972665602, 0.6615798603498275, 0.6615798603498275, 0.6615798603498275, 0.2115924792219348, 0.2115924792219348, 0.2115924792219348, 0.1908779716489688, 0.1908779716489688, 0.1908779716489688, 0.1807381678536618, 0.1807381678536618, 0.1807381678536618, 0.1927543441479429, 0.1927543441479429, 0.1927543441479429, 0.07136763679885338, 0.07136763679885338, 0.07136763679885338, 0.0804608614888177, 0.0804608614888177, 0.0804608614888177, 0.08823253071962422, 0.08823253071962422, 0.08823253071962422]}, "mutation_prompt": null}
{"id": "f5293bc3-6df3-46e4-b241-6b6c7673b903", "solution": "import numpy as np\n\nclass EnhancedDynamicDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.init_pop_size = 40\n        self.min_pop_size = 8\n        self.mutation_factor = 0.8\n        self.cr = 0.9  # Crossover rate\n        self.initial_temp = 100.0\n        self.temp_decay = 0.92\n\n    def __call__(self, func):\n        np.random.seed(0)\n        pop_size = self.init_pop_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = pop_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temp):\n            indices = list(range(pop_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temp\n        while evals_used < self.budget:\n            for i in range(pop_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temp_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adjust population size for better convergence\n            pop_size = max(self.min_pop_size, int(self.init_pop_size * (1 - evals_used / self.budget)))\n            population = population[:pop_size]\n            fitness = fitness[:pop_size]\n\n        return best_solution, best_fitness", "name": "EnhancedDynamicDE_SA", "description": "Enhanced Dynamic Population DE_SA with variable mutation rates and strategic cooling for improved exploration and convergence.", "configspace": "", "generation": 30, "fitness": 0.39246477540348407, "feedback": "The algorithm EnhancedDynamicDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.24.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.7519391241849105, 0.7519391241849105, 0.7519391241849105, 0.7606628538560396, 0.7606628538560396, 0.7606628538560396, 0.7890043113898454, 0.7890043113898454, 0.7890043113898454, 0.6095254345067287, 0.6095254345067287, 0.6095254345067287, 0.6139894543067335, 0.6139894543067335, 0.6139894543067335, 0.6260017008747896, 0.6260017008747896, 0.6260017008747896, 0.12303245739241597, 0.12303245739241597, 0.12303245739241597, 0.19744825996816184, 0.19744825996816184, 0.19744825996816184, 0.14059704255952132, 0.14059704255952132, 0.14059704255952132, 0.12787597906631987, 0.12787597906631987, 0.12787597906631987, 0.11397296344879393, 0.11397296344879393, 0.11397296344879393, 0.11554716078998639, 0.11554716078998639, 0.11554716078998639, 0.9854866912186749, 0.9854866912186749, 0.9854866912186749, 0.9571446168916582, 0.9571446168916582, 0.9571446168916582, 0.9463028252830465, 0.9463028252830465, 0.9463028252830465, 0.5228322085261226, 0.5228322085261226, 0.5228322085261226, 0.5151320299250357, 0.5151320299250357, 0.5151320299250357, 0.5297488195986608, 0.5297488195986608, 0.5297488195986608, 0.704539172144016, 0.704539172144016, 0.704539172144016, 0.706835949135249, 0.706835949135249, 0.706835949135249, 0.6467026005835754, 0.6467026005835754, 0.6467026005835754, 0.4776994691453389, 0.4776994691453389, 0.4776994691453389, 0.43866888364221, 0.43866888364221, 0.43866888364221, 0.4619177701602808, 0.4619177701602808, 0.4619177701602808, 0.3743704175367317, 0.3743704175367317, 0.3743704175367317, 0.5017898385750728, 0.5017898385750728, 0.5017898385750728, 0.4763394556109587, 0.4763394556109587, 0.4763394556109587, 0.3331144931432509, 0.3331144931432509, 0.3331144931432509, 0.31906094784758, 0.31906094784758, 0.31906094784758, 0.3494349216383523, 0.3494349216383523, 0.3494349216383523, 0.46407048606455337, 0.46407048606455337, 0.46407048606455337, 0.4702358080413225, 0.4702358080413225, 0.4702358080413225, 0.49455897963540274, 0.49455897963540274, 0.49455897963540274, 0.05936730328666617, 0.05936730328666617, 0.05936730328666617, 0.23058796877509236, 0.23058796877509236, 0.23058796877509236, 0.1129683484191919, 0.1129683484191919, 0.1129683484191919, 0.292484003649786, 0.292484003649786, 0.292484003649786, 0.36595506878490036, 0.36595506878490036, 0.36595506878490036, 0.25393758220441054, 0.25393758220441054, 0.25393758220441054, 0.6602716319701734, 0.6602716319701734, 0.6602716319701734, 0.677333724626787, 0.677333724626787, 0.677333724626787, 0.6815649452518086, 0.6815649452518086, 0.6815649452518086, 0.10984263280524342, 0.10984263280524342, 0.10984263280524342, 0.09796420639851988, 0.09796420639851988, 0.09796420639851988, 0.10366727245672569, 0.10366727245672569, 0.10366727245672569, 0.21182103263530094, 0.21182103263530094, 0.21182103263530094, 0.13063094696643696, 0.13063094696643696, 0.13063094696643696, 0.17719504984078482, 0.17719504984078482, 0.17719504984078482, 0.42894092610539947, 0.42894092610539947, 0.42894092610539947, 0.3856629473556785, 0.3856629473556785, 0.3856629473556785, 0.4423594201893406, 0.4423594201893406, 0.4423594201893406, 0.29332820655068004, 0.29332820655068004, 0.29332820655068004, 0.2493643292201715, 0.2493643292201715, 0.2493643292201715, 0.34117371510432604, 0.34117371510432604, 0.34117371510432604, 0.186033007020053, 0.186033007020053, 0.186033007020053, 0.18044100232078708, 0.18044100232078708, 0.18044100232078708, 0.2063152419249078, 0.2063152419249078, 0.2063152419249078, 0.2180469064472026, 0.2180469064472026, 0.2180469064472026, 0.17971259888347557, 0.17971259888347557, 0.17971259888347557, 0.38715585723898427, 0.38715585723898427, 0.38715585723898427, 0.703465189888675, 0.703465189888675, 0.703465189888675, 0.6613870617780031, 0.6613870617780031, 0.6613870617780031, 0.18889285999537875, 0.18889285999537875, 0.18889285999537875, 0.6561911168575503, 0.6561911168575503, 0.6561911168575503, 0.7039631283260319, 0.7039631283260319, 0.7039631283260319, 0.20938980624225711, 0.20938980624225711, 0.20938980624225711, 0.1726331030073308, 0.1726331030073308, 0.1726331030073308, 0.19158036502834974, 0.19158036502834974, 0.19158036502834974, 0.22661838036196846, 0.22661838036196846, 0.22661838036196846, 0.07872369751901354, 0.07872369751901354, 0.07872369751901354, 0.07660433110110731, 0.07660433110110731, 0.07660433110110731, 0.07830578582101222, 0.07830578582101222, 0.07830578582101222]}, "mutation_prompt": null}
{"id": "f9669131-7d42-4eba-a713-21d78de6af80", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85  # Crossover rate\n        self.initial_temperature = 90.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive population and dynamic temperature scaling to improve optimization efficiency.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8468919310943874, 0.8468919310943874, 0.8468919310943874, 0.855326845256036, 0.855326845256036, 0.855326845256036, 0.840585818510729, 0.840585818510729, 0.840585818510729, 0.7421502225994087, 0.7421502225994087, 0.7421502225994087, 0.7565967426826964, 0.7565967426826964, 0.7565967426826964, 0.7529706990344701, 0.7529706990344701, 0.7529706990344701, 0.1426316867338121, 0.1426316867338121, 0.1426316867338121, 0.1393595997145456, 0.1393595997145456, 0.1393595997145456, 0.346361861358952, 0.346361861358952, 0.346361861358952, 0.12796918324697348, 0.12796918324697348, 0.12796918324697348, 0.12998578595405197, 0.12998578595405197, 0.12998578595405197, 0.4384317578292998, 0.4384317578292998, 0.4384317578292998, 0.9800275354110715, 0.9800275354110715, 0.9800275354110715, 0.9709783235644224, 0.9709783235644224, 0.9709783235644224, 0.9647029289037511, 0.9647029289037511, 0.9647029289037511, 0.6719250947414241, 0.6719250947414241, 0.6719250947414241, 0.6767349851271116, 0.6767349851271116, 0.6767349851271116, 0.6743179399450236, 0.6743179399450236, 0.6743179399450236, 0.7554426351222618, 0.7554426351222618, 0.7554426351222618, 0.8045587627588684, 0.8045587627588684, 0.8045587627588684, 0.789440049633421, 0.789440049633421, 0.789440049633421, 0.5599611561643695, 0.5599611561643695, 0.5599611561643695, 0.5312170838321281, 0.5312170838321281, 0.5312170838321281, 0.31069217560039875, 0.31069217560039875, 0.31069217560039875, 0.5705737337777981, 0.5705737337777981, 0.5705737337777981, 0.47093641060904434, 0.47093641060904434, 0.47093641060904434, 0.5354314122267088, 0.5354314122267088, 0.5354314122267088, 0.40209798712958045, 0.40209798712958045, 0.40209798712958045, 0.3642507993681433, 0.3642507993681433, 0.3642507993681433, 0.36548811236299594, 0.36548811236299594, 0.36548811236299594, 0.6010219767218168, 0.6010219767218168, 0.6010219767218168, 0.4609618964641864, 0.4609618964641864, 0.4609618964641864, 0.5761842567852868, 0.5761842567852868, 0.5761842567852868, 0.3364280873101432, 0.3364280873101432, 0.3364280873101432, 0.22436347168490534, 0.22436347168490534, 0.22436347168490534, 0.14370855196094, 0.14370855196094, 0.14370855196094, 0.3524508486544361, 0.3524508486544361, 0.3524508486544361, 0.42998297521643003, 0.42998297521643003, 0.42998297521643003, 0.40461796342897893, 0.40461796342897893, 0.40461796342897893, 0.767539242818753, 0.767539242818753, 0.767539242818753, 0.7820799575508199, 0.7820799575508199, 0.7820799575508199, 0.7721908539180269, 0.7721908539180269, 0.7721908539180269, 0.08871119087527446, 0.08871119087527446, 0.08871119087527446, 0.4523511087454457, 0.4523511087454457, 0.4523511087454457, 0.12192703851923581, 0.12192703851923581, 0.12192703851923581, 0.17742652326152386, 0.17742652326152386, 0.17742652326152386, 0.1691254363011272, 0.1691254363011272, 0.1691254363011272, 0.13695950957186487, 0.13695950957186487, 0.13695950957186487, 0.5120997367697984, 0.5120997367697984, 0.5120997367697984, 0.475690916960933, 0.475690916960933, 0.475690916960933, 0.6194688146950851, 0.6194688146950851, 0.6194688146950851, 0.3926061801832482, 0.3926061801832482, 0.3926061801832482, 0.38871989635931936, 0.38871989635931936, 0.38871989635931936, 0.4965386730534258, 0.4965386730534258, 0.4965386730534258, 0.17734482677275265, 0.17734482677275265, 0.17734482677275265, 0.20046836796037482, 0.20046836796037482, 0.20046836796037482, 0.21420361868707027, 0.21420361868707027, 0.21420361868707027, 0.20793856943168032, 0.20793856943168032, 0.20793856943168032, 0.5560334904990389, 0.5560334904990389, 0.5560334904990389, 0.5843537762800062, 0.5843537762800062, 0.5843537762800062, 0.839870673924596, 0.839870673924596, 0.839870673924596, 0.19313196633563656, 0.19313196633563656, 0.19313196633563656, 0.1648444773432981, 0.1648444773432981, 0.1648444773432981, 0.7458213972665602, 0.7458213972665602, 0.7458213972665602, 0.6615798603498275, 0.6615798603498275, 0.6615798603498275, 0.2115924792219348, 0.2115924792219348, 0.2115924792219348, 0.1908779716489688, 0.1908779716489688, 0.1908779716489688, 0.1807381678536618, 0.1807381678536618, 0.1807381678536618, 0.1927543441479429, 0.1927543441479429, 0.1927543441479429, 0.07136763679885338, 0.07136763679885338, 0.07136763679885338, 0.0804608614888177, 0.0804608614888177, 0.0804608614888177, 0.08823253071962422, 0.08823253071962422, 0.08823253071962422]}, "mutation_prompt": null}
{"id": "987812e9-3335-4ae8-860c-bcf862f4f4a8", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85  # Crossover rate\n        self.initial_temperature = 90.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive population and dynamic temperature scaling to improve optimization efficiency.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8468919310943874, 0.8468919310943874, 0.8468919310943874, 0.855326845256036, 0.855326845256036, 0.855326845256036, 0.840585818510729, 0.840585818510729, 0.840585818510729, 0.7421502225994087, 0.7421502225994087, 0.7421502225994087, 0.7565967426826964, 0.7565967426826964, 0.7565967426826964, 0.7529706990344701, 0.7529706990344701, 0.7529706990344701, 0.1426316867338121, 0.1426316867338121, 0.1426316867338121, 0.1393595997145456, 0.1393595997145456, 0.1393595997145456, 0.346361861358952, 0.346361861358952, 0.346361861358952, 0.12796918324697348, 0.12796918324697348, 0.12796918324697348, 0.12998578595405197, 0.12998578595405197, 0.12998578595405197, 0.4384317578292998, 0.4384317578292998, 0.4384317578292998, 0.9800275354110715, 0.9800275354110715, 0.9800275354110715, 0.9709783235644224, 0.9709783235644224, 0.9709783235644224, 0.9647029289037511, 0.9647029289037511, 0.9647029289037511, 0.6719250947414241, 0.6719250947414241, 0.6719250947414241, 0.6767349851271116, 0.6767349851271116, 0.6767349851271116, 0.6743179399450236, 0.6743179399450236, 0.6743179399450236, 0.7554426351222618, 0.7554426351222618, 0.7554426351222618, 0.8045587627588684, 0.8045587627588684, 0.8045587627588684, 0.789440049633421, 0.789440049633421, 0.789440049633421, 0.5599611561643695, 0.5599611561643695, 0.5599611561643695, 0.5312170838321281, 0.5312170838321281, 0.5312170838321281, 0.31069217560039875, 0.31069217560039875, 0.31069217560039875, 0.5705737337777981, 0.5705737337777981, 0.5705737337777981, 0.47093641060904434, 0.47093641060904434, 0.47093641060904434, 0.5354314122267088, 0.5354314122267088, 0.5354314122267088, 0.40209798712958045, 0.40209798712958045, 0.40209798712958045, 0.3642507993681433, 0.3642507993681433, 0.3642507993681433, 0.36548811236299594, 0.36548811236299594, 0.36548811236299594, 0.6010219767218168, 0.6010219767218168, 0.6010219767218168, 0.4609618964641864, 0.4609618964641864, 0.4609618964641864, 0.5761842567852868, 0.5761842567852868, 0.5761842567852868, 0.3364280873101432, 0.3364280873101432, 0.3364280873101432, 0.22436347168490534, 0.22436347168490534, 0.22436347168490534, 0.14370855196094, 0.14370855196094, 0.14370855196094, 0.3524508486544361, 0.3524508486544361, 0.3524508486544361, 0.42998297521643003, 0.42998297521643003, 0.42998297521643003, 0.40461796342897893, 0.40461796342897893, 0.40461796342897893, 0.767539242818753, 0.767539242818753, 0.767539242818753, 0.7820799575508199, 0.7820799575508199, 0.7820799575508199, 0.7721908539180269, 0.7721908539180269, 0.7721908539180269, 0.08871119087527446, 0.08871119087527446, 0.08871119087527446, 0.4523511087454457, 0.4523511087454457, 0.4523511087454457, 0.12192703851923581, 0.12192703851923581, 0.12192703851923581, 0.17742652326152386, 0.17742652326152386, 0.17742652326152386, 0.1691254363011272, 0.1691254363011272, 0.1691254363011272, 0.13695950957186487, 0.13695950957186487, 0.13695950957186487, 0.5120997367697984, 0.5120997367697984, 0.5120997367697984, 0.475690916960933, 0.475690916960933, 0.475690916960933, 0.6194688146950851, 0.6194688146950851, 0.6194688146950851, 0.3926061801832482, 0.3926061801832482, 0.3926061801832482, 0.38871989635931936, 0.38871989635931936, 0.38871989635931936, 0.4965386730534258, 0.4965386730534258, 0.4965386730534258, 0.17734482677275265, 0.17734482677275265, 0.17734482677275265, 0.20046836796037482, 0.20046836796037482, 0.20046836796037482, 0.21420361868707027, 0.21420361868707027, 0.21420361868707027, 0.20793856943168032, 0.20793856943168032, 0.20793856943168032, 0.5560334904990389, 0.5560334904990389, 0.5560334904990389, 0.5843537762800062, 0.5843537762800062, 0.5843537762800062, 0.839870673924596, 0.839870673924596, 0.839870673924596, 0.19313196633563656, 0.19313196633563656, 0.19313196633563656, 0.1648444773432981, 0.1648444773432981, 0.1648444773432981, 0.7458213972665602, 0.7458213972665602, 0.7458213972665602, 0.6615798603498275, 0.6615798603498275, 0.6615798603498275, 0.2115924792219348, 0.2115924792219348, 0.2115924792219348, 0.1908779716489688, 0.1908779716489688, 0.1908779716489688, 0.1807381678536618, 0.1807381678536618, 0.1807381678536618, 0.1927543441479429, 0.1927543441479429, 0.1927543441479429, 0.07136763679885338, 0.07136763679885338, 0.07136763679885338, 0.0804608614888177, 0.0804608614888177, 0.0804608614888177, 0.08823253071962422, 0.08823253071962422, 0.08823253071962422]}, "mutation_prompt": null}
{"id": "13ce3462-cb39-4880-b282-9e34fe056f3b", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85  # Crossover rate\n        self.initial_temperature = 90.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive population and dynamic temperature scaling to improve optimization efficiency.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8468919310943874, 0.8468919310943874, 0.8468919310943874, 0.855326845256036, 0.855326845256036, 0.855326845256036, 0.840585818510729, 0.840585818510729, 0.840585818510729, 0.7421502225994087, 0.7421502225994087, 0.7421502225994087, 0.7565967426826964, 0.7565967426826964, 0.7565967426826964, 0.7529706990344701, 0.7529706990344701, 0.7529706990344701, 0.1426316867338121, 0.1426316867338121, 0.1426316867338121, 0.1393595997145456, 0.1393595997145456, 0.1393595997145456, 0.346361861358952, 0.346361861358952, 0.346361861358952, 0.12796918324697348, 0.12796918324697348, 0.12796918324697348, 0.12998578595405197, 0.12998578595405197, 0.12998578595405197, 0.4384317578292998, 0.4384317578292998, 0.4384317578292998, 0.9800275354110715, 0.9800275354110715, 0.9800275354110715, 0.9709783235644224, 0.9709783235644224, 0.9709783235644224, 0.9647029289037511, 0.9647029289037511, 0.9647029289037511, 0.6719250947414241, 0.6719250947414241, 0.6719250947414241, 0.6767349851271116, 0.6767349851271116, 0.6767349851271116, 0.6743179399450236, 0.6743179399450236, 0.6743179399450236, 0.7554426351222618, 0.7554426351222618, 0.7554426351222618, 0.8045587627588684, 0.8045587627588684, 0.8045587627588684, 0.789440049633421, 0.789440049633421, 0.789440049633421, 0.5599611561643695, 0.5599611561643695, 0.5599611561643695, 0.5312170838321281, 0.5312170838321281, 0.5312170838321281, 0.31069217560039875, 0.31069217560039875, 0.31069217560039875, 0.5705737337777981, 0.5705737337777981, 0.5705737337777981, 0.47093641060904434, 0.47093641060904434, 0.47093641060904434, 0.5354314122267088, 0.5354314122267088, 0.5354314122267088, 0.40209798712958045, 0.40209798712958045, 0.40209798712958045, 0.3642507993681433, 0.3642507993681433, 0.3642507993681433, 0.36548811236299594, 0.36548811236299594, 0.36548811236299594, 0.6010219767218168, 0.6010219767218168, 0.6010219767218168, 0.4609618964641864, 0.4609618964641864, 0.4609618964641864, 0.5761842567852868, 0.5761842567852868, 0.5761842567852868, 0.3364280873101432, 0.3364280873101432, 0.3364280873101432, 0.22436347168490534, 0.22436347168490534, 0.22436347168490534, 0.14370855196094, 0.14370855196094, 0.14370855196094, 0.3524508486544361, 0.3524508486544361, 0.3524508486544361, 0.42998297521643003, 0.42998297521643003, 0.42998297521643003, 0.40461796342897893, 0.40461796342897893, 0.40461796342897893, 0.767539242818753, 0.767539242818753, 0.767539242818753, 0.7820799575508199, 0.7820799575508199, 0.7820799575508199, 0.7721908539180269, 0.7721908539180269, 0.7721908539180269, 0.08871119087527446, 0.08871119087527446, 0.08871119087527446, 0.4523511087454457, 0.4523511087454457, 0.4523511087454457, 0.12192703851923581, 0.12192703851923581, 0.12192703851923581, 0.17742652326152386, 0.17742652326152386, 0.17742652326152386, 0.1691254363011272, 0.1691254363011272, 0.1691254363011272, 0.13695950957186487, 0.13695950957186487, 0.13695950957186487, 0.5120997367697984, 0.5120997367697984, 0.5120997367697984, 0.475690916960933, 0.475690916960933, 0.475690916960933, 0.6194688146950851, 0.6194688146950851, 0.6194688146950851, 0.3926061801832482, 0.3926061801832482, 0.3926061801832482, 0.38871989635931936, 0.38871989635931936, 0.38871989635931936, 0.4965386730534258, 0.4965386730534258, 0.4965386730534258, 0.17734482677275265, 0.17734482677275265, 0.17734482677275265, 0.20046836796037482, 0.20046836796037482, 0.20046836796037482, 0.21420361868707027, 0.21420361868707027, 0.21420361868707027, 0.20793856943168032, 0.20793856943168032, 0.20793856943168032, 0.5560334904990389, 0.5560334904990389, 0.5560334904990389, 0.5843537762800062, 0.5843537762800062, 0.5843537762800062, 0.839870673924596, 0.839870673924596, 0.839870673924596, 0.19313196633563656, 0.19313196633563656, 0.19313196633563656, 0.1648444773432981, 0.1648444773432981, 0.1648444773432981, 0.7458213972665602, 0.7458213972665602, 0.7458213972665602, 0.6615798603498275, 0.6615798603498275, 0.6615798603498275, 0.2115924792219348, 0.2115924792219348, 0.2115924792219348, 0.1908779716489688, 0.1908779716489688, 0.1908779716489688, 0.1807381678536618, 0.1807381678536618, 0.1807381678536618, 0.1927543441479429, 0.1927543441479429, 0.1927543441479429, 0.07136763679885338, 0.07136763679885338, 0.07136763679885338, 0.0804608614888177, 0.0804608614888177, 0.0804608614888177, 0.08823253071962422, 0.08823253071962422, 0.08823253071962422]}, "mutation_prompt": null}
{"id": "5ea10e01-b978-4905-9a0a-9b6e4f733bc9", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Chaotic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 40\n        self.min_population_size = 12\n        self.de_mutation_factor = 0.8\n        self.cr = 0.9  # Increased crossover rate\n        self.initial_temperature = 100.0  # Higher initial temperature\n        self.temperature_decay = 0.93  # Faster decay\n        self.chaotic_map_ro = 0.7\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            chaotic_factor = (a - b) * np.sin(np.pi * self.chaotic_map_ro)\n            mutant = np.clip(a + self.de_mutation_factor * chaotic_factor, self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA_Chaotic", "description": "Adaptive population with chaotic mapping and enhanced crossover for efficient exploration.", "configspace": "", "generation": 34, "fitness": 0.16066101562383553, "feedback": "The algorithm EnhancedHybridDE_SA_Chaotic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.21.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.680047736829269, 0.680047736829269, 0.680047736829269, 0.156314094096334, 0.156314094096334, 0.156314094096334, 0.17873833855824617, 0.17873833855824617, 0.17873833855824617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06616670684831139, 0.06616670684831139, 0.06616670684831139, 0.0668701231365807, 0.0668701231365807, 0.0668701231365807, 0.05051597837718036, 0.05051597837718036, 0.05051597837718036, 0.15342453183962967, 0.15342453183962967, 0.15342453183962967, 0.08170141866240133, 0.08170141866240133, 0.08170141866240133, 0.06012858722765191, 0.06012858722765191, 0.06012858722765191, 0.9878724121053223, 0.9878724121053223, 0.9878724121053223, 0.9839290176102037, 0.9839290176102037, 0.9839290176102037, 0.9912336565272372, 0.9912336565272372, 0.9912336565272372, 0.06274794416174423, 0.06274794416174423, 0.06274794416174423, 0.0216708570109877, 0.0216708570109877, 0.0216708570109877, 0.04537453935380531, 0.04537453935380531, 0.04537453935380531, 0.20676609400526835, 0.20676609400526835, 0.20676609400526835, 0.2100303413142417, 0.2100303413142417, 0.2100303413142417, 0.24592002143063518, 0.24592002143063518, 0.24592002143063518, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15179763394114, 0.15179763394114, 0.15179763394114, 0.009809958219298087, 0.009809958219298087, 0.009809958219298087, 0.10705089241199461, 0.10705089241199461, 0.10705089241199461, 0.030932034069199865, 0.030932034069199865, 0.030932034069199865, 0.04114598304517125, 0.04114598304517125, 0.04114598304517125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04657767366692911, 0.04657767366692911, 0.04657767366692911, 0.021379268152323272, 0.021379268152323272, 0.021379268152323272, 0.008769835256237313, 0.008769835256237313, 0.008769835256237313, 0.044956805485009466, 0.044956805485009466, 0.044956805485009466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07176265640608248, 0.07176265640608248, 0.07176265640608248, 0.15507126125788695, 0.15507126125788695, 0.15507126125788695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.41443736295524813, 0.41443736295524813, 0.41443736295524813, 0.17445222925929282, 0.17445222925929282, 0.17445222925929282, 0.49166481902688985, 0.49166481902688985, 0.49166481902688985, 0.04936874622457521, 0.04936874622457521, 0.04936874622457521, 0.045022452773696764, 0.045022452773696764, 0.045022452773696764, 0.09562516487265127, 0.09562516487265127, 0.09562516487265127, 0.12470572955163173, 0.12470572955163173, 0.12470572955163173, 0.12567764339029852, 0.12567764339029852, 0.12567764339029852, 0.12880593295592024, 0.12880593295592024, 0.12880593295592024, 0.12416508050552444, 0.12416508050552444, 0.12416508050552444, 0.14415450377240524, 0.14415450377240524, 0.14415450377240524, 0.12566323935205093, 0.12566323935205093, 0.12566323935205093, 0.15929574322961892, 0.15929574322961892, 0.15929574322961892, 0.10314495128946732, 0.10314495128946732, 0.10314495128946732, 0.15949047623853696, 0.15949047623853696, 0.15949047623853696, 0.14947457067955205, 0.14947457067955205, 0.14947457067955205, 0.14279798853755288, 0.14279798853755288, 0.14279798853755288, 0.16542555047349883, 0.16542555047349883, 0.16542555047349883, 0.20061864168943067, 0.20061864168943067, 0.20061864168943067, 0.4585743541008628, 0.4585743541008628, 0.4585743541008628, 0.17379863286521324, 0.17379863286521324, 0.17379863286521324, 0.13459159651057673, 0.13459159651057673, 0.13459159651057673, 0.10075541985294456, 0.10075541985294456, 0.10075541985294456, 0.15281191603344502, 0.15281191603344502, 0.15281191603344502, 0.5368733707141204, 0.5368733707141204, 0.5368733707141204, 0.08918170497558964, 0.08918170497558964, 0.08918170497558964, 0.17856331449141472, 0.17856331449141472, 0.17856331449141472, 0.1579467634021765, 0.1579467634021765, 0.1579467634021765, 0.16835999401888513, 0.16835999401888513, 0.16835999401888513, 0.17854412085872717, 0.17854412085872717, 0.17854412085872717, 0.06081830641416086, 0.06081830641416086, 0.06081830641416086, 0.06261500142104559, 0.06261500142104559, 0.06261500142104559, 0.050461401472828404, 0.050461401472828404, 0.050461401472828404]}, "mutation_prompt": null}
{"id": "be4b4efc-8ff5-4d5b-9916-eb5f9f7c0325", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85  # Crossover rate\n        self.initial_temperature = 90.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive population and dynamic temperature scaling to improve optimization efficiency.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8468919310943874, 0.8468919310943874, 0.8468919310943874, 0.855326845256036, 0.855326845256036, 0.855326845256036, 0.840585818510729, 0.840585818510729, 0.840585818510729, 0.7421502225994087, 0.7421502225994087, 0.7421502225994087, 0.7565967426826964, 0.7565967426826964, 0.7565967426826964, 0.7529706990344701, 0.7529706990344701, 0.7529706990344701, 0.1426316867338121, 0.1426316867338121, 0.1426316867338121, 0.1393595997145456, 0.1393595997145456, 0.1393595997145456, 0.346361861358952, 0.346361861358952, 0.346361861358952, 0.12796918324697348, 0.12796918324697348, 0.12796918324697348, 0.12998578595405197, 0.12998578595405197, 0.12998578595405197, 0.4384317578292998, 0.4384317578292998, 0.4384317578292998, 0.9800275354110715, 0.9800275354110715, 0.9800275354110715, 0.9709783235644224, 0.9709783235644224, 0.9709783235644224, 0.9647029289037511, 0.9647029289037511, 0.9647029289037511, 0.6719250947414241, 0.6719250947414241, 0.6719250947414241, 0.6767349851271116, 0.6767349851271116, 0.6767349851271116, 0.6743179399450236, 0.6743179399450236, 0.6743179399450236, 0.7554426351222618, 0.7554426351222618, 0.7554426351222618, 0.8045587627588684, 0.8045587627588684, 0.8045587627588684, 0.789440049633421, 0.789440049633421, 0.789440049633421, 0.5599611561643695, 0.5599611561643695, 0.5599611561643695, 0.5312170838321281, 0.5312170838321281, 0.5312170838321281, 0.31069217560039875, 0.31069217560039875, 0.31069217560039875, 0.5705737337777981, 0.5705737337777981, 0.5705737337777981, 0.47093641060904434, 0.47093641060904434, 0.47093641060904434, 0.5354314122267088, 0.5354314122267088, 0.5354314122267088, 0.40209798712958045, 0.40209798712958045, 0.40209798712958045, 0.3642507993681433, 0.3642507993681433, 0.3642507993681433, 0.36548811236299594, 0.36548811236299594, 0.36548811236299594, 0.6010219767218168, 0.6010219767218168, 0.6010219767218168, 0.4609618964641864, 0.4609618964641864, 0.4609618964641864, 0.5761842567852868, 0.5761842567852868, 0.5761842567852868, 0.3364280873101432, 0.3364280873101432, 0.3364280873101432, 0.22436347168490534, 0.22436347168490534, 0.22436347168490534, 0.14370855196094, 0.14370855196094, 0.14370855196094, 0.3524508486544361, 0.3524508486544361, 0.3524508486544361, 0.42998297521643003, 0.42998297521643003, 0.42998297521643003, 0.40461796342897893, 0.40461796342897893, 0.40461796342897893, 0.767539242818753, 0.767539242818753, 0.767539242818753, 0.7820799575508199, 0.7820799575508199, 0.7820799575508199, 0.7721908539180269, 0.7721908539180269, 0.7721908539180269, 0.08871119087527446, 0.08871119087527446, 0.08871119087527446, 0.4523511087454457, 0.4523511087454457, 0.4523511087454457, 0.12192703851923581, 0.12192703851923581, 0.12192703851923581, 0.17742652326152386, 0.17742652326152386, 0.17742652326152386, 0.1691254363011272, 0.1691254363011272, 0.1691254363011272, 0.13695950957186487, 0.13695950957186487, 0.13695950957186487, 0.5120997367697984, 0.5120997367697984, 0.5120997367697984, 0.475690916960933, 0.475690916960933, 0.475690916960933, 0.6194688146950851, 0.6194688146950851, 0.6194688146950851, 0.3926061801832482, 0.3926061801832482, 0.3926061801832482, 0.38871989635931936, 0.38871989635931936, 0.38871989635931936, 0.4965386730534258, 0.4965386730534258, 0.4965386730534258, 0.17734482677275265, 0.17734482677275265, 0.17734482677275265, 0.20046836796037482, 0.20046836796037482, 0.20046836796037482, 0.21420361868707027, 0.21420361868707027, 0.21420361868707027, 0.20793856943168032, 0.20793856943168032, 0.20793856943168032, 0.5560334904990389, 0.5560334904990389, 0.5560334904990389, 0.5843537762800062, 0.5843537762800062, 0.5843537762800062, 0.839870673924596, 0.839870673924596, 0.839870673924596, 0.19313196633563656, 0.19313196633563656, 0.19313196633563656, 0.1648444773432981, 0.1648444773432981, 0.1648444773432981, 0.7458213972665602, 0.7458213972665602, 0.7458213972665602, 0.6615798603498275, 0.6615798603498275, 0.6615798603498275, 0.2115924792219348, 0.2115924792219348, 0.2115924792219348, 0.1908779716489688, 0.1908779716489688, 0.1908779716489688, 0.1807381678536618, 0.1807381678536618, 0.1807381678536618, 0.1927543441479429, 0.1927543441479429, 0.1927543441479429, 0.07136763679885338, 0.07136763679885338, 0.07136763679885338, 0.0804608614888177, 0.0804608614888177, 0.0804608614888177, 0.08823253071962422, 0.08823253071962422, 0.08823253071962422]}, "mutation_prompt": null}
{"id": "37b4daca-743d-46c8-93e7-5480f64c6909", "solution": "import numpy as np\n\nclass OptimizedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 35  # Increased population size for diversity\n        self.min_population_size = 5       # Smaller minimum population size\n        self.de_mutation_factor = 0.9      # Adjusted DE mutation factor\n        self.cr = 0.9                      # Slightly higher crossover rate\n        self.initial_temperature = 100.0   # Higher initial temperature for more exploration\n        self.temperature_decay = 0.93      # Faster decay of temperature\n\n    def __call__(self, func):\n        np.random.seed(42)  # Changed seed for different randomness\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size dynamically for more aggressive convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget) ** 1.5))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "OptimizedHybridDE_SA", "description": "Optimized HybridDE_SA with adaptive mutation and modified population dynamics to enhance convergence and efficiency.", "configspace": "", "generation": 36, "fitness": 0.3860679125247246, "feedback": "The algorithm OptimizedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.7609105676845068, 0.7609105676845068, 0.7609105676845068, 0.7725063836116017, 0.7725063836116017, 0.7725063836116017, 0.7642575269988429, 0.7642575269988429, 0.7642575269988429, 0.6215634221600848, 0.6215634221600848, 0.6215634221600848, 0.6518154779689719, 0.6518154779689719, 0.6518154779689719, 0.6438732849877942, 0.6438732849877942, 0.6438732849877942, 0.135880388985396, 0.135880388985396, 0.135880388985396, 0.1290069032725618, 0.1290069032725618, 0.1290069032725618, 0.46401608606452416, 0.46401608606452416, 0.46401608606452416, 0.3126229145347108, 0.3126229145347108, 0.3126229145347108, 0.11241612548732938, 0.11241612548732938, 0.11241612548732938, 0.1131316270072038, 0.1131316270072038, 0.1131316270072038, 0.9814908917364132, 0.9814908917364132, 0.9814908917364132, 0.9510300875661927, 0.9510300875661927, 0.9510300875661927, 0.9405810623443649, 0.9405810623443649, 0.9405810623443649, 0.6011167235295563, 0.6011167235295563, 0.6011167235295563, 0.47688812707635897, 0.47688812707635897, 0.47688812707635897, 0.5931929888721572, 0.5931929888721572, 0.5931929888721572, 0.7217718421878738, 0.7217718421878738, 0.7217718421878738, 0.6531018497547705, 0.6531018497547705, 0.6531018497547705, 0.6784303921069621, 0.6784303921069621, 0.6784303921069621, 0.4498264990758155, 0.4498264990758155, 0.4498264990758155, 0.5654985730597204, 0.5654985730597204, 0.5654985730597204, 0.4971088118565107, 0.4971088118565107, 0.4971088118565107, 0.016255960556896043, 0.016255960556896043, 0.016255960556896043, 0.2812147848782586, 0.2812147848782586, 0.2812147848782586, 0.3864748430738467, 0.3864748430738467, 0.3864748430738467, 0.232030948733721, 0.232030948733721, 0.232030948733721, 0.3679942906142766, 0.3679942906142766, 0.3679942906142766, 0.23954256204222335, 0.23954256204222335, 0.23954256204222335, 0.4903918991364655, 0.4903918991364655, 0.4903918991364655, 0.36612089574592743, 0.36612089574592743, 0.36612089574592743, 0.6202731571235955, 0.6202731571235955, 0.6202731571235955, 0.1009647329095229, 0.1009647329095229, 0.1009647329095229, 0.10268058931486035, 0.10268058931486035, 0.10268058931486035, 0.155734041223625, 0.155734041223625, 0.155734041223625, 0.24136620738651393, 0.24136620738651393, 0.24136620738651393, 0.3421150006734882, 0.3421150006734882, 0.3421150006734882, 0.24251059619759907, 0.24251059619759907, 0.24251059619759907, 0.6592939118820924, 0.6592939118820924, 0.6592939118820924, 0.5982919435631171, 0.5982919435631171, 0.5982919435631171, 0.5936763382078774, 0.5936763382078774, 0.5936763382078774, 0.1170963936440017, 0.1170963936440017, 0.1170963936440017, 0.11039957524616162, 0.11039957524616162, 0.11039957524616162, 0.13769360169811884, 0.13769360169811884, 0.13769360169811884, 0.15327201061349893, 0.15327201061349893, 0.15327201061349893, 0.1529952136140248, 0.1529952136140248, 0.1529952136140248, 0.17902082644578154, 0.17902082644578154, 0.17902082644578154, 0.38965344208068087, 0.38965344208068087, 0.38965344208068087, 0.3284292085967062, 0.3284292085967062, 0.3284292085967062, 0.35196908898494017, 0.35196908898494017, 0.35196908898494017, 0.3052120900247387, 0.3052120900247387, 0.3052120900247387, 0.26650332740020555, 0.26650332740020555, 0.26650332740020555, 0.3475010945351549, 0.3475010945351549, 0.3475010945351549, 0.1768667676269643, 0.1768667676269643, 0.1768667676269643, 0.16269736620566766, 0.16269736620566766, 0.16269736620566766, 0.17748680971206665, 0.17748680971206665, 0.17748680971206665, 0.22214723071148768, 0.22214723071148768, 0.22214723071148768, 0.1931574095826316, 0.1931574095826316, 0.1931574095826316, 0.21367251050640912, 0.21367251050640912, 0.21367251050640912, 0.781290841960554, 0.781290841960554, 0.781290841960554, 0.1844709541142171, 0.1844709541142171, 0.1844709541142171, 0.6828035663600154, 0.6828035663600154, 0.6828035663600154, 0.7999274943429455, 0.7999274943429455, 0.7999274943429455, 0.7799035991762658, 0.7799035991762658, 0.7799035991762658, 0.2073144152688734, 0.2073144152688734, 0.2073144152688734, 0.1826764766381409, 0.1826764766381409, 0.1826764766381409, 0.1852908188667005, 0.1852908188667005, 0.1852908188667005, 0.1726755986541626, 0.1726755986541626, 0.1726755986541626, 0.06998395883506348, 0.06998395883506348, 0.06998395883506348, 0.07390945137636029, 0.07390945137636029, 0.07390945137636029, 0.06189729776350417, 0.06189729776350417, 0.06189729776350417]}, "mutation_prompt": null}
{"id": "5e9e0ef2-fb09-417f-861c-e6dac4384752", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 40  # Increased initial population for diversity\n        self.min_population_size = 8  # Reduced minimum population size for convergence\n        self.de_mutation_factor = 0.6  # Adjusted for refined exploration\n        self.cr = 0.9  # Enhanced crossover rate for better exploration\n        self.initial_temperature = 100.0  # Higher initial temperature for wider exploration\n        self.temperature_decay = 0.92  # Slower decay for sustained search\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if evals_used >= self.budget:\n                    break\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n            temperature *= self.temperature_decay\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Hybrid Differential Evolution with Adaptive Temperature Annealing and Population Reduction for Efficient Optimization.", "configspace": "", "generation": 37, "fitness": 0.3855613560485042, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.23.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.6575087526770288, 0.6575087526770288, 0.6575087526770288, 0.6693618898803944, 0.6693618898803944, 0.6693618898803944, 0.6591328864465609, 0.6591328864465609, 0.6591328864465609, 0.6379055216839544, 0.6379055216839544, 0.6379055216839544, 0.6427935979709332, 0.6427935979709332, 0.6427935979709332, 0.6335949520203206, 0.6335949520203206, 0.6335949520203206, 0.13086156427959528, 0.13086156427959528, 0.13086156427959528, 0.14907836506040184, 0.14907836506040184, 0.14907836506040184, 0.13256916607656133, 0.13256916607656133, 0.13256916607656133, 0.1294521222423093, 0.1294521222423093, 0.1294521222423093, 0.13090735003945952, 0.13090735003945952, 0.13090735003945952, 0.119065260753354, 0.119065260753354, 0.119065260753354, 0.9088019502225889, 0.9088019502225889, 0.9088019502225889, 0.7283442452396518, 0.7283442452396518, 0.7283442452396518, 0.8364996383610623, 0.8364996383610623, 0.8364996383610623, 0.5751647769851096, 0.5751647769851096, 0.5751647769851096, 0.5905160531347429, 0.5905160531347429, 0.5905160531347429, 0.5943825885455414, 0.5943825885455414, 0.5943825885455414, 0.7020865257993143, 0.7020865257993143, 0.7020865257993143, 0.7321534587021197, 0.7321534587021197, 0.7321534587021197, 0.761955035667893, 0.761955035667893, 0.761955035667893, 0.19045489027272478, 0.19045489027272478, 0.19045489027272478, 0.20248232576805447, 0.20248232576805447, 0.20248232576805447, 0.27802132339065133, 0.27802132339065133, 0.27802132339065133, 0.021407301099077958, 0.021407301099077958, 0.021407301099077958, 0.4796949954305696, 0.4796949954305696, 0.4796949954305696, 0.6051624087583363, 0.6051624087583363, 0.6051624087583363, 0.42437171458360756, 0.42437171458360756, 0.42437171458360756, 0.4871710072089791, 0.4871710072089791, 0.4871710072089791, 0.5719807175491007, 0.5719807175491007, 0.5719807175491007, 0.542295178837642, 0.542295178837642, 0.542295178837642, 0.5251403007634308, 0.5251403007634308, 0.5251403007634308, 0.5414004909185517, 0.5414004909185517, 0.5414004909185517, 0.11193881959801422, 0.11193881959801422, 0.11193881959801422, 0.5149050434434028, 0.5149050434434028, 0.5149050434434028, 0.16190990974420494, 0.16190990974420494, 0.16190990974420494, 0.39892063302421854, 0.39892063302421854, 0.39892063302421854, 0.5167987654893089, 0.5167987654893089, 0.5167987654893089, 0.4076558151708326, 0.4076558151708326, 0.4076558151708326, 0.6058805088515617, 0.6058805088515617, 0.6058805088515617, 0.6166610381151043, 0.6166610381151043, 0.6166610381151043, 0.5952280678921795, 0.5952280678921795, 0.5952280678921795, 0.14613686144864801, 0.14613686144864801, 0.14613686144864801, 0.10894144011019002, 0.10894144011019002, 0.10894144011019002, 0.09301772432362798, 0.09301772432362798, 0.09301772432362798, 0.15671371201494388, 0.15671371201494388, 0.15671371201494388, 0.3454990362849827, 0.3454990362849827, 0.3454990362849827, 0.17117061538885048, 0.17117061538885048, 0.17117061538885048, 0.4799105020921324, 0.4799105020921324, 0.4799105020921324, 0.44612486212307734, 0.44612486212307734, 0.44612486212307734, 0.5264754218273081, 0.5264754218273081, 0.5264754218273081, 0.32951826336563894, 0.32951826336563894, 0.32951826336563894, 0.42750204394349134, 0.42750204394349134, 0.42750204394349134, 0.47953811114480793, 0.47953811114480793, 0.47953811114480793, 0.1790282985238617, 0.1790282985238617, 0.1790282985238617, 0.18590707983221066, 0.18590707983221066, 0.18590707983221066, 0.1744004884311855, 0.1744004884311855, 0.1744004884311855, 0.23498647128631733, 0.23498647128631733, 0.23498647128631733, 0.20439776173689284, 0.20439776173689284, 0.20439776173689284, 0.1989612155638888, 0.1989612155638888, 0.1989612155638888, 0.7065316948692609, 0.7065316948692609, 0.7065316948692609, 0.20053518304465123, 0.20053518304465123, 0.20053518304465123, 0.18183393777101875, 0.18183393777101875, 0.18183393777101875, 0.1652470317731033, 0.1652470317731033, 0.1652470317731033, 0.6843196153782409, 0.6843196153782409, 0.6843196153782409, 0.20295329864779954, 0.20295329864779954, 0.20295329864779954, 0.20029335398082193, 0.20029335398082193, 0.20029335398082193, 0.19101945444540547, 0.19101945444540547, 0.19101945444540547, 0.1803342733565909, 0.1803342733565909, 0.1803342733565909, 0.07462798729429176, 0.07462798729429176, 0.07462798729429176, 0.08037627217556054, 0.08037627217556054, 0.08037627217556054, 0.08249866561505093, 0.08249866561505093, 0.08249866561505093]}, "mutation_prompt": null}
{"id": "6a44d957-d81e-4aad-a24f-453d67522d21", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85  # Crossover rate\n        self.initial_temperature = 90.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive population and dynamic temperature scaling to improve optimization efficiency.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8468919310943874, 0.8468919310943874, 0.8468919310943874, 0.855326845256036, 0.855326845256036, 0.855326845256036, 0.840585818510729, 0.840585818510729, 0.840585818510729, 0.7421502225994087, 0.7421502225994087, 0.7421502225994087, 0.7565967426826964, 0.7565967426826964, 0.7565967426826964, 0.7529706990344701, 0.7529706990344701, 0.7529706990344701, 0.1426316867338121, 0.1426316867338121, 0.1426316867338121, 0.1393595997145456, 0.1393595997145456, 0.1393595997145456, 0.346361861358952, 0.346361861358952, 0.346361861358952, 0.12796918324697348, 0.12796918324697348, 0.12796918324697348, 0.12998578595405197, 0.12998578595405197, 0.12998578595405197, 0.4384317578292998, 0.4384317578292998, 0.4384317578292998, 0.9800275354110715, 0.9800275354110715, 0.9800275354110715, 0.9709783235644224, 0.9709783235644224, 0.9709783235644224, 0.9647029289037511, 0.9647029289037511, 0.9647029289037511, 0.6719250947414241, 0.6719250947414241, 0.6719250947414241, 0.6767349851271116, 0.6767349851271116, 0.6767349851271116, 0.6743179399450236, 0.6743179399450236, 0.6743179399450236, 0.7554426351222618, 0.7554426351222618, 0.7554426351222618, 0.8045587627588684, 0.8045587627588684, 0.8045587627588684, 0.789440049633421, 0.789440049633421, 0.789440049633421, 0.5599611561643695, 0.5599611561643695, 0.5599611561643695, 0.5312170838321281, 0.5312170838321281, 0.5312170838321281, 0.31069217560039875, 0.31069217560039875, 0.31069217560039875, 0.5705737337777981, 0.5705737337777981, 0.5705737337777981, 0.47093641060904434, 0.47093641060904434, 0.47093641060904434, 0.5354314122267088, 0.5354314122267088, 0.5354314122267088, 0.40209798712958045, 0.40209798712958045, 0.40209798712958045, 0.3642507993681433, 0.3642507993681433, 0.3642507993681433, 0.36548811236299594, 0.36548811236299594, 0.36548811236299594, 0.6010219767218168, 0.6010219767218168, 0.6010219767218168, 0.4609618964641864, 0.4609618964641864, 0.4609618964641864, 0.5761842567852868, 0.5761842567852868, 0.5761842567852868, 0.3364280873101432, 0.3364280873101432, 0.3364280873101432, 0.22436347168490534, 0.22436347168490534, 0.22436347168490534, 0.14370855196094, 0.14370855196094, 0.14370855196094, 0.3524508486544361, 0.3524508486544361, 0.3524508486544361, 0.42998297521643003, 0.42998297521643003, 0.42998297521643003, 0.40461796342897893, 0.40461796342897893, 0.40461796342897893, 0.767539242818753, 0.767539242818753, 0.767539242818753, 0.7820799575508199, 0.7820799575508199, 0.7820799575508199, 0.7721908539180269, 0.7721908539180269, 0.7721908539180269, 0.08871119087527446, 0.08871119087527446, 0.08871119087527446, 0.4523511087454457, 0.4523511087454457, 0.4523511087454457, 0.12192703851923581, 0.12192703851923581, 0.12192703851923581, 0.17742652326152386, 0.17742652326152386, 0.17742652326152386, 0.1691254363011272, 0.1691254363011272, 0.1691254363011272, 0.13695950957186487, 0.13695950957186487, 0.13695950957186487, 0.5120997367697984, 0.5120997367697984, 0.5120997367697984, 0.475690916960933, 0.475690916960933, 0.475690916960933, 0.6194688146950851, 0.6194688146950851, 0.6194688146950851, 0.3926061801832482, 0.3926061801832482, 0.3926061801832482, 0.38871989635931936, 0.38871989635931936, 0.38871989635931936, 0.4965386730534258, 0.4965386730534258, 0.4965386730534258, 0.17734482677275265, 0.17734482677275265, 0.17734482677275265, 0.20046836796037482, 0.20046836796037482, 0.20046836796037482, 0.21420361868707027, 0.21420361868707027, 0.21420361868707027, 0.20793856943168032, 0.20793856943168032, 0.20793856943168032, 0.5560334904990389, 0.5560334904990389, 0.5560334904990389, 0.5843537762800062, 0.5843537762800062, 0.5843537762800062, 0.839870673924596, 0.839870673924596, 0.839870673924596, 0.19313196633563656, 0.19313196633563656, 0.19313196633563656, 0.1648444773432981, 0.1648444773432981, 0.1648444773432981, 0.7458213972665602, 0.7458213972665602, 0.7458213972665602, 0.6615798603498275, 0.6615798603498275, 0.6615798603498275, 0.2115924792219348, 0.2115924792219348, 0.2115924792219348, 0.1908779716489688, 0.1908779716489688, 0.1908779716489688, 0.1807381678536618, 0.1807381678536618, 0.1807381678536618, 0.1927543441479429, 0.1927543441479429, 0.1927543441479429, 0.07136763679885338, 0.07136763679885338, 0.07136763679885338, 0.0804608614888177, 0.0804608614888177, 0.0804608614888177, 0.08823253071962422, 0.08823253071962422, 0.08823253071962422]}, "mutation_prompt": null}
{"id": "c9054455-3f8b-4991-82e4-c9f094d8c5c3", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85  # Crossover rate\n        self.initial_temperature = 90.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive population and dynamic temperature scaling to improve optimization efficiency.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8468919310943874, 0.8468919310943874, 0.8468919310943874, 0.855326845256036, 0.855326845256036, 0.855326845256036, 0.840585818510729, 0.840585818510729, 0.840585818510729, 0.7421502225994087, 0.7421502225994087, 0.7421502225994087, 0.7565967426826964, 0.7565967426826964, 0.7565967426826964, 0.7529706990344701, 0.7529706990344701, 0.7529706990344701, 0.1426316867338121, 0.1426316867338121, 0.1426316867338121, 0.1393595997145456, 0.1393595997145456, 0.1393595997145456, 0.346361861358952, 0.346361861358952, 0.346361861358952, 0.12796918324697348, 0.12796918324697348, 0.12796918324697348, 0.12998578595405197, 0.12998578595405197, 0.12998578595405197, 0.4384317578292998, 0.4384317578292998, 0.4384317578292998, 0.9800275354110715, 0.9800275354110715, 0.9800275354110715, 0.9709783235644224, 0.9709783235644224, 0.9709783235644224, 0.9647029289037511, 0.9647029289037511, 0.9647029289037511, 0.6719250947414241, 0.6719250947414241, 0.6719250947414241, 0.6767349851271116, 0.6767349851271116, 0.6767349851271116, 0.6743179399450236, 0.6743179399450236, 0.6743179399450236, 0.7554426351222618, 0.7554426351222618, 0.7554426351222618, 0.8045587627588684, 0.8045587627588684, 0.8045587627588684, 0.789440049633421, 0.789440049633421, 0.789440049633421, 0.5599611561643695, 0.5599611561643695, 0.5599611561643695, 0.5312170838321281, 0.5312170838321281, 0.5312170838321281, 0.31069217560039875, 0.31069217560039875, 0.31069217560039875, 0.5705737337777981, 0.5705737337777981, 0.5705737337777981, 0.47093641060904434, 0.47093641060904434, 0.47093641060904434, 0.5354314122267088, 0.5354314122267088, 0.5354314122267088, 0.40209798712958045, 0.40209798712958045, 0.40209798712958045, 0.3642507993681433, 0.3642507993681433, 0.3642507993681433, 0.36548811236299594, 0.36548811236299594, 0.36548811236299594, 0.6010219767218168, 0.6010219767218168, 0.6010219767218168, 0.4609618964641864, 0.4609618964641864, 0.4609618964641864, 0.5761842567852868, 0.5761842567852868, 0.5761842567852868, 0.3364280873101432, 0.3364280873101432, 0.3364280873101432, 0.22436347168490534, 0.22436347168490534, 0.22436347168490534, 0.14370855196094, 0.14370855196094, 0.14370855196094, 0.3524508486544361, 0.3524508486544361, 0.3524508486544361, 0.42998297521643003, 0.42998297521643003, 0.42998297521643003, 0.40461796342897893, 0.40461796342897893, 0.40461796342897893, 0.767539242818753, 0.767539242818753, 0.767539242818753, 0.7820799575508199, 0.7820799575508199, 0.7820799575508199, 0.7721908539180269, 0.7721908539180269, 0.7721908539180269, 0.08871119087527446, 0.08871119087527446, 0.08871119087527446, 0.4523511087454457, 0.4523511087454457, 0.4523511087454457, 0.12192703851923581, 0.12192703851923581, 0.12192703851923581, 0.17742652326152386, 0.17742652326152386, 0.17742652326152386, 0.1691254363011272, 0.1691254363011272, 0.1691254363011272, 0.13695950957186487, 0.13695950957186487, 0.13695950957186487, 0.5120997367697984, 0.5120997367697984, 0.5120997367697984, 0.475690916960933, 0.475690916960933, 0.475690916960933, 0.6194688146950851, 0.6194688146950851, 0.6194688146950851, 0.3926061801832482, 0.3926061801832482, 0.3926061801832482, 0.38871989635931936, 0.38871989635931936, 0.38871989635931936, 0.4965386730534258, 0.4965386730534258, 0.4965386730534258, 0.17734482677275265, 0.17734482677275265, 0.17734482677275265, 0.20046836796037482, 0.20046836796037482, 0.20046836796037482, 0.21420361868707027, 0.21420361868707027, 0.21420361868707027, 0.20793856943168032, 0.20793856943168032, 0.20793856943168032, 0.5560334904990389, 0.5560334904990389, 0.5560334904990389, 0.5843537762800062, 0.5843537762800062, 0.5843537762800062, 0.839870673924596, 0.839870673924596, 0.839870673924596, 0.19313196633563656, 0.19313196633563656, 0.19313196633563656, 0.1648444773432981, 0.1648444773432981, 0.1648444773432981, 0.7458213972665602, 0.7458213972665602, 0.7458213972665602, 0.6615798603498275, 0.6615798603498275, 0.6615798603498275, 0.2115924792219348, 0.2115924792219348, 0.2115924792219348, 0.1908779716489688, 0.1908779716489688, 0.1908779716489688, 0.1807381678536618, 0.1807381678536618, 0.1807381678536618, 0.1927543441479429, 0.1927543441479429, 0.1927543441479429, 0.07136763679885338, 0.07136763679885338, 0.07136763679885338, 0.0804608614888177, 0.0804608614888177, 0.0804608614888177, 0.08823253071962422, 0.08823253071962422, 0.08823253071962422]}, "mutation_prompt": null}
{"id": "a7e3fb61-f7f2-435d-8647-6e337889c07f", "solution": "import numpy as np\n\nclass EnhancedDynamicDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 40  # Increased initial population size\n        self.min_population_size = 8  # Reduced minimum population size\n        self.de_mutation_factor = 0.8  # Slightly increased mutation factor\n        self.cr = 0.9  # Increased crossover rate\n        self.initial_temperature = 100.0  # Increased initial temperature\n        self.temperature_decay = 0.93  # Adjusted temperature decay\n\n    def __call__(self, func):\n        np.random.seed(42)  # Changed seed for diversity\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adaptive population size based on budget consumption\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - (evals_used / self.budget)**0.5)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedDynamicDE_SA", "description": "Enhanced dynamic DE_SA with adaptive cooling and population strategy for improved efficiency.", "configspace": "", "generation": 40, "fitness": 0.4102086360654403, "feedback": "The algorithm EnhancedDynamicDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8132637037743133, 0.8132637037743133, 0.8132637037743133, 0.8163244661130676, 0.8163244661130676, 0.8163244661130676, 0.8218488613101295, 0.8218488613101295, 0.8218488613101295, 0.7134803278208899, 0.7134803278208899, 0.7134803278208899, 0.7182766513378007, 0.7182766513378007, 0.7182766513378007, 0.7199242944836309, 0.7199242944836309, 0.7199242944836309, 0.1506748517221942, 0.1506748517221942, 0.1506748517221942, 0.13919075945678794, 0.13919075945678794, 0.13919075945678794, 0.11326944520264659, 0.11326944520264659, 0.11326944520264659, 0.5126006175080271, 0.5126006175080271, 0.5126006175080271, 0.11304294700122186, 0.11304294700122186, 0.11304294700122186, 0.1441344459789098, 0.1441344459789098, 0.1441344459789098, 0.9365744433841354, 0.9365744433841354, 0.9365744433841354, 0.9495782929379254, 0.9495782929379254, 0.9495782929379254, 0.9604990348711159, 0.9604990348711159, 0.9604990348711159, 0.6643582860946384, 0.6643582860946384, 0.6643582860946384, 0.6380266703721602, 0.6380266703721602, 0.6380266703721602, 0.6660125288031851, 0.6660125288031851, 0.6660125288031851, 0.7371514798649679, 0.7371514798649679, 0.7371514798649679, 0.7913593738509428, 0.7913593738509428, 0.7913593738509428, 0.7398043887851058, 0.7398043887851058, 0.7398043887851058, 0.44010052682491985, 0.44010052682491985, 0.44010052682491985, 0.5697946331606013, 0.5697946331606013, 0.5697946331606013, 0.2810927795354923, 0.2810927795354923, 0.2810927795354923, 0.021818488222698607, 0.021818488222698607, 0.021818488222698607, 0.49075255609653723, 0.49075255609653723, 0.49075255609653723, 0.5237361145155897, 0.5237361145155897, 0.5237361145155897, 0.34624124450386284, 0.34624124450386284, 0.34624124450386284, 0.39036878402978015, 0.39036878402978015, 0.39036878402978015, 0.5225075514764927, 0.5225075514764927, 0.5225075514764927, 0.43548248649060417, 0.43548248649060417, 0.43548248649060417, 0.4374113969265684, 0.4374113969265684, 0.4374113969265684, 0.6790612874875875, 0.6790612874875875, 0.6790612874875875, 0.25687425545208176, 0.25687425545208176, 0.25687425545208176, 0.2690416584960481, 0.2690416584960481, 0.2690416584960481, 0.20614695830403484, 0.20614695830403484, 0.20614695830403484, 0.3203299531905973, 0.3203299531905973, 0.3203299531905973, 0.3871568684257901, 0.3871568684257901, 0.3871568684257901, 0.3679995713135834, 0.3679995713135834, 0.3679995713135834, 0.7530271223959208, 0.7530271223959208, 0.7530271223959208, 0.7374998532950944, 0.7374998532950944, 0.7374998532950944, 0.6928225499785963, 0.6928225499785963, 0.6928225499785963, 0.09717989110317327, 0.09717989110317327, 0.09717989110317327, 0.10765458696962338, 0.10765458696962338, 0.10765458696962338, 0.10097447045693864, 0.10097447045693864, 0.10097447045693864, 0.13399048098543231, 0.13399048098543231, 0.13399048098543231, 0.21876527235832122, 0.21876527235832122, 0.21876527235832122, 0.15718855829760414, 0.15718855829760414, 0.15718855829760414, 0.4167881233578674, 0.4167881233578674, 0.4167881233578674, 0.4562038151379295, 0.4562038151379295, 0.4562038151379295, 0.40039236311118676, 0.40039236311118676, 0.40039236311118676, 0.3400101591864615, 0.3400101591864615, 0.3400101591864615, 0.41348529576290416, 0.41348529576290416, 0.41348529576290416, 0.4052256463339693, 0.4052256463339693, 0.4052256463339693, 0.19003126801650083, 0.19003126801650083, 0.19003126801650083, 0.17144873377058356, 0.17144873377058356, 0.17144873377058356, 0.19796318010452874, 0.19796318010452874, 0.19796318010452874, 0.20832429677182618, 0.20832429677182618, 0.20832429677182618, 0.21538490220684003, 0.21538490220684003, 0.21538490220684003, 0.2220955959837313, 0.2220955959837313, 0.2220955959837313, 0.21260394904734647, 0.21260394904734647, 0.21260394904734647, 0.7659408949459422, 0.7659408949459422, 0.7659408949459422, 0.7597074017089058, 0.7597074017089058, 0.7597074017089058, 0.20334088439311038, 0.20334088439311038, 0.20334088439311038, 0.19464440695050345, 0.19464440695050345, 0.19464440695050345, 0.20100259907184403, 0.20100259907184403, 0.20100259907184403, 0.17468890487296307, 0.17468890487296307, 0.17468890487296307, 0.17842277980829113, 0.17842277980829113, 0.17842277980829113, 0.18299937415971934, 0.18299937415971934, 0.18299937415971934, 0.06971285710190556, 0.06971285710190556, 0.06971285710190556, 0.07724114541741633, 0.07724114541741633, 0.07724114541741633, 0.0729474485220526, 0.0729474485220526, 0.0729474485220526]}, "mutation_prompt": null}
{"id": "0246eff0-ff4a-4d7a-ba6f-07cc47a66751", "solution": "import numpy as np\n\nclass HybridOptAlgo:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.init_pop_size = 40\n        self.min_pop_size = 8\n        self.f = 0.8  # Mutation factor\n        self.cr = 0.9  # Crossover probability\n        self.initial_temp = 100.0\n        self.temp_decay = 0.94\n\n    def __call__(self, func):\n        np.random.seed(0)\n        pop_size = self.init_pop_size\n        pop = np.random.uniform(self.bounds[0], self.bounds[1], (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = pop_size\n\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        best_fit = fitness[best_idx]\n\n        def mutation_and_crossover(target_idx, temp):\n            indices = list(range(pop_size))\n            indices.remove(target_idx)\n            a, b, c = pop[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.f * (b - c), *self.bounds)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, pop[target_idx])\n            return trial\n\n        temp = self.initial_temp\n        while evals < self.budget:\n            for i in range(pop_size):\n                trial = mutation_and_crossover(i, temp)\n                trial_fit = func(trial)\n                evals += 1\n\n                if trial_fit < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fit) / temp):\n                    pop[i] = trial\n                    fitness[i] = trial_fit\n\n                    if trial_fit < best_fit:\n                        best_sol = trial\n                        best_fit = trial_fit\n\n                temp *= self.temp_decay\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive population size for convergence\n            pop_size = max(self.min_pop_size, int(self.init_pop_size * (1 - evals / self.budget)))\n            pop = pop[:pop_size]\n            fitness = fitness[:pop_size]\n\n        return best_sol, best_fit", "name": "HybridOptAlgo", "description": "Hybrid Optimization Algorithm with Adaptive Differential Evolution and Enhanced Simulated Annealing for Efficient Function Minimization.", "configspace": "", "generation": 41, "fitness": 0.3814986085529582, "feedback": "The algorithm HybridOptAlgo got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.24.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.7543791228063064, 0.7543791228063064, 0.7543791228063064, 0.769595768135608, 0.769595768135608, 0.769595768135608, 0.7454978003538775, 0.7454978003538775, 0.7454978003538775, 0.6095254345067287, 0.6095254345067287, 0.6095254345067287, 0.6139894543067335, 0.6139894543067335, 0.6139894543067335, 0.6260017008747896, 0.6260017008747896, 0.6260017008747896, 0.12303245739241597, 0.12303245739241597, 0.12303245739241597, 0.19744825996816184, 0.19744825996816184, 0.19744825996816184, 0.12754490100456028, 0.12754490100456028, 0.12754490100456028, 0.12787597906631987, 0.12787597906631987, 0.12787597906631987, 0.11397296344879393, 0.11397296344879393, 0.11397296344879393, 0.11554716078998639, 0.11554716078998639, 0.11554716078998639, 0.9333967552500225, 0.9333967552500225, 0.9333967552500225, 0.9751415829222421, 0.9751415829222421, 0.9751415829222421, 0.9483175894373205, 0.9483175894373205, 0.9483175894373205, 0.5228322085261226, 0.5228322085261226, 0.5228322085261226, 0.5151320299250357, 0.5151320299250357, 0.5151320299250357, 0.5297488195986608, 0.5297488195986608, 0.5297488195986608, 0.704539172144016, 0.704539172144016, 0.704539172144016, 0.706835949135249, 0.706835949135249, 0.706835949135249, 0.6467026005835754, 0.6467026005835754, 0.6467026005835754, 0.4776994691453389, 0.4776994691453389, 0.4776994691453389, 0.43866888364221, 0.43866888364221, 0.43866888364221, 0.4619177701602808, 0.4619177701602808, 0.4619177701602808, 0.3743704175367317, 0.3743704175367317, 0.3743704175367317, 0.5017898385750728, 0.5017898385750728, 0.5017898385750728, 0.4763394556109587, 0.4763394556109587, 0.4763394556109587, 0.3331144931432509, 0.3331144931432509, 0.3331144931432509, 0.31906094784758, 0.31906094784758, 0.31906094784758, 0.3494349216383523, 0.3494349216383523, 0.3494349216383523, 0.46407048606455337, 0.46407048606455337, 0.46407048606455337, 0.4702358080413225, 0.4702358080413225, 0.4702358080413225, 0.49455897963540274, 0.49455897963540274, 0.49455897963540274, 0.05936730328666617, 0.05936730328666617, 0.05936730328666617, 0.23058796877509236, 0.23058796877509236, 0.23058796877509236, 0.1129683484191919, 0.1129683484191919, 0.1129683484191919, 0.292484003649786, 0.292484003649786, 0.292484003649786, 0.36595506878490036, 0.36595506878490036, 0.36595506878490036, 0.25393758220441054, 0.25393758220441054, 0.25393758220441054, 0.6602716319701734, 0.6602716319701734, 0.6602716319701734, 0.6332430150671047, 0.6332430150671047, 0.6332430150671047, 0.6720673685665188, 0.6720673685665188, 0.6720673685665188, 0.0896245287784152, 0.0896245287784152, 0.0896245287784152, 0.09796420639851988, 0.09796420639851988, 0.09796420639851988, 0.1029981753447975, 0.1029981753447975, 0.1029981753447975, 0.13635060876903204, 0.13635060876903204, 0.13635060876903204, 0.1311697046433583, 0.1311697046433583, 0.1311697046433583, 0.18109563371244053, 0.18109563371244053, 0.18109563371244053, 0.4764989670208466, 0.4764989670208466, 0.4764989670208466, 0.45560576670233344, 0.45560576670233344, 0.45560576670233344, 0.4212282008809505, 0.4212282008809505, 0.4212282008809505, 0.27180137050141473, 0.27180137050141473, 0.27180137050141473, 0.31007956015008065, 0.31007956015008065, 0.31007956015008065, 0.30759059253136567, 0.30759059253136567, 0.30759059253136567, 0.18124447958504664, 0.18124447958504664, 0.18124447958504664, 0.17994941384582197, 0.17994941384582197, 0.17994941384582197, 0.1931008265436609, 0.1931008265436609, 0.1931008265436609, 0.2180469064472026, 0.2180469064472026, 0.2180469064472026, 0.17971259888347557, 0.17971259888347557, 0.17971259888347557, 0.38715585723898427, 0.38715585723898427, 0.38715585723898427, 0.17617236275384207, 0.17617236275384207, 0.17617236275384207, 0.6990062934224346, 0.6990062934224346, 0.6990062934224346, 0.687694943828637, 0.687694943828637, 0.687694943828637, 0.20551902275271072, 0.20551902275271072, 0.20551902275271072, 0.612141821426051, 0.612141821426051, 0.612141821426051, 0.14842451043358285, 0.14842451043358285, 0.14842451043358285, 0.18391273969155042, 0.18391273969155042, 0.18391273969155042, 0.18095171557450862, 0.18095171557450862, 0.18095171557450862, 0.18767874201287127, 0.18767874201287127, 0.18767874201287127, 0.07409389175677938, 0.07409389175677938, 0.07409389175677938, 0.07052241615682087, 0.07052241615682087, 0.07052241615682087, 0.07136248608402807, 0.07136248608402807, 0.07136248608402807]}, "mutation_prompt": null}
{"id": "a9b75297-6728-41de-8f2e-626534877279", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 40\n        self.min_population_size = 5\n        self.cr = 0.9  # Crossover rate\n        self.initial_temperature = 100.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.97\n        self.de_mutation_factor_bounds = (0.5, 0.9)\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            adaptive_mutation_factor = (self.de_mutation_factor_bounds[0] + \n                                        (self.de_mutation_factor_bounds[1] - self.de_mutation_factor_bounds[0]) * \n                                        (1 - evals_used / self.budget))\n            mutant = np.clip(a + adaptive_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Dynamic population reduction\n            new_population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            if new_population_size < population_size:\n                sorted_indices = np.argsort(fitness)\n                population = population[sorted_indices][:new_population_size]\n                fitness = fitness[sorted_indices][:new_population_size]\n                population_size = new_population_size\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "HybridDE_SA with adaptive mutation factor and dynamic population reduction for enhanced performance.", "configspace": "", "generation": 42, "fitness": 0.3830968259514294, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.24.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.7322100991540146, 0.7322100991540146, 0.7322100991540146, 0.7591309134100609, 0.7591309134100609, 0.7591309134100609, 0.7472766481992805, 0.7472766481992805, 0.7472766481992805, 0.6390853130556168, 0.6390853130556168, 0.6390853130556168, 0.6140191320600021, 0.6140191320600021, 0.6140191320600021, 0.6468190906034847, 0.6468190906034847, 0.6468190906034847, 0.12033195443878975, 0.12033195443878975, 0.12033195443878975, 0.12730846330179757, 0.12730846330179757, 0.12730846330179757, 0.11436992819257397, 0.11436992819257397, 0.11436992819257397, 0.14753627447585205, 0.14753627447585205, 0.14753627447585205, 0.11442441485369204, 0.11442441485369204, 0.11442441485369204, 0.11889486856340203, 0.11889486856340203, 0.11889486856340203, 0.9497833470482723, 0.9497833470482723, 0.9497833470482723, 0.981099429566987, 0.981099429566987, 0.981099429566987, 0.950832204364838, 0.950832204364838, 0.950832204364838, 0.46352584813203124, 0.46352584813203124, 0.46352584813203124, 0.5494916761188486, 0.5494916761188486, 0.5494916761188486, 0.46314668430972583, 0.46314668430972583, 0.46314668430972583, 0.6905205719942198, 0.6905205719942198, 0.6905205719942198, 0.6936776306987271, 0.6936776306987271, 0.6936776306987271, 0.6986442174102505, 0.6986442174102505, 0.6986442174102505, 0.37283573194775066, 0.37283573194775066, 0.37283573194775066, 0.31566904532219087, 0.31566904532219087, 0.31566904532219087, 0.5028592168266532, 0.5028592168266532, 0.5028592168266532, 0.2972961997968234, 0.2972961997968234, 0.2972961997968234, 0.2637847425623747, 0.2637847425623747, 0.2637847425623747, 0.5206923128546308, 0.5206923128546308, 0.5206923128546308, 0.4783294307161212, 0.4783294307161212, 0.4783294307161212, 0.37631373191375517, 0.37631373191375517, 0.37631373191375517, 0.3211281991307443, 0.3211281991307443, 0.3211281991307443, 0.4706342490527403, 0.4706342490527403, 0.4706342490527403, 0.5042056337575989, 0.5042056337575989, 0.5042056337575989, 0.5855692636975762, 0.5855692636975762, 0.5855692636975762, 0.09405842306890522, 0.09405842306890522, 0.09405842306890522, 0.20419891948157443, 0.20419891948157443, 0.20419891948157443, 0.15264835436517865, 0.15264835436517865, 0.15264835436517865, 0.3221447553264658, 0.3221447553264658, 0.3221447553264658, 0.3270394854205825, 0.3270394854205825, 0.3270394854205825, 0.3417004259448633, 0.3417004259448633, 0.3417004259448633, 0.6874384230041195, 0.6874384230041195, 0.6874384230041195, 0.6924600164639958, 0.6924600164639958, 0.6924600164639958, 0.690771881556182, 0.690771881556182, 0.690771881556182, 0.10604931785429994, 0.10604931785429994, 0.10604931785429994, 0.11945952264247339, 0.11945952264247339, 0.11945952264247339, 0.08838842770225597, 0.08838842770225597, 0.08838842770225597, 0.21384447044607868, 0.21384447044607868, 0.21384447044607868, 0.1759763069207353, 0.1759763069207353, 0.1759763069207353, 0.22193491430079249, 0.22193491430079249, 0.22193491430079249, 0.3809700994293771, 0.3809700994293771, 0.3809700994293771, 0.40228845682518244, 0.40228845682518244, 0.40228845682518244, 0.4237239428238002, 0.4237239428238002, 0.4237239428238002, 0.36998907020581095, 0.36998907020581095, 0.36998907020581095, 0.3198296735624986, 0.3198296735624986, 0.3198296735624986, 0.363069651070681, 0.363069651070681, 0.363069651070681, 0.2139247366127952, 0.2139247366127952, 0.2139247366127952, 0.16755928763390437, 0.16755928763390437, 0.16755928763390437, 0.18832573018791032, 0.18832573018791032, 0.18832573018791032, 0.42281648103784186, 0.42281648103784186, 0.42281648103784186, 0.5187763977843622, 0.5187763977843622, 0.5187763977843622, 0.20316838833240736, 0.20316838833240736, 0.20316838833240736, 0.7283301421480852, 0.7283301421480852, 0.7283301421480852, 0.17791465499595283, 0.17791465499595283, 0.17791465499595283, 0.18020422555121218, 0.18020422555121218, 0.18020422555121218, 0.1643681895470348, 0.1643681895470348, 0.1643681895470348, 0.6172349610352972, 0.6172349610352972, 0.6172349610352972, 0.20664846198434283, 0.20664846198434283, 0.20664846198434283, 0.18365399172271146, 0.18365399172271146, 0.18365399172271146, 0.17000267797245738, 0.17000267797245738, 0.17000267797245738, 0.18305259903368498, 0.18305259903368498, 0.18305259903368498, 0.07443337214893386, 0.07443337214893386, 0.07443337214893386, 0.07244174017168481, 0.07244174017168481, 0.07244174017168481, 0.0806844246550179, 0.0806844246550179, 0.0806844246550179]}, "mutation_prompt": null}
{"id": "c9c3842c-66b1-4e1d-8a32-23a60f262683", "solution": "import numpy as np\n\nclass AdaptiveDynamicDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.init_pop_size = 40  # Increased initial population for diversity\n        self.min_pop_size = 15  # Increased minimum population size\n        self.de_mutation_factor = 0.8  # Adjusted mutation factor\n        self.cr = 0.9  # Increased crossover rate\n        self.init_temperature = 100.0  # Higher initial temperature for exploration\n        self.temperature_decay = 0.92  # Adjusted decay for prolonged exploration\n        self.elite_fraction = 0.1  # Retain top 10% of population\n\n    def __call__(self, func):\n        np.random.seed(0)\n        pop_size = self.init_pop_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = pop_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(pop_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.init_temperature\n        while evals_used < self.budget:\n            for i in range(pop_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature = max(self.init_temperature * (self.temperature_decay ** (evals_used / self.budget)), 1e-8)\n\n                if evals_used >= self.budget:\n                    break\n\n            elite_count = max(1, int(self.elite_fraction * pop_size))\n            elite_indices = np.argsort(fitness)[:elite_count]\n            elite_pop = population[elite_indices]\n            elite_fit = fitness[elite_indices]\n\n            pop_size = max(self.min_pop_size, int(self.init_pop_size * (1 - evals_used / self.budget)))\n            population = np.vstack((elite_pop, population[np.random.choice(np.arange(pop_size), pop_size - elite_count, replace=False)]))\n            fitness = np.array([func(ind) for ind in population])\n\n        return best_solution, best_fitness", "name": "AdaptiveDynamicDE_SA", "description": "Adaptive dynamic DE with simulated annealing and elite retention for enhanced convergence.", "configspace": "", "generation": 43, "fitness": 0.15786285149639795, "feedback": "The algorithm AdaptiveDynamicDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.1456474645036595, 0.1456474645036595, 0.1456474645036595, 0.1807440596308565, 0.1807440596308565, 0.1807440596308565, 0.15828861407588357, 0.15828861407588357, 0.15828861407588357, 0.12276416390371248, 0.12276416390371248, 0.12276416390371248, 0.09796163892769183, 0.09796163892769183, 0.09796163892769183, 0.12984171511321807, 0.12984171511321807, 0.12984171511321807, 0.06455189466548328, 0.06455189466548328, 0.06455189466548328, 0.08123189690478871, 0.08123189690478871, 0.08123189690478871, 0.05958437662852323, 0.05958437662852323, 0.05958437662852323, 0.06900410851819183, 0.06900410851819183, 0.06900410851819183, 0.0789862496017466, 0.0789862496017466, 0.0789862496017466, 0.05698087227733273, 0.05698087227733273, 0.05698087227733273, 0.9406217887256031, 0.9406217887256031, 0.9406217887256031, 0.9569556222574724, 0.9569556222574724, 0.9569556222574724, 0.9666875650484391, 0.9666875650484391, 0.9666875650484391, 0.1218746201266584, 0.1218746201266584, 0.1218746201266584, 0.1405618862055411, 0.1405618862055411, 0.1405618862055411, 0.16551492222093056, 0.16551492222093056, 0.16551492222093056, 0.16255531542352508, 0.16255531542352508, 0.16255531542352508, 0.183557236949208, 0.183557236949208, 0.183557236949208, 0.20708036922890127, 0.20708036922890127, 0.20708036922890127, 0.14214588189062138, 0.14214588189062138, 0.14214588189062138, 0.1247235448844376, 0.1247235448844376, 0.1247235448844376, 0.12358416239179171, 0.12358416239179171, 0.12358416239179171, 0.13882226755614524, 0.13882226755614524, 0.13882226755614524, 0.12544616830211397, 0.12544616830211397, 0.12544616830211397, 0.1473233500633382, 0.1473233500633382, 0.1473233500633382, 0.0814838875849151, 0.0814838875849151, 0.0814838875849151, 0.0004937299536436068, 0.0004937299536436068, 0.0004937299536436068, 0.08574718395003966, 0.08574718395003966, 0.08574718395003966, 0.17971556974302716, 0.17971556974302716, 0.17971556974302716, 0.08587966043209616, 0.08587966043209616, 0.08587966043209616, 0.15585504371124226, 0.15585504371124226, 0.15585504371124226, 0.07478946953924193, 0.07478946953924193, 0.07478946953924193, 0.06561717002803324, 0.06561717002803324, 0.06561717002803324, 0.1064459041416208, 0.1064459041416208, 0.1064459041416208, 0.0634824875861254, 0.0634824875861254, 0.0634824875861254, 0.07655228430427763, 0.07655228430427763, 0.07655228430427763, 0.06118171109061299, 0.06118171109061299, 0.06118171109061299, 0.19156247008052085, 0.19156247008052085, 0.19156247008052085, 0.17580499211973966, 0.17580499211973966, 0.17580499211973966, 0.19727918854035564, 0.19727918854035564, 0.19727918854035564, 0.06506990590985984, 0.06506990590985984, 0.06506990590985984, 0.055767381129554594, 0.055767381129554594, 0.055767381129554594, 0.061754504653754205, 0.061754504653754205, 0.061754504653754205, 0.12914226876068646, 0.12914226876068646, 0.12914226876068646, 0.13692057004518843, 0.13692057004518843, 0.13692057004518843, 0.12346108659863986, 0.12346108659863986, 0.12346108659863986, 0.16817815075098985, 0.16817815075098985, 0.16817815075098985, 0.14545900966628067, 0.14545900966628067, 0.14545900966628067, 0.15649795070595351, 0.15649795070595351, 0.15649795070595351, 0.09695111548196877, 0.09695111548196877, 0.09695111548196877, 0.10816070360871655, 0.10816070360871655, 0.10816070360871655, 0.09674536958613611, 0.09674536958613611, 0.09674536958613611, 0.14718392197233732, 0.14718392197233732, 0.14718392197233732, 0.13216132688222537, 0.13216132688222537, 0.13216132688222537, 0.15311880392109056, 0.15311880392109056, 0.15311880392109056, 0.17250850450254018, 0.17250850450254018, 0.17250850450254018, 0.17501772687727257, 0.17501772687727257, 0.17501772687727257, 0.17138390582997476, 0.17138390582997476, 0.17138390582997476, 0.1491860932408574, 0.1491860932408574, 0.1491860932408574, 0.1538575894681773, 0.1538575894681773, 0.1538575894681773, 0.1545130095812559, 0.1545130095812559, 0.1545130095812559, 0.13708507900168154, 0.13708507900168154, 0.13708507900168154, 0.11449443494262557, 0.11449443494262557, 0.11449443494262557, 0.18064806655902288, 0.18064806655902288, 0.18064806655902288, 0.17569877133718093, 0.17569877133718093, 0.17569877133718093, 0.173788388657661, 0.173788388657661, 0.173788388657661, 0.1739807469037873, 0.1739807469037873, 0.1739807469037873, 0.04276064152132164, 0.04276064152132164, 0.04276064152132164, 0.07594181831443036, 0.07594181831443036, 0.07594181831443036, 0.04375595249817432, 0.04375595249817432, 0.04375595249817432]}, "mutation_prompt": null}
{"id": "6fce0354-c826-40bb-a155-e46e0841c349", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85  # Crossover rate\n        self.initial_temperature = 90.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive population and dynamic temperature scaling to improve optimization efficiency.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8468919310943874, 0.8468919310943874, 0.8468919310943874, 0.855326845256036, 0.855326845256036, 0.855326845256036, 0.840585818510729, 0.840585818510729, 0.840585818510729, 0.7421502225994087, 0.7421502225994087, 0.7421502225994087, 0.7565967426826964, 0.7565967426826964, 0.7565967426826964, 0.7529706990344701, 0.7529706990344701, 0.7529706990344701, 0.1426316867338121, 0.1426316867338121, 0.1426316867338121, 0.1393595997145456, 0.1393595997145456, 0.1393595997145456, 0.346361861358952, 0.346361861358952, 0.346361861358952, 0.12796918324697348, 0.12796918324697348, 0.12796918324697348, 0.12998578595405197, 0.12998578595405197, 0.12998578595405197, 0.4384317578292998, 0.4384317578292998, 0.4384317578292998, 0.9800275354110715, 0.9800275354110715, 0.9800275354110715, 0.9709783235644224, 0.9709783235644224, 0.9709783235644224, 0.9647029289037511, 0.9647029289037511, 0.9647029289037511, 0.6719250947414241, 0.6719250947414241, 0.6719250947414241, 0.6767349851271116, 0.6767349851271116, 0.6767349851271116, 0.6743179399450236, 0.6743179399450236, 0.6743179399450236, 0.7554426351222618, 0.7554426351222618, 0.7554426351222618, 0.8045587627588684, 0.8045587627588684, 0.8045587627588684, 0.789440049633421, 0.789440049633421, 0.789440049633421, 0.5599611561643695, 0.5599611561643695, 0.5599611561643695, 0.5312170838321281, 0.5312170838321281, 0.5312170838321281, 0.31069217560039875, 0.31069217560039875, 0.31069217560039875, 0.5705737337777981, 0.5705737337777981, 0.5705737337777981, 0.47093641060904434, 0.47093641060904434, 0.47093641060904434, 0.5354314122267088, 0.5354314122267088, 0.5354314122267088, 0.40209798712958045, 0.40209798712958045, 0.40209798712958045, 0.3642507993681433, 0.3642507993681433, 0.3642507993681433, 0.36548811236299594, 0.36548811236299594, 0.36548811236299594, 0.6010219767218168, 0.6010219767218168, 0.6010219767218168, 0.4609618964641864, 0.4609618964641864, 0.4609618964641864, 0.5761842567852868, 0.5761842567852868, 0.5761842567852868, 0.3364280873101432, 0.3364280873101432, 0.3364280873101432, 0.22436347168490534, 0.22436347168490534, 0.22436347168490534, 0.14370855196094, 0.14370855196094, 0.14370855196094, 0.3524508486544361, 0.3524508486544361, 0.3524508486544361, 0.42998297521643003, 0.42998297521643003, 0.42998297521643003, 0.40461796342897893, 0.40461796342897893, 0.40461796342897893, 0.767539242818753, 0.767539242818753, 0.767539242818753, 0.7820799575508199, 0.7820799575508199, 0.7820799575508199, 0.7721908539180269, 0.7721908539180269, 0.7721908539180269, 0.08871119087527446, 0.08871119087527446, 0.08871119087527446, 0.4523511087454457, 0.4523511087454457, 0.4523511087454457, 0.12192703851923581, 0.12192703851923581, 0.12192703851923581, 0.17742652326152386, 0.17742652326152386, 0.17742652326152386, 0.1691254363011272, 0.1691254363011272, 0.1691254363011272, 0.13695950957186487, 0.13695950957186487, 0.13695950957186487, 0.5120997367697984, 0.5120997367697984, 0.5120997367697984, 0.475690916960933, 0.475690916960933, 0.475690916960933, 0.6194688146950851, 0.6194688146950851, 0.6194688146950851, 0.3926061801832482, 0.3926061801832482, 0.3926061801832482, 0.38871989635931936, 0.38871989635931936, 0.38871989635931936, 0.4965386730534258, 0.4965386730534258, 0.4965386730534258, 0.17734482677275265, 0.17734482677275265, 0.17734482677275265, 0.20046836796037482, 0.20046836796037482, 0.20046836796037482, 0.21420361868707027, 0.21420361868707027, 0.21420361868707027, 0.20793856943168032, 0.20793856943168032, 0.20793856943168032, 0.5560334904990389, 0.5560334904990389, 0.5560334904990389, 0.5843537762800062, 0.5843537762800062, 0.5843537762800062, 0.839870673924596, 0.839870673924596, 0.839870673924596, 0.19313196633563656, 0.19313196633563656, 0.19313196633563656, 0.1648444773432981, 0.1648444773432981, 0.1648444773432981, 0.7458213972665602, 0.7458213972665602, 0.7458213972665602, 0.6615798603498275, 0.6615798603498275, 0.6615798603498275, 0.2115924792219348, 0.2115924792219348, 0.2115924792219348, 0.1908779716489688, 0.1908779716489688, 0.1908779716489688, 0.1807381678536618, 0.1807381678536618, 0.1807381678536618, 0.1927543441479429, 0.1927543441479429, 0.1927543441479429, 0.07136763679885338, 0.07136763679885338, 0.07136763679885338, 0.0804608614888177, 0.0804608614888177, 0.0804608614888177, 0.08823253071962422, 0.08823253071962422, 0.08823253071962422]}, "mutation_prompt": null}
{"id": "3a0fa431-4249-4ce9-b27c-6faa36f6383d", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 40  # Changed population size\n        self.min_population_size = 8  # Adjusted minimum population size\n        self.de_mutation_factor_min = 0.5  # Added dynamic mutation factor range\n        self.de_mutation_factor_max = 0.9\n        self.cr = 0.9  # Adjusted crossover rate\n        self.initial_temperature = 100.0  # Adjusted initial temperature\n        self.temperature_decay = 0.93  # Adjusted temperature decay\n\n    def __call__(self, func):\n        np.random.seed(42)  # Changed random seed\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            de_mutation_factor = self.de_mutation_factor_min + (self.de_mutation_factor_max - self.de_mutation_factor_min) * np.random.rand()\n            mutant = np.clip(a + de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Hybrid dynamic mutation and adaptive SA with enhanced parameter tuning for improved optimization.", "configspace": "", "generation": 45, "fitness": 0.4270619331448551, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.7999790129395931, 0.7999790129395931, 0.7999790129395931, 0.8136228646982343, 0.8136228646982343, 0.8136228646982343, 0.7984886509932467, 0.7984886509932467, 0.7984886509932467, 0.6973174329941809, 0.6973174329941809, 0.6973174329941809, 0.6903369348129349, 0.6903369348129349, 0.6903369348129349, 0.7008801188284877, 0.7008801188284877, 0.7008801188284877, 0.1286896386665467, 0.1286896386665467, 0.1286896386665467, 0.146552503626046, 0.146552503626046, 0.146552503626046, 0.41053603784735937, 0.41053603784735937, 0.41053603784735937, 0.1025777391416095, 0.1025777391416095, 0.1025777391416095, 0.11845252139198259, 0.11845252139198259, 0.11845252139198259, 0.13519863326556625, 0.13519863326556625, 0.13519863326556625, 0.9802981574616976, 0.9802981574616976, 0.9802981574616976, 0.9187007907563599, 0.9187007907563599, 0.9187007907563599, 0.9544667707704443, 0.9544667707704443, 0.9544667707704443, 0.5954673998000892, 0.5954673998000892, 0.5954673998000892, 0.604743887069493, 0.604743887069493, 0.604743887069493, 0.6116232143140355, 0.6116232143140355, 0.6116232143140355, 0.7446125587907991, 0.7446125587907991, 0.7446125587907991, 0.7221206469705435, 0.7221206469705435, 0.7221206469705435, 0.7990264167334105, 0.7990264167334105, 0.7990264167334105, 0.3295678961944334, 0.3295678961944334, 0.3295678961944334, 0.5224890945407448, 0.5224890945407448, 0.5224890945407448, 0.5476522705351139, 0.5476522705351139, 0.5476522705351139, 0.5034867587336807, 0.5034867587336807, 0.5034867587336807, 0.4256801162616233, 0.4256801162616233, 0.4256801162616233, 0.4478242670019027, 0.4478242670019027, 0.4478242670019027, 0.5331482803153234, 0.5331482803153234, 0.5331482803153234, 0.5336299343035071, 0.5336299343035071, 0.5336299343035071, 0.5558845530521501, 0.5558845530521501, 0.5558845530521501, 0.6037383840000174, 0.6037383840000174, 0.6037383840000174, 0.6364280733290753, 0.6364280733290753, 0.6364280733290753, 0.6028460190177307, 0.6028460190177307, 0.6028460190177307, 0.10471967218066458, 0.10471967218066458, 0.10471967218066458, 0.17161658316030393, 0.17161658316030393, 0.17161658316030393, 0.21071354604467918, 0.21071354604467918, 0.21071354604467918, 0.43202990649901096, 0.43202990649901096, 0.43202990649901096, 0.4164300806992487, 0.4164300806992487, 0.4164300806992487, 0.40976681551690963, 0.40976681551690963, 0.40976681551690963, 0.7346746207519728, 0.7346746207519728, 0.7346746207519728, 0.7309029778489826, 0.7309029778489826, 0.7309029778489826, 0.7406947164306998, 0.7406947164306998, 0.7406947164306998, 0.10357014082508598, 0.10357014082508598, 0.10357014082508598, 0.09268401004260307, 0.09268401004260307, 0.09268401004260307, 0.09325017020956272, 0.09325017020956272, 0.09325017020956272, 0.16843436753662178, 0.16843436753662178, 0.16843436753662178, 0.1659519564968719, 0.1659519564968719, 0.1659519564968719, 0.18017298425326522, 0.18017298425326522, 0.18017298425326522, 0.48091646705791147, 0.48091646705791147, 0.48091646705791147, 0.5287322241963918, 0.5287322241963918, 0.5287322241963918, 0.49739158834271713, 0.49739158834271713, 0.49739158834271713, 0.36181249220444756, 0.36181249220444756, 0.36181249220444756, 0.36597162407162454, 0.36597162407162454, 0.36597162407162454, 0.3813904870933147, 0.3813904870933147, 0.3813904870933147, 0.1883331177282105, 0.1883331177282105, 0.1883331177282105, 0.18258468211343815, 0.18258468211343815, 0.18258468211343815, 0.20075871028671888, 0.20075871028671888, 0.20075871028671888, 0.20820535132355278, 0.20820535132355278, 0.20820535132355278, 0.3719774264414184, 0.3719774264414184, 0.3719774264414184, 0.5114244550681186, 0.5114244550681186, 0.5114244550681186, 0.16905667333815821, 0.16905667333815821, 0.16905667333815821, 0.17737438549813012, 0.17737438549813012, 0.17737438549813012, 0.16859881444632951, 0.16859881444632951, 0.16859881444632951, 0.7081364123042673, 0.7081364123042673, 0.7081364123042673, 0.7888215620644994, 0.7888215620644994, 0.7888215620644994, 0.206739067934954, 0.206739067934954, 0.206739067934954, 0.1807257190369118, 0.1807257190369118, 0.1807257190369118, 0.18741883395511472, 0.18741883395511472, 0.18741883395511472, 0.17934744167760786, 0.17934744167760786, 0.17934744167760786, 0.0724239113184183, 0.0724239113184183, 0.0724239113184183, 0.0824839702580843, 0.0824839702580843, 0.0824839702580843, 0.07615364101478228, 0.07615364101478228, 0.07615364101478228]}, "mutation_prompt": null}
{"id": "433a1b32-285c-4262-928a-ee8437d6c617", "solution": "import numpy as np\n\nclass ImprovedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.85  # Increased for higher diversity\n        self.cr = 0.9  # Higher crossover rate for better exploration\n        self.initial_temperature = 100.0  # Higher initial temperature for broader search\n        self.temperature_decay = 0.93  # Slower decay for more consistent search\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            adaptive_factor = self.de_mutation_factor * (1 - evals_used / self.budget)  # Adaptive mutation factor\n            mutant = np.clip(a + adaptive_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                # Dynamic cooling rate\n                if evals_used % 10 == 0:\n                    temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adaptive population resizing\n            population_size = max(self.min_population_size, int(self.initial_population_size * ((self.budget - evals_used) / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "ImprovedHybridDE_SA", "description": "Improved DE-SA with adaptive learning rates and dynamic cooling schedule for enhanced convergence.", "configspace": "", "generation": 46, "fitness": 0.3903440242863179, "feedback": "The algorithm ImprovedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8108129713770131, 0.8108129713770131, 0.8108129713770131, 0.8260776390576516, 0.8260776390576516, 0.8260776390576516, 0.828987692506441, 0.828987692506441, 0.828987692506441, 0.7580298071665017, 0.7580298071665017, 0.7580298071665017, 0.7527114689808034, 0.7527114689808034, 0.7527114689808034, 0.7340719127509239, 0.7340719127509239, 0.7340719127509239, 0.14302944834430886, 0.14302944834430886, 0.14302944834430886, 0.1582233593952569, 0.1582233593952569, 0.1582233593952569, 0.13240268050498505, 0.13240268050498505, 0.13240268050498505, 0.11485479656329356, 0.11485479656329356, 0.11485479656329356, 0.12978390468230505, 0.12978390468230505, 0.12978390468230505, 0.12377154624104802, 0.12377154624104802, 0.12377154624104802, 0.9597797915957093, 0.9597797915957093, 0.9597797915957093, 0.982429831665594, 0.982429831665594, 0.982429831665594, 0.946544868354364, 0.946544868354364, 0.946544868354364, 0.4073715483750153, 0.4073715483750153, 0.4073715483750153, 0.4593252187397635, 0.4593252187397635, 0.4593252187397635, 0.5068418480091752, 0.5068418480091752, 0.5068418480091752, 0.7998786074082552, 0.7998786074082552, 0.7998786074082552, 0.7765098591934023, 0.7765098591934023, 0.7765098591934023, 0.7947410071204495, 0.7947410071204495, 0.7947410071204495, 0.18504338659073394, 0.18504338659073394, 0.18504338659073394, 0.304824265390953, 0.304824265390953, 0.304824265390953, 0.20860702605472226, 0.20860702605472226, 0.20860702605472226, 0.4069547974848229, 0.4069547974848229, 0.4069547974848229, 0.21654410505068822, 0.21654410505068822, 0.21654410505068822, 0.17916404612015102, 0.17916404612015102, 0.17916404612015102, 0.37347934268239, 0.37347934268239, 0.37347934268239, 0.4576988201962827, 0.4576988201962827, 0.4576988201962827, 0.563163304467585, 0.563163304467585, 0.563163304467585, 0.5304672011287845, 0.5304672011287845, 0.5304672011287845, 0.5631023160440028, 0.5631023160440028, 0.5631023160440028, 0.7237718602402974, 0.7237718602402974, 0.7237718602402974, 0.1552006880985478, 0.1552006880985478, 0.1552006880985478, 0.2504115298871341, 0.2504115298871341, 0.2504115298871341, 0.22134342535866158, 0.22134342535866158, 0.22134342535866158, 0.36466307928928676, 0.36466307928928676, 0.36466307928928676, 0.4459216246573793, 0.4459216246573793, 0.4459216246573793, 0.4662867919604211, 0.4662867919604211, 0.4662867919604211, 0.7890787842849185, 0.7890787842849185, 0.7890787842849185, 0.7726656413751332, 0.7726656413751332, 0.7726656413751332, 0.6202639768371221, 0.6202639768371221, 0.6202639768371221, 0.10656933707586691, 0.10656933707586691, 0.10656933707586691, 0.11390310197327724, 0.11390310197327724, 0.11390310197327724, 0.12823084070556268, 0.12823084070556268, 0.12823084070556268, 0.14106911921290954, 0.14106911921290954, 0.14106911921290954, 0.17751093197675272, 0.17751093197675272, 0.17751093197675272, 0.262005084777589, 0.262005084777589, 0.262005084777589, 0.42979875780186083, 0.42979875780186083, 0.42979875780186083, 0.42655123706273024, 0.42655123706273024, 0.42655123706273024, 0.1900611803706762, 0.1900611803706762, 0.1900611803706762, 0.4815639928692155, 0.4815639928692155, 0.4815639928692155, 0.35686319559314916, 0.35686319559314916, 0.35686319559314916, 0.3262905689146769, 0.3262905689146769, 0.3262905689146769, 0.2129850825591163, 0.2129850825591163, 0.2129850825591163, 0.18518583611457806, 0.18518583611457806, 0.18518583611457806, 0.18912178279721592, 0.18912178279721592, 0.18912178279721592, 0.46648141449638847, 0.46648141449638847, 0.46648141449638847, 0.21983491006574774, 0.21983491006574774, 0.21983491006574774, 0.20858830411463203, 0.20858830411463203, 0.20858830411463203, 0.1947859167936271, 0.1947859167936271, 0.1947859167936271, 0.18593166318767318, 0.18593166318767318, 0.18593166318767318, 0.8018085441509462, 0.8018085441509462, 0.8018085441509462, 0.16395222346211535, 0.16395222346211535, 0.16395222346211535, 0.1954939905061257, 0.1954939905061257, 0.1954939905061257, 0.2088205731430317, 0.2088205731430317, 0.2088205731430317, 0.17679973397694504, 0.17679973397694504, 0.17679973397694504, 0.1882936453225662, 0.1882936453225662, 0.1882936453225662, 0.18443814421473304, 0.18443814421473304, 0.18443814421473304, 0.07527281481642989, 0.07527281481642989, 0.07527281481642989, 0.07293125063393657, 0.07293125063393657, 0.07293125063393657, 0.088790748692532, 0.088790748692532, 0.088790748692532]}, "mutation_prompt": null}
{"id": "cb94b6c6-1cee-4164-b610-a69982dbe58e", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 40  # Increased initial population\n        self.min_population_size = 8  # Reduced minimum population size\n        self.initial_de_mutation_factor = 0.5  # Dynamic mutation factor start\n        self.cr_min = 0.65  # Crossover rate range start\n        self.cr_max = 0.95  # Crossover rate range end\n        self.initial_temperature = 100.0  # Higher initial temperature\n        self.temperature_decay = 0.90  # Slower decay\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            de_mutation_factor = self.initial_de_mutation_factor + (1 - self.initial_de_mutation_factor) * (evals_used / self.budget)\n            for i in range(population_size):\n                indices = list(range(population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                cr = self.cr_min + (self.cr_max - self.cr_min) * (evals_used / self.budget)\n                mutant = np.clip(a + de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < cr\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evals_used >= self.budget:\n                    break\n\n            temperature *= self.temperature_decay\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA_Improved", "description": "EnhancedHybridDE_SA with adaptive mutation factor, dynamic recombination, and stochastic acceptance for improved optimization accuracy.", "configspace": "", "generation": 47, "fitness": 0.3598826383210404, "feedback": "The algorithm EnhancedHybridDE_SA_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.22.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.6995804687804782, 0.6995804687804782, 0.6995804687804782, 0.700686872024058, 0.700686872024058, 0.700686872024058, 0.70241417851798, 0.70241417851798, 0.70241417851798, 0.67116682249253, 0.67116682249253, 0.67116682249253, 0.6773793907533776, 0.6773793907533776, 0.6773793907533776, 0.6716750626695693, 0.6716750626695693, 0.6716750626695693, 0.3462032324479427, 0.3462032324479427, 0.3462032324479427, 0.3495091087052963, 0.3495091087052963, 0.3495091087052963, 0.2917678774386292, 0.2917678774386292, 0.2917678774386292, 0.1418255676733221, 0.1418255676733221, 0.1418255676733221, 0.13518349031984178, 0.13518349031984178, 0.13518349031984178, 0.2988586655684776, 0.2988586655684776, 0.2988586655684776, 0.9358841127755142, 0.9358841127755142, 0.9358841127755142, 0.9676288029457829, 0.9676288029457829, 0.9676288029457829, 0.9259088982239737, 0.9259088982239737, 0.9259088982239737, 0.554595690132033, 0.554595690132033, 0.554595690132033, 0.5783911196562752, 0.5783911196562752, 0.5783911196562752, 0.5538378082851154, 0.5538378082851154, 0.5538378082851154, 0.6962780270888604, 0.6962780270888604, 0.6962780270888604, 0.6875127025699775, 0.6875127025699775, 0.6875127025699775, 0.6858147751203835, 0.6858147751203835, 0.6858147751203835, 0.2776827664998087, 0.2776827664998087, 0.2776827664998087, 0.3981381074727294, 0.3981381074727294, 0.3981381074727294, 0.3595456985121245, 0.3595456985121245, 0.3595456985121245, 0.4117873823342184, 0.4117873823342184, 0.4117873823342184, 0.46954451099982286, 0.46954451099982286, 0.46954451099982286, 0.47655753582554805, 0.47655753582554805, 0.47655753582554805, 0.21701340930683, 0.21701340930683, 0.21701340930683, 0.2812075072920831, 0.2812075072920831, 0.2812075072920831, 0.26162571515917654, 0.26162571515917654, 0.26162571515917654, 0.34792210319047867, 0.34792210319047867, 0.34792210319047867, 0.2734421003816767, 0.2734421003816767, 0.2734421003816767, 0.3503064702433131, 0.3503064702433131, 0.3503064702433131, 0.10483784198561719, 0.10483784198561719, 0.10483784198561719, 0.15812376058978372, 0.15812376058978372, 0.15812376058978372, 0.14729780732255726, 0.14729780732255726, 0.14729780732255726, 0.24180220470404246, 0.24180220470404246, 0.24180220470404246, 0.2670037342752304, 0.2670037342752304, 0.2670037342752304, 0.24520765586340487, 0.24520765586340487, 0.24520765586340487, 0.5752225074339223, 0.5752225074339223, 0.5752225074339223, 0.5816708758974953, 0.5816708758974953, 0.5816708758974953, 0.59573918713466, 0.59573918713466, 0.59573918713466, 0.11828034023715861, 0.11828034023715861, 0.11828034023715861, 0.09508595933438102, 0.09508595933438102, 0.09508595933438102, 0.147086318662777, 0.147086318662777, 0.147086318662777, 0.17210704185091996, 0.17210704185091996, 0.17210704185091996, 0.14257870266734718, 0.14257870266734718, 0.14257870266734718, 0.18462594456484238, 0.18462594456484238, 0.18462594456484238, 0.3692965306676349, 0.3692965306676349, 0.3692965306676349, 0.40445394110968347, 0.40445394110968347, 0.40445394110968347, 0.4178603093698485, 0.4178603093698485, 0.4178603093698485, 0.2787951637252498, 0.2787951637252498, 0.2787951637252498, 0.2954784726989268, 0.2954784726989268, 0.2954784726989268, 0.3200364638729528, 0.3200364638729528, 0.3200364638729528, 0.1999078293634753, 0.1999078293634753, 0.1999078293634753, 0.17855905328626231, 0.17855905328626231, 0.17855905328626231, 0.19925572088087273, 0.19925572088087273, 0.19925572088087273, 0.2019170790603243, 0.2019170790603243, 0.2019170790603243, 0.2139481896895673, 0.2139481896895673, 0.2139481896895673, 0.3113089484786662, 0.3113089484786662, 0.3113089484786662, 0.19456576826193273, 0.19456576826193273, 0.19456576826193273, 0.6292008363216768, 0.6292008363216768, 0.6292008363216768, 0.1804554141554089, 0.1804554141554089, 0.1804554141554089, 0.16650965925047845, 0.16650965925047845, 0.16650965925047845, 0.20605901462967757, 0.20605901462967757, 0.20605901462967757, 0.15104708646839593, 0.15104708646839593, 0.15104708646839593, 0.1885819195097208, 0.1885819195097208, 0.1885819195097208, 0.18205338891616774, 0.18205338891616774, 0.18205338891616774, 0.18540588448093642, 0.18540588448093642, 0.18540588448093642, 0.08697500775267542, 0.08697500775267542, 0.08697500775267542, 0.07686298684563753, 0.07686298684563753, 0.07686298684563753, 0.099469426387366, 0.099469426387366, 0.099469426387366]}, "mutation_prompt": null}
{"id": "fa23e6cc-6dc8-4e23-aace-d059c05bde16", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 35  # Increased initial population size\n        self.min_population_size = 12\n        self.de_mutation_factor_min = 0.5  # Adaptive mutation factor\n        self.de_mutation_factor_max = 0.9\n        self.cr = 0.9  # Adjusted crossover rate\n        self.initial_temperature = 100.0  # Higher initial temperature for better exploration\n        self.temperature_decay = 0.93  # Adjusted decay for more gradual cooling\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            adaptive_factor = self.de_mutation_factor_min + (self.de_mutation_factor_max - self.de_mutation_factor_min) * (1 - evals_used / self.budget)\n            mutant = np.clip(a + adaptive_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "EnhancedHybridDE_SA with adaptive mutation strategy and improved cooling schedule for better exploration.", "configspace": "", "generation": 48, "fitness": 0.4245572805355248, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.25.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.7594653370576766, 0.7594653370576766, 0.7594653370576766, 0.7834572742172052, 0.7834572742172052, 0.7834572742172052, 0.7806485542672995, 0.7806485542672995, 0.7806485542672995, 0.6796494718863507, 0.6796494718863507, 0.6796494718863507, 0.6530163389600998, 0.6530163389600998, 0.6530163389600998, 0.6635478176171183, 0.6635478176171183, 0.6635478176171183, 0.4333428284520161, 0.4333428284520161, 0.4333428284520161, 0.2559536028811863, 0.2559536028811863, 0.2559536028811863, 0.15471492699751088, 0.15471492699751088, 0.15471492699751088, 0.11744466887950455, 0.11744466887950455, 0.11744466887950455, 0.13495613846390986, 0.13495613846390986, 0.13495613846390986, 0.19285595329346283, 0.19285595329346283, 0.19285595329346283, 0.9678425868133974, 0.9678425868133974, 0.9678425868133974, 0.9575543071397944, 0.9575543071397944, 0.9575543071397944, 0.9611155547545152, 0.9611155547545152, 0.9611155547545152, 0.5915448000706014, 0.5915448000706014, 0.5915448000706014, 0.5747247818356925, 0.5747247818356925, 0.5747247818356925, 0.5619356677707019, 0.5619356677707019, 0.5619356677707019, 0.723579554520607, 0.723579554520607, 0.723579554520607, 0.7614345075077177, 0.7614345075077177, 0.7614345075077177, 0.7639664046815177, 0.7639664046815177, 0.7639664046815177, 0.3787591721358704, 0.3787591721358704, 0.3787591721358704, 0.35307076963550166, 0.35307076963550166, 0.35307076963550166, 0.43159590197855546, 0.43159590197855546, 0.43159590197855546, 0.06651537849476741, 0.06651537849476741, 0.06651537849476741, 0.5682790426792594, 0.5682790426792594, 0.5682790426792594, 0.5017899596054238, 0.5017899596054238, 0.5017899596054238, 0.4220565181012119, 0.4220565181012119, 0.4220565181012119, 0.37445184470296744, 0.37445184470296744, 0.37445184470296744, 0.4486830985169834, 0.4486830985169834, 0.4486830985169834, 0.6010944917034189, 0.6010944917034189, 0.6010944917034189, 0.4577408782981245, 0.4577408782981245, 0.4577408782981245, 0.5801687222542872, 0.5801687222542872, 0.5801687222542872, 0.1399770600830882, 0.1399770600830882, 0.1399770600830882, 0.3275168382839301, 0.3275168382839301, 0.3275168382839301, 0.14085026439439807, 0.14085026439439807, 0.14085026439439807, 0.3818877985419714, 0.3818877985419714, 0.3818877985419714, 0.36957120399683396, 0.36957120399683396, 0.36957120399683396, 0.34925800298656096, 0.34925800298656096, 0.34925800298656096, 0.6219116669410676, 0.6219116669410676, 0.6219116669410676, 0.6967233624378146, 0.6967233624378146, 0.6967233624378146, 0.6492995571157778, 0.6492995571157778, 0.6492995571157778, 0.10315839059997522, 0.10315839059997522, 0.10315839059997522, 0.11773391949380407, 0.11773391949380407, 0.11773391949380407, 0.10053693034223543, 0.10053693034223543, 0.10053693034223543, 0.14139373638238906, 0.14139373638238906, 0.14139373638238906, 0.169537507330751, 0.169537507330751, 0.169537507330751, 0.154364756241829, 0.154364756241829, 0.154364756241829, 0.43569864105993683, 0.43569864105993683, 0.43569864105993683, 0.388305837547811, 0.388305837547811, 0.388305837547811, 0.4442229204244924, 0.4442229204244924, 0.4442229204244924, 0.31405246694189826, 0.31405246694189826, 0.31405246694189826, 0.37644567682829766, 0.37644567682829766, 0.37644567682829766, 0.33398789772117565, 0.33398789772117565, 0.33398789772117565, 0.20028336989136408, 0.20028336989136408, 0.20028336989136408, 0.18335350410874984, 0.18335350410874984, 0.18335350410874984, 0.18786187122238063, 0.18786187122238063, 0.18786187122238063, 0.5567376038244195, 0.5567376038244195, 0.5567376038244195, 0.18427266760127636, 0.18427266760127636, 0.18427266760127636, 0.18973891973203494, 0.18973891973203494, 0.18973891973203494, 0.7440017040586593, 0.7440017040586593, 0.7440017040586593, 0.7389694226305017, 0.7389694226305017, 0.7389694226305017, 0.7157321735067546, 0.7157321735067546, 0.7157321735067546, 0.1970328804510435, 0.1970328804510435, 0.1970328804510435, 0.6338942445121776, 0.6338942445121776, 0.6338942445121776, 0.7826146458171583, 0.7826146458171583, 0.7826146458171583, 0.19205644587601456, 0.19205644587601456, 0.19205644587601456, 0.19589593580072662, 0.19589593580072662, 0.19589593580072662, 0.227877544240648, 0.227877544240648, 0.227877544240648, 0.0739369450420807, 0.0739369450420807, 0.0739369450420807, 0.07385551354327924, 0.07385551354327924, 0.07385551354327924, 0.07661751482821655, 0.07661751482821655, 0.07661751482821655]}, "mutation_prompt": null}
{"id": "8dc78344-f03a-4aaa-b74d-1ca5c31daef0", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85  # Crossover rate\n        self.initial_temperature = 90.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive population and dynamic temperature scaling to improve optimization efficiency.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8468919310943874, 0.8468919310943874, 0.8468919310943874, 0.855326845256036, 0.855326845256036, 0.855326845256036, 0.840585818510729, 0.840585818510729, 0.840585818510729, 0.7421502225994087, 0.7421502225994087, 0.7421502225994087, 0.7565967426826964, 0.7565967426826964, 0.7565967426826964, 0.7529706990344701, 0.7529706990344701, 0.7529706990344701, 0.1426316867338121, 0.1426316867338121, 0.1426316867338121, 0.1393595997145456, 0.1393595997145456, 0.1393595997145456, 0.346361861358952, 0.346361861358952, 0.346361861358952, 0.12796918324697348, 0.12796918324697348, 0.12796918324697348, 0.12998578595405197, 0.12998578595405197, 0.12998578595405197, 0.4384317578292998, 0.4384317578292998, 0.4384317578292998, 0.9800275354110715, 0.9800275354110715, 0.9800275354110715, 0.9709783235644224, 0.9709783235644224, 0.9709783235644224, 0.9647029289037511, 0.9647029289037511, 0.9647029289037511, 0.6719250947414241, 0.6719250947414241, 0.6719250947414241, 0.6767349851271116, 0.6767349851271116, 0.6767349851271116, 0.6743179399450236, 0.6743179399450236, 0.6743179399450236, 0.7554426351222618, 0.7554426351222618, 0.7554426351222618, 0.8045587627588684, 0.8045587627588684, 0.8045587627588684, 0.789440049633421, 0.789440049633421, 0.789440049633421, 0.5599611561643695, 0.5599611561643695, 0.5599611561643695, 0.5312170838321281, 0.5312170838321281, 0.5312170838321281, 0.31069217560039875, 0.31069217560039875, 0.31069217560039875, 0.5705737337777981, 0.5705737337777981, 0.5705737337777981, 0.47093641060904434, 0.47093641060904434, 0.47093641060904434, 0.5354314122267088, 0.5354314122267088, 0.5354314122267088, 0.40209798712958045, 0.40209798712958045, 0.40209798712958045, 0.3642507993681433, 0.3642507993681433, 0.3642507993681433, 0.36548811236299594, 0.36548811236299594, 0.36548811236299594, 0.6010219767218168, 0.6010219767218168, 0.6010219767218168, 0.4609618964641864, 0.4609618964641864, 0.4609618964641864, 0.5761842567852868, 0.5761842567852868, 0.5761842567852868, 0.3364280873101432, 0.3364280873101432, 0.3364280873101432, 0.22436347168490534, 0.22436347168490534, 0.22436347168490534, 0.14370855196094, 0.14370855196094, 0.14370855196094, 0.3524508486544361, 0.3524508486544361, 0.3524508486544361, 0.42998297521643003, 0.42998297521643003, 0.42998297521643003, 0.40461796342897893, 0.40461796342897893, 0.40461796342897893, 0.767539242818753, 0.767539242818753, 0.767539242818753, 0.7820799575508199, 0.7820799575508199, 0.7820799575508199, 0.7721908539180269, 0.7721908539180269, 0.7721908539180269, 0.08871119087527446, 0.08871119087527446, 0.08871119087527446, 0.4523511087454457, 0.4523511087454457, 0.4523511087454457, 0.12192703851923581, 0.12192703851923581, 0.12192703851923581, 0.17742652326152386, 0.17742652326152386, 0.17742652326152386, 0.1691254363011272, 0.1691254363011272, 0.1691254363011272, 0.13695950957186487, 0.13695950957186487, 0.13695950957186487, 0.5120997367697984, 0.5120997367697984, 0.5120997367697984, 0.475690916960933, 0.475690916960933, 0.475690916960933, 0.6194688146950851, 0.6194688146950851, 0.6194688146950851, 0.3926061801832482, 0.3926061801832482, 0.3926061801832482, 0.38871989635931936, 0.38871989635931936, 0.38871989635931936, 0.4965386730534258, 0.4965386730534258, 0.4965386730534258, 0.17734482677275265, 0.17734482677275265, 0.17734482677275265, 0.20046836796037482, 0.20046836796037482, 0.20046836796037482, 0.21420361868707027, 0.21420361868707027, 0.21420361868707027, 0.20793856943168032, 0.20793856943168032, 0.20793856943168032, 0.5560334904990389, 0.5560334904990389, 0.5560334904990389, 0.5843537762800062, 0.5843537762800062, 0.5843537762800062, 0.839870673924596, 0.839870673924596, 0.839870673924596, 0.19313196633563656, 0.19313196633563656, 0.19313196633563656, 0.1648444773432981, 0.1648444773432981, 0.1648444773432981, 0.7458213972665602, 0.7458213972665602, 0.7458213972665602, 0.6615798603498275, 0.6615798603498275, 0.6615798603498275, 0.2115924792219348, 0.2115924792219348, 0.2115924792219348, 0.1908779716489688, 0.1908779716489688, 0.1908779716489688, 0.1807381678536618, 0.1807381678536618, 0.1807381678536618, 0.1927543441479429, 0.1927543441479429, 0.1927543441479429, 0.07136763679885338, 0.07136763679885338, 0.07136763679885338, 0.0804608614888177, 0.0804608614888177, 0.0804608614888177, 0.08823253071962422, 0.08823253071962422, 0.08823253071962422]}, "mutation_prompt": null}
{"id": "b7ecf3bc-3a3f-4703-bbab-6fe178a4500b", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85  # Crossover rate\n        self.initial_temperature = 90.0  # Initial temperature for simulated annealing\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adapt population size for gradual convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "Enhanced HybridDE_SA with adaptive population and dynamic temperature scaling to improve optimization efficiency.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.8468919310943874, 0.8468919310943874, 0.8468919310943874, 0.855326845256036, 0.855326845256036, 0.855326845256036, 0.840585818510729, 0.840585818510729, 0.840585818510729, 0.7421502225994087, 0.7421502225994087, 0.7421502225994087, 0.7565967426826964, 0.7565967426826964, 0.7565967426826964, 0.7529706990344701, 0.7529706990344701, 0.7529706990344701, 0.1426316867338121, 0.1426316867338121, 0.1426316867338121, 0.1393595997145456, 0.1393595997145456, 0.1393595997145456, 0.346361861358952, 0.346361861358952, 0.346361861358952, 0.12796918324697348, 0.12796918324697348, 0.12796918324697348, 0.12998578595405197, 0.12998578595405197, 0.12998578595405197, 0.4384317578292998, 0.4384317578292998, 0.4384317578292998, 0.9800275354110715, 0.9800275354110715, 0.9800275354110715, 0.9709783235644224, 0.9709783235644224, 0.9709783235644224, 0.9647029289037511, 0.9647029289037511, 0.9647029289037511, 0.6719250947414241, 0.6719250947414241, 0.6719250947414241, 0.6767349851271116, 0.6767349851271116, 0.6767349851271116, 0.6743179399450236, 0.6743179399450236, 0.6743179399450236, 0.7554426351222618, 0.7554426351222618, 0.7554426351222618, 0.8045587627588684, 0.8045587627588684, 0.8045587627588684, 0.789440049633421, 0.789440049633421, 0.789440049633421, 0.5599611561643695, 0.5599611561643695, 0.5599611561643695, 0.5312170838321281, 0.5312170838321281, 0.5312170838321281, 0.31069217560039875, 0.31069217560039875, 0.31069217560039875, 0.5705737337777981, 0.5705737337777981, 0.5705737337777981, 0.47093641060904434, 0.47093641060904434, 0.47093641060904434, 0.5354314122267088, 0.5354314122267088, 0.5354314122267088, 0.40209798712958045, 0.40209798712958045, 0.40209798712958045, 0.3642507993681433, 0.3642507993681433, 0.3642507993681433, 0.36548811236299594, 0.36548811236299594, 0.36548811236299594, 0.6010219767218168, 0.6010219767218168, 0.6010219767218168, 0.4609618964641864, 0.4609618964641864, 0.4609618964641864, 0.5761842567852868, 0.5761842567852868, 0.5761842567852868, 0.3364280873101432, 0.3364280873101432, 0.3364280873101432, 0.22436347168490534, 0.22436347168490534, 0.22436347168490534, 0.14370855196094, 0.14370855196094, 0.14370855196094, 0.3524508486544361, 0.3524508486544361, 0.3524508486544361, 0.42998297521643003, 0.42998297521643003, 0.42998297521643003, 0.40461796342897893, 0.40461796342897893, 0.40461796342897893, 0.767539242818753, 0.767539242818753, 0.767539242818753, 0.7820799575508199, 0.7820799575508199, 0.7820799575508199, 0.7721908539180269, 0.7721908539180269, 0.7721908539180269, 0.08871119087527446, 0.08871119087527446, 0.08871119087527446, 0.4523511087454457, 0.4523511087454457, 0.4523511087454457, 0.12192703851923581, 0.12192703851923581, 0.12192703851923581, 0.17742652326152386, 0.17742652326152386, 0.17742652326152386, 0.1691254363011272, 0.1691254363011272, 0.1691254363011272, 0.13695950957186487, 0.13695950957186487, 0.13695950957186487, 0.5120997367697984, 0.5120997367697984, 0.5120997367697984, 0.475690916960933, 0.475690916960933, 0.475690916960933, 0.6194688146950851, 0.6194688146950851, 0.6194688146950851, 0.3926061801832482, 0.3926061801832482, 0.3926061801832482, 0.38871989635931936, 0.38871989635931936, 0.38871989635931936, 0.4965386730534258, 0.4965386730534258, 0.4965386730534258, 0.17734482677275265, 0.17734482677275265, 0.17734482677275265, 0.20046836796037482, 0.20046836796037482, 0.20046836796037482, 0.21420361868707027, 0.21420361868707027, 0.21420361868707027, 0.20793856943168032, 0.20793856943168032, 0.20793856943168032, 0.5560334904990389, 0.5560334904990389, 0.5560334904990389, 0.5843537762800062, 0.5843537762800062, 0.5843537762800062, 0.839870673924596, 0.839870673924596, 0.839870673924596, 0.19313196633563656, 0.19313196633563656, 0.19313196633563656, 0.1648444773432981, 0.1648444773432981, 0.1648444773432981, 0.7458213972665602, 0.7458213972665602, 0.7458213972665602, 0.6615798603498275, 0.6615798603498275, 0.6615798603498275, 0.2115924792219348, 0.2115924792219348, 0.2115924792219348, 0.1908779716489688, 0.1908779716489688, 0.1908779716489688, 0.1807381678536618, 0.1807381678536618, 0.1807381678536618, 0.1927543441479429, 0.1927543441479429, 0.1927543441479429, 0.07136763679885338, 0.07136763679885338, 0.07136763679885338, 0.0804608614888177, 0.0804608614888177, 0.0804608614888177, 0.08823253071962422, 0.08823253071962422, 0.08823253071962422]}, "mutation_prompt": null}
{"id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 51, "fitness": 0.4752355598380899, "feedback": "The algorithm RefinedEnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": "b2766dcc-83c6-46f2-b4b0-36e7782fb75b", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "95ebb47f-5c01-4bbe-b0fa-ed7f2e14548d", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "0cc981e2-2030-43c5-880b-807e81edcfe8", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "41c7d96f-fd20-434d-ba7a-a5239d433724", "solution": "import numpy as np\n\nclass AdaptiveMultiPhaseDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30  # Increased initial population\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.55  # Adjusted for better exploration\n        self.cr = 0.85  # Crossover rate slightly decreased\n        self.initial_temperature = 120.0  # Higher initial temperature\n        self.temperature_decay = 0.92  # Adjusted decay rate\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n\n        # Sine chaotic map for initialization\n        population = np.sin(np.linspace(-np.pi, np.pi, population_size*self.dim)).reshape(population_size, self.dim)\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c) * np.tanh(temperature), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "AdaptiveMultiPhaseDE", "description": "Adaptive Multi-Phase Differential Evolution with Temperature-Controlled Mutation Enhancements for Robust Optimization.", "configspace": "", "generation": 54, "fitness": 0.08608265186627334, "feedback": "The algorithm AdaptiveMultiPhaseDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.18345260317410816, 0.18345260317410816, 0.18345260317410816, 0.14027006562864464, 0.14027006562864464, 0.14027006562864464, 0.15495816902091175, 0.15495816902091175, 0.15495816902091175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07035939594296814, 0.07035939594296814, 0.07035939594296814, 0.031050578677749407, 0.031050578677749407, 0.031050578677749407, 0.04512871364043203, 0.04512871364043203, 0.04512871364043203, 0.07066311002572478, 0.07066311002572478, 0.07066311002572478, 0.03563900292157429, 0.03563900292157429, 0.03563900292157429, 0.045818537533410364, 0.045818537533410364, 0.045818537533410364, 0.07449221899958369, 0.07449221899958369, 0.07449221899958369, 0.1826762339811807, 0.1826762339811807, 0.1826762339811807, 0.09164807667908303, 0.09164807667908303, 0.09164807667908303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03389628034351977, 0.03389628034351977, 0.03389628034351977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14354307279588374, 0.14354307279588374, 0.14354307279588374, 0.13150128715209264, 0.13150128715209264, 0.13150128715209264, 0.15439406611457418, 0.15439406611457418, 0.15439406611457418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04481120693950802, 0.04481120693950802, 0.04481120693950802, 0.07441325539571753, 0.07441325539571753, 0.07441325539571753, 0.08154684337552376, 0.08154684337552376, 0.08154684337552376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08902875658277787, 0.08902875658277787, 0.08902875658277787, 0.034521345075161136, 0.034521345075161136, 0.034521345075161136, 0.012484523968100958, 0.012484523968100958, 0.012484523968100958, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1732855196634271, 0.1732855196634271, 0.1732855196634271, 0.1697971189361731, 0.1697971189361731, 0.1697971189361731, 0.19978606284431755, 0.19978606284431755, 0.19978606284431755, 0.09122458253456167, 0.09122458253456167, 0.09122458253456167, 0.05428568842427084, 0.05428568842427084, 0.05428568842427084, 0.04650859664814122, 0.04650859664814122, 0.04650859664814122, 0.07860146586397909, 0.07860146586397909, 0.07860146586397909, 0.12492930041596195, 0.12492930041596195, 0.12492930041596195, 0.1523568083306298, 0.1523568083306298, 0.1523568083306298, 0.20333045810490336, 0.20333045810490336, 0.20333045810490336, 0.15937242075130964, 0.15937242075130964, 0.15937242075130964, 0.17189127932744142, 0.17189127932744142, 0.17189127932744142, 0.09314092736317126, 0.09314092736317126, 0.09314092736317126, 0.13360129841955715, 0.13360129841955715, 0.13360129841955715, 0.1025473897602065, 0.1025473897602065, 0.1025473897602065, 0.18064304143795995, 0.18064304143795995, 0.18064304143795995, 0.19027732552853105, 0.19027732552853105, 0.19027732552853105, 0.14674088934303542, 0.14674088934303542, 0.14674088934303542, 0.13650316238867743, 0.13650316238867743, 0.13650316238867743, 0.17625269254472498, 0.17625269254472498, 0.17625269254472498, 0.16563070855529183, 0.16563070855529183, 0.16563070855529183, 0.1402784202500439, 0.1402784202500439, 0.1402784202500439, 0.1248004968063473, 0.1248004968063473, 0.1248004968063473, 0.10011300533186807, 0.10011300533186807, 0.10011300533186807, 0.08959115184264066, 0.08959115184264066, 0.08959115184264066, 0.11241925771175376, 0.11241925771175376, 0.11241925771175376, 0.13941585875869755, 0.13941585875869755, 0.13941585875869755, 0.14514998108640464, 0.14514998108640464, 0.14514998108640464, 0.16635579639197218, 0.16635579639197218, 0.16635579639197218, 0.16269389186238037, 0.16269389186238037, 0.16269389186238037, 0.05232019547668332, 0.05232019547668332, 0.05232019547668332, 0.03478509798552609, 0.03478509798552609, 0.03478509798552609, 0.05132369971286066, 0.05132369971286066, 0.05132369971286066]}, "mutation_prompt": null}
{"id": "073fab42-e4e3-4552-83bb-4b6f4083f69b", "solution": "import numpy as np\n\nclass EnhancedChaoticDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85\n        self.initial_temperature = 80.0\n        self.temperature_decay = 0.92\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedChaoticDE_SA", "description": "Enhanced ChaoticDE_SA leverages adaptive mutation and cooling for diversified search and convergence.", "configspace": "", "generation": 55, "fitness": 0.43505853573967984, "feedback": "The algorithm EnhancedChaoticDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.8427779654704299, 0.8427779654704299, 0.8427779654704299, 0.8557241650521071, 0.8557241650521071, 0.8557241650521071, 0.8553046257229178, 0.8553046257229178, 0.8553046257229178, 0.7680219909492023, 0.7680219909492023, 0.7680219909492023, 0.758433518044415, 0.758433518044415, 0.758433518044415, 0.7613140134566345, 0.7613140134566345, 0.7613140134566345, 0.14500231666448749, 0.14500231666448749, 0.14500231666448749, 0.3479270225167701, 0.3479270225167701, 0.3479270225167701, 0.12515005677585744, 0.12515005677585744, 0.12515005677585744, 0.12274082449465717, 0.12274082449465717, 0.12274082449465717, 0.13032408357905356, 0.13032408357905356, 0.13032408357905356, 0.13467470550081018, 0.13467470550081018, 0.13467470550081018, 0.938392417420082, 0.938392417420082, 0.938392417420082, 0.9614132232569491, 0.9614132232569491, 0.9614132232569491, 0.971893677188605, 0.971893677188605, 0.971893677188605, 0.6535197953747947, 0.6535197953747947, 0.6535197953747947, 0.6556230942311452, 0.6556230942311452, 0.6556230942311452, 0.691741439344732, 0.691741439344732, 0.691741439344732, 0.8165077303698826, 0.8165077303698826, 0.8165077303698826, 0.8253340584038831, 0.8253340584038831, 0.8253340584038831, 0.8064911524799299, 0.8064911524799299, 0.8064911524799299, 0.25614557814131866, 0.25614557814131866, 0.25614557814131866, 0.4240270179583472, 0.4240270179583472, 0.4240270179583472, 0.6350332692555252, 0.6350332692555252, 0.6350332692555252, 0.25828713934619085, 0.25828713934619085, 0.25828713934619085, 0.565554449933647, 0.565554449933647, 0.565554449933647, 0.5635457099196715, 0.5635457099196715, 0.5635457099196715, 0.5566474882076593, 0.5566474882076593, 0.5566474882076593, 0.4129398578444695, 0.4129398578444695, 0.4129398578444695, 0.3783704749929082, 0.3783704749929082, 0.3783704749929082, 0.48905545424550156, 0.48905545424550156, 0.48905545424550156, 0.6427071142185644, 0.6427071142185644, 0.6427071142185644, 0.6138694261859944, 0.6138694261859944, 0.6138694261859944, 0.25091960816571846, 0.25091960816571846, 0.25091960816571846, 0.3542576771891628, 0.3542576771891628, 0.3542576771891628, 0.1476598940826649, 0.1476598940826649, 0.1476598940826649, 0.3884792876850869, 0.3884792876850869, 0.3884792876850869, 0.4498556184024909, 0.4498556184024909, 0.4498556184024909, 0.3671052028265275, 0.3671052028265275, 0.3671052028265275, 0.7570208317716546, 0.7570208317716546, 0.7570208317716546, 0.7701156720107472, 0.7701156720107472, 0.7701156720107472, 0.7014779893157383, 0.7014779893157383, 0.7014779893157383, 0.08535498841573375, 0.08535498841573375, 0.08535498841573375, 0.09036913372087418, 0.09036913372087418, 0.09036913372087418, 0.1108346680800052, 0.1108346680800052, 0.1108346680800052, 0.13903465568970863, 0.13903465568970863, 0.13903465568970863, 0.1419477786182899, 0.1419477786182899, 0.1419477786182899, 0.2190770066659351, 0.2190770066659351, 0.2190770066659351, 0.5772193383503, 0.5772193383503, 0.5772193383503, 0.570970389436084, 0.570970389436084, 0.570970389436084, 0.4675319974136446, 0.4675319974136446, 0.4675319974136446, 0.3678234756285773, 0.3678234756285773, 0.3678234756285773, 0.3434108246080314, 0.3434108246080314, 0.3434108246080314, 0.4186399359484483, 0.4186399359484483, 0.4186399359484483, 0.20129590521905538, 0.20129590521905538, 0.20129590521905538, 0.20432787515520123, 0.20432787515520123, 0.20432787515520123, 0.19711730034037855, 0.19711730034037855, 0.19711730034037855, 0.20305797083574018, 0.20305797083574018, 0.20305797083574018, 0.41398313563887035, 0.41398313563887035, 0.41398313563887035, 0.5038948525400867, 0.5038948525400867, 0.5038948525400867, 0.71428157066638, 0.71428157066638, 0.71428157066638, 0.16330773667388598, 0.16330773667388598, 0.16330773667388598, 0.6789140395086832, 0.6789140395086832, 0.6789140395086832, 0.20541494769451862, 0.20541494769451862, 0.20541494769451862, 0.16409020222670878, 0.16409020222670878, 0.16409020222670878, 0.20144578069712604, 0.20144578069712604, 0.20144578069712604, 0.18122562317310298, 0.18122562317310298, 0.18122562317310298, 0.1800482014867112, 0.1800482014867112, 0.1800482014867112, 0.18543004338848024, 0.18543004338848024, 0.18543004338848024, 0.07968713792128068, 0.07968713792128068, 0.07968713792128068, 0.08522281259199371, 0.08522281259199371, 0.08522281259199371, 0.07786860692617736, 0.07786860692617736, 0.07786860692617736]}, "mutation_prompt": null}
{"id": "3781554a-9020-4d10-b0c1-9a3009a1a928", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "4bdce7f1-bce1-4084-a654-75c78e408130", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "4975a631-293a-488a-8e3f-8979bfe2b45a", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "aeff291f-c54b-4247-b2d4-9e8b04f681de", "solution": "import numpy as np\n\nclass DynamicDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30  # Adjusted initial population\n        self.min_population_size = 10  # Adjusted minimum population\n        self.de_mutation_factor = 0.75  # Dynamic mutation factor\n        self.cr = 0.85  # Refined crossover rate\n        self.initial_temperature = 80.0  # Modified starting temperature\n        self.temperature_decay = 0.95  # Refined temperature decay\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        population = self.lower_bound + np.random.rand(population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "DynamicDE_SA", "description": "Revised DE_SA with dynamic mutation, diversification mechanisms, and refined temperature decay for enhanced exploration-exploitation balance.", "configspace": "", "generation": 59, "fitness": 0.43985498970806397, "feedback": "The algorithm DynamicDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.26.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.8380383998214874, 0.8380383998214874, 0.8380383998214874, 0.8453429026169466, 0.8453429026169466, 0.8453429026169466, 0.823196079831704, 0.823196079831704, 0.823196079831704, 0.7381344569935244, 0.7381344569935244, 0.7381344569935244, 0.7407573294522238, 0.7407573294522238, 0.7407573294522238, 0.7596994943844654, 0.7596994943844654, 0.7596994943844654, 0.14673011672408043, 0.14673011672408043, 0.14673011672408043, 0.5147026108340456, 0.5147026108340456, 0.5147026108340456, 0.14275752779290374, 0.14275752779290374, 0.14275752779290374, 0.1449726783460803, 0.1449726783460803, 0.1449726783460803, 0.1444108804251888, 0.1444108804251888, 0.1444108804251888, 0.13270017058357664, 0.13270017058357664, 0.13270017058357664, 0.9636757184114442, 0.9636757184114442, 0.9636757184114442, 0.9550025598292512, 0.9550025598292512, 0.9550025598292512, 0.9816426260790909, 0.9816426260790909, 0.9816426260790909, 0.6289875310592776, 0.6289875310592776, 0.6289875310592776, 0.676302883130359, 0.676302883130359, 0.676302883130359, 0.6527014669520387, 0.6527014669520387, 0.6527014669520387, 0.7506488271311351, 0.7506488271311351, 0.7506488271311351, 0.7382829906342971, 0.7382829906342971, 0.7382829906342971, 0.7555764584927076, 0.7555764584927076, 0.7555764584927076, 0.5834152795066705, 0.5834152795066705, 0.5834152795066705, 0.548583229146804, 0.548583229146804, 0.548583229146804, 0.5609080528179531, 0.5609080528179531, 0.5609080528179531, 0.5249195303246857, 0.5249195303246857, 0.5249195303246857, 0.5064074528192322, 0.5064074528192322, 0.5064074528192322, 0.4938231926431186, 0.4938231926431186, 0.4938231926431186, 0.3289733697244044, 0.3289733697244044, 0.3289733697244044, 0.45794532437116053, 0.45794532437116053, 0.45794532437116053, 0.35200349433391653, 0.35200349433391653, 0.35200349433391653, 0.49535483891699317, 0.49535483891699317, 0.49535483891699317, 0.4685583699369211, 0.4685583699369211, 0.4685583699369211, 0.5640512306976029, 0.5640512306976029, 0.5640512306976029, 0.1291660527129581, 0.1291660527129581, 0.1291660527129581, 0.21571267128351923, 0.21571267128351923, 0.21571267128351923, 0.16971253569716205, 0.16971253569716205, 0.16971253569716205, 0.32627385426843813, 0.32627385426843813, 0.32627385426843813, 0.35831039473326487, 0.35831039473326487, 0.35831039473326487, 0.3463749315019321, 0.3463749315019321, 0.3463749315019321, 0.7261424231982976, 0.7261424231982976, 0.7261424231982976, 0.700233328201805, 0.700233328201805, 0.700233328201805, 0.7440094892383957, 0.7440094892383957, 0.7440094892383957, 0.11641822629912679, 0.11641822629912679, 0.11641822629912679, 0.08883769708851974, 0.08883769708851974, 0.08883769708851974, 0.11924699234396774, 0.11924699234396774, 0.11924699234396774, 0.16436120112404295, 0.16436120112404295, 0.16436120112404295, 0.17705842276777894, 0.17705842276777894, 0.17705842276777894, 0.14731532193024754, 0.14731532193024754, 0.14731532193024754, 0.42942786880622763, 0.42942786880622763, 0.42942786880622763, 0.5243244857389914, 0.5243244857389914, 0.5243244857389914, 0.48755399382321607, 0.48755399382321607, 0.48755399382321607, 0.31961213681704126, 0.31961213681704126, 0.31961213681704126, 0.3662204707168586, 0.3662204707168586, 0.3662204707168586, 0.3336237977031232, 0.3336237977031232, 0.3336237977031232, 0.19803510784780143, 0.19803510784780143, 0.19803510784780143, 0.1923163391408912, 0.1923163391408912, 0.1923163391408912, 0.1773680604539951, 0.1773680604539951, 0.1773680604539951, 0.4519226776036409, 0.4519226776036409, 0.4519226776036409, 0.5681247896873034, 0.5681247896873034, 0.5681247896873034, 0.45856688926841793, 0.45856688926841793, 0.45856688926841793, 0.8498240199184364, 0.8498240199184364, 0.8498240199184364, 0.8200173850743868, 0.8200173850743868, 0.8200173850743868, 0.6393520878361749, 0.6393520878361749, 0.6393520878361749, 0.20280220218280853, 0.20280220218280853, 0.20280220218280853, 0.1598582471047415, 0.1598582471047415, 0.1598582471047415, 0.20828051254057256, 0.20828051254057256, 0.20828051254057256, 0.2054045624035128, 0.2054045624035128, 0.2054045624035128, 0.1778783503509781, 0.1778783503509781, 0.1778783503509781, 0.17701554387843843, 0.17701554387843843, 0.17701554387843843, 0.07515855892638623, 0.07515855892638623, 0.07515855892638623, 0.07784801079796166, 0.07784801079796166, 0.07784801079796166, 0.08064254320395625, 0.08064254320395625, 0.08064254320395625]}, "mutation_prompt": null}
{"id": "03d34431-316f-4ac5-a01c-9231e0d38569", "solution": "import numpy as np\n\nclass RefinedAdaptiveHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 6\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85\n        self.initial_temperature = 120.0\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedAdaptiveHybridOptimizer", "description": "A refined adaptive hybrid optimization algorithm leveraging chaotic initialization and dynamic parameter tuning for improved exploration and convergence efficiency.", "configspace": "", "generation": 60, "fitness": 0.43819300556967317, "feedback": "The algorithm RefinedAdaptiveHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.8464981830664533, 0.8464981830664533, 0.8464981830664533, 0.8665294115342674, 0.8665294115342674, 0.8665294115342674, 0.864607818022817, 0.864607818022817, 0.864607818022817, 0.7680219909492023, 0.7680219909492023, 0.7680219909492023, 0.758433518044415, 0.758433518044415, 0.758433518044415, 0.7613140134566345, 0.7613140134566345, 0.7613140134566345, 0.14216644572260684, 0.14216644572260684, 0.14216644572260684, 0.3311479356636411, 0.3311479356636411, 0.3311479356636411, 0.13722268337159238, 0.13722268337159238, 0.13722268337159238, 0.14982875922016448, 0.14982875922016448, 0.14982875922016448, 0.15109469953068377, 0.15109469953068377, 0.15109469953068377, 0.13466496170246522, 0.13466496170246522, 0.13466496170246522, 0.9760006014383117, 0.9760006014383117, 0.9760006014383117, 0.9433957882289091, 0.9433957882289091, 0.9433957882289091, 0.9738642507292107, 0.9738642507292107, 0.9738642507292107, 0.6535197953747947, 0.6535197953747947, 0.6535197953747947, 0.662446053825618, 0.662446053825618, 0.662446053825618, 0.691741439344732, 0.691741439344732, 0.691741439344732, 0.792180734497828, 0.792180734497828, 0.792180734497828, 0.8089003484667526, 0.8089003484667526, 0.8089003484667526, 0.8250615478957428, 0.8250615478957428, 0.8250615478957428, 0.25656996383867403, 0.25656996383867403, 0.25656996383867403, 0.4242363148605617, 0.4242363148605617, 0.4242363148605617, 0.6350332692555252, 0.6350332692555252, 0.6350332692555252, 0.25599679499314076, 0.25599679499314076, 0.25599679499314076, 0.565554449933647, 0.565554449933647, 0.565554449933647, 0.5635457099196715, 0.5635457099196715, 0.5635457099196715, 0.5566474882076593, 0.5566474882076593, 0.5566474882076593, 0.4131664706255377, 0.4131664706255377, 0.4131664706255377, 0.3741690653694133, 0.3741690653694133, 0.3741690653694133, 0.4882876495752566, 0.4882876495752566, 0.4882876495752566, 0.6427071142185644, 0.6427071142185644, 0.6427071142185644, 0.61427228996993, 0.61427228996993, 0.61427228996993, 0.25458307890711485, 0.25458307890711485, 0.25458307890711485, 0.3555923574284692, 0.3555923574284692, 0.3555923574284692, 0.14756347044729667, 0.14756347044729667, 0.14756347044729667, 0.3463094853383998, 0.3463094853383998, 0.3463094853383998, 0.4242184073645421, 0.4242184073645421, 0.4242184073645421, 0.35269987095742716, 0.35269987095742716, 0.35269987095742716, 0.6773024181504881, 0.6773024181504881, 0.6773024181504881, 0.772664692393265, 0.772664692393265, 0.772664692393265, 0.7552725442596633, 0.7552725442596633, 0.7552725442596633, 0.08438039072013037, 0.08438039072013037, 0.08438039072013037, 0.10186835729484478, 0.10186835729484478, 0.10186835729484478, 0.11083466804982911, 0.11083466804982911, 0.11083466804982911, 0.14519776943647722, 0.14519776943647722, 0.14519776943647722, 0.223636393005752, 0.223636393005752, 0.223636393005752, 0.16159668014338402, 0.16159668014338402, 0.16159668014338402, 0.45446401325164054, 0.45446401325164054, 0.45446401325164054, 0.47255134864611736, 0.47255134864611736, 0.47255134864611736, 0.6344645060178824, 0.6344645060178824, 0.6344645060178824, 0.38301210161344557, 0.38301210161344557, 0.38301210161344557, 0.35956651723187594, 0.35956651723187594, 0.35956651723187594, 0.4852398730690919, 0.4852398730690919, 0.4852398730690919, 0.20794585605855187, 0.20794585605855187, 0.20794585605855187, 0.17649536122292653, 0.17649536122292653, 0.17649536122292653, 0.19415490958911685, 0.19415490958911685, 0.19415490958911685, 0.2030579708357514, 0.2030579708357514, 0.2030579708357514, 0.409651923354336, 0.409651923354336, 0.409651923354336, 0.5038948525400867, 0.5038948525400867, 0.5038948525400867, 0.8614711151936294, 0.8614711151936294, 0.8614711151936294, 0.2026862293688022, 0.2026862293688022, 0.2026862293688022, 0.7413242696392504, 0.7413242696392504, 0.7413242696392504, 0.16620574126232057, 0.16620574126232057, 0.16620574126232057, 0.16157160639240153, 0.16157160639240153, 0.16157160639240153, 0.18282804480909898, 0.18282804480909898, 0.18282804480909898, 0.1904708927637303, 0.1904708927637303, 0.1904708927637303, 0.17634062772767045, 0.17634062772767045, 0.17634062772767045, 0.19324957134240317, 0.19324957134240317, 0.19324957134240317, 0.09182223621390662, 0.09182223621390662, 0.09182223621390662, 0.0712792265936616, 0.0712792265936616, 0.0712792265936616, 0.08359946152726383, 0.08359946152726383, 0.08359946152726383]}, "mutation_prompt": null}
{"id": "2075d99f-0476-4ed9-ae0f-acf6bb32ff89", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "1649eeb3-25ec-47d3-85a4-d1ee5cfc86c9", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "a7438bd3-54b2-4539-94cd-644d9dcdc06c", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "69578b54-0c67-41dd-9407-177d3fb2867f", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "c355142f-bc16-44f8-bfd5-ae7268516c45", "solution": "import numpy as np\n\nclass AdaptiveHybridDESA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.init_pop_size = 30\n        self.min_pop_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85\n        self.initial_temp = 120.0\n        self.temp_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        pop_size = self.init_pop_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = pop_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temp):\n            indices = list(range(pop_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temp\n        while evals_used < self.budget:\n            for i in range(pop_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temp_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            pop_size = max(self.min_pop_size, int(self.init_pop_size * (1 - evals_used / self.budget)))\n            population = population[:pop_size]\n            fitness = fitness[:pop_size]\n\n        return best_solution, best_fitness", "name": "AdaptiveHybridDESA", "description": "A novel adaptive DE-Simulated Annealing hybrid with improved exploration through stochastic perturbation and dynamic parameter adjustments.", "configspace": "", "generation": 65, "fitness": 0.4395778298504351, "feedback": "The algorithm AdaptiveHybridDESA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.8464981830664533, 0.8464981830664533, 0.8464981830664533, 0.8665294115342674, 0.8665294115342674, 0.8665294115342674, 0.864607818022817, 0.864607818022817, 0.864607818022817, 0.7680219909492023, 0.7680219909492023, 0.7680219909492023, 0.758433518044415, 0.758433518044415, 0.758433518044415, 0.7613140134566345, 0.7613140134566345, 0.7613140134566345, 0.14216644373525777, 0.14216644373525777, 0.14216644373525777, 0.3479270225167701, 0.3479270225167701, 0.3479270225167701, 0.13722268337159238, 0.13722268337159238, 0.13722268337159238, 0.14982875921979122, 0.14982875921979122, 0.14982875921979122, 0.15109469953067778, 0.15109469953067778, 0.15109469953067778, 0.13467470550081018, 0.13467470550081018, 0.13467470550081018, 0.9760006014383117, 0.9760006014383117, 0.9760006014383117, 0.9433957882289091, 0.9433957882289091, 0.9433957882289091, 0.9738642507292107, 0.9738642507292107, 0.9738642507292107, 0.6535197953747947, 0.6535197953747947, 0.6535197953747947, 0.662446053825618, 0.662446053825618, 0.662446053825618, 0.691741439344732, 0.691741439344732, 0.691741439344732, 0.792180734497828, 0.792180734497828, 0.792180734497828, 0.8089003484667526, 0.8089003484667526, 0.8089003484667526, 0.8250615478957428, 0.8250615478957428, 0.8250615478957428, 0.25614557814131866, 0.25614557814131866, 0.25614557814131866, 0.4240270179583472, 0.4240270179583472, 0.4240270179583472, 0.6350332692555252, 0.6350332692555252, 0.6350332692555252, 0.25828713934619085, 0.25828713934619085, 0.25828713934619085, 0.565554449933647, 0.565554449933647, 0.565554449933647, 0.5635457099196715, 0.5635457099196715, 0.5635457099196715, 0.5566474882076593, 0.5566474882076593, 0.5566474882076593, 0.4129398578444695, 0.4129398578444695, 0.4129398578444695, 0.3783704749929082, 0.3783704749929082, 0.3783704749929082, 0.48905545424550156, 0.48905545424550156, 0.48905545424550156, 0.6427071142185644, 0.6427071142185644, 0.6427071142185644, 0.6138694261859944, 0.6138694261859944, 0.6138694261859944, 0.25091960816571846, 0.25091960816571846, 0.25091960816571846, 0.3542576771891628, 0.3542576771891628, 0.3542576771891628, 0.1476598940826649, 0.1476598940826649, 0.1476598940826649, 0.34451605102916105, 0.34451605102916105, 0.34451605102916105, 0.4223815338064134, 0.4223815338064134, 0.4223815338064134, 0.35519108878592887, 0.35519108878592887, 0.35519108878592887, 0.6788011987672489, 0.6788011987672489, 0.6788011987672489, 0.772664692393265, 0.772664692393265, 0.772664692393265, 0.75541383703128, 0.75541383703128, 0.75541383703128, 0.08535498841573375, 0.08535498841573375, 0.08535498841573375, 0.10186835729484478, 0.10186835729484478, 0.10186835729484478, 0.1108346680800052, 0.1108346680800052, 0.1108346680800052, 0.14519776943647722, 0.14519776943647722, 0.14519776943647722, 0.223636393005752, 0.223636393005752, 0.223636393005752, 0.16159668014338402, 0.16159668014338402, 0.16159668014338402, 0.4544638134297784, 0.4544638134297784, 0.4544638134297784, 0.5213711868403264, 0.5213711868403264, 0.5213711868403264, 0.6346445602314534, 0.6346445602314534, 0.6346445602314534, 0.381934086992855, 0.381934086992855, 0.381934086992855, 0.349313496375967, 0.349313496375967, 0.349313496375967, 0.5219287327721802, 0.5219287327721802, 0.5219287327721802, 0.20794585605855187, 0.20794585605855187, 0.20794585605855187, 0.17649536122292653, 0.17649536122292653, 0.17649536122292653, 0.19415490958911685, 0.19415490958911685, 0.19415490958911685, 0.20305797083574018, 0.20305797083574018, 0.20305797083574018, 0.41398313563887035, 0.41398313563887035, 0.41398313563887035, 0.5038948525400867, 0.5038948525400867, 0.5038948525400867, 0.8614711151936294, 0.8614711151936294, 0.8614711151936294, 0.2026862293688022, 0.2026862293688022, 0.2026862293688022, 0.7413242696392504, 0.7413242696392504, 0.7413242696392504, 0.16620574126232057, 0.16620574126232057, 0.16620574126232057, 0.16157160639240153, 0.16157160639240153, 0.16157160639240153, 0.18282804480909898, 0.18282804480909898, 0.18282804480909898, 0.1904708927637303, 0.1904708927637303, 0.1904708927637303, 0.17780385544788258, 0.17780385544788258, 0.17780385544788258, 0.19324957134240317, 0.19324957134240317, 0.19324957134240317, 0.09182223621390662, 0.09182223621390662, 0.09182223621390662, 0.0712792265936616, 0.0712792265936616, 0.0712792265936616, 0.0837957710489593, 0.0837957710489593, 0.0837957710489593]}, "mutation_prompt": null}
{"id": "0bcfe0f9-b2e8-4d79-accc-a25192c56ce7", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "7e1bae9b-d7cf-4092-9b18-980a5943694c", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "034b57a1-ff1d-4445-8fc3-3c611644f1d0", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30  # Slightly larger initial population\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.75  # Adjusted mutation factor for better exploration\n        self.cr = 0.85  # Adjusted crossover rate for balance\n        self.initial_temperature = 120.0  # Higher starting temperature for diversity\n        self.temperature_decay = 0.95  # Slower decay for prolonged exploration\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Hybrid initialization for enhanced search space coverage\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            # Gradient-based local refinement for trial solution\n            gradient_step = 0.01 * np.sign(trial - population[target_idx])\n            trial = np.clip(trial + gradient_step, self.lower_bound, self.upper_bound)\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evals_used >= self.budget:\n                    break\n\n            # Dynamic adjustment of population size based on convergence\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n            temperature *= self.temperature_decay\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA", "description": "EnhancedHybridDE_SA with dynamic parameter tuning and gradient-based local refinement for improved convergence speed and accuracy.", "configspace": "", "generation": 68, "fitness": 0.2546677531856674, "feedback": "The algorithm EnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.4524159949990084, 0.4524159949990084, 0.4524159949990084, 0.45491110099409915, 0.45491110099409915, 0.45491110099409915, 0.4285494973884949, 0.4285494973884949, 0.4285494973884949, 0.13662927654168144, 0.13662927654168144, 0.13662927654168144, 0.12820306384147007, 0.12820306384147007, 0.12820306384147007, 0.14117030323449986, 0.14117030323449986, 0.14117030323449986, 0.11708110523647597, 0.11708110523647597, 0.11708110523647597, 0.11747341455871607, 0.11747341455871607, 0.11747341455871607, 0.13553869336367408, 0.13553869336367408, 0.13553869336367408, 0.11769128815752905, 0.11769128815752905, 0.11769128815752905, 0.1328933191676921, 0.1328933191676921, 0.1328933191676921, 0.11831222851045164, 0.11831222851045164, 0.11831222851045164, 0.9086453759978027, 0.9086453759978027, 0.9086453759978027, 0.9193453969570374, 0.9193453969570374, 0.9193453969570374, 0.9088125121403092, 0.9088125121403092, 0.9088125121403092, 0.31538642136825434, 0.31538642136825434, 0.31538642136825434, 0.3235197765033049, 0.3235197765033049, 0.3235197765033049, 0.33489798228500345, 0.33489798228500345, 0.33489798228500345, 0.6416122487558666, 0.6416122487558666, 0.6416122487558666, 0.6461212750575787, 0.6461212750575787, 0.6461212750575787, 0.6563962048679137, 0.6563962048679137, 0.6563962048679137, 0.2319091772847116, 0.2319091772847116, 0.2319091772847116, 0.2485674979189515, 0.2485674979189515, 0.2485674979189515, 0.24403615872381734, 0.24403615872381734, 0.24403615872381734, 0.30882461592112476, 0.30882461592112476, 0.30882461592112476, 0.27498411603323236, 0.27498411603323236, 0.27498411603323236, 0.28668088005804393, 0.28668088005804393, 0.28668088005804393, 0.18121368839195007, 0.18121368839195007, 0.18121368839195007, 0.18541127693581605, 0.18541127693581605, 0.18541127693581605, 0.14116141004057625, 0.14116141004057625, 0.14116141004057625, 0.19763333844590347, 0.19763333844590347, 0.19763333844590347, 0.17476408456329884, 0.17476408456329884, 0.17476408456329884, 0.20109504435204162, 0.20109504435204162, 0.20109504435204162, 0.07348422462941984, 0.07348422462941984, 0.07348422462941984, 0.05604951903664346, 0.05604951903664346, 0.05604951903664346, 0.07683746572979122, 0.07683746572979122, 0.07683746572979122, 0.1516123207207254, 0.1516123207207254, 0.1516123207207254, 0.17026449150922507, 0.17026449150922507, 0.17026449150922507, 0.22203091048870005, 0.22203091048870005, 0.22203091048870005, 0.4382122452265972, 0.4382122452265972, 0.4382122452265972, 0.397981960093184, 0.397981960093184, 0.397981960093184, 0.38661263690154624, 0.38661263690154624, 0.38661263690154624, 0.10343447240911063, 0.10343447240911063, 0.10343447240911063, 0.09874722917535705, 0.09874722917535705, 0.09874722917535705, 0.11130839638329848, 0.11130839638329848, 0.11130839638329848, 0.14236393093080568, 0.14236393093080568, 0.14236393093080568, 0.14830501251163242, 0.14830501251163242, 0.14830501251163242, 0.1702762446168492, 0.1702762446168492, 0.1702762446168492, 0.2858455505174863, 0.2858455505174863, 0.2858455505174863, 0.28000774984376764, 0.28000774984376764, 0.28000774984376764, 0.29950806195850244, 0.29950806195850244, 0.29950806195850244, 0.2479780745906307, 0.2479780745906307, 0.2479780745906307, 0.239948938606379, 0.239948938606379, 0.239948938606379, 0.24016053389004932, 0.24016053389004932, 0.24016053389004932, 0.17756127806136668, 0.17756127806136668, 0.17756127806136668, 0.18617023547144207, 0.18617023547144207, 0.18617023547144207, 0.17353946254992147, 0.17353946254992147, 0.17353946254992147, 0.28673246581608414, 0.28673246581608414, 0.28673246581608414, 0.19125251974146606, 0.19125251974146606, 0.19125251974146606, 0.2686243335452101, 0.2686243335452101, 0.2686243335452101, 0.1905687657924775, 0.1905687657924775, 0.1905687657924775, 0.17763811265277074, 0.17763811265277074, 0.17763811265277074, 0.15667692875111083, 0.15667692875111083, 0.15667692875111083, 0.1922401803704178, 0.1922401803704178, 0.1922401803704178, 0.18768957013107357, 0.18768957013107357, 0.18768957013107357, 0.20599868290374534, 0.20599868290374534, 0.20599868290374534, 0.1810847541246705, 0.1810847541246705, 0.1810847541246705, 0.18169382592929895, 0.18169382592929895, 0.18169382592929895, 0.18591733704900149, 0.18591733704900149, 0.18591733704900149, 0.08681424910829705, 0.08681424910829705, 0.08681424910829705, 0.07525413361168798, 0.07525413361168798, 0.07525413361168798, 0.07776365539198182, 0.07776365539198182, 0.07776365539198182]}, "mutation_prompt": null}
{"id": "c807488d-855f-4b68-9a78-14fde78f0a8a", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Chaos:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb, self.ub = -5.0, 5.0\n        self.pop_size = 30\n        self.min_pop_size = 10\n        self.mutation_factor = 0.7\n        self.cr = 0.85\n        self.temp_init = 120.0\n        self.temp_decay = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        pop_size, lb, ub = self.pop_size, self.lb, self.ub\n        population = np.random.uniform(lb, ub, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = pop_size\n\n        best_idx = np.argmin(fitness)\n        best_solution, best_fitness = population[best_idx], fitness[best_idx]\n\n        def de_mutation(target_idx):\n            indices = list(range(pop_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.mutation_factor * (b - c), lb, ub)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            return np.where(cross_points, mutant, population[target_idx])\n\n        temperature = self.temp_init\n        while evals_used < self.budget:\n            for i in range(pop_size):\n                trial = de_mutation(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i], fitness[i] = trial, trial_fitness\n                    if trial_fitness < best_fitness:\n                        best_solution, best_fitness = trial, trial_fitness\n\n                temperature *= self.temp_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            pop_size = max(self.min_pop_size, int(self.pop_size * (1 - evals_used / self.budget)))\n            population, fitness = population[:pop_size], fitness[:pop_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA_Chaos", "description": "Enhanced Hybrid DE-SA with chaos-based population control and adaptive mutation for improved convergence speed and robustness.", "configspace": "", "generation": 69, "fitness": 0.44176673512726955, "feedback": "The algorithm EnhancedHybridDE_SA_Chaos got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.8402162581377963, 0.8402162581377963, 0.8402162581377963, 0.8499369701633397, 0.8499369701633397, 0.8499369701633397, 0.8588906495321114, 0.8588906495321114, 0.8588906495321114, 0.7680219909492023, 0.7680219909492023, 0.7680219909492023, 0.758433518044415, 0.758433518044415, 0.758433518044415, 0.7613140134566345, 0.7613140134566345, 0.7613140134566345, 0.14500231666448749, 0.14500231666448749, 0.14500231666448749, 0.3479270225167701, 0.3479270225167701, 0.3479270225167701, 0.12515005677585744, 0.12515005677585744, 0.12515005677585744, 0.12274082449465717, 0.12274082449465717, 0.12274082449465717, 0.13032408357905356, 0.13032408357905356, 0.13032408357905356, 0.13467470550081018, 0.13467470550081018, 0.13467470550081018, 0.9796950127159801, 0.9796950127159801, 0.9796950127159801, 0.9710190326334444, 0.9710190326334444, 0.9710190326334444, 0.9714884492942261, 0.9714884492942261, 0.9714884492942261, 0.6535197953747947, 0.6535197953747947, 0.6535197953747947, 0.6556230942311452, 0.6556230942311452, 0.6556230942311452, 0.691741439344732, 0.691741439344732, 0.691741439344732, 0.8165077303698826, 0.8165077303698826, 0.8165077303698826, 0.8253340584038831, 0.8253340584038831, 0.8253340584038831, 0.8064911524799299, 0.8064911524799299, 0.8064911524799299, 0.25614557814131866, 0.25614557814131866, 0.25614557814131866, 0.4240270179583472, 0.4240270179583472, 0.4240270179583472, 0.6350332692555252, 0.6350332692555252, 0.6350332692555252, 0.25828713934619085, 0.25828713934619085, 0.25828713934619085, 0.565554449933647, 0.565554449933647, 0.565554449933647, 0.5635457099196715, 0.5635457099196715, 0.5635457099196715, 0.5566474882076593, 0.5566474882076593, 0.5566474882076593, 0.4129398578444695, 0.4129398578444695, 0.4129398578444695, 0.3783704749929082, 0.3783704749929082, 0.3783704749929082, 0.48905545424550156, 0.48905545424550156, 0.48905545424550156, 0.6427071142185644, 0.6427071142185644, 0.6427071142185644, 0.6138694261859944, 0.6138694261859944, 0.6138694261859944, 0.25091960816571846, 0.25091960816571846, 0.25091960816571846, 0.3542576771891628, 0.3542576771891628, 0.3542576771891628, 0.1476598940826649, 0.1476598940826649, 0.1476598940826649, 0.3884792876850869, 0.3884792876850869, 0.3884792876850869, 0.4498556184024909, 0.4498556184024909, 0.4498556184024909, 0.3671052028265275, 0.3671052028265275, 0.3671052028265275, 0.7737067026227019, 0.7737067026227019, 0.7737067026227019, 0.7701156720107472, 0.7701156720107472, 0.7701156720107472, 0.7127749293111315, 0.7127749293111315, 0.7127749293111315, 0.08535498841573375, 0.08535498841573375, 0.08535498841573375, 0.09036913372087418, 0.09036913372087418, 0.09036913372087418, 0.1108346680800052, 0.1108346680800052, 0.1108346680800052, 0.13903465568970863, 0.13903465568970863, 0.13903465568970863, 0.17685092311421136, 0.17685092311421136, 0.17685092311421136, 0.20793523461906616, 0.20793523461906616, 0.20793523461906616, 0.5772193383503, 0.5772193383503, 0.5772193383503, 0.5212952570884684, 0.5212952570884684, 0.5212952570884684, 0.6104535843871994, 0.6104535843871994, 0.6104535843871994, 0.3678234756285773, 0.3678234756285773, 0.3678234756285773, 0.4061098542116841, 0.4061098542116841, 0.4061098542116841, 0.4186399359484483, 0.4186399359484483, 0.4186399359484483, 0.19770359110654712, 0.19770359110654712, 0.19770359110654712, 0.21816823798495955, 0.21816823798495955, 0.21816823798495955, 0.19196113761056144, 0.19196113761056144, 0.19196113761056144, 0.20305797083574018, 0.20305797083574018, 0.20305797083574018, 0.41398313563887035, 0.41398313563887035, 0.41398313563887035, 0.5038948525400867, 0.5038948525400867, 0.5038948525400867, 0.71428157066638, 0.71428157066638, 0.71428157066638, 0.8198868281779801, 0.8198868281779801, 0.8198868281779801, 0.23076095090063087, 0.23076095090063087, 0.23076095090063087, 0.2065821357082518, 0.2065821357082518, 0.2065821357082518, 0.16409020222670878, 0.16409020222670878, 0.16409020222670878, 0.2076964898100948, 0.2076964898100948, 0.2076964898100948, 0.18857081304280265, 0.18857081304280265, 0.18857081304280265, 0.17539573291302335, 0.17539573291302335, 0.17539573291302335, 0.1869705484442068, 0.1869705484442068, 0.1869705484442068, 0.07968713792128068, 0.07968713792128068, 0.07968713792128068, 0.08225266448612345, 0.08225266448612345, 0.08225266448612345, 0.08523013268570034, 0.08523013268570034, 0.08523013268570034]}, "mutation_prompt": null}
{"id": "93c0782d-5ec0-445a-bd2b-cd67fd522370", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "2d82a27a-8b8a-40a4-ab7e-cb757b3c7ec5", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "6f9cb025-111e-460b-a7bc-f2dfc025e4f9", "solution": "import numpy as np\n\nclass EnhancedDE_SA_Gradient:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30  # Slight increase for diversity\n        self.min_population_size = 10  # Maintain minimum diversity\n        self.de_mutation_factor = 0.75  # Slightly increased for better exploration\n        self.cr = 0.8  # Adjusted crossover rate\n        self.initial_temperature = 120.0  # Higher initial temperature\n        self.temperature_decay = 0.9\n        self.gradient_step = 0.01  # Gradient-inspired step size\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization using log-uniform distribution\n        population = self.lower_bound + (self.upper_bound - self.lower_bound) * np.random.lognormal(0, 1, (population_size, self.dim))\n        population = np.clip(population, self.lower_bound, self.upper_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i)\n                # Gradient-inspired local search\n                local_trial = np.clip(trial + self.gradient_step * np.sign(best_solution - trial), self.lower_bound, self.upper_bound)\n                trial_fitness = func(local_trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = local_trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = local_trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adaptive population size control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedDE_SA_Gradient", "description": "Enhanced DE_SA with chaotic initialization, adaptive parameters, and gradient-inspired local search for improved exploration-exploitation balance.", "configspace": "", "generation": 72, "fitness": 0.2832294056711201, "feedback": "The algorithm EnhancedDE_SA_Gradient got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.18.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.6233122523401828, 0.6233122523401828, 0.6233122523401828, 0.6178493129953102, 0.6178493129953102, 0.6178493129953102, 0.6056212530322203, 0.6056212530322203, 0.6056212530322203, 0.1314315926773414, 0.1314315926773414, 0.1314315926773414, 0.20359857110377055, 0.20359857110377055, 0.20359857110377055, 0.169023015790972, 0.169023015790972, 0.169023015790972, 0.15551276341508968, 0.15551276341508968, 0.15551276341508968, 0.26884719271349855, 0.26884719271349855, 0.26884719271349855, 0.15979864273372368, 0.15979864273372368, 0.15979864273372368, 0.157723825867626, 0.157723825867626, 0.157723825867626, 0.12260908197045506, 0.12260908197045506, 0.12260908197045506, 0.15640601555112643, 0.15640601555112643, 0.15640601555112643, 0.3438809009666609, 0.3438809009666609, 0.3438809009666609, 0.33808385154535325, 0.33808385154535325, 0.33808385154535325, 0.38582948134447126, 0.38582948134447126, 0.38582948134447126, 0.4558991612807346, 0.4558991612807346, 0.4558991612807346, 0.49895180414744245, 0.49895180414744245, 0.49895180414744245, 0.4414292145424509, 0.4414292145424509, 0.4414292145424509, 0.7701601554909103, 0.7701601554909103, 0.7701601554909103, 0.7724254832828141, 0.7724254832828141, 0.7724254832828141, 0.367208617461969, 0.367208617461969, 0.367208617461969, 0.22140028516241195, 0.22140028516241195, 0.22140028516241195, 0.12288892005314778, 0.12288892005314778, 0.12288892005314778, 0.22348008862458324, 0.22348008862458324, 0.22348008862458324, 0.2186828467258901, 0.2186828467258901, 0.2186828467258901, 0.21511313270686672, 0.21511313270686672, 0.21511313270686672, 0.2317319936026465, 0.2317319936026465, 0.2317319936026465, 0.15989373207791835, 0.15989373207791835, 0.15989373207791835, 0.1539929764043465, 0.1539929764043465, 0.1539929764043465, 0.15086418166483695, 0.15086418166483695, 0.15086418166483695, 0.2092332693280714, 0.2092332693280714, 0.2092332693280714, 0.18118148427269065, 0.18118148427269065, 0.18118148427269065, 0.230432272630124, 0.230432272630124, 0.230432272630124, 0.05712543308733675, 0.05712543308733675, 0.05712543308733675, 0.07298912932099044, 0.07298912932099044, 0.07298912932099044, 0.09348221374280796, 0.09348221374280796, 0.09348221374280796, 0.18264188701374928, 0.18264188701374928, 0.18264188701374928, 0.19461250419255494, 0.19461250419255494, 0.19461250419255494, 0.21857450310672655, 0.21857450310672655, 0.21857450310672655, 0.5928467019305166, 0.5928467019305166, 0.5928467019305166, 0.5296509366483896, 0.5296509366483896, 0.5296509366483896, 0.5098362986860836, 0.5098362986860836, 0.5098362986860836, 0.11589193059060476, 0.11589193059060476, 0.11589193059060476, 0.09148049431126315, 0.09148049431126315, 0.09148049431126315, 0.1117391996579925, 0.1117391996579925, 0.1117391996579925, 0.15139068595061966, 0.15139068595061966, 0.15139068595061966, 0.24582361975594846, 0.24582361975594846, 0.24582361975594846, 0.2898009577740721, 0.2898009577740721, 0.2898009577740721, 0.3858190141925919, 0.3858190141925919, 0.3858190141925919, 0.3723695957398334, 0.3723695957398334, 0.3723695957398334, 0.37757318382868355, 0.37757318382868355, 0.37757318382868355, 0.2798236333646782, 0.2798236333646782, 0.2798236333646782, 0.28624205996990093, 0.28624205996990093, 0.28624205996990093, 0.31193413298603023, 0.31193413298603023, 0.31193413298603023, 0.18936088944381768, 0.18936088944381768, 0.18936088944381768, 0.19003410457305425, 0.19003410457305425, 0.19003410457305425, 0.19664098325615542, 0.19664098325615542, 0.19664098325615542, 0.22461262217883982, 0.22461262217883982, 0.22461262217883982, 0.34012437976805554, 0.34012437976805554, 0.34012437976805554, 0.36514004110322207, 0.36514004110322207, 0.36514004110322207, 0.16929457214565047, 0.16929457214565047, 0.16929457214565047, 0.7653540582107217, 0.7653540582107217, 0.7653540582107217, 0.17664521766120556, 0.17664521766120556, 0.17664521766120556, 0.16318647085133176, 0.16318647085133176, 0.16318647085133176, 0.7539571675862857, 0.7539571675862857, 0.7539571675862857, 0.4876979333166953, 0.4876979333166953, 0.4876979333166953, 0.1920350722221842, 0.1920350722221842, 0.1920350722221842, 0.20202014072934993, 0.20202014072934993, 0.20202014072934993, 0.20463109428257653, 0.20463109428257653, 0.20463109428257653, 0.08386723689780173, 0.08386723689780173, 0.08386723689780173, 0.06659435520334678, 0.06659435520334678, 0.06659435520334678, 0.0851753795313156, 0.0851753795313156, 0.0851753795313156]}, "mutation_prompt": null}
{"id": "c4aadbb6-280d-435a-a570-b656c48306ce", "solution": "import numpy as np\n\nclass HybridDE_SA_mod:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30  # Increased initial population for better diversity\n        self.min_population_size = 10  # Adjusted minimum population size\n        self.de_mutation_factor = 0.7  # Increased for stronger mutation\n        self.cr = 0.85  # Slightly lower crossover rate for stability\n        self.initial_temperature = 150.0  # Increased initial temperature for broader search\n        self.temperature_decay = 0.92  # Lower decay for slower cooling\n        self.laplace_scale = 0.5  # Scale factor for Laplace distribution\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Optimized chaotic initialization\n        population = np.random.laplace(0, self.laplace_scale, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Dynamic population control based on progress\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "HybridDE_SA_mod", "description": "HybridDE_SA_mod with optimized parameter tuning and improved convergence mechanisms for enhanced performance.", "configspace": "", "generation": 73, "fitness": 0.4556066341106273, "feedback": "The algorithm HybridDE_SA_mod got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.27.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.844407095811684, 0.844407095811684, 0.844407095811684, 0.8439673260279075, 0.8439673260279075, 0.8439673260279075, 0.850894886050247, 0.850894886050247, 0.850894886050247, 0.7631115060458667, 0.7631115060458667, 0.7631115060458667, 0.7627250892565453, 0.7627250892565453, 0.7627250892565453, 0.7673852690795179, 0.7673852690795179, 0.7673852690795179, 0.16107504570792586, 0.16107504570792586, 0.16107504570792586, 0.49030638166581264, 0.49030638166581264, 0.49030638166581264, 0.4999094468317009, 0.4999094468317009, 0.4999094468317009, 0.15410715438929745, 0.15410715438929745, 0.15410715438929745, 0.14444451459136654, 0.14444451459136654, 0.14444451459136654, 0.14864369880423323, 0.14864369880423323, 0.14864369880423323, 0.9380129847605059, 0.9380129847605059, 0.9380129847605059, 0.9432929414015176, 0.9432929414015176, 0.9432929414015176, 0.9756520956527452, 0.9756520956527452, 0.9756520956527452, 0.667320549206505, 0.667320549206505, 0.667320549206505, 0.6491679418350151, 0.6491679418350151, 0.6491679418350151, 0.6736048818683558, 0.6736048818683558, 0.6736048818683558, 0.8124933931588791, 0.8124933931588791, 0.8124933931588791, 0.8543826737326249, 0.8543826737326249, 0.8543826737326249, 0.7758915208238389, 0.7758915208238389, 0.7758915208238389, 0.5542405746386825, 0.5542405746386825, 0.5542405746386825, 0.28241217857531664, 0.28241217857531664, 0.28241217857531664, 0.5509523923962294, 0.5509523923962294, 0.5509523923962294, 0.3358903318738923, 0.3358903318738923, 0.3358903318738923, 0.29212864826619467, 0.29212864826619467, 0.29212864826619467, 0.23947680006044603, 0.23947680006044603, 0.23947680006044603, 0.3582921651201053, 0.3582921651201053, 0.3582921651201053, 0.4399379634931042, 0.4399379634931042, 0.4399379634931042, 0.40873443680582255, 0.40873443680582255, 0.40873443680582255, 0.42981488309086213, 0.42981488309086213, 0.42981488309086213, 0.5881353826940212, 0.5881353826940212, 0.5881353826940212, 0.6363279913130628, 0.6363279913130628, 0.6363279913130628, 0.13832358576731696, 0.13832358576731696, 0.13832358576731696, 0.32060375203471614, 0.32060375203471614, 0.32060375203471614, 0.18260671158818098, 0.18260671158818098, 0.18260671158818098, 0.3997896333502884, 0.3997896333502884, 0.3997896333502884, 0.37296836371594877, 0.37296836371594877, 0.37296836371594877, 0.3596823887906234, 0.3596823887906234, 0.3596823887906234, 0.6848069115610242, 0.6848069115610242, 0.6848069115610242, 0.757664448238336, 0.757664448238336, 0.757664448238336, 0.7742507433791906, 0.7742507433791906, 0.7742507433791906, 0.11959868713269917, 0.11959868713269917, 0.11959868713269917, 0.09201415464503893, 0.09201415464503893, 0.09201415464503893, 0.09484599535193405, 0.09484599535193405, 0.09484599535193405, 0.15284835181255296, 0.15284835181255296, 0.15284835181255296, 0.15070542059782166, 0.15070542059782166, 0.15070542059782166, 0.19275639376666143, 0.19275639376666143, 0.19275639376666143, 0.4886480971781505, 0.4886480971781505, 0.4886480971781505, 0.5037151319418385, 0.5037151319418385, 0.5037151319418385, 0.5179178316152, 0.5179178316152, 0.5179178316152, 0.43668001015154423, 0.43668001015154423, 0.43668001015154423, 0.3728183569820358, 0.3728183569820358, 0.3728183569820358, 0.36167141947201675, 0.36167141947201675, 0.36167141947201675, 0.18315260576377446, 0.18315260576377446, 0.18315260576377446, 0.2070590272173728, 0.2070590272173728, 0.2070590272173728, 0.19627499883059019, 0.19627499883059019, 0.19627499883059019, 0.6292927170539262, 0.6292927170539262, 0.6292927170539262, 0.21576143627117295, 0.21576143627117295, 0.21576143627117295, 0.22996679271836185, 0.22996679271836185, 0.22996679271836185, 0.17893866384071222, 0.17893866384071222, 0.17893866384071222, 0.7690107092976635, 0.7690107092976635, 0.7690107092976635, 0.7801340538153005, 0.7801340538153005, 0.7801340538153005, 0.7191418727953773, 0.7191418727953773, 0.7191418727953773, 0.7857641935084123, 0.7857641935084123, 0.7857641935084123, 0.8395021465993618, 0.8395021465993618, 0.8395021465993618, 0.1804373037746011, 0.1804373037746011, 0.1804373037746011, 0.17475241226577343, 0.17475241226577343, 0.17475241226577343, 0.18122238964275716, 0.18122238964275716, 0.18122238964275716, 0.07554537659725502, 0.07554537659725502, 0.07554537659725502, 0.06626197239622511, 0.06626197239622511, 0.06626197239622511, 0.07940244947357078, 0.07940244947357078, 0.07940244947357078]}, "mutation_prompt": null}
{"id": "670a33e5-f7fb-407d-b601-092f2b92eea9", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "aa942e17-c6c6-49bb-957d-a3173271a4f5", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "88ed4eb8-d9e6-4625-afd1-9a4ff0d25f57", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "4803d392-e5e7-4950-b8ae-4515de91ad69", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "967d466b-8f44-4d9c-a1fd-8fdc402ceb9e", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "a34a3013-d3cb-4670-9ade-50e0a37fdd16", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "0934b65a-b4c3-47a4-b256-0bd94b03ae8f", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30  # Increased initial population for better exploration\n        self.min_population_size = 10  # Slightly increased minimum population for robustness\n        self.de_mutation_factor = 0.75  # Enhanced DE mutation factor for larger steps\n        self.cr = 0.85  # Slightly reduced crossover rate for improved fine-tuning\n        self.initial_temperature = 80.0  # Adjusted starting temperature for balanced exploration\n        self.temperature_decay = 0.95  # Slower decay to maintain exploration longer\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Utilizing a logistic map for chaotic initialization\n        chaotic_sequence = np.mod(0.4 * np.arange(population_size * self.dim), 1.0)\n        population = chaotic_sequence.reshape(population_size, self.dim) * (self.upper_bound - self.lower_bound) + self.lower_bound\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            scale = (1.0 + np.exp(-fitness[target_idx])) / (1.0 + np.exp(-fitness))\n            mutant = np.clip(a + scale[target_idx] * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "ImprovedEnhancedHybridDE_SA", "description": "Improved EnhancedHybridDE_SA with novel chaotic sequences and adaptive mutation to balance exploration and exploitational efficiency.", "configspace": "", "generation": 80, "fitness": 0.0610829206342244, "feedback": "The algorithm ImprovedEnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.11.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.049072614982297647, 0.049072614982297647, 0.049072614982297647, 0.16230488030005485, 0.16230488030005485, 0.16230488030005485, 0.16129274457488485, 0.16129274457488485, 0.16129274457488485, 0.0336469306939714, 0.0336469306939714, 0.0336469306939714, 0.03678116021234401, 0.03678116021234401, 0.03678116021234401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042787713521510895, 0.042787713521510895, 0.042787713521510895, 0.02342591016596729, 0.02342591016596729, 0.02342591016596729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022426008008149423, 0.022426008008149423, 0.022426008008149423, 0.019779467120219163, 0.019779467120219163, 0.019779467120219163, 0.0831906159546204, 0.0831906159546204, 0.0831906159546204, 0.08163682751595791, 0.08163682751595791, 0.08163682751595791, 0.8212633317067215, 0.8212633317067215, 0.8212633317067215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006262108469579308, 0.006262108469579308, 0.006262108469579308, 0.026066924985623685, 0.026066924985623685, 0.026066924985623685, 0.027363418031613018, 0.027363418031613018, 0.027363418031613018, 0.011240901451992302, 0.011240901451992302, 0.011240901451992302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013982944031143751, 0.013982944031143751, 0.013982944031143751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0275005269773706, 0.0275005269773706, 0.0275005269773706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06374219587412444, 0.06374219587412444, 0.06374219587412444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0393531675824319, 0.0393531675824319, 0.0393531675824319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06599338198522453, 0.06599338198522453, 0.06599338198522453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041386683956363024, 0.041386683956363024, 0.041386683956363024, 0.12648678221503196, 0.12648678221503196, 0.12648678221503196, 0.05266880385185502, 0.05266880385185502, 0.05266880385185502, 0.08762606439965581, 0.08762606439965581, 0.08762606439965581, 0.04314846408263662, 0.04314846408263662, 0.04314846408263662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14425844701675283, 0.14425844701675283, 0.14425844701675283, 0.11838019899506258, 0.11838019899506258, 0.11838019899506258, 0.1213714537044791, 0.1213714537044791, 0.1213714537044791, 0.032524802856896184, 0.032524802856896184, 0.032524802856896184, 0.023605107426550975, 0.023605107426550975, 0.023605107426550975, 0.19420467649255024, 0.19420467649255024, 0.19420467649255024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054506516946146055, 0.054506516946146055, 0.054506516946146055, 0.1897301474664851, 0.1897301474664851, 0.1897301474664851, 0.09921605686003276, 0.09921605686003276, 0.09921605686003276, 0.028212839563315883, 0.028212839563315883, 0.028212839563315883, 0.12391597415106392, 0.12391597415106392, 0.12391597415106392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389758946562586, 0.1389758946562586, 0.1389758946562586, 0.10157577622044933, 0.10157577622044933, 0.10157577622044933, 0.08356510215802082, 0.08356510215802082, 0.08356510215802082, 0.01263882117852122, 0.01263882117852122, 0.01263882117852122, 0.09310590936898666, 0.09310590936898666, 0.09310590936898666, 0.06615027205190727, 0.06615027205190727, 0.06615027205190727, 0.18214376900576612, 0.18214376900576612, 0.18214376900576612, 0.26929555225830004, 0.26929555225830004, 0.26929555225830004, 0.1322812272381818, 0.1322812272381818, 0.1322812272381818, 0.015381167397084394, 0.015381167397084394, 0.015381167397084394, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05]}, "mutation_prompt": null}
{"id": "b1e8ecc0-e985-40a7-8e7e-2593c9c978f7", "solution": "import numpy as np\n\nclass EnhancedHybridDE_SA_Levy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85\n        self.initial_temperature = 120.0\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def levy_flight(Lambda):\n            sigma = (np.math.gamma(1 + Lambda) * np.sin(np.pi * Lambda / 2) / \n                    (np.math.gamma((1 + Lambda) / 2) * Lambda * 2**((Lambda - 1) / 2)))**(1 / Lambda)\n            u = np.random.normal(0, sigma, size=self.dim)\n            v = np.random.normal(0, 1, size=self.dim)\n            step = u / np.abs(v)**(1 / Lambda)\n            return step\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c) + levy_flight(1.5), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_SA_Levy", "description": "EnhancedHybridDE_SA with Levy flight-based exploration and adaptive cooling, balancing exploration and exploitation for improved optimization.", "configspace": "", "generation": 81, "fitness": 0.1679419272753344, "feedback": "The algorithm EnhancedHybridDE_SA_Levy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.3023662943811599, 0.3023662943811599, 0.3023662943811599, 0.3026978538728069, 0.3026978538728069, 0.3026978538728069, 0.31442285644416756, 0.31442285644416756, 0.31442285644416756, 0.007243918906640445, 0.007243918906640445, 0.007243918906640445, 0.0009025450998894069, 0.0009025450998894069, 0.0009025450998894069, 0.020817248352441364, 0.020817248352441364, 0.020817248352441364, 0.08062534760772211, 0.08062534760772211, 0.08062534760772211, 0.07681762558825556, 0.07681762558825556, 0.07681762558825556, 0.07884250849800556, 0.07884250849800556, 0.07884250849800556, 0.0833113181178754, 0.0833113181178754, 0.0833113181178754, 0.0762147714507424, 0.0762147714507424, 0.0762147714507424, 0.07601448109158282, 0.07601448109158282, 0.07601448109158282, 0.971334710613464, 0.971334710613464, 0.971334710613464, 0.9654901052981023, 0.9654901052981023, 0.9654901052981023, 0.9798581199439671, 0.9798581199439671, 0.9798581199439671, 0.16567732268341262, 0.16567732268341262, 0.16567732268341262, 0.15854450173287582, 0.15854450173287582, 0.15854450173287582, 0.1501127432682794, 0.1501127432682794, 0.1501127432682794, 0.21236017258064277, 0.21236017258064277, 0.21236017258064277, 0.19408929531260932, 0.19408929531260932, 0.19408929531260932, 0.19236610259481846, 0.19236610259481846, 0.19236610259481846, 0.089027773052333, 0.089027773052333, 0.089027773052333, 0.10234130879575676, 0.10234130879575676, 0.10234130879575676, 0.07129041437353245, 0.07129041437353245, 0.07129041437353245, 0.04354411263616653, 0.04354411263616653, 0.04354411263616653, 0.09154689041711206, 0.09154689041711206, 0.09154689041711206, 0.061996711574172525, 0.061996711574172525, 0.061996711574172525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042620846068494256, 0.042620846068494256, 0.042620846068494256, 0.035797916772117966, 0.035797916772117966, 0.035797916772117966, 0.060974838464096126, 0.060974838464096126, 0.060974838464096126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03447985959522992, 0.03447985959522992, 0.03447985959522992, 0.0203014586491872, 0.0203014586491872, 0.0203014586491872, 0.037973296232174825, 0.037973296232174825, 0.037973296232174825, 0.3073936212850702, 0.3073936212850702, 0.3073936212850702, 0.29059473664211144, 0.29059473664211144, 0.29059473664211144, 0.29350229571995234, 0.29350229571995234, 0.29350229571995234, 0.080163637836966, 0.080163637836966, 0.080163637836966, 0.08148992532280286, 0.08148992532280286, 0.08148992532280286, 0.06648183171503608, 0.06648183171503608, 0.06648183171503608, 0.13137929869366638, 0.13137929869366638, 0.13137929869366638, 0.15838501296721186, 0.15838501296721186, 0.15838501296721186, 0.14704459225583555, 0.14704459225583555, 0.14704459225583555, 0.2172313371007918, 0.2172313371007918, 0.2172313371007918, 0.21756822122820219, 0.21756822122820219, 0.21756822122820219, 0.22109968540506741, 0.22109968540506741, 0.22109968540506741, 0.15045004812635265, 0.15045004812635265, 0.15045004812635265, 0.14465919279723527, 0.14465919279723527, 0.14465919279723527, 0.15821865112525724, 0.15821865112525724, 0.15821865112525724, 0.1776790955908364, 0.1776790955908364, 0.1776790955908364, 0.17476006446695425, 0.17476006446695425, 0.17476006446695425, 0.18161997684443665, 0.18161997684443665, 0.18161997684443665, 0.17436203184400512, 0.17436203184400512, 0.17436203184400512, 0.16736484888294256, 0.16736484888294256, 0.16736484888294256, 0.17545637942889003, 0.17545637942889003, 0.17545637942889003, 0.30810537808750005, 0.30810537808750005, 0.30810537808750005, 0.28228667652215966, 0.28228667652215966, 0.28228667652215966, 0.16638487488686082, 0.16638487488686082, 0.16638487488686082, 0.17234721565868427, 0.17234721565868427, 0.17234721565868427, 0.26377710884041583, 0.26377710884041583, 0.26377710884041583, 0.3214169033144123, 0.3214169033144123, 0.3214169033144123, 0.18039988167914178, 0.18039988167914178, 0.18039988167914178, 0.17399828737307088, 0.17399828737307088, 0.17399828737307088, 0.19699861091080706, 0.19699861091080706, 0.19699861091080706, 0.06631125938890159, 0.06631125938890159, 0.06631125938890159, 0.06154876322450198, 0.06154876322450198, 0.06154876322450198, 0.07873404858816224, 0.07873404858816224, 0.07873404858816224]}, "mutation_prompt": null}
{"id": "5e1e608f-678b-41e1-88e4-d6ee0c2a7b9f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85\n        self.initial_temperature = 120.0\n        self.temperature_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        population = np.tanh(np.random.normal(0, 1, (population_size, self.dim))) \n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * np.exp(-evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedAdaptiveDE_SA", "description": "Enhanced DE-SA algorithm with dynamic adaptive parameters and chaos-based initialization for improved efficiency.", "configspace": "", "generation": 82, "fitness": 0.43854992200247844, "feedback": "The algorithm EnhancedAdaptiveDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.26.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.8454297606543195, 0.8454297606543195, 0.8454297606543195, 0.8565059454843694, 0.8565059454843694, 0.8565059454843694, 0.8519802720857221, 0.8519802720857221, 0.8519802720857221, 0.7561698324715209, 0.7561698324715209, 0.7561698324715209, 0.7373673008714718, 0.7373673008714718, 0.7373673008714718, 0.762290391177693, 0.762290391177693, 0.762290391177693, 0.1465635749678713, 0.1465635749678713, 0.1465635749678713, 0.1300164323051184, 0.1300164323051184, 0.1300164323051184, 0.3458758824035304, 0.3458758824035304, 0.3458758824035304, 0.24279489305127167, 0.24279489305127167, 0.24279489305127167, 0.12798134246297155, 0.12798134246297155, 0.12798134246297155, 0.11740028285655113, 0.11740028285655113, 0.11740028285655113, 0.9545971938037764, 0.9545971938037764, 0.9545971938037764, 0.9474676407695927, 0.9474676407695927, 0.9474676407695927, 0.9640562798773661, 0.9640562798773661, 0.9640562798773661, 0.614164371196957, 0.614164371196957, 0.614164371196957, 0.651212554258466, 0.651212554258466, 0.651212554258466, 0.6692287239131955, 0.6692287239131955, 0.6692287239131955, 0.8087833637817724, 0.8087833637817724, 0.8087833637817724, 0.7645833705959151, 0.7645833705959151, 0.7645833705959151, 0.7903076739644945, 0.7903076739644945, 0.7903076739644945, 0.4818378823449344, 0.4818378823449344, 0.4818378823449344, 0.533671752347673, 0.533671752347673, 0.533671752347673, 0.5449306668155323, 0.5449306668155323, 0.5449306668155323, 0.46394328455445866, 0.46394328455445866, 0.46394328455445866, 0.5083993172244237, 0.5083993172244237, 0.5083993172244237, 0.5142688912006539, 0.5142688912006539, 0.5142688912006539, 0.4990984455109003, 0.4990984455109003, 0.4990984455109003, 0.4792159284914633, 0.4792159284914633, 0.4792159284914633, 0.4445272266793704, 0.4445272266793704, 0.4445272266793704, 0.5340456522984425, 0.5340456522984425, 0.5340456522984425, 0.5494353201255187, 0.5494353201255187, 0.5494353201255187, 0.6183338624695814, 0.6183338624695814, 0.6183338624695814, 0.17385287377094572, 0.17385287377094572, 0.17385287377094572, 0.3147827531167422, 0.3147827531167422, 0.3147827531167422, 0.14901711402027484, 0.14901711402027484, 0.14901711402027484, 0.3617250751598846, 0.3617250751598846, 0.3617250751598846, 0.3941484621464587, 0.3941484621464587, 0.3941484621464587, 0.3525514784784205, 0.3525514784784205, 0.3525514784784205, 0.7651227105141518, 0.7651227105141518, 0.7651227105141518, 0.757541207372447, 0.757541207372447, 0.757541207372447, 0.7615071400207927, 0.7615071400207927, 0.7615071400207927, 0.11613678139896533, 0.11613678139896533, 0.11613678139896533, 0.09916528751750042, 0.09916528751750042, 0.09916528751750042, 0.09583507213235076, 0.09583507213235076, 0.09583507213235076, 0.1658926061405751, 0.1658926061405751, 0.1658926061405751, 0.1513939182487768, 0.1513939182487768, 0.1513939182487768, 0.2192000188726987, 0.2192000188726987, 0.2192000188726987, 0.4998965955324861, 0.4998965955324861, 0.4998965955324861, 0.4935673008801469, 0.4935673008801469, 0.4935673008801469, 0.6047998743322037, 0.6047998743322037, 0.6047998743322037, 0.31194670491503385, 0.31194670491503385, 0.31194670491503385, 0.35203010427760106, 0.35203010427760106, 0.35203010427760106, 0.43131409748851346, 0.43131409748851346, 0.43131409748851346, 0.2002945304399052, 0.2002945304399052, 0.2002945304399052, 0.1867553340194027, 0.1867553340194027, 0.1867553340194027, 0.20597673337350353, 0.20597673337350353, 0.20597673337350353, 0.5451929531732014, 0.5451929531732014, 0.5451929531732014, 0.45052125589358594, 0.45052125589358594, 0.45052125589358594, 0.2067818852714468, 0.2067818852714468, 0.2067818852714468, 0.18246002185976762, 0.18246002185976762, 0.18246002185976762, 0.20105693164179872, 0.20105693164179872, 0.20105693164179872, 0.7945647182183184, 0.7945647182183184, 0.7945647182183184, 0.2007927522404166, 0.2007927522404166, 0.2007927522404166, 0.6115521577426739, 0.6115521577426739, 0.6115521577426739, 0.20744561027429653, 0.20744561027429653, 0.20744561027429653, 0.1771977428620607, 0.1771977428620607, 0.1771977428620607, 0.1681530970511651, 0.1681530970511651, 0.1681530970511651, 0.17405409446250053, 0.17405409446250053, 0.17405409446250053, 0.08883967950111527, 0.08883967950111527, 0.08883967950111527, 0.07383089390861264, 0.07383089390861264, 0.07383089390861264, 0.07221150289081202, 0.07221150289081202, 0.07221150289081202]}, "mutation_prompt": null}
{"id": "3315e943-c337-4d93-964d-ba1e8bac65b3", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "740aee9f-b043-45d0-bb3d-e66f70c5d89c", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "e571b6b3-ae61-4600-90fd-2aa5eaacead0", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "8a529993-4c00-427a-8bb7-698bfa32eb7f", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "0e356d85-003c-4513-984f-dc52b60f4e3f", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "19df34e9-edea-4914-b6f8-fbf893738a8b", "solution": "import numpy as np\n\nclass EnhancedHybridDE_AdaptiveMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30  # Increased initial population for better diversity\n        self.min_population_size = 10  # Higher minimum population size for robustness\n        self.initial_de_mutation_factor = 0.7  # Adaptive mutation factor starting point\n        self.cr = 0.85  # Adjusted crossover rate for enhanced exploration\n        self.initial_temperature = 120.0  # Higher initial temperature for broader exploration\n        self.temperature_decay = 0.95  # Slower decay for sustained exploration\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, de_mutation_factor):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            de_mutation_factor = self.initial_de_mutation_factor * (1 - evals_used / self.budget) + 0.4  # Adaptive factor\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, de_mutation_factor)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - 0.5 * (evals_used / self.budget))))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "EnhancedHybridDE_AdaptiveMutation", "description": "Enhanced Hybrid DE with adaptive mutation factor and modified population dynamics for improved efficiency.", "configspace": "", "generation": 88, "fitness": 0.34118786249367, "feedback": "The algorithm EnhancedHybridDE_AdaptiveMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.7254673432956814, 0.7254673432956814, 0.7254673432956814, 0.7616128170383961, 0.7616128170383961, 0.7616128170383961, 0.7478187150354274, 0.7478187150354274, 0.7478187150354274, 0.5855185763386719, 0.5855185763386719, 0.5855185763386719, 0.599645863084995, 0.599645863084995, 0.599645863084995, 0.5990842160640188, 0.5990842160640188, 0.5990842160640188, 0.13746568605451503, 0.13746568605451503, 0.13746568605451503, 0.1458950081355932, 0.1458950081355932, 0.1458950081355932, 0.4011240276151501, 0.4011240276151501, 0.4011240276151501, 0.10424954929213182, 0.10424954929213182, 0.10424954929213182, 0.132492150087562, 0.132492150087562, 0.132492150087562, 0.19544670453231217, 0.19544670453231217, 0.19544670453231217, 0.987908795362318, 0.987908795362318, 0.987908795362318, 0.9797356193848696, 0.9797356193848696, 0.9797356193848696, 0.9812651530836107, 0.9812651530836107, 0.9812651530836107, 0.5017937961039649, 0.5017937961039649, 0.5017937961039649, 0.46919035313124124, 0.46919035313124124, 0.46919035313124124, 0.49145022258648063, 0.49145022258648063, 0.49145022258648063, 0.6153119810037142, 0.6153119810037142, 0.6153119810037142, 0.6103915798008515, 0.6103915798008515, 0.6103915798008515, 0.5927010232232213, 0.5927010232232213, 0.5927010232232213, 0.2558118422372857, 0.2558118422372857, 0.2558118422372857, 0.2856583115291248, 0.2856583115291248, 0.2856583115291248, 0.20902749758236683, 0.20902749758236683, 0.20902749758236683, 0.021817485462612196, 0.021817485462612196, 0.021817485462612196, 0.4069403791696724, 0.4069403791696724, 0.4069403791696724, 0.4237921677239377, 0.4237921677239377, 0.4237921677239377, 0.328835469992542, 0.328835469992542, 0.328835469992542, 0.29962893447258276, 0.29962893447258276, 0.29962893447258276, 0.3580117266881979, 0.3580117266881979, 0.3580117266881979, 0.31752290230596447, 0.31752290230596447, 0.31752290230596447, 0.39679771469223757, 0.39679771469223757, 0.39679771469223757, 0.4589128598820378, 0.4589128598820378, 0.4589128598820378, 0.10612967105950899, 0.10612967105950899, 0.10612967105950899, 0.11359140045489369, 0.11359140045489369, 0.11359140045489369, 0.08347941062711328, 0.08347941062711328, 0.08347941062711328, 0.2792129708798573, 0.2792129708798573, 0.2792129708798573, 0.27785773932369673, 0.27785773932369673, 0.27785773932369673, 0.25396205738168787, 0.25396205738168787, 0.25396205738168787, 0.5921197935120528, 0.5921197935120528, 0.5921197935120528, 0.6368561837281647, 0.6368561837281647, 0.6368561837281647, 0.6066285033533617, 0.6066285033533617, 0.6066285033533617, 0.14335560996456953, 0.14335560996456953, 0.14335560996456953, 0.0917920819173349, 0.0917920819173349, 0.0917920819173349, 0.08592469793749336, 0.08592469793749336, 0.08592469793749336, 0.20999352543240024, 0.20999352543240024, 0.20999352543240024, 0.2616429594922628, 0.2616429594922628, 0.2616429594922628, 0.24826190716631247, 0.24826190716631247, 0.24826190716631247, 0.37141871356253064, 0.37141871356253064, 0.37141871356253064, 0.3811827712788175, 0.3811827712788175, 0.3811827712788175, 0.3909613057350938, 0.3909613057350938, 0.3909613057350938, 0.2699050946569208, 0.2699050946569208, 0.2699050946569208, 0.26607051983759245, 0.26607051983759245, 0.26607051983759245, 0.2933772337877446, 0.2933772337877446, 0.2933772337877446, 0.17425169348102132, 0.17425169348102132, 0.17425169348102132, 0.1927689201911006, 0.1927689201911006, 0.1927689201911006, 0.16268461941337387, 0.16268461941337387, 0.16268461941337387, 0.22882912633802222, 0.22882912633802222, 0.22882912633802222, 0.39857087381870593, 0.39857087381870593, 0.39857087381870593, 0.4100982593115654, 0.4100982593115654, 0.4100982593115654, 0.1891996775488255, 0.1891996775488255, 0.1891996775488255, 0.1807976061265445, 0.1807976061265445, 0.1807976061265445, 0.185279080916962, 0.185279080916962, 0.185279080916962, 0.20367709178209514, 0.20367709178209514, 0.20367709178209514, 0.1540222058495594, 0.1540222058495594, 0.1540222058495594, 0.20798540839466706, 0.20798540839466706, 0.20798540839466706, 0.19746129290030057, 0.19746129290030057, 0.19746129290030057, 0.17377192842103595, 0.17377192842103595, 0.17377192842103595, 0.19180383656900213, 0.19180383656900213, 0.19180383656900213, 0.06822712974414169, 0.06822712974414169, 0.06822712974414169, 0.07752904426911988, 0.07752904426911988, 0.07752904426911988, 0.07651768138549597, 0.07651768138549597, 0.07651768138549597]}, "mutation_prompt": null}
{"id": "eb3725cc-5e2d-4e59-b0fb-bbe2bbf16489", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "34438522-c61c-4cb8-809d-2250a0072f8d", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "9edf0732-280f-482a-8e8f-721adeef5c09", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "0a585598-97b9-4761-b83f-94cc12e3fe01", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "62c87e0d-38a7-48b1-b59b-7be168f5cee3", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "acdf0dde-6891-4c34-abdf-8fdb62ca2d36", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "b85bb788-90f4-4170-99bf-cee69730424d", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "0013b777-34f2-4034-8b9f-ff5e633aed14", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "ed09fbdf-4d8c-4bb9-b005-8d9a7b31aceb", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "b93d992c-ed70-4dc9-acea-1e3f7a65a527", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 25\n        self.min_population_size = 8\n        self.de_mutation_factor = 0.65\n        self.cr = 0.9  # Adjusted crossover rate for diversity\n        self.initial_temperature = 100.0  # Higher starting temperature for broader initial exploration\n        self.temperature_decay = 0.93\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization for better coverage of search space\n        population = np.random.laplace(0, 1, (population_size, self.dim))\n        population = self.lower_bound + ((population - np.min(population)) / (np.max(population) - np.min(population))) * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx, temperature):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i, temperature)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                temperature *= self.temperature_decay\n\n                if evals_used >= self.budget:\n                    break\n\n            # Gradual convergence with adaptive population control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n\n        return best_solution, best_fitness", "name": "RefinedEnhancedHybridDE_SA", "description": "Refined EnhancedHybridDE_SA with adaptive cooling schedule and chaotic initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.9026245928744369, 0.9026245928744369, 0.9026245928744369, 0.888497028236501, 0.888497028236501, 0.888497028236501, 0.8897112344204744, 0.8897112344204744, 0.8897112344204744, 0.8281015307304912, 0.8281015307304912, 0.8281015307304912, 0.818277751231166, 0.818277751231166, 0.818277751231166, 0.8140955613693628, 0.8140955613693628, 0.8140955613693628, 0.1502796057614325, 0.1502796057614325, 0.1502796057614325, 0.1503816840638783, 0.1503816840638783, 0.1503816840638783, 0.15795516461999015, 0.15795516461999015, 0.15795516461999015, 0.16306617928446376, 0.16306617928446376, 0.16306617928446376, 0.13511413869513011, 0.13511413869513011, 0.13511413869513011, 0.13962504114868002, 0.13962504114868002, 0.13962504114868002, 0.9300495585622889, 0.9300495585622889, 0.9300495585622889, 0.9549538447588511, 0.9549538447588511, 0.9549538447588511, 0.961004513119649, 0.961004513119649, 0.961004513119649, 0.7403978563348971, 0.7403978563348971, 0.7403978563348971, 0.6864161257924073, 0.6864161257924073, 0.6864161257924073, 0.7525750626276652, 0.7525750626276652, 0.7525750626276652, 0.8489085693360009, 0.8489085693360009, 0.8489085693360009, 0.8911054919570773, 0.8911054919570773, 0.8911054919570773, 0.8768198281960243, 0.8768198281960243, 0.8768198281960243, 0.35111425543215047, 0.35111425543215047, 0.35111425543215047, 0.1322541719434619, 0.1322541719434619, 0.1322541719434619, 0.539318132720596, 0.539318132720596, 0.539318132720596, 0.19716252460860018, 0.19716252460860018, 0.19716252460860018, 0.7120728949576003, 0.7120728949576003, 0.7120728949576003, 0.17486886228469845, 0.17486886228469845, 0.17486886228469845, 0.49206839059414964, 0.49206839059414964, 0.49206839059414964, 0.5435213650613582, 0.5435213650613582, 0.5435213650613582, 0.7334488801828667, 0.7334488801828667, 0.7334488801828667, 0.43996080868818166, 0.43996080868818166, 0.43996080868818166, 0.5362962715998539, 0.5362962715998539, 0.5362962715998539, 0.7852408106257373, 0.7852408106257373, 0.7852408106257373, 0.09660277691528141, 0.09660277691528141, 0.09660277691528141, 0.15523168932223397, 0.15523168932223397, 0.15523168932223397, 0.16932496725764246, 0.16932496725764246, 0.16932496725764246, 0.4743534651822654, 0.4743534651822654, 0.4743534651822654, 0.5175764120121249, 0.5175764120121249, 0.5175764120121249, 0.4133218171796692, 0.4133218171796692, 0.4133218171796692, 0.861972120828043, 0.861972120828043, 0.861972120828043, 0.8501964656047981, 0.8501964656047981, 0.8501964656047981, 0.8358387923138769, 0.8358387923138769, 0.8358387923138769, 0.10612062119264065, 0.10612062119264065, 0.10612062119264065, 0.106037371675607, 0.106037371675607, 0.106037371675607, 0.1316188619420896, 0.1316188619420896, 0.1316188619420896, 0.18193473786980252, 0.18193473786980252, 0.18193473786980252, 0.14152903415788753, 0.14152903415788753, 0.14152903415788753, 0.16863821196643292, 0.16863821196643292, 0.16863821196643292, 0.7118253642316215, 0.7118253642316215, 0.7118253642316215, 0.5400633690120533, 0.5400633690120533, 0.5400633690120533, 0.6061294146609727, 0.6061294146609727, 0.6061294146609727, 0.46322947691886096, 0.46322947691886096, 0.46322947691886096, 0.4093037325303541, 0.4093037325303541, 0.4093037325303541, 0.5150116600148007, 0.5150116600148007, 0.5150116600148007, 0.21511738555453175, 0.21511738555453175, 0.21511738555453175, 0.19386903720616122, 0.19386903720616122, 0.19386903720616122, 0.1823377151584491, 0.1823377151584491, 0.1823377151584491, 0.2162464692852324, 0.2162464692852324, 0.2162464692852324, 0.6814606914356006, 0.6814606914356006, 0.6814606914356006, 0.21290876008619763, 0.21290876008619763, 0.21290876008619763, 0.8532812089703037, 0.8532812089703037, 0.8532812089703037, 0.8898822355409517, 0.8898822355409517, 0.8898822355409517, 0.9176050971940096, 0.9176050971940096, 0.9176050971940096, 0.8244016664627447, 0.8244016664627447, 0.8244016664627447, 0.21117190109329853, 0.21117190109329853, 0.21117190109329853, 0.2098719072291404, 0.2098719072291404, 0.2098719072291404, 0.20191408536704514, 0.20191408536704514, 0.20191408536704514, 0.18514092546022975, 0.18514092546022975, 0.18514092546022975, 0.21401152693000636, 0.21401152693000636, 0.21401152693000636, 0.07936154766382986, 0.07936154766382986, 0.07936154766382986, 0.08072956752003646, 0.08072956752003646, 0.08072956752003646, 0.07450048557552513, 0.07450048557552513, 0.07450048557552513]}, "mutation_prompt": null}
{"id": "30353cdb-7282-4a78-a9bd-5ddd494ce2a3", "solution": "import numpy as np\n\nclass ImprovedRefinedEnhancedHybridDE_SA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 30\n        self.min_population_size = 10\n        self.de_mutation_factor = 0.7\n        self.cr = 0.85\n        self.initial_temperature = 120.0\n        self.temperature_decay = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        # Chaotic initialization using logistic map\n        r = 3.9\n        chaotic_seq = np.zeros((population_size, self.dim))\n        chaotic_seq[0] = np.random.rand(self.dim)\n        for i in range(1, population_size):\n            chaotic_seq[i] = r * chaotic_seq[i - 1] * (1 - chaotic_seq[i - 1])\n        population = self.lower_bound + chaotic_seq * (self.upper_bound - self.lower_bound)\n        fitness = np.array([func(ind) for ind in population])\n        evals_used = population_size\n\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n\n        def de_mutation_and_crossover(target_idx):\n            indices = list(range(population_size))\n            indices.remove(target_idx)\n            a, b, c = population[np.random.choice(indices, 3, replace=False)]\n            mutant = np.clip(a + self.de_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n            cross_points = np.random.rand(self.dim) < self.cr\n            if not np.any(cross_points):\n                cross_points[np.random.randint(0, self.dim)] = True\n            trial = np.where(cross_points, mutant, population[target_idx])\n            return trial\n\n        temperature = self.initial_temperature\n        while evals_used < self.budget:\n            for i in range(population_size):\n                trial = de_mutation_and_crossover(i)\n                trial_fitness = func(trial)\n                evals_used += 1\n\n                if trial_fitness < fitness[i] or np.random.rand() < np.exp((fitness[i] - trial_fitness) / temperature):\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evals_used >= self.budget:\n                    break\n\n            # Adaptive population size control\n            population_size = max(self.min_population_size, int(self.initial_population_size * (1 - evals_used / self.budget)))\n            population = population[:population_size]\n            fitness = fitness[:population_size]\n            # Adjust temperature decay dynamically\n            temperature *= self.temperature_decay * (1 - best_fitness / (np.max(fitness) + 1e-9))\n\n        return best_solution, best_fitness", "name": "ImprovedRefinedEnhancedHybridDE_SA", "description": "Improved RefinedEnhancedHybridDE_SA with dynamic parameter adjustments and multi-population strategy to enhance optimization accuracy and convergence speed.", "configspace": "", "generation": 99, "fitness": 0.3102746717936614, "feedback": "The algorithm ImprovedRefinedEnhancedHybridDE_SA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "9e480a19-7109-4a7f-b5e4-04e851394f61", "metadata": {"aucs": [0.8486471084265834, 0.8486471084265834, 0.8486471084265834, 0.8599500497633916, 0.8599500497633916, 0.8599500497633916, 0.15198024518521414, 0.15198024518521414, 0.15198024518521414, 0.08841173729298757, 0.08841173729298757, 0.08841173729298757, 0.17605139703105488, 0.17605139703105488, 0.17605139703105488, 0.1170889262034176, 0.1170889262034176, 0.1170889262034176, 0.03605310866451328, 0.03605310866451328, 0.03605310866451328, 0.13181346651691206, 0.13181346651691206, 0.13181346651691206, 0.13277909472690175, 0.13277909472690175, 0.13277909472690175, 0.028463850139003988, 0.028463850139003988, 0.028463850139003988, 0.14404589102823373, 0.14404589102823373, 0.14404589102823373, 0.1214028091432392, 0.1214028091432392, 0.1214028091432392, 0.9595868366504879, 0.9595868366504879, 0.9595868366504879, 0.9468798138472451, 0.9468798138472451, 0.9468798138472451, 0.9515587665236145, 0.9515587665236145, 0.9515587665236145, 0.666819132471113, 0.666819132471113, 0.666819132471113, 0.6281123106402267, 0.6281123106402267, 0.6281123106402267, 0.08865116465479583, 0.08865116465479583, 0.08865116465479583, 0.7334916012624384, 0.7334916012624384, 0.7334916012624384, 0.7988154143129245, 0.7988154143129245, 0.7988154143129245, 0.7897386813329004, 0.7897386813329004, 0.7897386813329004, 0.5995057301076647, 0.5995057301076647, 0.5995057301076647, 0.07293617233580496, 0.07293617233580496, 0.07293617233580496, 0.24528799429948311, 0.24528799429948311, 0.24528799429948311, 0.5962123920172393, 0.5962123920172393, 0.5962123920172393, 0.5875750174538242, 0.5875750174538242, 0.5875750174538242, 0.40730950719399905, 0.40730950719399905, 0.40730950719399905, 0.10901007974490917, 0.10901007974490917, 0.10901007974490917, 0.24357437852574715, 0.24357437852574715, 0.24357437852574715, 0.01960094528748635, 0.01960094528748635, 0.01960094528748635, 0.5866869625663195, 0.5866869625663195, 0.5866869625663195, 0.13787999722541733, 0.13787999722541733, 0.13787999722541733, 0.5835587292755828, 0.5835587292755828, 0.5835587292755828, 0.0863105638771009, 0.0863105638771009, 0.0863105638771009, 0.037233272478413015, 0.037233272478413015, 0.037233272478413015, 0.14672098853547866, 0.14672098853547866, 0.14672098853547866, 0.290189477591717, 0.290189477591717, 0.290189477591717, 0.0713994170212654, 0.0713994170212654, 0.0713994170212654, 0.023882711699098058, 0.023882711699098058, 0.023882711699098058, 0.20451444380325245, 0.20451444380325245, 0.20451444380325245, 0.1582595164401146, 0.1582595164401146, 0.1582595164401146, 0.7614790280347845, 0.7614790280347845, 0.7614790280347845, 0.08308190676801619, 0.08308190676801619, 0.08308190676801619, 0.0929022817941142, 0.0929022817941142, 0.0929022817941142, 0.06619517388951845, 0.06619517388951845, 0.06619517388951845, 0.14165943845242746, 0.14165943845242746, 0.14165943845242746, 0.12410908278867205, 0.12410908278867205, 0.12410908278867205, 0.17697226042921832, 0.17697226042921832, 0.17697226042921832, 0.15706878477015396, 0.15706878477015396, 0.15706878477015396, 0.4751906974239929, 0.4751906974239929, 0.4751906974239929, 0.6042256414756907, 0.6042256414756907, 0.6042256414756907, 0.12352052967662297, 0.12352052967662297, 0.12352052967662297, 0.3920719317448075, 0.3920719317448075, 0.3920719317448075, 0.46839913291948143, 0.46839913291948143, 0.46839913291948143, 0.15666414538277162, 0.15666414538277162, 0.15666414538277162, 0.21536604597241016, 0.21536604597241016, 0.21536604597241016, 0.20449731719798225, 0.20449731719798225, 0.20449731719798225, 0.16087315366535604, 0.16087315366535604, 0.16087315366535604, 0.19649187656107603, 0.19649187656107603, 0.19649187656107603, 0.5997048588626206, 0.5997048588626206, 0.5997048588626206, 0.7933703656566112, 0.7933703656566112, 0.7933703656566112, 0.35960998034384495, 0.35960998034384495, 0.35960998034384495, 0.12329778855327711, 0.12329778855327711, 0.12329778855327711, 0.14747356325468264, 0.14747356325468264, 0.14747356325468264, 0.16087446254946225, 0.16087446254946225, 0.16087446254946225, 0.15348191987112036, 0.15348191987112036, 0.15348191987112036, 0.18245770428340746, 0.18245770428340746, 0.18245770428340746, 0.18939395695601302, 0.18939395695601302, 0.18939395695601302, 0.1940765511645054, 0.1940765511645054, 0.1940765511645054, 0.07788296838273256, 0.07788296838273256, 0.07788296838273256, 0.0725670368769965, 0.0725670368769965, 0.0725670368769965, 0.07682708014413075, 0.07682708014413075, 0.07682708014413075]}, "mutation_prompt": null}
