{"id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 0, "fitness": 0.16335492273831217, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": null, "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "2908e010-76ed-4544-a4a1-e12f7a7bb59b", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)  # Increased population size for diversity\n        self.mutation_factor = 0.9  # Adjusted mutation factor for better exploration\n        self.crossover_prob = 0.85  # Adjusted crossover probability\n        self.local_search_prob = 0.4  # Increased local search probability for frequent refinements\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.array([func(ind) for ind in self.population])\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced adaptive local search with dynamic step size\n                if np.random.rand() < self.local_search_prob:\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)  # Reduced step size for precision\n        for _ in range(7):  # Increased number of local perturbations\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "EnhancedHybridDEALS", "description": "Modified HybridDEALS with strategic mutation adaptation and enhanced local search for improved convergence speed and efficiency.", "configspace": "", "generation": 1, "fitness": 0.16334421533066373, "feedback": "The algorithm EnhancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.32161678439223096, 0.3073104890223911, 0.2954690809793137, 0.32629258281183027, 0.29939726005401046, 0.35586669384518677, 0.3267140428310792, 0.3051667180430885, 0.3238974675362024, 0.003699505841733508, 0.007627478484379169, 0.007912661296719636, 0.002282249813268189, 0.012707789602916075, 0.0017690502324708701, 0.007997664419854833, 0.0019561807135025644, 0.01872261075073145, 0.07732776125012297, 0.06361263356434554, 0.06327671878723506, 0.08097668156671667, 0.06811190336937001, 0.06630753620349894, 0.06467017251705598, 0.08027865300283432, 0.07623119328337691, 0.06495647322373754, 0.06239397068731156, 0.05583702551227632, 0.060635980955542124, 0.048470428890494466, 0.05687683879629679, 0.06270491627182251, 0.05903357576514301, 0.04424897658171345, 0.8609792241613619, 0.7600886876808982, 0.7386549221632129, 0.8071977851766664, 0.7570441920849905, 0.8077126869546647, 0.8411549544099118, 0.7925021939328103, 0.9110224570180379, 0.15501115334243154, 0.13651332554068052, 0.13346591951525077, 0.13025359902309752, 0.14330087173197104, 0.11934661259921064, 0.14487628811564246, 0.14467241830461897, 0.15062057396083384, 0.19864653017655565, 0.1955619637649847, 0.1905774994863485, 0.22638464087691068, 0.21234033122655205, 0.20423943104756004, 0.22994215770222626, 0.2162276594204685, 0.22507096896811774, 0.10103334296952815, 0.07799217761012422, 0.09515404784167736, 0.08131245458462022, 0.08742782882244848, 0.09901175668578943, 0.10466937072189753, 0.09608250894320369, 0.08596581657755009, 0.10285707300926428, 0.08647169768134577, 0.08382811704353321, 0.10973958979111398, 0.08681918504838926, 0.08688994736737443, 0.07716395322701097, 0.09650626514212146, 0.09443080793235803, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007647803341311876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07892745236843535, 0.09151017701859199, 0.07733005726567554, 0.09642702066301312, 0.08007751039250455, 0.08871132250295344, 0.09358110780868956, 0.07999517719864702, 0.07219700097677217, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05398344679347522, 0.04932012238876282, 0.04506786055637535, 0.04672416497848808, 0.0522034284988655, 0.054363657319862924, 0.055040362614876326, 0.051808249883848134, 0.05815130814827285, 0.28781703645209256, 0.2917016709998568, 0.2987990787492292, 0.3141882859882764, 0.27372499195374944, 0.2823188700302198, 0.3131951679763768, 0.3071374101816685, 0.28939298931766844, 0.07207849881166728, 0.07031283573000202, 0.0756269955054697, 0.06499092363001169, 0.04917656560193573, 0.07687972931012843, 0.05125354173756991, 0.06446321206256722, 0.06529968308841327, 0.164971624434743, 0.1829680611889336, 0.15277705181858092, 0.17337207858278103, 0.17962918450434917, 0.16572188045150482, 0.1899712070416273, 0.18650080720890672, 0.15630485708628805, 0.18195607212755427, 0.18810022449166186, 0.17708001863799605, 0.18621691563398146, 0.179827764660359, 0.19742310819571807, 0.20917297567667315, 0.2294840318870024, 0.1887814849710916, 0.13437758422231239, 0.13257146380607987, 0.15824946295881948, 0.13836241932292048, 0.13064051552525857, 0.1618612809541401, 0.1364123449826844, 0.1639192646852642, 0.13876365972846338, 0.16939729196034492, 0.17836647980791187, 0.19031249703432818, 0.17613323820555327, 0.206949806902751, 0.18954754460148804, 0.19513876857332557, 0.16932789177899465, 0.1716869750546972, 0.1590263508050106, 0.17751325808244545, 0.17448682913631397, 0.17051671576580885, 0.17473262729278627, 0.16590238133025903, 0.1677667201622497, 0.1801719365989698, 0.1723842591301582, 0.2975047317167845, 0.30091666870478007, 0.24839030235681447, 0.30907633398627565, 0.22391416072917825, 0.33439643615974857, 0.2505714185286011, 0.19674634522798784, 0.3226079023709879, 0.24771886763859952, 0.2188993627325927, 0.2714032407019985, 0.28247952906216, 0.19170794439788852, 0.2437471243585081, 0.2209228928975111, 0.2244421055352941, 0.21672804488312913, 0.1860020006122305, 0.1853920473715992, 0.1965735460132938, 0.1801403179264287, 0.1854668643143652, 0.18226574066250978, 0.1755642801052607, 0.19505281449183653, 0.18833346538790596, 0.06627628717189749, 0.05283046689097426, 0.0748813120698878, 0.09249738328744606, 0.058395547257625524, 0.05731672626521245, 0.06517255626634744, 0.05563163839510454, 0.062240752811202005]}, "mutation_prompt": null}
{"id": "176e5c17-9751-47e9-b0dc-937451015630", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "585b548f-8f6c-4d2d-9db8-b38942941b37", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "1e5d3765-8acc-46e1-a25b-a5b14a43b4d3", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "b1699e66-6003-4f99-ad2b-d4cec530a75a", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "680fe9d3-892e-432c-8b62-1c982968a020", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "e13c19ff-e7a5-44fc-a8e3-bdcf75018bef", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "b7ff4413-a236-4aa6-aaa9-c365087ddd61", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "46a1cb9e-a989-4591-bd47-a868428593a7", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "f055719d-592f-4a6e-b33a-c5cc3404aaa8", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "4f8c3259-b417-4917-8c85-eaa247419601", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "68f94f90-ca5d-43d2-be1f-2df3d7901879", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "b87fbad9-c4e0-4510-881e-fa7f273d6878", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "8680ae04-aa45-42d6-a920-7e93151fd556", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "fe7d04f8-f80b-4d90-a8ef-bb7365af4f53", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "08d50db3-be0a-4167-90d4-c09bb0de1e81", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "003836ad-0f7d-4b9c-b95e-029694aebe6e", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "ab927206-c7d8-4194-9b77-8ff07981ce50", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.8\n        self.local_search_prob = 0.25\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.global_search_prob = 0.1\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n\n                # Global search enhancement\n                if np.random.rand() < self.global_search_prob:\n                    self.global_search(func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.08 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness\n\n    def global_search(self, func):\n        step_size = 0.25 * (self.upper_bound - self.lower_bound)\n        for _ in range(2):\n            if self.evaluations >= self.budget:\n                break\n\n            global_perturbation = np.random.uniform(-step_size, step_size, (self.population_size, self.dim))\n            new_population = np.clip(self.population + global_perturbation, self.lower_bound, self.upper_bound)\n            \n            for j in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                new_fitness = func(new_population[j])\n                self.evaluations += 1\n                \n                if new_fitness < self.fitness[j]:\n                    self.population[j] = new_population[j]\n                    self.fitness[j] = new_fitness", "name": "EnhancedHybridDEALS", "description": "A hybrid metaheuristic combining Differential Evolution with Adaptive Local and Global Search to enhance exploration and exploitation capabilities for improved convergence speed.", "configspace": "", "generation": 18, "fitness": 0.13855036955943897, "feedback": "The algorithm EnhancedHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.23848692438461627, 0.2470409937030147, 0.2471200428546696, 0.2400333330460609, 0.24551183622318118, 0.27587398750906267, 0.23301805182379143, 0.2237388499416626, 0.241081153472412, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019076690365991134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05646784054762888, 0.06545707086739239, 0.07642978153851832, 0.05572297956714045, 0.06545019290692577, 0.08187508328966664, 0.07397318014088927, 0.05611362182234514, 0.06699178262441075, 0.05382103389019355, 0.04841896690137604, 0.04894996990208278, 0.03663334263024176, 0.048554719984891026, 0.05004565199899713, 0.05008360947028434, 0.05252262990321199, 0.06473109975607094, 0.7678239319396595, 0.7955290874517956, 0.6692512599353497, 0.7917644595474422, 0.7341044386415201, 0.7412947091919526, 0.8175697955979585, 0.8557448823697702, 0.7460558916620958, 0.10398420615198467, 0.11351322552976739, 0.11285612422686098, 0.10060707476761, 0.1043306255016565, 0.11709364847070525, 0.10622618825417174, 0.10155275498214067, 0.1245566513716252, 0.1417667887412032, 0.14482646339055316, 0.16594609003643146, 0.17589994257061736, 0.1538528878272778, 0.18140832341270785, 0.14568949394975939, 0.14734888242391608, 0.17561804701633377, 0.046183495273476316, 0.07042256328657781, 0.0571856388832348, 0.03693989386165142, 0.03345683044030989, 0.08202725134406119, 0.04491833313621263, 0.029525605601857574, 0.04359011488404807, 0.0638296940419063, 0.04436765619631555, 0.05361087021969657, 0.04991289914631669, 0.052300145066667025, 0.0493512238622712, 0.05775763503317688, 0.0428487271293847, 0.06513830272836563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05713760307672, 0.05822871873608548, 0.07357636147802804, 0.042199476367563715, 0.08750489872792788, 0.07407826767484371, 0.05479346299524135, 0.05947681158618312, 0.09062479490600839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004058495173237309, 0.017832217552609997, 0.013663098979803556, 0.008855057602065064, 0.02516816310131431, 0.017511515694703994, 0.01792351243926582, 0.03717357684681721, 0.01258657323900203, 0.2344938459806819, 0.23797937439557781, 0.24926013463000496, 0.2317597564799756, 0.23236953822792017, 0.23735158383064425, 0.25804146730944233, 0.2521022865353659, 0.24375013191616945, 0.06107536535358393, 0.06165982235287082, 0.06748983289079591, 0.06854185683406244, 0.057829348217533494, 0.07407897278505238, 0.0658167004954181, 0.057530409661581516, 0.06791493818277394, 0.13144747925966016, 0.145075168435984, 0.15277651686856986, 0.1260682957129804, 0.13199714919565564, 0.16263687846238006, 0.1384174462068648, 0.1482045378964909, 0.15282882929420283, 0.18826121058338574, 0.1860502426900661, 0.18202090896625145, 0.19576238511375987, 0.1827027674105849, 0.19498347215978828, 0.19605583772422797, 0.19578719283604118, 0.1798032792188864, 0.1290218088341457, 0.11855307634729739, 0.12231070609896288, 0.12575804693899317, 0.13195992025119974, 0.13492685621668754, 0.12482876560249567, 0.13289151666876586, 0.12153079576967685, 0.18717137118051397, 0.18893164624395187, 0.1807205545191315, 0.18117577641768323, 0.1896933740378376, 0.16993958852862912, 0.17091805113712766, 0.17629481728322394, 0.22730490420262273, 0.15676593431951225, 0.17556731518499513, 0.15853240215455766, 0.15257237786732714, 0.16559654421512693, 0.17450299745210252, 0.15859832531859286, 0.16229387165638343, 0.1583850592130993, 0.18577867488059452, 0.2130075239622189, 0.19932839433448835, 0.16735330392190262, 0.16033113267936439, 0.19384969358131598, 0.16095506221326983, 0.21357303218036983, 0.17363808799599934, 0.21383294646882423, 0.20863429264854427, 0.1800161166527776, 0.2012746313296352, 0.16533718964436972, 0.16893900377947213, 0.17316562206229869, 0.17194593430682548, 0.17732100286974306, 0.19473669063155596, 0.1841891231907581, 0.18468476860879057, 0.1992016094831669, 0.19631480960351622, 0.18359819612452077, 0.19031873463396454, 0.18897207353916834, 0.18156595858523095, 0.06074326835413579, 0.06298700094703069, 0.06900316053603806, 0.07318555595219112, 0.0656381381803034, 0.06619107274087732, 0.06450124597621143, 0.0660210264636375, 0.06227459565728399]}, "mutation_prompt": null}
{"id": "e7b4f2b5-e497-4ed6-97da-659ae6094458", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "5b6fd407-289d-4540-87da-5411c76c7766", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "0ef0a2d9-a13f-4c29-81a5-c82ff60733d0", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "d2c8547a-e0ba-4011-8377-d68180d9f681", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.dynamic_step = 0.05\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_adaptive_local_search(i, func)\n            \n            # Elitism: Retain the best solution found so far\n            best_idx = np.argmin(self.fitness)\n            best_solution, best_fitness = self.population[best_idx], self.fitness[best_idx]\n\n        return best_solution, best_fitness\n\n    def dynamic_adaptive_local_search(self, index, func):\n        step_size = self.dynamic_step * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness\n                self.dynamic_step *= 0.9  # Reduce step size dynamically to refine search", "name": "HybridDEALS", "description": "A novel hybrid approach utilizing Differential Evolution with Dynamic Adaptive Local Search and elitism to enhance search efficiency and convergence speed.", "configspace": "", "generation": 22, "fitness": 0.11895339604908929, "feedback": "The algorithm HybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.18662161860157822, 0.1798864917559445, 0.20002016329661831, 0.22679685760048574, 0.26245738938579066, 0.2452163567885718, 0.22089209394265796, 0.21017283373896256, 0.20703231027082203, 0.000787068628768206, 9.999999999998899e-05, 0.0027575369497495616, 0.0001728194534196259, 0.002920155621781162, 9.999999999998899e-05, 0.00357159844195698, 0.00025034735608864267, 0.0002137067664621517, 0.0597801733955845, 0.05053033474750479, 0.05487842074662097, 0.07123025232387081, 0.04816256127818941, 0.052041302976087334, 0.04551155928214923, 0.06642020807495153, 0.05225665358843212, 0.030647972094762, 0.03005690712393405, 0.03085479925628043, 0.02737399832859755, 0.041168055794703506, 0.025094971320476778, 0.027119242130768217, 0.036016904494518553, 0.04224309737651988, 0.8942450674253694, 0.8587466511585753, 0.8989335264646332, 0.885101717174354, 0.6901868090651812, 0.914850774314797, 0.9220989536609321, 0.7300751119987765, 0.7787026130778258, 0.05600656387086034, 0.07158282784351144, 0.06342636463531581, 0.059723978783538745, 0.06114158385220814, 0.06951185803779403, 0.0984174521520681, 0.08122498268527922, 0.08661191812562774, 0.11469556740189524, 0.11765196713107595, 0.12363657316164278, 0.12112022814749557, 0.15628249354523183, 0.1202903340368846, 0.13679301710208924, 0.14894008006678194, 0.1611000915227485, 0.0047613464833806685, 0.01147569782422675, 0.002448600523688227, 0.024103838694869095, 0.024990814342373824, 0.018021651989838072, 0.018977063595963628, 0.008666623689929986, 0.01520890831081756, 0.021392932241603324, 0.03587566127618558, 0.0535682526427258, 0.0036047927077302866, 0.0031874990113909263, 0.014595593021369146, 0.002679962124852886, 0.002151181528899704, 0.00885054027937171, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03083250931804471, 0.036654951468449326, 0.05390745806552277, 0.05867716806766565, 0.04642793867294437, 0.03405968407414661, 0.04171520163238707, 0.07323464706311711, 0.043862095989413485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007294675186226285, 0.006697213500050703, 0.007177792330105293, 0.0013847862200063732, 0.006585398643221607, 0.010092510237683205, 0.013515825174628349, 0.018480438755051676, 0.00811153744428661, 0.2181511236341045, 0.20902516107016755, 0.20961798014983446, 0.1972503462328602, 0.21201247075837926, 0.20396600444674662, 0.20655124413990433, 0.18784835870228, 0.20330826223880893, 0.05426775324074329, 0.058145131532072236, 0.05506313335765567, 0.045180814870144914, 0.04739598322204053, 0.04758837171575847, 0.045128523527830144, 0.03990162825733734, 0.04694255402483427, 0.11496328824280377, 0.1456196457070259, 0.11680957400463599, 0.1388237061405636, 0.14267820357879102, 0.13035018502347562, 0.11750279845227674, 0.13835460242456377, 0.12083447527803559, 0.14355229386685076, 0.1544167159897739, 0.15936368439373405, 0.14209325072879653, 0.16625962662789262, 0.16367598467481093, 0.1590799612326449, 0.164833383480547, 0.16604595349133688, 0.08445908329754714, 0.11129294252462929, 0.09700898832638027, 0.10101914175645832, 0.10540260153600034, 0.11743166637622615, 0.10742687207713664, 0.11151498494612899, 0.11052743295277212, 0.1406883891228643, 0.15088969194318358, 0.194565946442656, 0.1502611119125582, 0.1390366605671155, 0.16592695137291535, 0.16569384189084668, 0.1457925224480372, 0.16091976264810892, 0.11431284404968522, 0.12295125025570308, 0.10995219328804762, 0.09894129552314657, 0.10320843443934102, 0.12818948964439536, 0.1144532768540657, 0.1317365918973854, 0.13225323570047298, 0.1275104667785768, 0.12157083267572233, 0.1534551270368133, 0.10991034377729014, 0.15513059415635233, 0.11531938293245825, 0.12699935790906003, 0.1157522624543128, 0.11203892227165524, 0.12859931814266057, 0.13103900778882038, 0.16986989053422963, 0.11390552974479018, 0.15920371859533156, 0.1169560241062314, 0.15156584772215387, 0.14820434244477998, 0.21784312543270723, 0.16139791401055814, 0.1724393275859255, 0.18321548177404345, 0.1819980923029173, 0.17616107016505989, 0.17480362651224768, 0.17615884330916054, 0.17731581808295105, 0.1681016148063712, 0.04999722464590417, 0.04498463547992737, 0.047914872013280596, 0.04357532445623913, 0.05620286791566376, 0.046679296445290897, 0.04086440262803259, 0.044726473588690197, 0.04653452261493474]}, "mutation_prompt": null}
{"id": "ba01d9ce-ac25-4b81-bc34-a9c9a4526540", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "c14d06e3-6d33-441b-9ee0-17316618a30a", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "b8f031a9-f077-40b9-b53f-dcce45448a36", "solution": "import numpy as np\n\nclass HybridDERLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.8\n        self.local_search_prob = 0.25\n        self.restart_interval = 0.2 * budget\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Progressive local search adaptation\n                if np.random.rand() < self.local_search_prob:\n                    self.progressive_local_search(i, func)\n            \n            # Restart strategy\n            if self.evaluations % self.restart_interval == 0:\n                self.restart_population(func)\n\n        self.best_solution = self.population[np.argmin(self.fitness)]\n        self.best_fitness = np.min(self.fitness)\n        return self.best_solution, self.best_fitness\n\n    def progressive_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(7):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness\n\n    def restart_population(self, func):\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.array([func(ind) for ind in self.population])\n        self.evaluations += self.population_size", "name": "HybridDERLS", "description": "A hybrid Differential Evolution with Restart scheme for enhanced exploration and exploitation using progressive local search adaptation.", "configspace": "", "generation": 25, "fitness": 0.16294050035928725, "feedback": "The algorithm HybridDERLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.2939127226578141, 0.3037053105049651, 0.34343061156764976, 0.3126558033315179, 0.3536032018955513, 0.3390275686211406, 0.3053977637610634, 0.3348469802881682, 0.33431777158303444, 0.009109491408426429, 0.018928465966520314, 0.013556934720651226, 0.029936499037897524, 0.015480926698033137, 0.013423935458198533, 0.01312272640367207, 0.013108318381980677, 0.011364747846729362, 0.07559572288317795, 0.06515239476666135, 0.08145605935084643, 0.07768518290818738, 0.08800143503948965, 0.07674675343356574, 0.07079969788096752, 0.07699489805024573, 0.06860937817683266, 0.05201687304020053, 0.04870373841572506, 0.04284411345823724, 0.04965245582784883, 0.05975718139806119, 0.058085197871411975, 0.06539894355062625, 0.053173539189859675, 0.05529910300635088, 0.8551852132027618, 0.8409524160211072, 0.9281090353936476, 0.8699132124062695, 0.8986960594267547, 0.9259784668450165, 0.8658076107946138, 0.8189920329912234, 0.844734283354979, 0.14605026231995832, 0.15086409857380545, 0.13671458602566144, 0.13923540455763417, 0.10803463663057722, 0.13769072381309322, 0.1534741048315873, 0.13312644158743192, 0.13331134949610968, 0.18211878813352922, 0.18541562771499198, 0.17751281640272187, 0.18316091007201796, 0.20384663302386374, 0.20993288841544921, 0.19880110000442086, 0.18270120982833282, 0.20887641398713386, 0.09499830118114627, 0.10482417607806294, 0.09077889678970563, 0.08477683001519565, 0.090252315798798, 0.08488510841860386, 0.10899958037560742, 0.09021169858282196, 0.0832731078336576, 0.1026545994633199, 0.08403109807077758, 0.10256045438588812, 0.08190757145598726, 0.0901589500621427, 0.09454052903836141, 0.07333668219458178, 0.07591642448426028, 0.10217281592319505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004168988978075716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08750020614796827, 0.06390372032503744, 0.10152205364285816, 0.07448251286443974, 0.07384084025692539, 0.11056877923140307, 0.09365756093314559, 0.10424203937579735, 0.09634256840796063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03845934953284125, 0.03853460457720703, 0.038251106755107345, 0.05437755773981845, 0.04969776185112129, 0.04686139445750481, 0.03871672247952862, 0.04718368365583425, 0.045542438990607836, 0.2785898400224919, 0.29930133042159845, 0.3061734524563827, 0.29627095054121433, 0.3033286906546777, 0.3006854376490452, 0.2969848543163127, 0.2734717336266431, 0.3103834647671655, 0.08221466906287567, 0.07065234350719551, 0.07115033399340354, 0.06856253587277117, 0.06497519848248412, 0.0722414005762555, 0.06058653296215455, 0.06391871933367621, 0.06520162390939566, 0.16195595816662645, 0.1584410990100683, 0.13789375300825035, 0.15251988534500616, 0.15432642585801626, 0.15195950002998393, 0.17275207132799042, 0.16075084961459163, 0.16666100240548298, 0.19763037674677775, 0.1761941935131205, 0.20116424428412738, 0.17700877569137718, 0.18799576214976632, 0.20729573259650746, 0.1935489374773096, 0.19817082975313605, 0.21230018904997328, 0.15069109206832088, 0.11458484931772617, 0.16741883778976718, 0.14174842511008467, 0.1340198745942247, 0.13742057702005672, 0.15745860391515198, 0.16031858486906891, 0.15205351481870222, 0.17716216934850004, 0.17722692168377174, 0.1982232870322289, 0.1833739753818422, 0.1856953575048348, 0.1668854051023172, 0.1720664694657129, 0.1850669733119077, 0.18705181054998044, 0.1701159519126071, 0.16227887395257845, 0.15518770445835617, 0.15567599776674979, 0.17627019629907825, 0.16509192511413562, 0.15774069217831455, 0.16196228849797023, 0.1589181717618774, 0.3220738051543026, 0.26100829820346294, 0.3120507647699393, 0.26319470070546425, 0.19968311352875534, 0.2752930309829027, 0.19307885142919012, 0.1864808387658664, 0.22404793161965697, 0.20757100504016845, 0.2645550508818786, 0.2973459334659454, 0.18418345278903003, 0.23255218823068557, 0.22254417867351162, 0.1706198892401788, 0.2047755271526942, 0.21519249914617578, 0.1935875093445395, 0.1789697697744428, 0.1854163454509843, 0.1790636645711443, 0.1718250470026318, 0.19166143637288846, 0.18613029047609853, 0.18597248448910597, 0.19985105634613143, 0.057323222584550915, 0.05427940912486251, 0.05542247868022243, 0.061972206079958236, 0.05971239717688537, 0.05911495537569811, 0.06139790601006967, 0.058981709174462216, 0.05927209619054463]}, "mutation_prompt": null}
{"id": "72da5c95-8774-498d-bbd8-9f5de1baf83f", "solution": "import numpy as np\n\nclass HybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALS", "description": "A novel hybrid metaheuristic combining Differential Evolution with Adaptive Local Search to effectively explore and exploit the search space within limited budget constraints.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.29379342422113963, 0.31802186157339973, 0.3438867044491801, 0.32481773562244876, 0.32502126916553575, 0.32114084080780647, 0.31630933840579023, 0.2982208064722619, 0.3187393770664857, 0.013134675826450226, 0.03115332945409699, 0.0193114722492288, 0.020075173050216666, 0.01781130870970682, 0.01596282262822446, 0.021105965731077037, 0.027754160549154028, 0.0259395407922679, 0.0707153169684217, 0.0723712247820818, 0.09013832696162138, 0.07578098497276242, 0.07603594668249103, 0.07310850610177333, 0.09674363949837206, 0.0848989642689052, 0.07306269029766921, 0.05275455591557132, 0.06044725107086901, 0.06906994294966184, 0.061170259183244924, 0.05323034206111277, 0.06424969813863246, 0.0656911366271894, 0.05417996600331332, 0.050630458384242405, 0.9566065401590111, 0.8714147494707958, 0.8893694673567161, 0.8990705368919456, 0.8463406241212598, 0.839295795488411, 0.9252121867758885, 0.9071985454145576, 0.8129767769765734, 0.14938452690529846, 0.13101686620792696, 0.15163195927586326, 0.14111850785025248, 0.15892961189031463, 0.1462025665466814, 0.16516460329951155, 0.12859106084119798, 0.14647830766999936, 0.20054670222209903, 0.19184809818502457, 0.19437066517986612, 0.21468633400380832, 0.20842903319221018, 0.20827848938575388, 0.19402019228237422, 0.22413512138319203, 0.21935014744475811, 0.09018556582306647, 0.08601723618542434, 0.08129414963995407, 0.08694997443869201, 0.08505522682054922, 0.09472695092904282, 0.09826296581246374, 0.09541622719814147, 0.09093172842659891, 0.07927324353681031, 0.07511021127017625, 0.07460857116158492, 0.0791078274196989, 0.08427188976730071, 0.07486578076044348, 0.08871896296129578, 0.07312367192352098, 0.07446873094310591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007961667197514677, 9.999999999998899e-05, 0.0126368826980634, 0.0063910747751108055, 9.999999999998899e-05, 9.999999999998899e-05, 0.07796690897789016, 0.09276473816525554, 0.08134514642334123, 0.08482455019116841, 0.10640158655588416, 0.08172742491505947, 0.08804553129772807, 0.09224039941133666, 0.09085935289522817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038244499452117275, 0.038636164098339254, 0.04840220454448885, 0.046341612875520743, 0.046842954489001776, 0.05690957712085032, 0.05165914542413197, 0.04545192184541724, 0.05039591036167235, 0.28664082783599476, 0.29689163979542277, 0.2876280580786372, 0.286441534055733, 0.29313993395241167, 0.30650348201531763, 0.29342104380623646, 0.2882580200051009, 0.2895396170669232, 0.08460256215318673, 0.07421770390816129, 0.07475021473021193, 0.07142333660817624, 0.07608765395123263, 0.07326710709306428, 0.07141220424836625, 0.0742999734431351, 0.07069044867373597, 0.1468458558727176, 0.14690378653844416, 0.1452804595262569, 0.14876852426872977, 0.14677406953911776, 0.15162578584859054, 0.14764744823182574, 0.14769397508827098, 0.1519841939970793, 0.20164280860638828, 0.2025944601463744, 0.19603543143059865, 0.20092602413149951, 0.1897409782088959, 0.20168844911752015, 0.2030447760750278, 0.2046121985523659, 0.2073542658546017, 0.14912933489886804, 0.14376410643208437, 0.15152372821949833, 0.1345310327970921, 0.133925135092265, 0.15431675064381356, 0.13714082118019688, 0.1524306085367816, 0.15821168566692922, 0.17331654709079614, 0.17960372320839346, 0.17573474088979124, 0.17043045773538124, 0.18066975878544023, 0.1844084800983975, 0.17863669535558124, 0.2149406772371395, 0.17457995671140414, 0.16250813503353911, 0.15839303899068968, 0.1680864523504817, 0.16356382247754808, 0.16542978438659317, 0.1692935592724698, 0.1662929750427149, 0.17046950147889206, 0.1665308291562112, 0.19989263446021843, 0.2726584156963371, 0.24847290243502695, 0.23231826264953803, 0.247718480254699, 0.21604176414127774, 0.1771884253035123, 0.23417394647323608, 0.21047928156014772, 0.2076846359653035, 0.22633512098684927, 0.1905711000897542, 0.21647027156196008, 0.18994215198869302, 0.18900414505002416, 0.20170456130209435, 0.20791301564974296, 0.30467597844886785, 0.19654026374445832, 0.19069010407913356, 0.17783507985883884, 0.197898276121528, 0.1737916924399887, 0.18329966692195498, 0.17790355915298117, 0.17845308149992, 0.18698841931054344, 0.0668014916219829, 0.06223700433589674, 0.06328790930685557, 0.07054042722425091, 0.06202750590651718, 0.07042899781923828, 0.06508167508230667, 0.07405560616094353, 0.06439656332753874]}, "mutation_prompt": null}
{"id": "225fd365-ea26-4325-89d8-122508af1c7c", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 27, "fitness": 0.18620634952737955, "feedback": "The algorithm HybridDEALSImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "f0b87443-fb70-42c1-a808-3c3ac910dd46", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "9e47573f-c819-4bdc-9e9d-b5aeccab01ed", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "ac8a562f-10fe-4dc2-b0fd-4dd4c81f02ba", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "ff8e2f96-941d-4936-8366-b1abfc9b6b1a", "solution": "import numpy as np\n\nclass EnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.5\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.success_history = []\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Adaptive mutation factor\n                adaptive_mutation = np.mean(self.success_history[-5:]) if self.success_history else self.mutation_factor\n                mutant = np.clip(a + adaptive_mutation * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    self.success_history.append(adaptive_mutation)\n\n                # Simulated Annealing-inspired local search\n                if np.random.rand() < self.local_search_prob:\n                    self.simulated_annealing_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def simulated_annealing_local_search(self, index, func):\n        init_temp = 1.0\n        final_temp = 0.001\n        alpha = 0.9\n        temp = init_temp\n        while temp > final_temp and self.evaluations < self.budget:\n            step_size = temp * (self.upper_bound - self.lower_bound) / 10\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            delta = neighbor_fitness - self.fitness[index]\n            if delta < 0 or np.random.rand() < np.exp(-delta / temp):\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness\n            \n            temp *= alpha", "name": "EnhancedHybridOptimizer", "description": "Incorporating adaptive mutation strategy based on success history and Simulated Annealing-based local search for improved convergence speed.", "configspace": "", "generation": 30, "fitness": 0.14243496182547397, "feedback": "The algorithm EnhancedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.25648496684140054, 0.22971299544769141, 0.24330381858541883, 0.28690271508946785, 0.26136322106509313, 0.248945153600859, 0.26679721566470094, 0.2752669711429002, 0.2601767107585493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009635902482064695, 9.999999999998899e-05, 9.999999999998899e-05, 0.005098259926432758, 9.999999999998899e-05, 0.07446467432281878, 0.07146496073471476, 0.08409948837675874, 0.0957393347683485, 0.05174571392779448, 0.10157714254005135, 0.09571352875440275, 0.06698331163262716, 0.07253188383569009, 0.04533232639875773, 0.029634989993933547, 0.05621506538038901, 0.042989964690815174, 0.07440665444515726, 0.04113365394160373, 0.04987602313349049, 0.05657964479735966, 0.05696378651084233, 0.12376559295397382, 0.2327612418654107, 0.33525612224231227, 0.1298365005957881, 0.2334409309331703, 0.8515697636788664, 0.7976659089217097, 0.48896897597492284, 0.4337105171882871, 0.16137450348736349, 0.08456807238035124, 0.12476908703568768, 0.1335713423544317, 0.11981969048920504, 0.11052367519682826, 0.12132548444863, 0.12554491213664298, 0.1413103423351586, 0.16156611520609365, 0.15483305365932698, 0.14241565822960967, 0.20140611267923536, 0.21640708248655727, 0.17836050503732426, 0.11690161621754391, 0.15492716745852597, 0.13352592682884878, 0.20553284925802895, 0.1357470938878227, 0.07442838657362849, 0.09633996847735793, 0.09742588490571158, 0.05825531543266882, 0.10521948422181338, 0.08190773663869677, 0.13007752037899045, 0.12144328728987452, 0.10098778566325273, 0.12140750894824015, 0.11747123831847717, 0.06681652598062959, 0.11568193247390246, 0.1306307543177072, 0.08769448833531346, 0.1481321824736631, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009240872687487078, 9.999999999998899e-05, 0.013119363736873724, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064996927194728, 0.15761855966714922, 0.11483186507649246, 0.08008740047860885, 0.10236407584331608, 0.13704260159973147, 0.11487861980454894, 0.10802905073236868, 0.089868423802, 0.03483902175339304, 0.04719697168764492, 0.052284197088391715, 0.016048076409231005, 0.05240048255068619, 0.006941392424173354, 9.999999999998899e-05, 0.028528053801462172, 0.11378354481901876, 0.03275248498441685, 0.029062725987009208, 0.07361551724971471, 0.05295770479572659, 0.17026335755552613, 0.06697352472333928, 0.06487813950394306, 0.03533175355704821, 0.03935872223742265, 0.2121116280167059, 0.22061861319215093, 0.23525289074577382, 0.2583711634450956, 0.23172160166337863, 0.20172509886674705, 0.22570543832078394, 0.20895726997345354, 0.22202693535089046, 0.07646908096374305, 0.0946528689475421, 0.06610043055320025, 0.07346240031430573, 0.039259451746044394, 0.07567698765399311, 0.10497970946728186, 0.07190880640775943, 0.09532499290101226, 0.23082177522460667, 0.19780500930428457, 0.1955532570392421, 0.23112487323002884, 0.23359930222097436, 0.18591071969478634, 0.21276418149434895, 0.22733702172761805, 0.24106807473211833, 0.1787033396029465, 0.18123622338612666, 0.2019487518115628, 0.170653603451699, 0.17251500312880852, 0.1726585868233771, 0.1850713597664433, 0.2170654027665151, 0.17728532730242985, 0.11208078032740343, 0.08864261910647142, 0.13805343168903805, 0.13483373870537851, 0.13918554811937578, 0.11180049080418453, 0.12717965534860343, 0.1425085598660154, 0.1222466347430371, 0.19854195910105343, 0.1693843535402937, 0.17042810728914537, 0.24202139219689933, 0.21966849524864174, 0.18420327337944686, 0.16622569618010363, 0.15486706789508276, 0.1807897007205136, 0.17456033875225807, 0.16687177423500865, 0.18397517383131723, 0.1862088327114434, 0.18897088770415305, 0.1714220078228127, 0.18009948769793793, 0.1720434401791303, 0.22654942566247016, 0.23627126605861182, 0.16754282150858835, 0.19242887971486067, 0.18929473921933837, 0.173841980944066, 0.1819503897039374, 0.19294067372467472, 0.24396225084690026, 0.19293281462986156, 0.31958542315333494, 0.18904497002866893, 0.18888405864170332, 0.16157070969579546, 0.22132681350919847, 0.16418595913826362, 0.20708760054371456, 0.2101526409526342, 0.1541171080141659, 0.22484336252186488, 0.25596876912286537, 0.22447680874635312, 0.2564638672598767, 0.24028916459296124, 0.2169894147232413, 0.22613746622245878, 0.24759784445860777, 0.24524934611641558, 0.06441923491659929, 0.05400360853435482, 0.058505067432735425, 0.08302608169701475, 0.06782461977361287, 0.07041487816966341, 0.06542393229514909, 0.07173515254170781, 0.06420664480839988]}, "mutation_prompt": null}
{"id": "a7d2083a-f023-487c-9d30-210c90e637ce", "solution": "import numpy as np\n\nclass AdaptiveHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.base_mutation_factor = 0.85\n        self.base_crossover_prob = 0.85\n        self.local_search_prob = 0.5  # Increased for more exploration\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.mutation_factor = self.base_mutation_factor\n        self.crossover_prob = self.base_crossover_prob\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            self.adapt_parameters()  # Adjust mutation and crossover parameters\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.1 * (self.upper_bound - self.lower_bound)  # Increased step size for dynamic search\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n\n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness\n\n    def adapt_parameters(self):\n        # Adaptive strategies for mutation and crossover probabilities\n        success_rate = np.sum(self.fitness < np.median(self.fitness)) / self.population_size\n        self.mutation_factor = self.base_mutation_factor + 0.1 * (0.5 - success_rate)\n        self.crossover_prob = self.base_crossover_prob + 0.1 * (success_rate - 0.5)\n        self.mutation_factor = np.clip(self.mutation_factor, 0.5, 1.0)\n        self.crossover_prob = np.clip(self.crossover_prob, 0.5, 1.0)", "name": "AdaptiveHybridDEALS", "description": "Introducing adaptive mutation and crossover strategies with self-adjusting parameters to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 31, "fitness": 0.17859617928150207, "feedback": "The algorithm AdaptiveHybridDEALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.35573755017430797, 0.34401070667382916, 0.34873002523218277, 0.3750866324702272, 0.3558565812144008, 0.3508725018130705, 0.3453978295037512, 0.3504304340639506, 0.34199100989020037, 0.056649188074450074, 0.06983757344713215, 0.043468799122115875, 0.055965868052608725, 0.0555735895691607, 0.056478982981413406, 0.05963057152906637, 0.05472911070854025, 0.05905676237514601, 0.08087680986129364, 0.09464242745275764, 0.07763389909911533, 0.0899246743223876, 0.07890534756876966, 0.08155737663074192, 0.09895710531214896, 0.0805075204574699, 0.08833196484236483, 0.06851813483078206, 0.07479760953197234, 0.07282400068462247, 0.08347283984736842, 0.07220807262057827, 0.08118970637687795, 0.07580626986490802, 0.07516394474168642, 0.0685452729911582, 0.9302638520218872, 0.9612634249990994, 0.9205715976686231, 0.9242805096187938, 0.9023275228325155, 0.9122847416172631, 0.9024368078875861, 0.936029550849762, 0.931104067704762, 0.1632050461272776, 0.1774520769830349, 0.15423156338459, 0.1502381388874119, 0.1692235153721634, 0.149386071652721, 0.15475636080468413, 0.18694109147037363, 0.15482239186528934, 0.250823759706717, 0.224841370417182, 0.19626303066037076, 0.2329267822596306, 0.20877180498321535, 0.22721268713700915, 0.2077481370137495, 0.21654181973239361, 0.23488312549354218, 0.10363666155396001, 0.08695703037704994, 0.09942378223776471, 0.09646659291892645, 0.08768701318848493, 0.10062205684403092, 0.09754332000038557, 0.08673681989756787, 0.1122134177905284, 0.09569295719720905, 0.09971702002165672, 0.08861302312701169, 0.09212249268459927, 0.10423946026592679, 0.10426708434094167, 0.09519286750557565, 0.1000354995052134, 0.08145145275492882, 0.00023902057227986884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001639195203201771, 9.999999999998899e-05, 0.11246769055438455, 0.10338991775300199, 0.1008295658474675, 0.07743078326175401, 0.07805673777022204, 0.10289659878176916, 0.09881649992369035, 0.0986113724816099, 0.09147969376465681, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055806394391289205, 0.04566984040487421, 0.040140689263322704, 0.05560587052552579, 0.057767109580349696, 0.043983033312976816, 0.052980888286270234, 0.06339835144692985, 0.054198648622878154, 0.3095667253326876, 0.3121881582952105, 0.32261539167117426, 0.3411609574905986, 0.3333842354402258, 0.3160348619274509, 0.3058014540447108, 0.3135951888963012, 0.3217241291613976, 0.07456156471744924, 0.07502723342326734, 0.08087410322122446, 0.09070660080118831, 0.07682688557776951, 0.06934023075408802, 0.08017556297852935, 0.07401464768626043, 0.07527810483922692, 0.15145931370896848, 0.17140819533893914, 0.15209881851444695, 0.1828015811127076, 0.16567946835613712, 0.15322352323041466, 0.14570248588850976, 0.14704490328768893, 0.1777755311095529, 0.20387715272157836, 0.20599163304221935, 0.21183197398353215, 0.20386442840398822, 0.21271945323362007, 0.2070123765059939, 0.22262562403750985, 0.2244706637701973, 0.22468577644265708, 0.14901512532574634, 0.1410332391074015, 0.16320699600484, 0.14358807287238173, 0.1538074621274964, 0.15887830896432187, 0.16377498715936545, 0.16279962998563713, 0.16195756856242804, 0.18493740064424558, 0.1783885689192508, 0.19571509658012276, 0.19278203891685874, 0.1814208703494371, 0.18094983657150165, 0.18590606575744018, 0.16671976800734156, 0.1892634932945838, 0.16871699542712415, 0.16754953873789213, 0.17393148849782902, 0.16937873316833885, 0.17704433066101688, 0.1771832740548085, 0.17198078176456288, 0.16465378151249987, 0.17206201243945984, 0.32099052402640715, 0.2662713689432521, 0.32922329882968193, 0.2698555625168131, 0.28356300255706, 0.3103635008062171, 0.22848920290869879, 0.23346101581095235, 0.22930405977229362, 0.2796263798181019, 0.23627138557279026, 0.2929327006938057, 0.24789438671782804, 0.1824970750957372, 0.20989521423805035, 0.1901655845383431, 0.3001537863254592, 0.3854596669358159, 0.1794920414016833, 0.21613457654201906, 0.16682037514822545, 0.21210398244537854, 0.18851478409726796, 0.1744282642083319, 0.18668369899709458, 0.1731534460890023, 0.17461457341848186, 0.06235712365827528, 0.07412641191593794, 0.06987082700490099, 0.07281564036205523, 0.06504595948137881, 0.0631787715179074, 0.06489854143212104, 0.0621266320173165, 0.06637295755398187]}, "mutation_prompt": null}
{"id": "43259272-5b2f-4487-a5ca-4947a50f3658", "solution": "import numpy as np\n\nclass EnhancedHybridDEALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(80, budget // 4)\n        self.mutation_factor = np.random.uniform(0.5, 1.0, self.population_size)\n        self.crossover_prob = np.random.uniform(0.5, 0.9, self.population_size)\n        self.local_search_prob = 0.3\n        self.tournament_size = 2\n        self.elitism_rate = 0.1\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            elite_count = int(self.elitism_rate * self.population_size)\n            elite_indices = np.argsort(self.fitness)[:elite_count]\n            next_population = self.population[elite_indices]\n            next_fitness = self.fitness[elite_indices]\n\n            while len(next_population) < self.population_size:\n                i = np.random.choice(range(self.population_size))\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor[i] * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_prob[i]\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    next_population = np.vstack((next_population, trial))\n                    next_fitness = np.append(next_fitness, trial_fitness)\n                else:\n                    next_population = np.vstack((next_population, self.population[i]))\n                    next_fitness = np.append(next_fitness, self.fitness[i])\n\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_local_search(i, func, next_population, next_fitness)\n\n            self.population, self.fitness = next_population[:self.population_size], next_fitness[:self.population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func, pop, fit):\n        step_size = 0.03 * (self.upper_bound - self.lower_bound)\n        for _ in range(2):\n            if self.evaluations >= self.budget:\n                break\n\n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(pop[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n\n            if neighbor_fitness < fit[index]:\n                pop[index] = neighbor\n                fit[index] = neighbor_fitness", "name": "EnhancedHybridDEALS", "description": "An enhanced hybrid algorithm utilizing self-adaptive differential evolution with adaptive local search and elitist selection for improved convergence.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 12 is out of bounds for axis 0 with size 9').", "error": "IndexError('index 12 is out of bounds for axis 0 with size 9')", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {}, "mutation_prompt": null}
{"id": "7ab06686-5e12-4d49-b9ca-20d3e01f0c10", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "82727d41-7c21-4ffa-902c-12e341b76798", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "98f80fd2-8c69-41da-a252-98bb35febefd", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "2772bde7-bf9c-4113-a677-d714f958675b", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "7ede2880-472c-4e04-8673-1eaed1a805ee", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "60eccea9-4d72-4e22-82c8-49b706392e27", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "160fe907-1289-48f9-b401-7234cd76a4e9", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "146090a1-d909-4119-8a2f-ef5e18f7b15d", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "d129d234-bfb0-4311-bcc0-8a7e852fcff6", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "abe1601b-fae1-4d8b-bace-b2e83acfa525", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "07fa8888-7eb1-4f6a-8431-e0e109b3b337", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "04fccc42-b93a-4cce-8733-e74fe1995fdc", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "f974f7fb-57f1-4e10-83c8-e32a31b775be", "solution": "import numpy as np\n\nclass HybridDEALSLevy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.5\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced local search with levy flight\n                if np.random.rand() < self.local_search_prob:\n                    self.levy_local_search(i, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def levy_flight(self, step_size):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / abs(v) ** (1 / beta)\n        return step * step_size\n\n    def levy_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            perturbation = self.levy_flight(step_size)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n\n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSLevy", "description": "An adaptive hybrid algorithm merging levy flight-based exploration with enhanced local search for robust convergence.", "configspace": "", "generation": 45, "fitness": 0.17860293523314594, "feedback": "The algorithm HybridDEALSLevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.33533120025883933, 0.3542352059387234, 0.3387345994183084, 0.37159239546754197, 0.35292439800180986, 0.3568680426361005, 0.34586952748672306, 0.35663577703452176, 0.3473100115428561, 0.0693755517700323, 0.06125689483867702, 0.04164181748203011, 0.049175477032776915, 0.05118803461230492, 0.05595311348017751, 0.051748341794716324, 0.05230681880061927, 0.07700259468458259, 0.077532591636158, 0.08193114107172261, 0.08143285293706903, 0.08391426109580502, 0.08604736222586284, 0.09422507429360272, 0.07806256353309016, 0.08465477838068636, 0.08357553344572521, 0.06666104410626938, 0.07208445781285588, 0.07797937659935783, 0.0709078960577686, 0.07001673034435829, 0.07339994874822409, 0.06672881864939229, 0.07602817239383852, 0.0830274659142125, 0.9302987523160715, 0.9271810878537008, 0.9241671359329037, 0.9525963085286396, 0.8865176528241252, 0.9593300827088161, 0.9377105824547717, 0.9236970055690272, 0.9288932362452701, 0.18066186093865366, 0.1768902084979671, 0.14627039715121515, 0.175510019890176, 0.16206420196893467, 0.15227638993059067, 0.14709075785301517, 0.1661263981630049, 0.17546803151102142, 0.21902702453321454, 0.2511313889570932, 0.19863350748195419, 0.23390263493251084, 0.2170167014248361, 0.22753316500761933, 0.22791098423175893, 0.2282618667954991, 0.21205949527070933, 0.11372485163742463, 0.10926497112643285, 0.08565267968836798, 0.08821885331032264, 0.10590312186967843, 0.10267258660243839, 0.10795374139029268, 0.08640569181224433, 0.09233357868941916, 0.09483349532244234, 0.0972516615881015, 0.10058908452378146, 0.10067100779768245, 0.09702445280094996, 0.10308244941416267, 0.09701234704164252, 0.09220085193463123, 0.09283319754990538, 0.006436009329430115, 0.0017352333969689049, 0.002419877795867831, 0.015943060859407554, 0.003529081727434047, 9.999999999998899e-05, 0.012725584966564063, 0.0092963924239986, 0.003449000283651138, 0.08256163554582274, 0.08682277150333484, 0.10561500866819229, 0.1448506839809015, 0.08048383687959737, 0.10808279769800466, 0.11626786730303229, 0.10049067713317672, 0.11970611555133215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055861978375512766, 0.05600020094615543, 0.06684434106200166, 0.06369843679690801, 0.06797392028227245, 0.06943146344103246, 0.08603657954126209, 0.052001578604740084, 0.053721940854532635, 0.30777706947072125, 0.3221523946004059, 0.32918579517528856, 0.31344475926074067, 0.3575688866149236, 0.34307598838898246, 0.32894571759386904, 0.31222697309429925, 0.34705350822117964, 0.07757077799050371, 0.08632927121064038, 0.07943383530840131, 0.0745066391628787, 0.08021973864726972, 0.07233891152752969, 0.07995076325820538, 0.06934448257122405, 0.07095960784792299, 0.1409480810080984, 0.1726027659192556, 0.1564344641060208, 0.17470379996060514, 0.15656225048421024, 0.15878645302535865, 0.1620711453014203, 0.14800847379871318, 0.16581246223306678, 0.21610403197044192, 0.21738247912715103, 0.22104982247507787, 0.21237277578972058, 0.20428121757706275, 0.21484636030920312, 0.21998899128820704, 0.22329584267643898, 0.21728441564704326, 0.1561118679471043, 0.16054504997471253, 0.14403854840084584, 0.14853308323482028, 0.15326630125610385, 0.15563663365709568, 0.15462016095194853, 0.15277553511615682, 0.15616304334163544, 0.17176327152731885, 0.17133456910496792, 0.1851647961002305, 0.17934983848786012, 0.18863344592847675, 0.1765705516087479, 0.19338403123811787, 0.17557972134207778, 0.1777036994183543, 0.1667443903932493, 0.16849312002688588, 0.17230122992215569, 0.16917513896207725, 0.17658271690497807, 0.1704198946965504, 0.1622982572817867, 0.17464997999010867, 0.17723546408520507, 0.2797051235263257, 0.23661454623199396, 0.23595329493783013, 0.2163956634662234, 0.25561109740615395, 0.28042434185776244, 0.18122058347891667, 0.2747461926355781, 0.2979783652432709, 0.2631406302112179, 0.2262994542970197, 0.24277773655313972, 0.23850637481140657, 0.18394936811261586, 0.2577869602845493, 0.34442360680351747, 0.19789624297843644, 0.2020793560057753, 0.19254292385841365, 0.1901986451218921, 0.18973223683174356, 0.1950811449780243, 0.1774615942049277, 0.19012520430059165, 0.17792009386682983, 0.19528768444199895, 0.1834704474973351, 0.07207436900763042, 0.06406787024402716, 0.06531801312961161, 0.06458883409476657, 0.0660621407380464, 0.06367030590088985, 0.06634531233134677, 0.07452701452755228, 0.07435449334901278]}, "mutation_prompt": null}
{"id": "6248bc76-3771-48e7-af8c-8bcd06430a0f", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "6e4052fc-1777-47be-baf5-42089b49f699", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "a9495b2d-ca7b-4f9c-a5a5-c221f78d1ff0", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "c830ca26-7636-4d13-a384-c4153987edec", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "6cc1a592-30ea-488c-8b55-78b9356dff4a", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "5bacfb05-d2f2-4910-8d87-f238b4d3d21d", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "0856cdb3-fd62-436d-8420-bb4830c03000", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "3f33993b-fb3b-446d-86ee-77b2401bbf3e", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "0c02525c-2104-4217-b7b7-a887827331fd", "solution": "import numpy as np\n\nclass HybridDEALSImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.4\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.dynamic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def dynamic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridDEALSImproved", "description": "A hybrid strategy incorporating greedy tournament selection and dynamic local search to balance exploration and exploitation for efficient convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.37150005752307025, 0.36388681799896627, 0.3645898347695943, 0.375671319399814, 0.3826695055871572, 0.38816341306896296, 0.373610609974829, 0.37609487230603134, 0.3902242263096579, 0.06982636065226067, 0.08011146047133644, 0.06439739005387857, 0.09106507291211596, 0.08405804668583294, 0.06714626187490957, 0.10442446759579649, 0.08130399046623915, 0.08013029360027668, 0.08941818314516692, 0.09531149822031582, 0.07810983467257515, 0.07754919312785258, 0.09057774723903367, 0.07894958669501517, 0.08159486065082022, 0.09009805641403523, 0.0917597098228653, 0.07931624202787302, 0.06626700782202166, 0.08630449295526943, 0.06442146575079044, 0.07122241254888173, 0.06756254571764453, 0.06922035176937513, 0.06523349462913852, 0.07691343133685113, 0.9469486496578315, 0.9686138776564782, 0.8946763477146122, 0.9396871330629788, 0.9178061041254109, 0.962521241166044, 0.9122390567950042, 0.9391229738105178, 0.9591262107189961, 0.17443997559530944, 0.16499884039476398, 0.1464698957262226, 0.168592024996832, 0.16586793839463976, 0.1593805296325056, 0.18032697284385502, 0.16939269410420166, 0.17059846209236906, 0.21393932600533982, 0.22728807137817753, 0.20904493423657755, 0.24876651654959592, 0.23267949164413326, 0.2389970509339301, 0.2513080764704061, 0.220496622424458, 0.20725608343678237, 0.11644147643496017, 0.09705891475760087, 0.0989297142341109, 0.10854835143664643, 0.1079158858873378, 0.10732269507754477, 0.1104694270151747, 0.10771758789841801, 0.11210981990293245, 0.11194627891298692, 0.13761366434323952, 0.11564619236311957, 0.11117418454471206, 0.09809931199182098, 0.10593331154832197, 0.09485843012221917, 0.113060835780731, 0.08259841115155175, 9.999999999998899e-05, 0.0018659570869178355, 0.00020221176389223494, 0.0037926698311566698, 0.006043384325031709, 0.004469826293027279, 0.0008181699372388218, 0.002325997557495074, 9.999999999998899e-05, 0.11564991016725568, 0.09173665603952663, 0.1260628162706986, 0.09146106166712709, 0.07837590909920289, 0.10673285742385774, 0.10113845724601889, 0.1142386143948092, 0.11283323056672467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07455917667397405, 0.06183510019366201, 0.053744503945138744, 0.06592250376073439, 0.0701176234538119, 0.05792245441810795, 0.05936249044078612, 0.06595144768067007, 0.0695064109873782, 0.33203013478426213, 0.3369617260006078, 0.3464170158795098, 0.3220146752340346, 0.34883656447076516, 0.3353439921146373, 0.3350095577412142, 0.31750006393527375, 0.3328688454721317, 0.07842195266998897, 0.08910167736003627, 0.08212429728289916, 0.08281988867641976, 0.08266882778402396, 0.07926815135901832, 0.08537429712821598, 0.07433037683422938, 0.07875672760502361, 0.1487669349119768, 0.16011375588324372, 0.16592021527767598, 0.15361202408589358, 0.17975145203844678, 0.20188588377990668, 0.1643570123499818, 0.18726117921715157, 0.18628417138357423, 0.2055922451555181, 0.21913929691185452, 0.21066568919111683, 0.19709138853377695, 0.21849430126954617, 0.21474613026737532, 0.23261716238005847, 0.2326482382158367, 0.2309893066106622, 0.14971031905943, 0.15875139288283968, 0.15251465460603308, 0.1475601545279509, 0.15218610389344345, 0.1575943523303056, 0.1538871815319688, 0.18211406596575586, 0.15415524084856258, 0.19153436100398258, 0.18348473895974038, 0.1976211372341552, 0.18318981608802598, 0.1775822507946745, 0.1857112888358885, 0.1738482449366877, 0.17165609752483146, 0.185324451497773, 0.17231595700944602, 0.16683750287127064, 0.17482958920433556, 0.1621280212603231, 0.1868985568749406, 0.15934740676141212, 0.16265171746315388, 0.17404399021018913, 0.18585145624800314, 0.34040515239825253, 0.3164454074657982, 0.3295620298732056, 0.286605531831423, 0.255179135333783, 0.2933204609983021, 0.3247961717760458, 0.2537449828709145, 0.29227622372408757, 0.3207203089435058, 0.19657817558266832, 0.21355214433319825, 0.33074724860887417, 0.2514627181342236, 0.2162815417748446, 0.3193931508766067, 0.30264549689897136, 0.1915468688287928, 0.19836005998954165, 0.1930206764015333, 0.18738518613162536, 0.20450375397576148, 0.20022095937614404, 0.1767000307276061, 0.20222977240991213, 0.18907025616782436, 0.18692396423159885, 0.06613956798650689, 0.06344589478045293, 0.06560882023699066, 0.06283261935034334, 0.06303390291528899, 0.0714267535220039, 0.06863147845545658, 0.06483780083956459, 0.07331888794941221]}, "mutation_prompt": null}
{"id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 55, "fitness": 0.2762307039866435, "feedback": "The algorithm FuzzyHybridDEALSEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.20.", "error": "", "parent_id": "225fd365-ea26-4325-89d8-122508af1c7c", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "de515e93-57b6-4edc-be1c-53858eaee529", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "bc18482f-a052-4f77-b027-b40aebe410e9", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "8e0e15b1-12a7-4ed2-8336-a7e177728f6a", "solution": "import numpy as np\n\nclass DynamicMemeticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(80, budget // 3)  # Adjusted size for diversity\n        self.mutation_factor = 0.8  # Slightly reduced for stability\n        self.crossover_prob = 0.85  # Adjusted to explore new areas\n        self.local_search_prob = 0.4  # Increased for more frequent local search\n        self.tournament_size = 4  # Larger tournament for more competition\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Dynamic mutation factor\n                mutation_factor_dynamic = self.mutation_factor + 0.1 * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Stochastic local search\n                if np.random.rand() < self.local_search_prob:\n                    self.stochastic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def stochastic_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)  # Reduced step size for finer search\n        for _ in range(3):  # Reduced iterations for efficiency\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "DynamicMemeticDE", "description": "A dynamic memetic optimization strategy combining adaptive differential evolution and stochastic local search with dynamic mutation for accelerated convergence.", "configspace": "", "generation": 58, "fitness": 0.20177150525872792, "feedback": "The algorithm DynamicMemeticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.42532907772252726, 0.41398774364936675, 0.42880599279918397, 0.47221297276554575, 0.45741099430170684, 0.4515875561910464, 0.42587344778722747, 0.43295275205234174, 0.4452627100829949, 0.11939437792295737, 0.12195786575570766, 0.0996338259875087, 0.1033844942344102, 0.11539690728330876, 0.1393938854818556, 0.1061962204758301, 0.1389767533319728, 0.13455746563495086, 0.09311010016337551, 0.08677156252437712, 0.08851643036006718, 0.08766593687684676, 0.08735920624071969, 0.08696641405653305, 0.08713841442310388, 0.08473146127901832, 0.09814466001658806, 0.07265045669919978, 0.06899338656119869, 0.08446739259459679, 0.09083907106660594, 0.08497854720017983, 0.0789025001642858, 0.0750378284923785, 0.08687452849214061, 0.07254036538855779, 0.9739015167657525, 0.9594187958493002, 0.9163956557198452, 0.9677774423404281, 0.9435967437631904, 0.9091272086286795, 0.9659737522771764, 0.9679204561116348, 0.9533858517626783, 0.20335775733133787, 0.1852897004034062, 0.19986884546927008, 0.19157423593843326, 0.18564807726934818, 0.208529721048054, 0.19446402395174478, 0.2003915218211607, 0.20025505314021153, 0.25377482972173404, 0.26242075223495753, 0.2214095510303059, 0.28110886866991736, 0.25060131204179226, 0.2580918705700196, 0.25523082077651615, 0.24432109675232683, 0.24810914162280795, 0.11998830209329936, 0.11649132153990849, 0.12529699757614576, 0.10961289227150739, 0.11555604830231081, 0.13603967333006006, 0.12208376058391901, 0.14787411481665425, 0.14501089647480525, 0.14395179926785417, 0.1076481239374476, 0.11521307510637124, 0.142125944794246, 0.11333126071333499, 0.12779241229639682, 0.1098471523593485, 0.11372278685241677, 0.11305063460836096, 0.012445103457605855, 0.010469660575868844, 0.019592693607207168, 0.020637698830470064, 0.0028044648108017656, 0.012821077432768613, 0.015805485877280256, 0.025079121772188073, 0.008869214894390964, 0.12324429646553092, 0.13402284631122807, 0.10937331671987016, 0.15364012512139658, 0.12748651464823268, 0.11081615136409873, 0.11665311827254521, 0.1448928222429775, 0.11142092188734332, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08073352760106556, 0.07366133678112907, 0.07531505069635547, 0.08128569876735259, 0.06994886649734455, 0.10732734629031315, 0.07540657777650717, 0.08470578351770452, 0.08513406946357371, 0.35894706264078746, 0.3613208305681145, 0.3760762254885641, 0.3744147785991495, 0.344511441746025, 0.3770493377592806, 0.369985214778623, 0.3602639239081409, 0.364567198664851, 0.087981377407641, 0.09310205244754322, 0.0789187544443275, 0.0901121347961682, 0.0874020442079898, 0.07620959309392639, 0.09472001241886652, 0.07919419675139105, 0.0942012584315376, 0.18335593471326606, 0.15967251275060157, 0.16355689301731058, 0.18298358466013798, 0.16328250545637146, 0.1601247440368696, 0.18134604675395638, 0.16302611871471995, 0.16430364468343672, 0.23453769102245814, 0.23458735256482388, 0.23173503646168458, 0.215465913121755, 0.2149823739223682, 0.20660612449263238, 0.25138955808513297, 0.2456939587857444, 0.23366008565619545, 0.1840055828587117, 0.1719069334602682, 0.18663162797855803, 0.18631587264658245, 0.16867092309236342, 0.1622785564671012, 0.1790879668024865, 0.1942250684553085, 0.16980943341421317, 0.17640095175018577, 0.1974458237974943, 0.17730390456643874, 0.18660825513949852, 0.1958317271986314, 0.17812629944502756, 0.19270335516196668, 0.17027907422641586, 0.18088656589347907, 0.18402095886340808, 0.17818031735271178, 0.17465621456521907, 0.18975157300628975, 0.179334578270965, 0.17017897035227503, 0.17212416086098525, 0.16584838928390655, 0.17828030426276342, 0.3703465299472519, 0.17483789044567255, 0.4132884515631349, 0.33794728974135935, 0.2035911231342299, 0.18413977979822804, 0.3353507012908783, 0.28287027987979574, 0.3782559402973764, 0.34437873366090077, 0.31612622737872753, 0.19828931048611598, 0.28245124471944616, 0.22986677164189528, 0.3314860487172143, 0.20450317162603138, 0.3560624736786956, 0.41254506950908987, 0.18751183290618634, 0.22066042558985255, 0.18216257466221197, 0.18966571467877413, 0.1871466715929746, 0.17939387228991055, 0.18816571356073264, 0.18187756270851918, 0.20267893637108814, 0.06950155678885728, 0.07376049323453848, 0.06688247967797611, 0.07124737833516792, 0.06739095214209756, 0.07940521652451193, 0.06750005541032655, 0.06348826466049762, 0.06860949332952859]}, "mutation_prompt": null}
{"id": "7a9ea709-3d87-4c3c-9c04-9e3aaec7fef2", "solution": "import numpy as np\n\nclass DynamicAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)  # Adjusted population size for better exploration\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n        self.learning_rate = 0.1  # Introduced learning rate for adaptive behavior\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a = self.population[best_idx]\n                b, c = self.population[np.random.choice(indices, 2, replace=False)]\n                \n                # Dynamic parameter tuning with fuzzy learning\n                mutation_factor_dynamic = self.mutation_factor * (1 + self.learning_rate * np.random.uniform(-1, 1))\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive local search strategy\n                if np.random.rand() < self.learning_rate:\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)  # Reduced step size for precision\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "DynamicAdaptiveDE", "description": "Dynamic Adaptive Differential Evolution with Fuzzy Learning to enhance exploration and exploitation balance.", "configspace": "", "generation": 59, "fitness": 0.19158406953504412, "feedback": "The algorithm DynamicAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.4154727590253877, 0.43685820894239547, 0.4527229159315853, 0.4630803403006909, 0.4425625801006706, 0.4591618369197995, 0.4555979117784734, 0.44493579837612196, 0.45010200937140465, 0.15617593820684783, 0.133419752068351, 0.1482474246397556, 0.15665019071112196, 0.14702560247741825, 0.14385650957440488, 0.14232047232408163, 0.1502017494392378, 0.14055124064353908, 0.09578268855794503, 0.09702734263370172, 0.11279327944145168, 0.09511841582544478, 0.09679718866328346, 0.0944097207461706, 0.09864243873531975, 0.0938265219812936, 0.10359712956774458, 0.07812218144055605, 0.08746975482865216, 0.09993371434703235, 0.08007078140057733, 0.09795411511814345, 0.07992090459897883, 0.08898636515575908, 0.08244007615235038, 0.08882626579222919, 0.9369379462754226, 0.942173585349698, 0.9355189753709601, 0.9304516475942743, 0.9392166619482412, 0.9227554232584818, 0.9535025042596371, 0.9516683604161511, 0.928482745373433, 0.17797717322074846, 0.19356918896853959, 0.15490844342072674, 0.18718367713750783, 0.18485320131406946, 0.18333691069073488, 0.18072792740111543, 0.18200250732176748, 0.18779260698289824, 0.22188509625489605, 0.22847932011969463, 0.21053328634097468, 0.2479413726600691, 0.22132398169768885, 0.23252829203151126, 0.20883608889528227, 0.2187079457886344, 0.22592582808282746, 0.11199567243679032, 0.11370069972931562, 0.10956083012327889, 0.11852421115509992, 0.11131327359532128, 0.10907656344193895, 0.11839050010048036, 0.11292231232867977, 0.11736799746422544, 0.09625436003453147, 0.11966860347752428, 0.0990781039554427, 0.11143496927582852, 0.09974806852278795, 0.11343951024401999, 0.09505266797963718, 0.11783314821970248, 0.08806452666978837, 0.000818496082200526, 9.999999999998899e-05, 0.00026122605074963, 0.00026777143994927144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07251383647683507, 0.10578336368047458, 0.08502204621568654, 0.06655709339535065, 0.08932765581569513, 0.0796362686082992, 0.08307390377460855, 0.0833635103479623, 0.101466427872277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06844414976166058, 0.06082529594734154, 0.06000267788276781, 0.06634048879779653, 0.06348123301123143, 0.07110290857399615, 0.0771940740037691, 0.07671387459105083, 0.06508832078032445, 0.35532909890259967, 0.35437113033440293, 0.373451876595988, 0.36166760810982335, 0.36403040933167097, 0.36384428921522893, 0.3611383380005796, 0.350866562526963, 0.3585235453212433, 0.08235075022432847, 0.08917118183162343, 0.08077793977101466, 0.07945144594675058, 0.09240478924059714, 0.08722894237730139, 0.09149912613011835, 0.07991866737913822, 0.08179206174746634, 0.15470424616550793, 0.172102255138456, 0.16750015012639574, 0.18021684953234285, 0.16125226987760055, 0.17919186268508225, 0.14820793509098606, 0.1925494052061908, 0.17734533387647244, 0.22631510279134237, 0.2231029962876908, 0.22931253212152314, 0.21087048063009928, 0.21264313200204943, 0.21428785568005482, 0.24275266978205978, 0.23631731605413242, 0.2366471301769114, 0.1565793826333025, 0.15871910147472568, 0.156758914066372, 0.15473515367195234, 0.16863051830040676, 0.1528159980987288, 0.1646898202420365, 0.18425471303569585, 0.16109241133242103, 0.1908102615086279, 0.17741741230464958, 0.19035089768400226, 0.19139397198231323, 0.1958533891903338, 0.19520930516789736, 0.188041942093645, 0.1989570194298521, 0.1763782283494547, 0.18276219534630678, 0.16833188951266198, 0.18207534886597587, 0.1727618728826994, 0.1800484875476317, 0.18155909064089615, 0.17412767772526183, 0.17897814650641752, 0.18305430823328572, 0.2903162478698814, 0.20978445810613588, 0.25927873107568267, 0.21453069357083732, 0.2564835959488344, 0.17572205730600488, 0.172501138372552, 0.346071547854263, 0.19947720095631416, 0.2506399801670449, 0.1962390924994315, 0.23201088284557114, 0.27504226859311476, 0.17671337420521305, 0.23998338734558278, 0.24794158238255481, 0.273771140958614, 0.2746880079009989, 0.1927936117156599, 0.18513147512437733, 0.17688414887952641, 0.19365809238519227, 0.17966237766189408, 0.2221735963484356, 0.1846772088634553, 0.17394553450006756, 0.17343742016398378, 0.0696256524289276, 0.06919801920907975, 0.07317659618475425, 0.06952638166696457, 0.06441544091976992, 0.06663973120517896, 0.07758634568278999, 0.0716893798431738, 0.06512440893004534]}, "mutation_prompt": null}
{"id": "f1c33422-651b-47f6-9ee4-e827d3b6e75f", "solution": "import numpy as np\n\nclass DynamicGaussianDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n\n                mutation_factor_dynamic = self.mutation_factor * np.exp(-self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if np.random.rand() < self.local_search_prob * np.sqrt(1 - self.evaluations / self.budget):\n                    self.diversity_based_local_search(i, func)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def diversity_based_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n\n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "DynamicGaussianDE", "description": "A dynamically adaptive differential evolution strategy with Gaussian mutation and diversity-driven selection to enhance convergence speed.", "configspace": "", "generation": 60, "fitness": 0.20319226027431667, "feedback": "The algorithm DynamicGaussianDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.42307647657063696, 0.37716936830556946, 0.3914991749615888, 0.3906900588274811, 0.4121420425696549, 0.40351755966634095, 0.40265585183204866, 0.39764428778446226, 0.39947318731954995, 0.04245317743049415, 0.03298217210302412, 0.04501609899211001, 0.03376059344314364, 0.05104793374526395, 0.043687717459295894, 0.046539711903315406, 0.03394880573698522, 0.056613521820587764, 0.0946551710271184, 0.1069877808127141, 0.09669956807892854, 0.0867514288405371, 0.11300707773012764, 0.08917789843143387, 0.09641780728820382, 0.09400139057014256, 0.08958140594217168, 0.08388162506543173, 0.08591827237128036, 0.08544941625078262, 0.07979361725790768, 0.07963741391836898, 0.08966096662534728, 0.08187363609126352, 0.09061968167816215, 0.08892092736742885, 0.9424707621308337, 0.933811570128265, 0.8867967338887611, 0.9059724780032071, 0.9075675946427468, 0.9430579504529457, 0.9822700786232363, 0.896239822143031, 0.9799927682314309, 0.22132765427771572, 0.2218793562925011, 0.21241045481392362, 0.21806344085181695, 0.22411025790596417, 0.2213578540898834, 0.2194763101290803, 0.2216093655880833, 0.2245315792104391, 0.2755102886351146, 0.39308565299787457, 0.37361126061867356, 0.2873872397588806, 0.28229980275228017, 0.30176833774653455, 0.2929201273160047, 0.2809578237280681, 0.30628452148226804, 0.12890126698109183, 0.13104694546357964, 0.125377882434499, 0.12849728482625067, 0.12294892792924073, 0.1267338315840265, 0.1254519325576091, 0.13810064890205453, 0.12453897234397115, 0.12004124679225858, 0.13097339294179655, 0.1289011817470036, 0.12605231323255317, 0.11772285783245584, 0.1491041553624236, 0.13344867108669756, 0.14548425559017364, 0.11250112256592837, 0.02768043310726065, 0.019574444681110248, 0.013866889616327538, 0.01079674561333721, 0.009068683618065787, 0.013305960530135108, 0.001919273299275659, 0.035215000028266386, 0.010747283341368208, 0.09341510860418134, 0.08984229332193228, 0.09518495580350117, 0.09314366267756946, 0.08551209613285227, 0.09544493426654277, 0.11801979044971556, 0.09437170838351139, 0.07760586064583785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07556611466625618, 0.07890951898643839, 0.0748374748290358, 0.07963530142416653, 0.09113030942976708, 0.08929354554465774, 0.08035439601138639, 0.100752615057912, 0.0727842450004551, 0.38540708077347274, 0.3714178485934274, 0.3617522706869978, 0.3619232663382248, 0.36780632026480176, 0.43021627562039455, 0.3755827949451426, 0.35902032843973086, 0.3615732485532369, 0.0870812522569917, 0.09176931540519562, 0.0913380907961513, 0.07975189932182625, 0.08765196220307025, 0.09473917337818782, 0.08636447275943315, 0.07942083221160179, 0.0874082403104145, 0.1361066529337691, 0.16275998613628928, 0.13565980885963658, 0.15982749159975995, 0.15385702853560468, 0.15678602288816512, 0.15101542626087872, 0.19960303466479823, 0.16106006511175963, 0.25507244244535254, 0.25147587156825213, 0.2659953388043881, 0.24116827026301846, 0.25738203186001296, 0.2522503721440956, 0.2693191736445679, 0.2538458379527655, 0.260963440853725, 0.18312651995615914, 0.20366081274711834, 0.19286159473942, 0.17794238362039905, 0.187930602682844, 0.19385895789533547, 0.18916025494303035, 0.19664637973694488, 0.1942343734236529, 0.20149944995935998, 0.18257659205681032, 0.19696170970056193, 0.20650351255838417, 0.2027344671666368, 0.21361246808709944, 0.20140934161847857, 0.1902828902153758, 0.18352543533815302, 0.16927629844316938, 0.19584767047929375, 0.17558543671491167, 0.18151412686446833, 0.18506193918473457, 0.16966228031136066, 0.17684746220760994, 0.17627235752039105, 0.18269940430827114, 0.4352217546800343, 0.24477201909829782, 0.424717243331568, 0.37379569791602385, 0.37135238751872157, 0.41112558179568603, 0.4024578291931321, 0.3252196630279469, 0.3410906696881848, 0.37602193699196407, 0.34232722549036254, 0.4011310048139082, 0.3149232602772146, 0.1832358887724317, 0.19658713002689387, 0.19581455776312273, 0.19969232267259163, 0.20102786200230083, 0.18783485178033965, 0.1785924124645364, 0.19116650684565362, 0.18265115471928162, 0.16679238498347349, 0.20846653019462535, 0.1930385065394865, 0.1781657834838103, 0.1901000175970491, 0.07712462469138714, 0.08034507737728558, 0.07358548344309512, 0.07007681019016432, 0.0677491170788389, 0.07296157120255742, 0.0744635037155964, 0.0688090559976059, 0.0729936525191568]}, "mutation_prompt": null}
{"id": "78933965-d9b8-49d5-b05f-f483703cd4f4", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "f7c3c25c-4a69-4307-9658-3bf3a429abfb", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "9f80902b-1bbd-4c03-97d0-832bf61804d4", "solution": "import numpy as np\n\nclass AdaptiveStrategySelectionOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(150, budget // 3)\n        self.mutation_factor_base = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 4\n        self.strategy_probs = [0.5, 0.5]  # Strategy selection probabilities\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                if np.random.rand() < self.strategy_probs[0]:\n                    chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                    best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                    a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                    mutation_factor = self.mutation_factor_base * (1 - self.evaluations / self.budget)\n                else:\n                    chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                    a, b, c = self.population[chosen[0]], self.population[chosen[1]], self.population[chosen[2]]\n                    mutation_factor = self.mutation_factor_base * np.random.rand()\n\n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "AdaptiveStrategySelectionOptimizer", "description": "An adaptive evolutionary algorithm incorporating strategy selection and dynamic parameter adjustment to enhance convergence speed by intelligently exploiting algorithm diversity.", "configspace": "", "generation": 63, "fitness": 0.2372276731206233, "feedback": "The algorithm AdaptiveStrategySelectionOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.5273536198383129, 0.5141566165232685, 0.5220342628380075, 0.5390078875684625, 0.5354999561646199, 0.5324861657577828, 0.5431382412607577, 0.5275646473548312, 0.5387842132227674, 0.23852971480211504, 0.2567704252829851, 0.2462779976659364, 0.2433121733494441, 0.23461956416316754, 0.2522505727912846, 0.24021499804485813, 0.24226863415651845, 0.23620179815525433, 0.10817006159125486, 0.10625277267099331, 0.10454193548181634, 0.11212687307019154, 0.10809724057326553, 0.10613791012655815, 0.09973751220846117, 0.10720357525865898, 0.10333947424218226, 0.0852136067256275, 0.10107217505581356, 0.0953274099460859, 0.08544887789687128, 0.08735147030216317, 0.10040054044819413, 0.09650968399805204, 0.08543160742345257, 0.09638966199247567, 0.9815000015799447, 0.9075412246060094, 0.9424478304821573, 0.8976912874108663, 0.9208421154942115, 0.9429352263963916, 0.9319866932636255, 0.846113354719426, 0.937141215192836, 0.25146617778951363, 0.24138189898795215, 0.2198952152537712, 0.24801818769760808, 0.2286588253398718, 0.23168312991470563, 0.2344103548866473, 0.2319581745103575, 0.23801676945332173, 0.3979963118613965, 0.4496062158973958, 0.28318156791974736, 0.45357891513712, 0.42337634342011277, 0.4929575365078306, 0.4769594615322291, 0.4565547782838356, 0.5255464512974486, 0.13120916419519668, 0.14110774288430494, 0.14838684140261227, 0.13795027554664796, 0.11866074918703562, 0.11933654955481654, 0.16490150232745893, 0.13634439852130198, 0.1462622150391364, 0.12388945846981891, 0.1179269792773261, 0.1480940627660864, 0.11450662894284613, 0.13397088752353215, 0.17635119396639087, 0.15523001280587145, 0.12249694313203341, 0.10054384963170038, 0.0835839273539758, 0.08199963156944756, 0.06843118178506247, 0.06765387713280802, 0.0696339141922021, 0.07091773229498444, 0.06489179914258825, 0.07148694819207246, 0.07692171916035329, 0.21411603430759596, 0.19367523178168666, 0.1913350454794911, 0.1797633144664902, 0.21165585683114652, 0.16425823048168642, 0.20549994682488737, 0.22255252303479933, 0.23155311744128226, 0.02778903577484848, 0.03738503212069322, 0.03221016340507721, 0.03302452444175885, 0.02378896437552558, 0.021858751265730114, 0.07191549414989584, 0.05646272160585175, 0.030687425584941974, 0.10755893508759984, 0.11877901114422984, 0.11766250895714825, 0.11346964732601028, 0.10498323027045986, 0.12952278586004617, 0.113292972548244, 0.12929172448983006, 0.11707773171739555, 0.42306275225132484, 0.43291085618149205, 0.40939033244854195, 0.4442683623952405, 0.4288210103053087, 0.408104238312054, 0.4252764213061173, 0.4177774314102426, 0.43148606552377, 0.09949368021246041, 0.10378801280978511, 0.0863320429805905, 0.0893991634337179, 0.08938477181715809, 0.09189684454594427, 0.10538471344341782, 0.0985329463872191, 0.10455041648730745, 0.15533064840514565, 0.16006932218529457, 0.13515958264634576, 0.1729440041920507, 0.1497393865030071, 0.14881886691342427, 0.12882820096260916, 0.13578077065157956, 0.1706398406725781, 0.27231664399899647, 0.26738808582555784, 0.2747035261782773, 0.2591343065708229, 0.2744104809789094, 0.265210055055628, 0.2866371742092738, 0.2852764012203527, 0.281756151253828, 0.20368543271106, 0.1989076347493296, 0.20744467622867746, 0.2037403696771768, 0.21401592343473508, 0.20363879423735376, 0.22203224310531833, 0.2439823382462598, 0.20808658642941968, 0.18676646211727488, 0.18222057726848995, 0.20279149442159572, 0.18105789114134496, 0.18258720600170286, 0.19151709985839527, 0.19702209150950944, 0.1859014989404152, 0.19088727331354793, 0.2057872544595446, 0.18593812233081997, 0.17858101376412272, 0.19634090627890266, 0.19277357646891646, 0.19165068195697677, 0.17116680595255862, 0.18645229191779722, 0.18019337800222912, 0.2732551668853883, 0.455166451961456, 0.1696788059408344, 0.41377796022301094, 0.2754480141844472, 0.28468324748785434, 0.3405857443905589, 0.23180487647490722, 0.3841404485277653, 0.2627720969013275, 0.35423062158237983, 0.3058971897869741, 0.299033722904646, 0.39520360647545805, 0.25253905397264065, 0.2964472895132654, 0.1989764960502527, 0.40774522975027805, 0.20485564619107577, 0.18414836290966585, 0.18967230040298355, 0.19283617951721077, 0.19436456056875484, 0.19487065662150727, 0.19343460623643782, 0.17551814573555424, 0.17720657146318497, 0.07749999306175104, 0.07105526605801027, 0.06770205472198099, 0.07174892220723417, 0.06812907585367178, 0.08327732482031447, 0.07384211328645574, 0.08722689149106755, 0.07670027513468447]}, "mutation_prompt": null}
{"id": "7b9f43e7-06f7-46cc-bd35-0e370e6e71e9", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "bbe0292f-4e28-4baa-9d73-14f5fcd540cd", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "dd36804a-01bc-4d50-902e-24c09257e7ea", "solution": "import numpy as np\n\nclass GradientFuzzyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 3)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 2\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Adaptive fuzzy tuning with gradient-based adjustment\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Gradient-enhanced local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.gradient_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def gradient_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n\n            gradient = np.gradient(self.population[index])\n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation - 0.1 * gradient, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n\n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "GradientFuzzyDE", "description": "A hybrid approach combining Differential Evolution with Adaptive Fuzzy Tuning and Gradient-Enhanced Local Search for improved convergence speed.", "configspace": "", "generation": 66, "fitness": 0.25069099658641936, "feedback": "The algorithm GradientFuzzyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.5790974534854105, 0.5630032637160729, 0.5826625412502044, 0.5705477949178958, 0.5806280016397176, 0.6233650496512902, 0.5955452770370058, 0.588420177628677, 0.5766646760038294, 0.34116746239204887, 0.31287180660040814, 0.3521732337741754, 0.3023973053895542, 0.3129748407155253, 0.3585881537211125, 0.2824868568671204, 0.33822968780471485, 0.3430956321910825, 0.11329072300772258, 0.11461671826830278, 0.11312338102314023, 0.1161543560579199, 0.0982538351135096, 0.10997681719247743, 0.10726754982622277, 0.1096496728350479, 0.10430581576367881, 0.09400752464050133, 0.10255142030009412, 0.09828929612637238, 0.0917704326273533, 0.08988778758069582, 0.08934675812450843, 0.10299726634954443, 0.09249542232774544, 0.09141043516746705, 0.9144499800294397, 0.8964854887101915, 0.8153860718180186, 0.934184424039698, 0.9354993824471024, 0.8643657477628984, 0.9047792577922508, 0.8852035757622129, 0.8403971098666064, 0.26540946000134, 0.23018256637672574, 0.23504396945907846, 0.26669499812707465, 0.24726629082775764, 0.2211698382921986, 0.2209044719293547, 0.2145846139052323, 0.2760168957767952, 0.5925649483194716, 0.4771632758705395, 0.4648856362734515, 0.4795759784332042, 0.4787984669456452, 0.5047375634375972, 0.5018461075577239, 0.5357557420719563, 0.4935030851461071, 0.12534886889119734, 0.12090748939383178, 0.12909225125168666, 0.11903597342453653, 0.13830252657462583, 0.12663382734517015, 0.1480024168639955, 0.14191334112061726, 0.12358561134623236, 0.15430772169765827, 0.1439774935797561, 0.16568351441992868, 0.15969392070103494, 0.1285519018311656, 0.14445832486828147, 0.13017161754024986, 0.10157427293650068, 0.13488493862508055, 0.10285581835607249, 0.07383078623153738, 0.11179310922056651, 0.08194875795674816, 0.09401973729735413, 0.11433208033642439, 0.07542308170169032, 0.061629478527892245, 0.0972066596232255, 0.20085830123486936, 0.21636298130318632, 0.22594682230476892, 0.16174628561004134, 0.22710861130986082, 0.17383332611415847, 0.2452686023711257, 0.2480008592445796, 0.22943975938044991, 0.03146714940466133, 0.023827181211967252, 0.04583212616156218, 0.041472276756187476, 0.03951384686048076, 0.04441342927452219, 0.06560066885497906, 0.06691813697851956, 0.0819972060716122, 0.14718767804107757, 0.13261512969518008, 0.14094508296003516, 0.14296218413725803, 0.14342595608826447, 0.15398346546200958, 0.13361921445697622, 0.11720710580565152, 0.1384848791971075, 0.4609357135970954, 0.47275805043809416, 0.4362814047058948, 0.4923920867541134, 0.4621069998666596, 0.4780771639331375, 0.45932281578213097, 0.4695736699498525, 0.46393080717288926, 0.09937445778512866, 0.08392018885702912, 0.08638317116176075, 0.11004521246934384, 0.08400469932918464, 0.08018498911784133, 0.08488271689584104, 0.09366642779967771, 0.10428625420058779, 0.14273263672194625, 0.15204472904357225, 0.1769681757914624, 0.17499140470342478, 0.15654223766956676, 0.14434733125082788, 0.1609782013055404, 0.20102331265434792, 0.1468968664750202, 0.29665789861742287, 0.2889703662621128, 0.29142433676220014, 0.2888411514662518, 0.29872862172043313, 0.2892189204442893, 0.3069150142875593, 0.30829480540769416, 0.30042674943740966, 0.21973690259404643, 0.20493836409324817, 0.2229729843639351, 0.22215780950363218, 0.20334240726936448, 0.22392420497274568, 0.2498901215403766, 0.23957637578736757, 0.23057017934715085, 0.22263880246992118, 0.19768774554578228, 0.17582200891224276, 0.18992421514884983, 0.1772591342726597, 0.1781535227913018, 0.20535003280079045, 0.17751680584494534, 0.2150153372513942, 0.1961564246913614, 0.20966224788739984, 0.19472845557050256, 0.1925667099105257, 0.21822774712182935, 0.21202244419002614, 0.19794019925856232, 0.1777483404311706, 0.2033138319260156, 0.34650690783330995, 0.4190536766538787, 0.49479318257144356, 0.41073767286991214, 0.31242893939523697, 0.23429128337115057, 0.4044908177821188, 0.3041392258986866, 0.2383615898028716, 0.3131974806220723, 0.19047144690556328, 0.28304706124677037, 0.4583448795609911, 0.1819814945382675, 0.3246357341025171, 0.20002990484790684, 0.19324190369411853, 0.1964041173367842, 0.1964252407067285, 0.18339287223732104, 0.17775788214437727, 0.17599343973497794, 0.18620402645646483, 0.20688504820908737, 0.1793946311140533, 0.19039889553103795, 0.1835531842381608, 0.07245034444020748, 0.06943605605021674, 0.07057954912303555, 0.07511107024728247, 0.07667240987203461, 0.06831144011067458, 0.07330167676792332, 0.06725431864319087, 0.07362975061973354]}, "mutation_prompt": null}
{"id": "9667ef6d-c702-4f67-b7ea-811e2945ba76", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "692cf92e-59ac-4386-89f6-bef028a5c44d", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "e0b5a5f7-7030-4135-9e00-bd3551b47e3c", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "5c24e677-763b-4c7a-b225-394a17d9be95", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.population_size, float('inf'))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n        self.update_personal_best()\n        self.update_global_best()\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Particle Swarm Optimization dynamics\n                self.velocity[i] = (self.inertia_weight * self.velocity[i] +\n                                    self.c1 * np.random.rand(self.dim) * (self.personal_best[i] - self.population[i]) +\n                                    self.c2 * np.random.rand(self.dim) * (self.global_best - self.population[i]))\n                self.population[i] = np.clip(self.population[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n\n                # Differential Evolution mutation and crossover\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices)], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                \n                self.update_personal_best(i)\n\n            self.update_global_best()\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def update_personal_best(self, index=None):\n        if index is not None:\n            if self.fitness[index] < self.personal_best_fitness[index]:\n                self.personal_best[index] = np.copy(self.population[index])\n                self.personal_best_fitness[index] = self.fitness[index]\n        else:\n            for i in range(self.population_size):\n                if self.fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best[i] = np.copy(self.population[i])\n                    self.personal_best_fitness[i] = self.fitness[i]\n\n    def update_global_best(self):\n        best_idx = np.argmin(self.fitness)\n        if self.fitness[best_idx] < self.global_best_fitness:\n            self.global_best = np.copy(self.population[best_idx])\n            self.global_best_fitness = self.fitness[best_idx]", "name": "HybridPSO_DE", "description": "A hybrid evolutionary strategy incorporating particle swarm dynamics and adaptive crossover for enhanced exploration and exploitation balance.", "configspace": "", "generation": 70, "fitness": 0.19285949765191987, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.3898388018790272, 0.4399357042533334, 0.381474439178733, 0.4756332054300727, 0.46705687462135215, 0.4506203394357451, 0.46165243795665833, 0.4118322613430676, 0.430240361622687, 0.1290666649637351, 0.12496870669290205, 0.12556844093691455, 0.12002412251862038, 0.14265600736553075, 0.143047220302978, 0.11911059744849994, 0.13820628497622145, 0.11880149872528123, 0.08524541537195673, 0.08296121862092443, 0.09509897102762133, 0.09623111069079515, 0.09872395808294188, 0.09302898750989919, 0.07990625663010908, 0.08920052119099398, 0.10929451160725834, 0.07506871435529394, 0.07813727288499772, 0.11079381230276208, 0.08262558688585375, 0.08289527171671884, 0.08220280569425631, 0.07969336495221746, 0.09228048029908331, 0.08550914994459491, 0.9702919695624319, 0.9734951620889786, 0.9741117603987287, 0.9638580069376893, 0.9661145162343311, 0.9678300397672299, 0.9827308265218657, 0.9776297965825543, 0.9725778750077727, 0.17692696527108487, 0.17856404493658107, 0.19464813989191443, 0.2003028997772438, 0.19751913651875197, 0.18120194579090365, 0.18745085493808822, 0.20195548354386095, 0.20253378224180052, 0.21674242368767282, 0.22851147236369584, 0.1897834832950479, 0.23828778857030575, 0.21046213890771492, 0.2258890749728718, 0.22430539430413288, 0.26791701435294524, 0.25787418437141796, 0.12980965288871416, 0.1209608196189127, 0.1085815971185441, 0.12151913678465043, 0.10785386477500247, 0.09023396288835284, 0.11053805748291756, 0.13437880590336104, 0.1267984376138649, 0.10980413277908097, 0.09599701059693122, 0.11921648593153655, 0.10472308275718589, 0.09819317208802991, 0.09991654016237317, 0.08890668674016411, 0.13635743935586764, 0.1208786516300504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007537356113518356, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050016235122535724, 0.056846179861234525, 0.05535968507696831, 0.040729293500442854, 0.059921235395742456, 0.08681328411650846, 0.03294250194941284, 0.06897941509887273, 0.05359363647315607, 0.004727540545906184, 0.001087090782972533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01084286369408638, 9.999999999998899e-05, 9.999999999998899e-05, 0.06459572497780153, 0.05989148669116473, 0.05909128586858792, 0.07074258825966828, 0.05074863079893144, 0.08782644249125793, 0.07650166791734991, 0.06349720259151093, 0.06239978726412243, 0.35832962074836927, 0.37257949916372923, 0.36511911055659607, 0.3611921704085437, 0.3800549659652541, 0.3867320885966148, 0.36942706481872367, 0.3402125963181788, 0.3589541567194289, 0.08122718879193325, 0.09903574816012128, 0.1006813552388357, 0.09094962443441867, 0.09469131495936056, 0.08227635094686925, 0.09418440030606834, 0.07607584214508112, 0.08222412335792428, 0.12377650753670022, 0.15832365238718193, 0.13888139055506876, 0.14020615480949017, 0.15049320724181237, 0.14346107011605058, 0.1488408557059976, 0.13591270220808016, 0.1677344350962756, 0.27378967003402455, 0.2473807814928285, 0.24355385008789843, 0.23996882437612677, 0.24690438903872824, 0.24751050076172731, 0.25561972427178803, 0.2696913262057652, 0.2568008112913207, 0.1636516627416602, 0.17894868524299223, 0.14999732726160042, 0.17134180724262338, 0.1912745359742538, 0.17579505471215962, 0.2132601635632152, 0.16048758433103338, 0.1877244343887997, 0.17095481036677174, 0.18030148225483844, 0.18876888228559296, 0.1794066755435031, 0.17915384886552488, 0.19167352810933813, 0.18272373614793036, 0.19296640593424086, 0.1797408013406684, 0.16660115255761443, 0.16787845552744907, 0.16354596001535937, 0.16629319442410218, 0.17400256412398885, 0.18335759834959187, 0.184885806747196, 0.17458386195649855, 0.17196398648249356, 0.15502075584668618, 0.263235956250066, 0.5061694642261015, 0.17731893935929288, 0.3486911303171283, 0.16357810207532986, 0.2877557157835665, 0.1518236816631645, 0.16294541851421818, 0.33566844166360565, 0.16691254445489723, 0.1796282377759304, 0.25918373937718076, 0.15782166649578233, 0.33183882032925416, 0.1942753490226119, 0.36995581640789565, 0.34858832774955817, 0.18482209106384995, 0.19157685193136575, 0.19376751359765765, 0.17934998350371967, 0.18702670422061263, 0.18532239588718313, 0.1960593430557951, 0.17254901334004535, 0.17757802540824907, 0.06817441726155304, 0.0676896812520199, 0.06273394282832956, 0.07469920071878622, 0.06381353594208472, 0.0696763045126978, 0.06674585872273331, 0.06916783675221738, 0.07028299269718796]}, "mutation_prompt": null}
{"id": "eda3bfb1-eacf-4307-9566-97c20336e825", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "8fa8172d-6b79-4bb1-b448-b03e5c4bdfa4", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "a458b2a8-8581-441e-a080-a85dfb124e3a", "solution": "import numpy as np\n\nclass ChaosDrivenHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)\n        self.mutation_factor = 0.85\n        self.crossover_prob = 0.85\n        self.chaos_param = np.random.rand(self.population_size)\n        self.local_search_prob = 0.35\n        self.tournament_size = 4\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.apply_along_axis(self.initial_fitness, 1, self.population)\n        self.evaluations = self.population_size\n\n    def initial_fitness(self, individual):\n        if self.evaluations >= self.budget:\n            return float('inf')\n        fitness = func(individual)\n        self.evaluations += 1\n        return fitness\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                best_idx = min(np.random.choice(indices, self.tournament_size, replace=False), key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Chaotic mutation\n                self.chaos_param[i] = 4 * self.chaos_param[i] * (1 - self.chaos_param[i])\n                mutation_factor_dynamic = self.mutation_factor * self.chaos_param[i]\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Chaos-driven local search\n                if np.random.rand() < self.local_search_prob:\n                    self.chaos_driven_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaos_driven_local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaosDrivenHybridDE", "description": "A hybrid optimization algorithm combining dynamic differential evolution with chaos-driven local search for improved convergence speed and robustness.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ChaosDrivenHybridDE' object has no attribute 'evaluations'\").", "error": "AttributeError(\"'ChaosDrivenHybridDE' object has no attribute 'evaluations'\")", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {}, "mutation_prompt": null}
{"id": "aff6c7ef-436c-4b9c-83b5-cf7eab9c5d99", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "30a2c7b3-1b34-4fe5-a781-e3d69c5e852f", "solution": "import numpy as np\n\nclass DynamicAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 3)\n        self.inertia_weight = 0.9\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.population_size, float('inf'))\n        self.global_best_position = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.personal_best_fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        best_index = np.argmin(self.personal_best_fitness)\n        if self.personal_best_fitness[best_index] < self.global_best_fitness:\n            self.global_best_fitness = self.personal_best_fitness[best_index]\n            self.global_best_position = self.population[best_index]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                self.inertia_weight = 0.5 + 0.5 * (1 - self.evaluations / self.budget)\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.c1 * r1 * (self.personal_best_positions[i] - self.population[i])\n                social_component = self.c2 * r2 * (self.global_best_position - self.population[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                self.population[i] = np.clip(self.population[i] + self.velocities[i], \n                                             self.lower_bound, self.upper_bound)\n\n                current_fitness = func(self.population[i])\n                self.evaluations += 1\n\n                if current_fitness < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = current_fitness\n                    self.personal_best_positions[i] = self.population[i]\n\n                if current_fitness < self.global_best_fitness:\n                    self.global_best_fitness = current_fitness\n                    self.global_best_position = self.population[i]\n\n        return self.global_best_position, self.global_best_fitness", "name": "DynamicAdaptivePSO", "description": "DynamicAdaptivePSO: A Particle Swarm Optimization algorithm with dynamic inertia weight and adaptive learning rates for improved convergence.", "configspace": "", "generation": 75, "fitness": 0.14497865220335626, "feedback": "The algorithm DynamicAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.22797176824498755, 0.2279304365928041, 0.23965315026953027, 0.24782953101034066, 0.2925705362246841, 0.28242907041836296, 0.2562355043076979, 0.28163035001082937, 0.2728774053415651, 9.999999999998899e-05, 0.00403920511057132, 9.999999999998899e-05, 0.02122894261507413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006986397144865264, 0.00010119604457359266, 0.05897459299779839, 0.056419169916269274, 0.0462683364506945, 0.0460729127304752, 0.050909441136144595, 0.050312263396207535, 0.06258549230531385, 0.06570243424162237, 0.07604578576837284, 0.034620763310615255, 0.047207187890022984, 0.04702208688637877, 0.04669454191160072, 0.043194237292258686, 0.04730122151929972, 0.06034883464218843, 0.05225871479103317, 0.04331575894377371, 0.9814434345350925, 0.9895367220193171, 0.9818391783146502, 0.987022273676755, 0.9872058609408783, 0.9852229711910582, 0.9872476854560895, 0.9856286104114904, 0.9850104417505533, 0.1255099450525089, 0.10839370954942751, 0.12106430383071021, 0.12036874319405466, 0.11656418943157021, 0.10361346049222886, 0.1235802672807671, 0.07653984252818391, 0.10353958065213376, 0.13984300626887125, 0.14869508096729245, 0.12097965242708175, 0.14403390143703, 0.142259082307435, 0.15112079923310795, 0.12873582836602615, 0.14042999487271757, 0.16279083152618368, 0.03949518519310735, 0.02330792470316878, 0.05449410177245917, 0.037857686117021117, 0.027366118798158978, 0.06212656968755004, 0.029537056053213773, 0.02958321606189418, 0.06232359820014788, 0.04236324651877399, 0.02687363539699439, 0.06509473496635743, 0.021890694702072166, 0.04023532991645884, 0.03799385329629734, 0.010567893347664392, 0.010704528077429498, 0.06534980455709005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020729741579783578, 0.06659810136642608, 0.023172582036574574, 0.060621984811549345, 0.05574334115171131, 0.07019403886098752, 0.016411682306535114, 0.03978726072397243, 0.04206772989697749, 0.004386051965538207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020551103384858327, 0.027688394230376945, 0.008388214469216337, 0.013525641355638829, 0.021102554599783607, 0.026630765071289697, 0.03997900470789573, 0.028639653782357555, 0.025252419640783175, 0.2535800519797281, 0.2525762294789393, 0.26113855153447574, 0.24920637321873385, 0.2024764377798367, 0.2377994463841312, 0.23995874819549767, 0.2567376317984911, 0.2308341538581451, 0.07460014309395613, 0.07719501594713363, 0.07444287517886383, 0.05369807644183766, 0.06070514032901486, 0.061682624153947874, 0.061877380740274934, 0.067673164340459, 0.052959902716603224, 0.1721457428283999, 0.1629080497320341, 0.1318122152932143, 0.16529970788503268, 0.16096273376069326, 0.166248721144738, 0.13521019193316697, 0.16037752515490955, 0.14872237276467726, 0.17636292907072548, 0.17115008903744133, 0.18914257499017717, 0.15894878196552586, 0.1759416893954283, 0.20497779644400316, 0.18790725382461104, 0.21872696895200427, 0.2144879169525149, 0.14887957786738715, 0.10379608991922928, 0.12360951129404008, 0.13590343994955423, 0.1425357489519784, 0.1410213735343474, 0.15886697660501437, 0.1564999242194115, 0.14965875213997093, 0.17616425114758916, 0.1499887396231645, 0.17298645087971332, 0.17168688104465035, 0.17973973843771274, 0.16828552774699457, 0.157709134460428, 0.1491633129686043, 0.21291083574757963, 0.15425249722516143, 0.12666499589344826, 0.15012564889576874, 0.1543703641082702, 0.16405346080258565, 0.16627909900190496, 0.14394675660892609, 0.1574708638624961, 0.17317684695414537, 0.17181028904696782, 0.1671269943490188, 0.27970983148745243, 0.15009036801075404, 0.18458529717658245, 0.14349671784190654, 0.16800048447746252, 0.15202811436510333, 0.23434073836603775, 0.20735022201890696, 0.15884555293263147, 0.16576993931983108, 0.2153483616742249, 0.21201463091146378, 0.20615410406510504, 0.14989635417737968, 0.19759406234244103, 0.18598528743047016, 0.1839898145529809, 0.1834636137382334, 0.18121900856476292, 0.19826689596192326, 0.17766302960594627, 0.18246634443668464, 0.1794807165864808, 0.21367846880449992, 0.1911266397982193, 0.05076284966936906, 0.04900731117333912, 0.05915140653263751, 0.053240701449741024, 0.048855197278526385, 0.06212788556113391, 0.05714504437263135, 0.06040181771217501, 0.04770310561918356]}, "mutation_prompt": null}
{"id": "46b01739-1f84-4574-a062-00cc58d0d372", "solution": "import numpy as np\n\nclass DynamicCooperativeDESGD:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.sgd_step_size = 0.05\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                \n                # Dynamic mutation with cooperative factors\n                mutation_factor_dynamic = self.mutation_factor * np.random.uniform(0.5, 1.5)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Stochastic Gradient Descent inspired local search\n                if np.random.rand() < self.local_search_prob:\n                    self.sgd_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def sgd_local_search(self, index, func):\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            direction = np.random.normal(0, 1, self.dim)\n            direction = direction / np.linalg.norm(direction)  # Normalizing direction\n            neighbor = np.clip(self.population[index] + self.sgd_step_size * direction, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "DynamicCooperativeDESGD", "description": "A novel dynamic cooperation strategy between differential evolution and stochastic gradient descent for efficient convergence with adaptive parameter tuning.", "configspace": "", "generation": 76, "fitness": 0.17047273052842277, "feedback": "The algorithm DynamicCooperativeDESGD got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.3298833131158475, 0.340141493632951, 0.3146667149544735, 0.388298928220821, 0.34348494154190734, 0.36034499619858507, 0.37161780363032215, 0.3372907352873824, 0.3545359789588769, 0.07734472800225589, 0.08386450948688284, 0.07889676204661067, 0.07691590998343167, 0.07189529349610979, 0.09103806603222053, 0.08691846089111244, 0.08180526647583952, 0.09161239514649822, 0.09766944107354336, 0.11197708653581562, 0.10482705327329112, 0.09866796290926017, 0.092324780346137, 0.08046205977898369, 0.08756111572189895, 0.11023526142275308, 0.0917135528972185, 0.07075274117898012, 0.07116664662392336, 0.08744967517323965, 0.08348644587278375, 0.0750049970209562, 0.07316212779834519, 0.08082763973067397, 0.05987404354783066, 0.08978217916006848, 0.8894019819457708, 0.9046974233429337, 0.936644688116422, 0.8932774603998176, 0.8218590816045376, 0.8833351732369491, 0.8966146644149839, 0.962053401283985, 0.8957807132072142, 0.11356357252002713, 0.13310811079956308, 0.11446992572297732, 0.13452899006598595, 0.12214512556050483, 0.11632561216989745, 0.11911983418026428, 0.1426860800623202, 0.13086657294223547, 0.19199394471193654, 0.1801150297677283, 0.19307258607098998, 0.21438456730552902, 0.23228485121687537, 0.20576614017488015, 0.21102993565616734, 0.2144219846688119, 0.2571243932583147, 0.08722065815968794, 0.06733726210223434, 0.09538878076434487, 0.12762524163196376, 0.08719392389704339, 0.079687634321987, 0.07523342508362607, 0.06761551371730257, 0.0782470366402438, 0.10404219857869634, 0.07079789437471606, 0.10039483403053617, 0.10255971395626784, 0.058739645720300326, 0.07831982484529165, 0.055375593096521736, 0.08232625677172001, 0.06720694287031403, 0.030769909933870965, 9.999999999998899e-05, 0.002068694187003395, 0.02065072170800919, 0.009606973916238215, 0.010346287380425201, 0.004377261433949342, 0.019625287571829353, 0.006051165240364753, 0.11628604149481148, 0.11134553363552058, 0.12402514625558292, 0.1169659676918724, 0.13299028414513703, 0.15606856028437455, 0.1211308927606648, 0.11379971242508569, 0.10462511668689367, 9.999999999998899e-05, 0.0002344073263579327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012754640642231863, 0.0006508921887831143, 9.999999999998899e-05, 0.053995951055851976, 0.04741402782950299, 0.057246116718493445, 0.054042207253076735, 0.0534482798040703, 0.05663458035056723, 0.06069752902247272, 0.06565278229920246, 0.06886701858836208, 0.31259812172076473, 0.2997663140569117, 0.3084280211218705, 0.30505295923136144, 0.30018281095692545, 0.31839094342810736, 0.313654146892291, 0.28764445487482093, 0.29272889955252124, 0.09425830677553948, 0.08864178901695285, 0.09021404986534676, 0.08247698989452767, 0.08144580115291633, 0.07591510393810641, 0.09011918950514919, 0.08086663003619687, 0.08798318361156632, 0.15823834144683369, 0.1474508396496984, 0.15449890134237598, 0.18164642264448838, 0.17038008336134058, 0.1619252112377111, 0.16336810440946925, 0.1516844170889612, 0.14163417673354473, 0.20839327278725384, 0.2002002830747267, 0.20865607300424283, 0.1973242353337612, 0.1858136261177642, 0.19172525140321306, 0.22059706860905393, 0.22391549468543526, 0.1969084963463018, 0.13697191919401952, 0.144355571827401, 0.13297436320190514, 0.12748873488831358, 0.14802431757960388, 0.13726769870002808, 0.1605372351345914, 0.14720197102168808, 0.14846392709702816, 0.19228592073446993, 0.1791065663316096, 0.1775489649160883, 0.1859301693936779, 0.17814962517319088, 0.19426726214795154, 0.20237438600282964, 0.17601705108941912, 0.18353989955012473, 0.18010478849453482, 0.1660901930433425, 0.1774054522641243, 0.1742532941648527, 0.1791306143801421, 0.18619607725146703, 0.1712567843124827, 0.16698739155255715, 0.19164572958056836, 0.16303138662746974, 0.20989511021377882, 0.20405477635873714, 0.20201153809264216, 0.188432273027347, 0.16746512761056365, 0.15911867140186076, 0.14986512625321613, 0.16153860068090764, 0.17578756285267105, 0.1725888937745469, 0.30638918491271516, 0.1600290566102125, 0.13842936855132393, 0.19197122977832748, 0.20612803801775959, 0.1706475300491631, 0.19088731234090806, 0.18836611814347914, 0.19818675904155048, 0.1964709682271203, 0.19739248667555698, 0.18685450029921702, 0.18522441808486545, 0.21202559171605417, 0.18491334025857975, 0.22282655056448775, 0.06503418690410545, 0.07057164552820538, 0.07813711182695204, 0.08738326922855633, 0.06515215205043334, 0.07247844305806661, 0.07173958177047102, 0.06722788573475791, 0.06961984620359452]}, "mutation_prompt": null}
{"id": "9e5c2a7a-a04b-4b78-9a88-714a6ee6d505", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "fa91d4d6-2203-42bb-8276-4e84fc455664", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "a2218a5a-f877-42e1-bcef-e2f21266b685", "solution": "import numpy as np\n\nclass AdaptiveDEWithDynamicScalingAndPNSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(80, budget // 5)\n        self.base_mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.scaled_search_prob = 0.35\n        self.tournament_size = 2\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.best_fitness = float('inf')\n        self.scaling_factor = 0.5\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.best_fitness = np.min(self.fitness)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Dynamic fitness scaling and mutation\n                fitness_scaling = self.scaling_factor * (1 - (self.fitness[i] / self.best_fitness))\n                mutation_factor_dynamic = self.base_mutation_factor + fitness_scaling\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n\n                # Probabilistic Neighborhood Search\n                if np.random.rand() < self.scaled_search_prob * (1 - self.evaluations / self.budget):\n                    self.probabilistic_neighborhood_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def probabilistic_neighborhood_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "AdaptiveDEWithDynamicScalingAndPNSearch", "description": "Adaptive DE with Dynamic Fitness Scaling and Probabilistic Neighborhood Search to enhance exploration and exploitation balance.", "configspace": "", "generation": 79, "fitness": 0.19429681973431892, "feedback": "The algorithm AdaptiveDEWithDynamicScalingAndPNSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.46320918111233866, 0.47392423799422934, 0.494906414859124, 0.4770494524144777, 0.5260374787584052, 0.4733284044155667, 0.47451026517134176, 0.49545743668069553, 0.4664770711420475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005835829418420313, 9.999999999998899e-05, 0.08304200288371943, 0.08845612193935726, 0.08130703427952413, 0.107759093527806, 0.0985151208789824, 0.11432024214406977, 0.10398801048899331, 0.09360731912825337, 0.09890483509615045, 0.06688527886976081, 0.07335257512838567, 0.07001765061914433, 0.10806802320060216, 0.08663838716741246, 0.07918723296531693, 0.08705385164682866, 0.09065435925389809, 0.09095624837713945, 0.9776338198230887, 0.9676985724291999, 0.9704923154330096, 0.8973996290739691, 0.9080792734866543, 0.892407534544782, 0.9230913831459331, 0.8605046298574293, 0.9336633554932413, 0.19145217286280447, 0.2081277245436184, 0.1548044412520183, 0.19767105185651124, 0.19972617477773635, 0.17878877078030675, 0.1332774101654497, 0.14693439505955408, 0.15227367374954104, 0.26561759925668305, 0.30652317107389215, 0.33830628248278183, 0.33325929038403, 0.35369146964337983, 0.3369880551200287, 0.21269767053555655, 0.23504112096427487, 0.21669845573136304, 0.09879493852714782, 0.05373700572648721, 0.05977535888351826, 0.03730029067482554, 0.07189513925836377, 0.07481920668442033, 0.08180151674122083, 0.045219131612607266, 0.0775443304499791, 0.11131046371159703, 0.08646797014897545, 0.11281347710923217, 0.08239564906966534, 0.06365719550609195, 0.09606865449674185, 0.08153215062204511, 0.07444492813169423, 0.057539359683767, 0.000606507633014175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12538762442795048, 0.15978778099801805, 0.13631342867469198, 0.053323510827856246, 0.07737383869252423, 0.05121594358590664, 0.094639726079078, 0.10347546750769798, 0.09591649927761259, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13516339276750022, 0.14508312517583088, 0.12965504978214792, 0.048875511024684015, 0.03326467967711777, 0.0386809834287033, 0.05553674026802746, 0.05217142496400251, 0.06049974005435377, 0.35972655270453124, 0.37408786491805135, 0.39189859264797555, 0.39934594231987697, 0.379017961496254, 0.3755806506137713, 0.3891369141151475, 0.396567806095264, 0.3915068045866612, 0.09019359808054628, 0.0815498578587196, 0.09374204054817159, 0.09157914581298776, 0.09866075985500211, 0.08655923087633854, 0.06001336450009764, 0.05743597412193502, 0.05192965056524412, 0.16578648453501355, 0.17927609306719516, 0.16579001207966015, 0.1778885010168838, 0.16257561391314923, 0.1648059141293441, 0.17981837069466056, 0.17653863469454867, 0.15062655241536227, 0.21283602002655455, 0.19628195045212127, 0.20831544277363734, 0.2320984698788474, 0.24975714646092395, 0.2556438001933776, 0.2505550664277637, 0.2527535183864138, 0.23631734653578884, 0.1212932868438813, 0.118798500430366, 0.14488115511279087, 0.20300459546327954, 0.20695137905379812, 0.1971746964202331, 0.1758700064282297, 0.1929290044495583, 0.19665937503749997, 0.20492524005991286, 0.18518067666329985, 0.16834964196393687, 0.20979494139996224, 0.20094616817231747, 0.1882583558519083, 0.20859139262608617, 0.1889445401449933, 0.17647855397922174, 0.1462321040330551, 0.17239862555500785, 0.16808070788070617, 0.15952710750484278, 0.16879455249583264, 0.16331003027789903, 0.16702915388916229, 0.16237147638776472, 0.16150093791075215, 0.40022518956774544, 0.40124951881656123, 0.3555655906065178, 0.3142453770444861, 0.18151763838355428, 0.22314531135817095, 0.31490831556292165, 0.29368884641385606, 0.3208634027906013, 0.2793935722302042, 0.35643893411657923, 0.3295600819295398, 0.20546313730617094, 0.292065778145867, 0.2869367942570549, 0.20308574211293362, 0.4042032966316831, 0.4616329267564252, 0.18419731659568062, 0.17775541989053034, 0.1772193127410595, 0.18624419398755376, 0.1819177256718948, 0.1910474084029975, 0.21811974391213818, 0.18450095725464633, 0.18474109912674674, 0.07188274274721784, 0.07023170897955022, 0.07382546739453588, 0.07547890944079005, 0.08291139689629856, 0.07131038134847967, 0.07637032699336, 0.08600930677062424, 0.07279999001986603]}, "mutation_prompt": null}
{"id": "ab1e1c1d-55ad-4c1e-9e12-605c0a08e269", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.7\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = self.population.copy()\n        self.personal_best_fitness = np.full(self.population_size, float('inf'))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.personal_best_fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n        best_idx = np.argmin(self.personal_best_fitness)\n        if self.personal_best_fitness[best_idx] < self.global_best_fitness:\n            self.global_best = self.population[best_idx]\n            self.global_best_fitness = self.personal_best_fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                   self.c1 * r1 * (self.personal_best[i] - self.population[i]) +\n                                   self.c2 * r2 * (self.global_best - self.population[i]))\n                self.population[i] = np.clip(self.population[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n\n                trial = self.differential_evolution_strategy(i)\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.personal_best_fitness[i]:\n                    self.personal_best[i] = trial\n                    self.personal_best_fitness[i] = trial_fitness\n\n                if self.personal_best_fitness[i] < self.global_best_fitness:\n                    self.global_best = self.personal_best[i]\n                    self.global_best_fitness = self.personal_best_fitness[i]\n\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.local_search(i, func)\n\n        return self.global_best, self.global_best_fitness\n\n    def differential_evolution_strategy(self, index):\n        indices = [idx for idx in range(self.population_size) if idx != index]\n        a, b, c = self.population[np.random.choice(indices)], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n        \n        cross_points = np.random.rand(self.dim) < self.crossover_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        \n        trial = np.where(cross_points, mutant, self.population[index])\n        return trial\n\n    def local_search(self, index, func):\n        step_size = 0.05 * (self.upper_bound - self.lower_bound)\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.uniform(-step_size, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.personal_best_fitness[index]:\n                self.personal_best[index] = neighbor\n                self.personal_best_fitness[index] = neighbor_fitness\n                if neighbor_fitness < self.global_best_fitness:\n                    self.global_best = neighbor\n                    self.global_best_fitness = neighbor_fitness", "name": "HybridPSODE", "description": "A hybrid particle swarm optimization with adaptive differential evolution and multi-scale search strategy for enhanced convergence speed.", "configspace": "", "generation": 80, "fitness": 0.15464992286168414, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.25875136855472725, 0.25741854833557587, 0.2633111045807225, 0.27813808257317174, 0.29151747993582666, 0.2907487980168164, 0.2522877657170235, 0.25233260049233963, 0.28468947265231803, 9.999999999998899e-05, 0.002728621940522813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022296862398998307, 0.06444998445497674, 0.07219654058826086, 0.06144430695837, 0.06077934652904082, 0.06620416039838073, 0.06293334176160081, 0.06592897551025512, 0.06558107005241587, 0.07082823888920209, 0.07214665228975592, 0.06769552836362658, 0.07703423019128364, 0.07888339031302383, 0.05538358816378264, 0.06618360919693311, 0.0680305794966054, 0.07703819326214312, 0.0726751626912312, 0.9623923814956693, 0.9833291468259485, 0.9796201535106067, 0.97181559279294, 0.9539589670383166, 0.9798401551242175, 0.9861753275784616, 0.9829626356370135, 0.9691418238102204, 0.12186665367190685, 0.14876436977909158, 0.12986669840813958, 0.13859248517755862, 0.13457898816917147, 0.13390988805616766, 0.15928587486371437, 0.11838443456943626, 0.13595290409433913, 0.17283646753368342, 0.1705740886527296, 0.17087307087138992, 0.18195995600048553, 0.1944577159975972, 0.15791785357688126, 0.16540781315384379, 0.17389896975088392, 0.17154118111731875, 0.06386368367289119, 0.06460540972606954, 0.026537011384990206, 0.041914713174462714, 0.06853359440248896, 0.10261586859627425, 0.0490576844509546, 0.06371090709456717, 0.017796858167395624, 0.03075555547222053, 0.045385925273689454, 0.05021972679824671, 0.06904869206001107, 0.08480997638555832, 0.042721377635684954, 0.043392792235281585, 0.05549912511336019, 0.05593328695945399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019357869435462582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03538601179013645, 0.040127941819885216, 0.09027957614586979, 0.054138172144812646, 0.07700180701566828, 0.055882034732365526, 0.1276126987834415, 0.020528447942118833, 0.04289827158569148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019329532014479955, 0.014724556881079098, 0.005473850269898106, 0.017568467096283014, 0.030399226617056074, 0.0333417440667938, 0.030358301629945017, 0.040740683800811306, 0.029472413359728722, 0.24270057192449812, 0.26678661123976777, 0.26957728931407665, 0.290604040338008, 0.26979180798983105, 0.27112544398527083, 0.28430462848964466, 0.263986546187448, 0.23937991331129782, 0.07284453189409668, 0.08149245878455114, 0.07252924594310262, 0.07858918725184538, 0.06905773513106084, 0.06334074514104215, 0.06577581660135534, 0.07013893014713324, 0.06925380590304797, 0.26248984133670394, 0.15389025908529474, 0.15010328265123984, 0.17761754670220176, 0.15173325435787333, 0.14067936272330606, 0.14198407680969027, 0.1519096020886469, 0.13660479991629726, 0.2107436060521345, 0.1884391674662529, 0.20475682936211848, 0.19608022140494075, 0.19387656649199125, 0.19496458194842592, 0.21143856116609605, 0.2178352912293241, 0.21640564477302482, 0.12435469646381447, 0.13167153370384654, 0.1248847663878192, 0.1324470677563262, 0.13805168552355285, 0.1296412099868014, 0.14808480536912394, 0.17206362372802564, 0.15473386442404302, 0.19269819782439634, 0.1878483997129976, 0.16706702304918786, 0.17666622013788968, 0.17556906332083344, 0.16639220152779832, 0.16881501418292244, 0.16530265709400394, 0.1560406712488175, 0.171529158285043, 0.16171444953870595, 0.1545314606794853, 0.1652092231265313, 0.1648134802047252, 0.169147701375169, 0.16441253436850367, 0.17020111245963343, 0.17131674251131335, 0.14617393622041386, 0.16876217516899505, 0.2932734241253523, 0.15018946839046876, 0.20416216717893254, 0.17377187915613956, 0.17220783037688292, 0.13915866576142266, 0.1696345573586434, 0.16863469445466528, 0.1668077121996897, 0.1636207346130455, 0.33161451085881377, 0.197095013762573, 0.16419509026003465, 0.241101875096149, 0.2035293915289259, 0.26404651055314066, 0.17374854557642683, 0.20099346348298086, 0.18980405240633502, 0.18628447450828034, 0.18204546231611174, 0.2031394544516978, 0.19173054451243077, 0.18243155343736395, 0.18613083934269536, 0.060410687089555215, 0.0704437253692406, 0.0660879070282494, 0.05229117439737219, 0.0625930956890921, 0.05681861308203062, 0.07327304816373903, 0.07388605162280948, 0.05335081830642663]}, "mutation_prompt": null}
{"id": "fa0ef3c9-5873-46e9-8af3-43cabc58b283", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "15f1480e-0b90-4321-b2aa-616aa9ed1300", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "c82bd5c4-91b1-4925-b8fe-46dc671edcaf", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "87ccdd95-afa4-44c6-9567-c2ca01b2ab8f", "solution": "import numpy as np\n\nclass FuzzyHybridDEALSEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Fuzzy dynamic parameter tuning\n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced dynamic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.enhanced_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_local_search(self, index, func):\n        step_size = 0.075 * (self.upper_bound - self.lower_bound)\n        for _ in range(4):\n            if self.evaluations >= self.budget:\n                break\n            \n            perturbation = np.random.normal(0, step_size, self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "FuzzyHybridDEALSEnhanced", "description": "An adaptive evolutionary strategy leveraging differential evolution with Fuzzy dynamic parameter tuning and enhanced local search to achieve faster convergence.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.6039008823992229, 0.5905172850055957, 0.5934269962920309, 0.5997991566476275, 0.6124822070161793, 0.6153338814466878, 0.5944080885421895, 0.6237069762365287, 0.5882555035213142, 0.3538579725769019, 0.3521317115090864, 0.35898962265835765, 0.3842221715107377, 0.38413466223914117, 0.3858570790047283, 0.3688272328656752, 0.35719501858482994, 0.37637888411111897, 0.11034560422208706, 0.1045838053654754, 0.09909592527031308, 0.10108470031216943, 0.11660248205306634, 0.10595336770141872, 0.11088892566910746, 0.11297902991317677, 0.10313094523503985, 0.11519886089525422, 0.0932763549537724, 0.09493142752329464, 0.08702371637989748, 0.0893649377423048, 0.09127249555869044, 0.08671099340607091, 0.09423089980765254, 0.09202923140379093, 0.9545463441970935, 0.9477961265968027, 0.9205307770973754, 0.9631430095830364, 0.9496324794166677, 0.982848303093212, 0.8776384258603697, 0.9170270888559449, 0.9633015258840373, 0.2651290364891635, 0.3223752470278468, 0.2995219625912777, 0.2851936711148809, 0.2497201293852438, 0.300829336613031, 0.3155220455512212, 0.28849364094615626, 0.3090594217973466, 0.5160934751526074, 0.5176309821289607, 0.5380161517622588, 0.5324285425904011, 0.5537920525273863, 0.5221569246188971, 0.5261772115415073, 0.5086137122373046, 0.5302951651701848, 0.14523280344886857, 0.1276030367615696, 0.14784612109193718, 0.1606688330600029, 0.12657253064167184, 0.17319830886900034, 0.14147851520366728, 0.15361680811377587, 0.13341833358864819, 0.10485883350512193, 0.13834806602685135, 0.14418264254371338, 0.13637010448394216, 0.14883336929521973, 0.12518982440821458, 0.15447382918047647, 0.14469702240809512, 0.12265997322369804, 0.1760143107554124, 0.1781229308410044, 0.21368601101928475, 0.17750840166057658, 0.1613038190329109, 0.1905527460612909, 0.1744819102901638, 0.17750583787023644, 0.17867612269083144, 0.25801370502502996, 0.31472700216219296, 0.2784506966822723, 0.3047254765511035, 0.29882514944808813, 0.2611395429321387, 0.3360733560548883, 0.3378233670009929, 0.3599228018970926, 0.06800580614293394, 0.09452491414610198, 0.060478174910981175, 0.08687675660161842, 0.08320794729493897, 0.09065064417365798, 0.09236257191448671, 0.06256617213222893, 0.12324002057302319, 0.15519822496127889, 0.17202807976439183, 0.16087210996211865, 0.14917125690938793, 0.19705841425036852, 0.21094922412305173, 0.17506397234691595, 0.19347854068270998, 0.18281691643730347, 0.4810186597762285, 0.5100716138130205, 0.4889466097696835, 0.5282303991222173, 0.47461507658547586, 0.4981541595681237, 0.5150157029610218, 0.5062483984079806, 0.4935967512523871, 0.08665238548725174, 0.09894840607780775, 0.0910065571054276, 0.08633405819958173, 0.09490677709926443, 0.09731866646528142, 0.08945906979682572, 0.09179199128986859, 0.09384425424547405, 0.21324040962296142, 0.1698084629763087, 0.1531492741489805, 0.1809885534001402, 0.17485281869458047, 0.15166645268726164, 0.14385988507531344, 0.16108360141881117, 0.13770617747666858, 0.34206414732873014, 0.27547509844182094, 0.3185990780712499, 0.3202246704373162, 0.2878881356234072, 0.3449699704216175, 0.3315501083790463, 0.3232149472764483, 0.3293789947191038, 0.23415197321554737, 0.22567773931797686, 0.23764987972123963, 0.26692424070154774, 0.2476066840465031, 0.23516389186299702, 0.25039595531932557, 0.24231735810120314, 0.2514766279803957, 0.1928477965626374, 0.1879891967121632, 0.1755846442277933, 0.1755136792725609, 0.18032284543006694, 0.19349738232402458, 0.18719275002489377, 0.17740352376268598, 0.18842303910933933, 0.17721779296710793, 0.18005588286083962, 0.18965345933499655, 0.19476458116570927, 0.17989091763670972, 0.19010782015428462, 0.17034555732603063, 0.17992196526099646, 0.2122646046231026, 0.43614928394963204, 0.46017139980556965, 0.48100196000738593, 0.46577337634475113, 0.3916923894617632, 0.44328356889772846, 0.25928923865640896, 0.17141427526345976, 0.18264102656232195, 0.4821883811734985, 0.5548920792790275, 0.3112951510910519, 0.3055094791928288, 0.19005270686076736, 0.3933017242211838, 0.20038005696893202, 0.19730564252524407, 0.5535188250082042, 0.17580737170533978, 0.19201176437576184, 0.18727146701215347, 0.184928153105128, 0.1802779688199575, 0.1871587801308734, 0.18170143337723066, 0.18099401673031956, 0.18158656386388183, 0.07367529641368697, 0.07342212786507807, 0.07592656999246117, 0.07529578578511031, 0.07032795709917794, 0.0740084541389886, 0.0685106542819931, 0.07199124633816956, 0.0658400559963237]}, "mutation_prompt": null}
{"id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "solution": "import numpy as np\n\nclass ChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Stochastic mutation factor\n                mutation_factor_dynamic = self.mutation_factor * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.chaotic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaotic_local_search(self, index, func):\n        chaos_factor = 0.3\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaoticSwarmDE", "description": "An adaptive stochastic swarm-based optimization algorithm fusing differential evolution with chaotic local search for accelerated convergence.", "configspace": "", "generation": 85, "fitness": 0.36717591783857734, "feedback": "The algorithm ChaoticSwarmDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.23.", "error": "", "parent_id": "dc08f2b2-8709-4d47-ae6e-bd4f952d5f70", "metadata": {"aucs": [0.7734557969185117, 0.7143605348979436, 0.7628691966520122, 0.7647463487791044, 0.7503654175603911, 0.7544099471716148, 0.7369377472827409, 0.7498437727611628, 0.7632567053051462, 0.5411696882701349, 0.5497343874652325, 0.555586828346566, 0.5551838210367472, 0.5561060485362171, 0.5672315045485463, 0.539998523192052, 0.5734234127492221, 0.5905288687839805, 0.322050858043598, 0.3557646565130076, 0.31727935003956353, 0.2554989768917517, 0.19958756586555804, 0.32368150397542883, 0.37814675772998063, 0.28115886139727, 0.15752837590303093, 0.14987512003402825, 0.1080744381484301, 0.14308752840528705, 0.14996936853515186, 0.1417206738502842, 0.13366424338130112, 0.1261644422352347, 0.14387493304363086, 0.19104593068954756, 0.9248628023947818, 0.9136253663710884, 0.9012011877268926, 0.9334699706032932, 0.9256570443139709, 0.9460723877314675, 0.9153486017386661, 0.9427474608686871, 0.9077693546357399, 0.41966682393786126, 0.42090084000413563, 0.44062347286089476, 0.4092686760502151, 0.4601152719634012, 0.4309157345046394, 0.4360038035802729, 0.44950811019293746, 0.4347963394178237, 0.6580459775468942, 0.623240136346955, 0.7657087771829801, 0.7483526580091948, 0.707150853150777, 0.7104639742801158, 0.6497849109254064, 0.71617374337182, 0.7224566522007112, 0.42423477803701315, 0.1908755941104816, 0.17848512143016249, 0.26707451990442754, 0.17375106372113025, 0.24373393732992066, 0.25088711265254526, 0.26663481468465056, 0.21631682172026212, 0.19030366478217897, 0.10948710063852574, 0.1797835158125456, 0.21318791940716542, 0.19118395152357992, 0.3015374914064286, 0.1789313505374075, 0.17418557710087512, 0.21883940722676465, 0.26334361705230414, 0.2069285727935689, 0.32629826506762305, 0.2693350836190638, 0.2739767274432987, 0.28010924443296004, 0.3207875210376553, 0.16756614388774904, 0.21888068779263592, 0.4134651668108933, 0.4221520360408031, 0.3704998152303882, 0.39885451737320743, 0.34070772688121376, 0.3635895765463558, 0.3962679292888842, 0.433932887328637, 0.4277572329917173, 0.06840967547721644, 0.11920721615924545, 0.14145241453352753, 0.1153403066111166, 0.16676168450277018, 0.16199614992315037, 0.14552247984462863, 0.1532207708696922, 0.07414825566833372, 0.2331572089520264, 0.24967878150900735, 0.23472517186862174, 0.24541302487660932, 0.2690744802017836, 0.2855652947146867, 0.22214624820436468, 0.23333364809438095, 0.25090517542393287, 0.6442187461261122, 0.6201735315134068, 0.6177453827509762, 0.5873584667392228, 0.6035671517926006, 0.6062910012049643, 0.6028612192760827, 0.6023375646282791, 0.6145226983869784, 0.11462454747407014, 0.3613642288931279, 0.13181133175561977, 0.1337808220463601, 0.10968050452383071, 0.14095496764974813, 0.1234364021282548, 0.10779797321424234, 0.11668022078998164, 0.20441528037955836, 0.20373795381532345, 0.20445826098988185, 0.26001270349634553, 0.2190944781917361, 0.27670195726174507, 0.22686006720023733, 0.19102511318527682, 0.25363078833625663, 0.4098055405854192, 0.37037925423803975, 0.44424806627912894, 0.3969943473505575, 0.39361318195016903, 0.4171747984212304, 0.4552454515168407, 0.44393400027133834, 0.4271034957048865, 0.3084902712523636, 0.3262071865912838, 0.31590478174272907, 0.3082930809285991, 0.27926557337562075, 0.25974401163334615, 0.3236054641746665, 0.3463468225341769, 0.311134212186821, 0.19578263194352807, 0.19632062882060408, 0.20307061056268416, 0.2119705808555613, 0.19731630924412014, 0.21335934289780767, 0.23118454431151902, 0.19629022668564455, 0.20440639691720286, 0.21820291522337065, 0.2380194531002533, 0.37200129537473403, 0.20764915513928084, 0.20807845265870362, 0.2258980116470829, 0.42046938104990916, 0.22194491611400013, 0.4313480430589052, 0.6760592838467352, 0.1802620909214775, 0.7423350514808733, 0.7725148411466589, 0.1895219648028169, 0.6779017460493193, 0.694222853636675, 0.6641659908643713, 0.7261040730857043, 0.6792033449845574, 0.5879804815990433, 0.19964784790040613, 0.6273803702673394, 0.16240356982997417, 0.6715807606105054, 0.6238826801765707, 0.6463327272367441, 0.14746552340085894, 0.17680544658413344, 0.18034697191212112, 0.18363973657404697, 0.17904213904333932, 0.20827720685411455, 0.1838698132246941, 0.18417817546134618, 0.17689738199126348, 0.18688421159367286, 0.0896458949553891, 0.08009402024635515, 0.08447847874914627, 0.0847840380439111, 0.07928911558185481, 0.08439501294889162, 0.0795923603210511, 0.08147545076438723, 0.08213424841886297]}, "mutation_prompt": null}
{"id": "c1ac353f-bb28-4fff-8bb2-95fe426897fb", "solution": "import numpy as np\n\nclass ChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Stochastic mutation factor\n                mutation_factor_dynamic = self.mutation_factor * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.chaotic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaotic_local_search(self, index, func):\n        chaos_factor = 0.3\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaoticSwarmDE", "description": "An adaptive stochastic swarm-based optimization algorithm fusing differential evolution with chaotic local search for accelerated convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.7734557969185117, 0.7143605348979436, 0.7628691966520122, 0.7647463487791044, 0.7503654175603911, 0.7544099471716148, 0.7369377472827409, 0.7498437727611628, 0.7632567053051462, 0.5411696882701349, 0.5497343874652325, 0.555586828346566, 0.5551838210367472, 0.5561060485362171, 0.5672315045485463, 0.539998523192052, 0.5734234127492221, 0.5905288687839805, 0.322050858043598, 0.3557646565130076, 0.31727935003956353, 0.2554989768917517, 0.19958756586555804, 0.32368150397542883, 0.37814675772998063, 0.28115886139727, 0.15752837590303093, 0.14987512003402825, 0.1080744381484301, 0.14308752840528705, 0.14996936853515186, 0.1417206738502842, 0.13366424338130112, 0.1261644422352347, 0.14387493304363086, 0.19104593068954756, 0.9248628023947818, 0.9136253663710884, 0.9012011877268926, 0.9334699706032932, 0.9256570443139709, 0.9460723877314675, 0.9153486017386661, 0.9427474608686871, 0.9077693546357399, 0.41966682393786126, 0.42090084000413563, 0.44062347286089476, 0.4092686760502151, 0.4601152719634012, 0.4309157345046394, 0.4360038035802729, 0.44950811019293746, 0.4347963394178237, 0.6580459775468942, 0.623240136346955, 0.7657087771829801, 0.7483526580091948, 0.707150853150777, 0.7104639742801158, 0.6497849109254064, 0.71617374337182, 0.7224566522007112, 0.42423477803701315, 0.1908755941104816, 0.17848512143016249, 0.26707451990442754, 0.17375106372113025, 0.24373393732992066, 0.25088711265254526, 0.26663481468465056, 0.21631682172026212, 0.19030366478217897, 0.10948710063852574, 0.1797835158125456, 0.21318791940716542, 0.19118395152357992, 0.3015374914064286, 0.1789313505374075, 0.17418557710087512, 0.21883940722676465, 0.26334361705230414, 0.2069285727935689, 0.32629826506762305, 0.2693350836190638, 0.2739767274432987, 0.28010924443296004, 0.3207875210376553, 0.16756614388774904, 0.21888068779263592, 0.4134651668108933, 0.4221520360408031, 0.3704998152303882, 0.39885451737320743, 0.34070772688121376, 0.3635895765463558, 0.3962679292888842, 0.433932887328637, 0.4277572329917173, 0.06840967547721644, 0.11920721615924545, 0.14145241453352753, 0.1153403066111166, 0.16676168450277018, 0.16199614992315037, 0.14552247984462863, 0.1532207708696922, 0.07414825566833372, 0.2331572089520264, 0.24967878150900735, 0.23472517186862174, 0.24541302487660932, 0.2690744802017836, 0.2855652947146867, 0.22214624820436468, 0.23333364809438095, 0.25090517542393287, 0.6442187461261122, 0.6201735315134068, 0.6177453827509762, 0.5873584667392228, 0.6035671517926006, 0.6062910012049643, 0.6028612192760827, 0.6023375646282791, 0.6145226983869784, 0.11462454747407014, 0.3613642288931279, 0.13181133175561977, 0.1337808220463601, 0.10968050452383071, 0.14095496764974813, 0.1234364021282548, 0.10779797321424234, 0.11668022078998164, 0.20441528037955836, 0.20373795381532345, 0.20445826098988185, 0.26001270349634553, 0.2190944781917361, 0.27670195726174507, 0.22686006720023733, 0.19102511318527682, 0.25363078833625663, 0.4098055405854192, 0.37037925423803975, 0.44424806627912894, 0.3969943473505575, 0.39361318195016903, 0.4171747984212304, 0.4552454515168407, 0.44393400027133834, 0.4271034957048865, 0.3084902712523636, 0.3262071865912838, 0.31590478174272907, 0.3082930809285991, 0.27926557337562075, 0.25974401163334615, 0.3236054641746665, 0.3463468225341769, 0.311134212186821, 0.19578263194352807, 0.19632062882060408, 0.20307061056268416, 0.2119705808555613, 0.19731630924412014, 0.21335934289780767, 0.23118454431151902, 0.19629022668564455, 0.20440639691720286, 0.21820291522337065, 0.2380194531002533, 0.37200129537473403, 0.20764915513928084, 0.20807845265870362, 0.2258980116470829, 0.42046938104990916, 0.22194491611400013, 0.4313480430589052, 0.6760592838467352, 0.1802620909214775, 0.7423350514808733, 0.7725148411466589, 0.1895219648028169, 0.6779017460493193, 0.694222853636675, 0.6641659908643713, 0.7261040730857043, 0.6792033449845574, 0.5879804815990433, 0.19964784790040613, 0.6273803702673394, 0.16240356982997417, 0.6715807606105054, 0.6238826801765707, 0.6463327272367441, 0.14746552340085894, 0.17680544658413344, 0.18034697191212112, 0.18363973657404697, 0.17904213904333932, 0.20827720685411455, 0.1838698132246941, 0.18417817546134618, 0.17689738199126348, 0.18688421159367286, 0.0896458949553891, 0.08009402024635515, 0.08447847874914627, 0.0847840380439111, 0.07928911558185481, 0.08439501294889162, 0.0795923603210511, 0.08147545076438723, 0.08213424841886297]}, "mutation_prompt": null}
{"id": "65af1ebd-2dc3-46ef-9559-db5438e8bd91", "solution": "import numpy as np\n\nclass ChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Stochastic mutation factor\n                mutation_factor_dynamic = self.mutation_factor * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.chaotic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaotic_local_search(self, index, func):\n        chaos_factor = 0.3\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaoticSwarmDE", "description": "An adaptive stochastic swarm-based optimization algorithm fusing differential evolution with chaotic local search for accelerated convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.7734557969185117, 0.7143605348979436, 0.7628691966520122, 0.7647463487791044, 0.7503654175603911, 0.7544099471716148, 0.7369377472827409, 0.7498437727611628, 0.7632567053051462, 0.5411696882701349, 0.5497343874652325, 0.555586828346566, 0.5551838210367472, 0.5561060485362171, 0.5672315045485463, 0.539998523192052, 0.5734234127492221, 0.5905288687839805, 0.322050858043598, 0.3557646565130076, 0.31727935003956353, 0.2554989768917517, 0.19958756586555804, 0.32368150397542883, 0.37814675772998063, 0.28115886139727, 0.15752837590303093, 0.14987512003402825, 0.1080744381484301, 0.14308752840528705, 0.14996936853515186, 0.1417206738502842, 0.13366424338130112, 0.1261644422352347, 0.14387493304363086, 0.19104593068954756, 0.9248628023947818, 0.9136253663710884, 0.9012011877268926, 0.9334699706032932, 0.9256570443139709, 0.9460723877314675, 0.9153486017386661, 0.9427474608686871, 0.9077693546357399, 0.41966682393786126, 0.42090084000413563, 0.44062347286089476, 0.4092686760502151, 0.4601152719634012, 0.4309157345046394, 0.4360038035802729, 0.44950811019293746, 0.4347963394178237, 0.6580459775468942, 0.623240136346955, 0.7657087771829801, 0.7483526580091948, 0.707150853150777, 0.7104639742801158, 0.6497849109254064, 0.71617374337182, 0.7224566522007112, 0.42423477803701315, 0.1908755941104816, 0.17848512143016249, 0.26707451990442754, 0.17375106372113025, 0.24373393732992066, 0.25088711265254526, 0.26663481468465056, 0.21631682172026212, 0.19030366478217897, 0.10948710063852574, 0.1797835158125456, 0.21318791940716542, 0.19118395152357992, 0.3015374914064286, 0.1789313505374075, 0.17418557710087512, 0.21883940722676465, 0.26334361705230414, 0.2069285727935689, 0.32629826506762305, 0.2693350836190638, 0.2739767274432987, 0.28010924443296004, 0.3207875210376553, 0.16756614388774904, 0.21888068779263592, 0.4134651668108933, 0.4221520360408031, 0.3704998152303882, 0.39885451737320743, 0.34070772688121376, 0.3635895765463558, 0.3962679292888842, 0.433932887328637, 0.4277572329917173, 0.06840967547721644, 0.11920721615924545, 0.14145241453352753, 0.1153403066111166, 0.16676168450277018, 0.16199614992315037, 0.14552247984462863, 0.1532207708696922, 0.07414825566833372, 0.2331572089520264, 0.24967878150900735, 0.23472517186862174, 0.24541302487660932, 0.2690744802017836, 0.2855652947146867, 0.22214624820436468, 0.23333364809438095, 0.25090517542393287, 0.6442187461261122, 0.6201735315134068, 0.6177453827509762, 0.5873584667392228, 0.6035671517926006, 0.6062910012049643, 0.6028612192760827, 0.6023375646282791, 0.6145226983869784, 0.11462454747407014, 0.3613642288931279, 0.13181133175561977, 0.1337808220463601, 0.10968050452383071, 0.14095496764974813, 0.1234364021282548, 0.10779797321424234, 0.11668022078998164, 0.20441528037955836, 0.20373795381532345, 0.20445826098988185, 0.26001270349634553, 0.2190944781917361, 0.27670195726174507, 0.22686006720023733, 0.19102511318527682, 0.25363078833625663, 0.4098055405854192, 0.37037925423803975, 0.44424806627912894, 0.3969943473505575, 0.39361318195016903, 0.4171747984212304, 0.4552454515168407, 0.44393400027133834, 0.4271034957048865, 0.3084902712523636, 0.3262071865912838, 0.31590478174272907, 0.3082930809285991, 0.27926557337562075, 0.25974401163334615, 0.3236054641746665, 0.3463468225341769, 0.311134212186821, 0.19578263194352807, 0.19632062882060408, 0.20307061056268416, 0.2119705808555613, 0.19731630924412014, 0.21335934289780767, 0.23118454431151902, 0.19629022668564455, 0.20440639691720286, 0.21820291522337065, 0.2380194531002533, 0.37200129537473403, 0.20764915513928084, 0.20807845265870362, 0.2258980116470829, 0.42046938104990916, 0.22194491611400013, 0.4313480430589052, 0.6760592838467352, 0.1802620909214775, 0.7423350514808733, 0.7725148411466589, 0.1895219648028169, 0.6779017460493193, 0.694222853636675, 0.6641659908643713, 0.7261040730857043, 0.6792033449845574, 0.5879804815990433, 0.19964784790040613, 0.6273803702673394, 0.16240356982997417, 0.6715807606105054, 0.6238826801765707, 0.6463327272367441, 0.14746552340085894, 0.17680544658413344, 0.18034697191212112, 0.18363973657404697, 0.17904213904333932, 0.20827720685411455, 0.1838698132246941, 0.18417817546134618, 0.17689738199126348, 0.18688421159367286, 0.0896458949553891, 0.08009402024635515, 0.08447847874914627, 0.0847840380439111, 0.07928911558185481, 0.08439501294889162, 0.0795923603210511, 0.08147545076438723, 0.08213424841886297]}, "mutation_prompt": null}
{"id": "f93cd076-209a-4577-b8cc-808f12bb1318", "solution": "import numpy as np\n\nclass ChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 5)  # Adjusted population size for diversity\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.35  # Increased probability for local search\n        self.dynamic_tournament_size = max(2, dim // 10)  # Adaptive tournament size\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.dynamic_tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Dynamic mutation and crossover probabilities\n                dynamic_mutation_factor = self.mutation_factor * (1 - self.evaluations / self.budget)\n                dynamic_crossover_prob = self.crossover_prob * (1 + 0.1 * np.sin(10 * np.pi * self.evaluations / self.budget))\n                \n                mutant = np.clip(a + dynamic_mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < dynamic_crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Enhanced chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - (self.evaluations / self.budget)**2):\n                    self.enhanced_chaotic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def enhanced_chaotic_local_search(self, index, func):\n        chaos_factor = 0.4  # Increased chaos factor for intensified search\n        for _ in range(5):  # More intensive local search steps\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaoticSwarmDE", "description": "Integrating adaptive dynamic parameters and chaos-intensified local search to enhance convergence in evolutionary optimization.", "configspace": "", "generation": 88, "fitness": 0.22555595174375237, "feedback": "The algorithm ChaoticSwarmDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.49135376562105115, 0.5343324301396934, 0.5041662020793751, 0.5222295268802493, 0.5224038578208183, 0.5301988874970921, 0.5222491540672891, 0.5017793765058352, 0.4978237270508127, 0.21547003533928122, 0.24375063640213923, 0.2076265415116082, 0.18912489158023627, 0.21849953598204364, 0.2228380878291779, 0.19894813328800587, 0.23478681477731922, 0.23367967210162843, 0.09481769593734057, 0.10688328064980213, 0.10876218346880728, 0.09294588682164906, 0.10422862406763811, 0.09813211608666583, 0.10540839255621026, 0.11757948730920054, 0.08897758447897963, 0.08600411341454761, 0.0888716638770185, 0.08293903200900954, 0.0856470056664137, 0.09050940356436299, 0.09106196869930394, 0.08247233720472213, 0.0832200412946057, 0.09188164575170654, 0.9204341677276209, 0.929395389751635, 0.9172375773070773, 0.9118618868602802, 0.9089286342216578, 0.9495933252031585, 0.9574840475589076, 0.9497110852167142, 0.948786827780099, 0.2130143134682687, 0.1927452767475033, 0.20921196998758917, 0.19456706411823088, 0.18655552644086526, 0.18663355142720162, 0.2077346163343624, 0.23291205213112853, 0.20603599984260623, 0.43103464137564174, 0.3764370053579029, 0.46868376082486907, 0.4415663066691482, 0.46242839761415344, 0.38542682746351564, 0.4291439444952587, 0.5146283182788265, 0.4104515191570871, 0.12427479981216216, 0.13762907752968023, 0.1361888733454656, 0.13162321655358922, 0.13279975554855084, 0.12616310134540365, 0.1326578088566437, 0.12348383469549173, 0.11370273682558707, 0.11519334637755096, 0.1092758094680647, 0.11017672453246574, 0.142871780831895, 0.10366815443963229, 0.1083831148456873, 0.11770512991555149, 0.11759468071452595, 0.12070595209714685, 0.06780659668738043, 0.06023781591271349, 0.05535566362349276, 0.0727019784625349, 0.06799871861971218, 0.04466686116135987, 0.05126241758187411, 0.07212356966900646, 0.057674375099087016, 0.15261966622316725, 0.17084877278233412, 0.19276953268661623, 0.16302869734866032, 0.17468099185966934, 0.17844544945418406, 0.13887798443937005, 0.22587327509623323, 0.19055703039397653, 0.026413539909959205, 0.031894992200100725, 0.027942854428101183, 0.023603719532224954, 0.025578758626418896, 0.013715455438238267, 0.030104469078233387, 0.03295819619034468, 0.03802577593612755, 0.10654676921185524, 0.10116348305814304, 0.10575140087462354, 0.10075510939501897, 0.11585259206049414, 0.0993831193945649, 0.09936453387912514, 0.10561457056163759, 0.10911250763029345, 0.4097932676343635, 0.4121117111093693, 0.41889464365657325, 0.42809485535416303, 0.39885331845705096, 0.407449211178761, 0.40848821512284483, 0.39900066580314064, 0.39813628641834586, 0.08712695123897951, 0.08639529226886955, 0.08247031601332966, 0.09367252461331532, 0.07983733565245144, 0.09085843685445594, 0.087317374099536, 0.08296363326614486, 0.09049334743996229, 0.13830808112574322, 0.1660735119908262, 0.2100861252174715, 0.16461665255364044, 0.14475859048080275, 0.1465143365110645, 0.17000609320073146, 0.15577918844988148, 0.16089934945986695, 0.2562066059986561, 0.2754680130530731, 0.29678945480600094, 0.2683557076142702, 0.26472923273837734, 0.24988854119431925, 0.2724962191548339, 0.2770479600370077, 0.2569408643911174, 0.20439536691034332, 0.1841588989243388, 0.2121418242068197, 0.20393358949213947, 0.19908699156381104, 0.19892353304902544, 0.19030328999366364, 0.2151497920444061, 0.20601954930770394, 0.19100201502028147, 0.18013787164160877, 0.17453652017199528, 0.1907570216068698, 0.1755458482437403, 0.18214064660741647, 0.1754286453487337, 0.187111572540691, 0.17435101520923713, 0.18871258977968985, 0.17122898838856926, 0.17682690291541725, 0.18142811706377637, 0.18592422873395842, 0.1882712225225761, 0.18482328961808792, 0.18742948614515698, 0.18657934182196267, 0.34240080597068867, 0.30350751413029, 0.48979335460989026, 0.3649291861984838, 0.2517978628639631, 0.24432063311458774, 0.16506160017511484, 0.21408283761513913, 0.3100609017166933, 0.361954894645817, 0.19754144525121786, 0.24719354989294706, 0.23730335352258636, 0.2814103385423695, 0.198693216363255, 0.2159442562512237, 0.3138181340365479, 0.2471737594331439, 0.17650754679223501, 0.17658945261230052, 0.19983908115672344, 0.2133255598093381, 0.17584852752431257, 0.17960938133165527, 0.1842052069222515, 0.18259131418837482, 0.17909401122633084, 0.07935837920867439, 0.06873400017230524, 0.06574790800860009, 0.0811132523841106, 0.06650298914644082, 0.08262606709615561, 0.06969959538270609, 0.07187122544227953, 0.07690744594546617]}, "mutation_prompt": null}
{"id": "c35d08b1-dd12-4271-a55b-d46e6e478756", "solution": "import numpy as np\n\nclass DynamicSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.8\n        self.learning_rate = 0.2\n        self.adaptive_window = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n        global_best_idx = np.argmin(self.fitness)\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, 3, replace=False)\n                a, b, c = self.population[chosen[0]], self.population[chosen[1]], self.population[chosen[2]]\n                \n                mutation_factor_dynamic = self.mutation_factor * (1 - self.evaluations / self.budget)\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.fitness[global_best_idx]:\n                        global_best_idx = i\n\n                if np.random.rand() < self.learning_rate:\n                    self.dynamic_local_search(i, func, global_best_idx)\n\n        return self.population[global_best_idx], self.fitness[global_best_idx]\n\n    def dynamic_local_search(self, index, func, global_best_idx):\n        exploration_factor = 0.5\n        global_best = self.population[global_best_idx]\n        for _ in range(2):\n            if self.evaluations >= self.budget:\n                break\n\n            direction = np.random.uniform(-exploration_factor, exploration_factor, self.dim)\n            candidate = np.clip(self.population[index] + direction * (global_best - self.population[index]), self.lower_bound, self.upper_bound)\n            candidate_fitness = func(candidate)\n            self.evaluations += 1\n            \n            if candidate_fitness < self.fitness[index]:\n                self.population[index] = candidate\n                self.fitness[index] = candidate_fitness", "name": "DynamicSwarmOptimizer", "description": "Enhanced swarm optimization integrating dynamic learning strategies and adaptive mutation for expedited convergence.", "configspace": "", "generation": 89, "fitness": 0.22177560605206262, "feedback": "The algorithm DynamicSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.5471703398651973, 0.5477355053579613, 0.558985932969334, 0.5636792922929794, 0.5663600830012945, 0.5736155718302899, 0.5552678675967628, 0.5494301855040905, 0.5558197350202573, 0.26888111667512715, 0.26563984652256334, 0.29968956084285736, 0.2790182593299255, 0.2911990976443237, 0.2795701869647935, 0.2740523349728222, 0.26482313554237813, 0.2766667199770534, 0.1082410874928984, 0.10559658455663434, 0.12521502951809693, 0.10626492828861611, 0.10383805792610079, 0.10799755128196631, 0.11209909911342852, 0.10803577670969111, 0.09826450948339338, 0.08702768570338126, 0.08357120420063635, 0.09206470402349987, 0.09295287845620748, 0.08710785726951908, 0.08752726924456133, 0.09450084080885301, 0.09128593555399289, 0.09289206557819873, 0.8915209289579669, 0.9213607755578953, 0.8815504239270004, 0.9079281247611818, 0.8891230413000211, 0.9181897666798312, 0.8917427653947052, 0.9249506060361873, 0.8913126420352303, 0.19371578469917827, 0.19740268019592544, 0.19862998270584986, 0.19858227060284717, 0.18269616797249888, 0.1912385515584848, 0.22074272625439084, 0.20517300988201637, 0.19035807593387255, 0.3778262061547498, 0.3836757979131781, 0.3661877259089492, 0.4764454753891241, 0.44083155711449307, 0.450487360073464, 0.3987449851685717, 0.4819853986641669, 0.4292381250175662, 0.12005356891725372, 0.12255215393271024, 0.15390989382304365, 0.11394869333383628, 0.127206849321723, 0.1333595811034376, 0.14490252641908574, 0.12960738527038684, 0.12907199333802832, 0.1403717050117903, 0.09043774366462198, 0.13132033875847704, 0.15747791199913264, 0.13693050083324143, 0.12887034414429377, 0.10603240478003229, 0.11251728860907328, 0.13352416984733484, 0.021831272364650767, 0.0341117640709363, 0.012676197636941278, 0.019179954034264313, 0.020336670110653543, 0.013660003037924473, 0.027600718195027962, 0.05454948342432142, 0.07384864072851705, 0.1172782833724787, 0.12483231919883142, 0.14253608624127556, 0.09196031148540262, 0.07741301018828362, 0.11354656308479061, 0.17885800964186782, 0.14679994008359587, 0.13446112858284343, 0.0012243684840544944, 0.011009631935596786, 0.005767583417088051, 0.006146118869729822, 0.027338087930815935, 0.0035033179290163696, 0.031648411871368576, 0.02151441230055462, 0.028876770840388977, 0.09943303016329241, 0.09721421207450764, 0.09377392570895604, 0.10852444828270069, 0.10657055849952757, 0.10585000222940144, 0.10707623439920955, 0.10683834599871622, 0.1019885956363582, 0.41263300208100107, 0.4107780087161085, 0.415596753388614, 0.40982655982174343, 0.4261280841548497, 0.42202664178062177, 0.4310973062803417, 0.4190314748760269, 0.4235693483129155, 0.0912965150974081, 0.09396915479743706, 0.09003627825016758, 0.08856081521336745, 0.0867477221429559, 0.08308595306118771, 0.09229631387253123, 0.09467537270444448, 0.08930482790709793, 0.13797770534576126, 0.14132439354242143, 0.14644267703124592, 0.14042662972412467, 0.14593164505001277, 0.1387493633062704, 0.14723227014713214, 0.12922127432554498, 0.13188831806527668, 0.26188628871235387, 0.2584658588615315, 0.25169821870294407, 0.2702855973530168, 0.2728781345177447, 0.2564505884953663, 0.27405372347331713, 0.29256607327082873, 0.27838661793641284, 0.1883862112141631, 0.1980516809665991, 0.19463390089689148, 0.1835458582096513, 0.19084873911131284, 0.18044420612614753, 0.1822199279973873, 0.21113278423105541, 0.1947059344020441, 0.19203745866661903, 0.18122419845674387, 0.20959870161916028, 0.17271089933780093, 0.18935131125280213, 0.18632250022225638, 0.20475236564490584, 0.18551502604380699, 0.18721540468197717, 0.17478060070751888, 0.18743689313800593, 0.19031116085614153, 0.18224495449545952, 0.18037209447593505, 0.17936767314768964, 0.18332281409385165, 0.1844329600522876, 0.1886864336767653, 0.18551563569529916, 0.3153944766926412, 0.2779328113517874, 0.22929765775790034, 0.19962299919652782, 0.1909844006181195, 0.230684272542388, 0.24647270629979035, 0.2948162166150541, 0.2909922145533834, 0.3030068733233344, 0.2902796118642865, 0.31882991952384065, 0.2256463911397576, 0.2267363910093112, 0.19132083120069598, 0.19947835695713034, 0.25194448267973957, 0.1778247711274885, 0.1844542969562839, 0.1840718379996391, 0.1819113009610761, 0.18595554810805914, 0.18876156165561142, 0.19821277469301835, 0.17173527330628935, 0.18191053214763153, 0.08104887262370741, 0.07149599637199333, 0.07005476468636807, 0.07200348453340888, 0.07317091244095575, 0.06723134273627052, 0.07517782607554657, 0.07038925581157907, 0.07338384380407681]}, "mutation_prompt": null}
{"id": "282f991e-10c9-40e6-8750-dd299cda7114", "solution": "import numpy as np\n\nclass ChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Stochastic mutation factor\n                mutation_factor_dynamic = self.mutation_factor * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.chaotic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaotic_local_search(self, index, func):\n        chaos_factor = 0.3\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaoticSwarmDE", "description": "An adaptive stochastic swarm-based optimization algorithm fusing differential evolution with chaotic local search for accelerated convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.7734557969185117, 0.7143605348979436, 0.7628691966520122, 0.7647463487791044, 0.7503654175603911, 0.7544099471716148, 0.7369377472827409, 0.7498437727611628, 0.7632567053051462, 0.5411696882701349, 0.5497343874652325, 0.555586828346566, 0.5551838210367472, 0.5561060485362171, 0.5672315045485463, 0.539998523192052, 0.5734234127492221, 0.5905288687839805, 0.322050858043598, 0.3557646565130076, 0.31727935003956353, 0.2554989768917517, 0.19958756586555804, 0.32368150397542883, 0.37814675772998063, 0.28115886139727, 0.15752837590303093, 0.14987512003402825, 0.1080744381484301, 0.14308752840528705, 0.14996936853515186, 0.1417206738502842, 0.13366424338130112, 0.1261644422352347, 0.14387493304363086, 0.19104593068954756, 0.9248628023947818, 0.9136253663710884, 0.9012011877268926, 0.9334699706032932, 0.9256570443139709, 0.9460723877314675, 0.9153486017386661, 0.9427474608686871, 0.9077693546357399, 0.41966682393786126, 0.42090084000413563, 0.44062347286089476, 0.4092686760502151, 0.4601152719634012, 0.4309157345046394, 0.4360038035802729, 0.44950811019293746, 0.4347963394178237, 0.6580459775468942, 0.623240136346955, 0.7657087771829801, 0.7483526580091948, 0.707150853150777, 0.7104639742801158, 0.6497849109254064, 0.71617374337182, 0.7224566522007112, 0.42423477803701315, 0.1908755941104816, 0.17848512143016249, 0.26707451990442754, 0.17375106372113025, 0.24373393732992066, 0.25088711265254526, 0.26663481468465056, 0.21631682172026212, 0.19030366478217897, 0.10948710063852574, 0.1797835158125456, 0.21318791940716542, 0.19118395152357992, 0.3015374914064286, 0.1789313505374075, 0.17418557710087512, 0.21883940722676465, 0.26334361705230414, 0.2069285727935689, 0.32629826506762305, 0.2693350836190638, 0.2739767274432987, 0.28010924443296004, 0.3207875210376553, 0.16756614388774904, 0.21888068779263592, 0.4134651668108933, 0.4221520360408031, 0.3704998152303882, 0.39885451737320743, 0.34070772688121376, 0.3635895765463558, 0.3962679292888842, 0.433932887328637, 0.4277572329917173, 0.06840967547721644, 0.11920721615924545, 0.14145241453352753, 0.1153403066111166, 0.16676168450277018, 0.16199614992315037, 0.14552247984462863, 0.1532207708696922, 0.07414825566833372, 0.2331572089520264, 0.24967878150900735, 0.23472517186862174, 0.24541302487660932, 0.2690744802017836, 0.2855652947146867, 0.22214624820436468, 0.23333364809438095, 0.25090517542393287, 0.6442187461261122, 0.6201735315134068, 0.6177453827509762, 0.5873584667392228, 0.6035671517926006, 0.6062910012049643, 0.6028612192760827, 0.6023375646282791, 0.6145226983869784, 0.11462454747407014, 0.3613642288931279, 0.13181133175561977, 0.1337808220463601, 0.10968050452383071, 0.14095496764974813, 0.1234364021282548, 0.10779797321424234, 0.11668022078998164, 0.20441528037955836, 0.20373795381532345, 0.20445826098988185, 0.26001270349634553, 0.2190944781917361, 0.27670195726174507, 0.22686006720023733, 0.19102511318527682, 0.25363078833625663, 0.4098055405854192, 0.37037925423803975, 0.44424806627912894, 0.3969943473505575, 0.39361318195016903, 0.4171747984212304, 0.4552454515168407, 0.44393400027133834, 0.4271034957048865, 0.3084902712523636, 0.3262071865912838, 0.31590478174272907, 0.3082930809285991, 0.27926557337562075, 0.25974401163334615, 0.3236054641746665, 0.3463468225341769, 0.311134212186821, 0.19578263194352807, 0.19632062882060408, 0.20307061056268416, 0.2119705808555613, 0.19731630924412014, 0.21335934289780767, 0.23118454431151902, 0.19629022668564455, 0.20440639691720286, 0.21820291522337065, 0.2380194531002533, 0.37200129537473403, 0.20764915513928084, 0.20807845265870362, 0.2258980116470829, 0.42046938104990916, 0.22194491611400013, 0.4313480430589052, 0.6760592838467352, 0.1802620909214775, 0.7423350514808733, 0.7725148411466589, 0.1895219648028169, 0.6779017460493193, 0.694222853636675, 0.6641659908643713, 0.7261040730857043, 0.6792033449845574, 0.5879804815990433, 0.19964784790040613, 0.6273803702673394, 0.16240356982997417, 0.6715807606105054, 0.6238826801765707, 0.6463327272367441, 0.14746552340085894, 0.17680544658413344, 0.18034697191212112, 0.18363973657404697, 0.17904213904333932, 0.20827720685411455, 0.1838698132246941, 0.18417817546134618, 0.17689738199126348, 0.18688421159367286, 0.0896458949553891, 0.08009402024635515, 0.08447847874914627, 0.0847840380439111, 0.07928911558185481, 0.08439501294889162, 0.0795923603210511, 0.08147545076438723, 0.08213424841886297]}, "mutation_prompt": null}
{"id": "847117c8-8eb3-4309-9f2d-c93dd54ee203", "solution": "import numpy as np\n\nclass HybridGeneticDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(120, budget // 3)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.elitism_rate = 0.2\n        self.local_search_prob = 0.3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            next_population = self.population.copy()\n            elite_count = int(self.elitism_rate * self.population_size)\n            elite_indices = np.argpartition(self.fitness, elite_count)[:elite_count]\n\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                if i in elite_indices:\n                    next_population[i] = self.population[i]\n                    continue\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    next_population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if np.random.rand() < self.local_search_prob:\n                    self.adaptive_chaotic_perturbation(i, func)\n\n            self.population = next_population\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_chaotic_perturbation(self, index, func):\n        chaos_factor = 0.2 + 0.1 * np.random.rand()\n        for _ in range(2):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "HybridGeneticDE", "description": "A hybrid genetic algorithm combining differential evolution with adaptive chaotic perturbation for enhanced exploration-exploitation balance.", "configspace": "", "generation": 91, "fitness": 0.14211248078635463, "feedback": "The algorithm HybridGeneticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.17.", "error": "", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.24591352411852296, 0.2171154375414539, 0.25950262447364114, 0.2417117843206288, 0.2561953727662629, 0.26916421789718503, 0.26165061211834584, 0.24186022515945438, 0.2514739195011384, 0.015618211456541742, 0.02059939242282871, 0.023988158268337112, 0.012030487939792556, 0.03038103152289573, 0.01525515748411621, 0.012591338532085161, 0.01579681731999716, 0.016342537563068582, 0.06051127831674186, 0.06086162671929629, 0.07446040444298485, 0.06411751242319275, 0.07123286557161446, 0.0663176872600787, 0.06299971982939245, 0.07164172542882974, 0.08259970882440792, 0.03769837956211464, 0.05097647151240703, 0.05654388653503595, 0.058257424599110874, 0.04706496197649923, 0.04491406551861887, 0.061387664358990124, 0.05968103422416593, 0.04566856249756823, 0.8490042374255764, 0.9099395095592135, 0.8916681622062393, 0.851537174608658, 0.7730183275774868, 0.8631808051468242, 0.9385953377203892, 0.9274834460153877, 0.9092814088885046, 0.09743895746976505, 0.10077957333295362, 0.09595547807156668, 0.09535379205115879, 0.0855754829040627, 0.10074781577114156, 0.12763718399878232, 0.11435259662174813, 0.11476069321278315, 0.1499738487716168, 0.16923789714291582, 0.16673505486034756, 0.1874610873760144, 0.16689420947690647, 0.15695532158359204, 0.1629678354943449, 0.1710803602829064, 0.18106693254590722, 0.040404042600183154, 0.03774860745211517, 0.04777205161943565, 0.05725141238948073, 0.03772612439861456, 0.046599952031038394, 0.02867075200837188, 0.03437104527036405, 0.03248874723338813, 0.0926934892183886, 0.08122264210970387, 0.07987831292927672, 0.06882922393101998, 0.01908552850945655, 0.030936948743415127, 0.023982109590292344, 0.0407412769625235, 0.03061962068424795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016696512158960175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06305326010911827, 0.06622700000241533, 0.05051886918568271, 0.0789077614141892, 0.08005152517143543, 0.05273462575316479, 0.06666645589395426, 0.06061549863650684, 0.06875422877376514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02169987635119819, 0.03273179518175351, 0.04224561295688223, 0.016757555591772277, 0.01660417657540636, 0.03263688710420687, 0.02996962409431947, 0.026406808888798206, 0.03476140934277261, 0.24051288052699438, 0.2225675512980645, 0.2331086895732125, 0.2555894293293274, 0.24779751759151492, 0.2406361092344238, 0.23493769349146454, 0.23302922334679466, 0.2417092814770787, 0.06670466679927234, 0.06864364481903307, 0.06805664158308955, 0.06446353472338195, 0.05806110640685369, 0.06648215069991037, 0.07436825405894743, 0.054250438568053116, 0.08016583658287324, 0.1494280750167456, 0.1368292680437022, 0.16667645975622958, 0.16807302436334814, 0.14884234467035384, 0.1620975201857362, 0.1631460807735624, 0.14692954216555576, 0.143196138282645, 0.17977491368030418, 0.1797370376602021, 0.20175986918956057, 0.18116957938390743, 0.18164642275835519, 0.17073641703563813, 0.20810346039421823, 0.20897780782406528, 0.17943049376533582, 0.12256322848519485, 0.11574886415418018, 0.12268896134129081, 0.1247783991547019, 0.12678213862506782, 0.1240989136686621, 0.14024794728887968, 0.14838745488216631, 0.1335520488933929, 0.19945154227400264, 0.1542125534372366, 0.15917589835920676, 0.1757926724738652, 0.16345216273515928, 0.17188057367603282, 0.19725982344515547, 0.1632899597465195, 0.18808020155736227, 0.14779266618636333, 0.15800773879056174, 0.1705220154073529, 0.14955459114801928, 0.15927553808630068, 0.14230579564888046, 0.17145516875440658, 0.15175034370061657, 0.16691529819806694, 0.16015705889359544, 0.16419421699942882, 0.15843302176648832, 0.15225091449552985, 0.16349484584041196, 0.1492399559570926, 0.16120338482490637, 0.16979368972033593, 0.1500137096300096, 0.24727013351023452, 0.1690349961203298, 0.15164077202056725, 0.15533247947486617, 0.1367106890009574, 0.14414478258611851, 0.16991728753463997, 0.19698863987264725, 0.1803941885189464, 0.17480795899707502, 0.19020180670016384, 0.19527348129656985, 0.17704662961640538, 0.1850206270184973, 0.1914711456447662, 0.18837510906781707, 0.19040976362598472, 0.20058334664227995, 0.06143547496304347, 0.05245115549118329, 0.059733852114940644, 0.06217696169405895, 0.060504586326575405, 0.061236247573456026, 0.05169968262235303, 0.05488461587196014, 0.06356416259127184]}, "mutation_prompt": null}
{"id": "ced3af83-0905-45eb-b026-a6ba58cea0be", "solution": "import numpy as np\n\nclass ChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Stochastic mutation factor\n                mutation_factor_dynamic = self.mutation_factor * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.chaotic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaotic_local_search(self, index, func):\n        chaos_factor = 0.3\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaoticSwarmDE", "description": "An adaptive stochastic swarm-based optimization algorithm fusing differential evolution with chaotic local search for accelerated convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.7734557969185117, 0.7143605348979436, 0.7628691966520122, 0.7647463487791044, 0.7503654175603911, 0.7544099471716148, 0.7369377472827409, 0.7498437727611628, 0.7632567053051462, 0.5411696882701349, 0.5497343874652325, 0.555586828346566, 0.5551838210367472, 0.5561060485362171, 0.5672315045485463, 0.539998523192052, 0.5734234127492221, 0.5905288687839805, 0.322050858043598, 0.3557646565130076, 0.31727935003956353, 0.2554989768917517, 0.19958756586555804, 0.32368150397542883, 0.37814675772998063, 0.28115886139727, 0.15752837590303093, 0.14987512003402825, 0.1080744381484301, 0.14308752840528705, 0.14996936853515186, 0.1417206738502842, 0.13366424338130112, 0.1261644422352347, 0.14387493304363086, 0.19104593068954756, 0.9248628023947818, 0.9136253663710884, 0.9012011877268926, 0.9334699706032932, 0.9256570443139709, 0.9460723877314675, 0.9153486017386661, 0.9427474608686871, 0.9077693546357399, 0.41966682393786126, 0.42090084000413563, 0.44062347286089476, 0.4092686760502151, 0.4601152719634012, 0.4309157345046394, 0.4360038035802729, 0.44950811019293746, 0.4347963394178237, 0.6580459775468942, 0.623240136346955, 0.7657087771829801, 0.7483526580091948, 0.707150853150777, 0.7104639742801158, 0.6497849109254064, 0.71617374337182, 0.7224566522007112, 0.42423477803701315, 0.1908755941104816, 0.17848512143016249, 0.26707451990442754, 0.17375106372113025, 0.24373393732992066, 0.25088711265254526, 0.26663481468465056, 0.21631682172026212, 0.19030366478217897, 0.10948710063852574, 0.1797835158125456, 0.21318791940716542, 0.19118395152357992, 0.3015374914064286, 0.1789313505374075, 0.17418557710087512, 0.21883940722676465, 0.26334361705230414, 0.2069285727935689, 0.32629826506762305, 0.2693350836190638, 0.2739767274432987, 0.28010924443296004, 0.3207875210376553, 0.16756614388774904, 0.21888068779263592, 0.4134651668108933, 0.4221520360408031, 0.3704998152303882, 0.39885451737320743, 0.34070772688121376, 0.3635895765463558, 0.3962679292888842, 0.433932887328637, 0.4277572329917173, 0.06840967547721644, 0.11920721615924545, 0.14145241453352753, 0.1153403066111166, 0.16676168450277018, 0.16199614992315037, 0.14552247984462863, 0.1532207708696922, 0.07414825566833372, 0.2331572089520264, 0.24967878150900735, 0.23472517186862174, 0.24541302487660932, 0.2690744802017836, 0.2855652947146867, 0.22214624820436468, 0.23333364809438095, 0.25090517542393287, 0.6442187461261122, 0.6201735315134068, 0.6177453827509762, 0.5873584667392228, 0.6035671517926006, 0.6062910012049643, 0.6028612192760827, 0.6023375646282791, 0.6145226983869784, 0.11462454747407014, 0.3613642288931279, 0.13181133175561977, 0.1337808220463601, 0.10968050452383071, 0.14095496764974813, 0.1234364021282548, 0.10779797321424234, 0.11668022078998164, 0.20441528037955836, 0.20373795381532345, 0.20445826098988185, 0.26001270349634553, 0.2190944781917361, 0.27670195726174507, 0.22686006720023733, 0.19102511318527682, 0.25363078833625663, 0.4098055405854192, 0.37037925423803975, 0.44424806627912894, 0.3969943473505575, 0.39361318195016903, 0.4171747984212304, 0.4552454515168407, 0.44393400027133834, 0.4271034957048865, 0.3084902712523636, 0.3262071865912838, 0.31590478174272907, 0.3082930809285991, 0.27926557337562075, 0.25974401163334615, 0.3236054641746665, 0.3463468225341769, 0.311134212186821, 0.19578263194352807, 0.19632062882060408, 0.20307061056268416, 0.2119705808555613, 0.19731630924412014, 0.21335934289780767, 0.23118454431151902, 0.19629022668564455, 0.20440639691720286, 0.21820291522337065, 0.2380194531002533, 0.37200129537473403, 0.20764915513928084, 0.20807845265870362, 0.2258980116470829, 0.42046938104990916, 0.22194491611400013, 0.4313480430589052, 0.6760592838467352, 0.1802620909214775, 0.7423350514808733, 0.7725148411466589, 0.1895219648028169, 0.6779017460493193, 0.694222853636675, 0.6641659908643713, 0.7261040730857043, 0.6792033449845574, 0.5879804815990433, 0.19964784790040613, 0.6273803702673394, 0.16240356982997417, 0.6715807606105054, 0.6238826801765707, 0.6463327272367441, 0.14746552340085894, 0.17680544658413344, 0.18034697191212112, 0.18363973657404697, 0.17904213904333932, 0.20827720685411455, 0.1838698132246941, 0.18417817546134618, 0.17689738199126348, 0.18688421159367286, 0.0896458949553891, 0.08009402024635515, 0.08447847874914627, 0.0847840380439111, 0.07928911558185481, 0.08439501294889162, 0.0795923603210511, 0.08147545076438723, 0.08213424841886297]}, "mutation_prompt": null}
{"id": "dbf06894-668d-4c4a-bde6-85b8f5d4142b", "solution": "import numpy as np\n\nclass EnhancedChaoticLévyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9  # Slightly increased mutation factor\n        self.crossover_prob = 0.9  # Increased crossover probability for diversity\n        self.local_search_prob = 0.3  # Enhanced local search probability\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                mutation_factor_dynamic = self.mutation_factor * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if np.random.rand() < self.local_search_prob * np.sqrt(1 - self.evaluations / self.budget):\n                    self.chaotic_levy_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaotic_levy_local_search(self, index, func):\n        chaos_factor = 0.2  # Adjusted chaos factor for stability\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            levy_step = self.levy_flight(1.5, self.dim)  # Lévy flight for diverse exploration\n            perturbation = chaos_factor * (self.upper_bound - self.lower_bound) * levy_step\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness\n\n    def levy_flight(self, beta, size):\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                   (np.math.gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma_u, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.abs(v)**(1 / beta)\n        return step", "name": "EnhancedChaoticLévyDE", "description": "Integrating Lévy flight and differential evolution with adaptive chaos tuning for robust exploration and exploitation.", "configspace": "", "generation": 93, "fitness": 0.34645136523168624, "feedback": "The algorithm EnhancedChaoticLévyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.23.", "error": "", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.7055856147925922, 0.7181117004546034, 0.6918800393740558, 0.7308371308443828, 0.7343385592268601, 0.6962479969330893, 0.6813970679532406, 0.7065105158131194, 0.7249337689509052, 0.5056024661993601, 0.5047629081791796, 0.4802717059523124, 0.5081517566621006, 0.5084766269763494, 0.4933154585767626, 0.5104241013177397, 0.5111876937103219, 0.4795552857417802, 0.2274532411170388, 0.1438169180231753, 0.28266185569406, 0.3014695924476757, 0.14445933088308993, 0.15281950427140067, 0.1441216374974047, 0.24352149504223441, 0.31239994365728285, 0.11448552152688984, 0.14059819125991524, 0.11726032136531994, 0.2001916460838029, 0.10127688332815743, 0.1314086153318269, 0.1439030336381587, 0.14986321918793943, 0.14990108513045086, 0.9749615391256151, 0.9566921136685257, 0.9590211521639569, 0.9658900705624284, 0.9280808412347133, 0.9331902482787531, 0.9805582303374895, 0.9471956724515049, 0.9594933396622393, 0.36316368870107507, 0.34378692247511433, 0.34721592627945197, 0.36779264384093735, 0.385419276678594, 0.3657360673568205, 0.37445670833918965, 0.43465142706863125, 0.3015155641317966, 0.6667633796685405, 0.6775715828312459, 0.7132337012628602, 0.26148187177770854, 0.7497985350238616, 0.6246261491221974, 0.642656093238853, 0.7042841157409454, 0.7133941391873599, 0.1891103119091675, 0.19220170737103637, 0.13337594150718346, 0.20391024472113994, 0.11573729893757612, 0.16788293529478848, 0.3406344806918865, 0.17016656580419387, 0.1799051045945924, 0.10742817516492542, 0.19515114930756994, 0.15090913681478724, 0.2247284867611674, 0.4113568957946828, 0.28209396304154, 0.1556265879769424, 0.173669076859308, 0.27546961175345086, 0.2520353728179302, 0.30490009211043323, 0.2604482241029723, 0.09316881182882175, 0.26901462216049365, 0.22511231457956105, 0.23769379773282184, 0.28766880642258397, 0.23222843771638435, 0.36823236169639595, 0.44683791268352446, 0.38001493357104954, 0.40477664835646465, 0.37189572433797036, 0.40755460003706545, 0.3868012172972398, 0.45860229544594755, 0.44721553155263194, 0.12962626920535736, 0.0998409171578507, 0.07171625675154503, 0.08801983072605868, 0.16462887059617715, 0.08534322068360867, 0.07917203634986358, 0.1349987952582542, 0.13503484381313613, 0.22677495640500833, 0.23643929839530575, 0.23232198546955318, 0.25032917549909706, 0.24959716864652925, 0.2556359500936072, 0.2631422230956184, 0.21156594120115235, 0.1929680426619067, 0.6069454499047413, 0.6152568841410615, 0.61706576461524, 0.6140800809849513, 0.6419273697004247, 0.5834844137954863, 0.5801992599921766, 0.6096326738529688, 0.5981662891255852, 0.11779640762351029, 0.1254692229434008, 0.09220971930014288, 0.11068813397415012, 0.12758140507675397, 0.11859976860023957, 0.12070385940911987, 0.10603320554155893, 0.1008090185747813, 0.1713554695854842, 0.24212794375435265, 0.18511861364645188, 0.18434803497144803, 0.2651794773994045, 0.17546594464122323, 0.20233738053282557, 0.2316301159967029, 0.15093437414064048, 0.35993520286353353, 0.35676030265488967, 0.36618462759192394, 0.37327968315252447, 0.3934099721488078, 0.3793208383841954, 0.39596193458926565, 0.40881943518207975, 0.41191595805916725, 0.3026556330479825, 0.3241059739825476, 0.27049181345333007, 0.2039884425570765, 0.2797171958153849, 0.3251747973933513, 0.266918761657585, 0.3138963385649486, 0.3099122292230858, 0.19090661116152163, 0.19550463692839792, 0.19465691428247556, 0.18733252676997703, 0.19304695565196395, 0.1985064942560294, 0.19190305866446677, 0.19331484574678548, 0.18336093518803553, 0.4227150954680624, 0.2153751408252471, 0.19533206444364448, 0.46134196897807855, 0.39946276515827794, 0.20551489179090043, 0.28817365335307654, 0.20094537799289558, 0.20097350573030004, 0.16341900918384467, 0.5967154180779055, 0.7138850538593358, 0.7608054852690672, 0.1812390107951476, 0.6527974408495918, 0.703202238587362, 0.1644436272628036, 0.6230564285781626, 0.6858435092447364, 0.20105123905191813, 0.16365862355624272, 0.6817377234034585, 0.5848320146733081, 0.7097083090845879, 0.6185901919294077, 0.5910992911045265, 0.7012567680204235, 0.19718483910209572, 0.17584197291054038, 0.17893483043917258, 0.18104483573446362, 0.17416499737966495, 0.17077944455404448, 0.1978761547978546, 0.1762141991333529, 0.1730206623927203, 0.07301001013973762, 0.07556706849734252, 0.08482296694346458, 0.07788200623285957, 0.07369217983314624, 0.07476182434946299, 0.09008522886667214, 0.08306418349300804, 0.07569464405530713]}, "mutation_prompt": null}
{"id": "a8fd09dc-9310-478a-abd5-eb8731549671", "solution": "import numpy as np\n\nclass HybridChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.7\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.2\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.population_size, float('inf'))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n        \n        for i in range(self.population_size):\n            if self.fitness[i] < self.personal_best_fitness[i]:\n                self.personal_best[i] = self.population[i]\n                self.personal_best_fitness[i] = self.fitness[i]\n        \n        best_idx = np.argmin(self.fitness)\n        if self.fitness[best_idx] < self.global_best_fitness:\n            self.global_best = self.population[best_idx]\n            self.global_best_fitness = self.fitness[best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # PSO-like update\n                inertia_weight = 0.5 + np.random.rand() / 2\n                self.velocity[i] = (inertia_weight * self.velocity[i] +\n                                    2 * np.random.rand() * (self.personal_best[i] - self.population[i]) +\n                                    2 * np.random.rand() * (self.global_best - self.population[i]))\n                self.population[i] = np.clip(self.population[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE mutation and crossover\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                if trial_fitness < self.personal_best_fitness[i]:\n                    self.personal_best[i] = trial\n                    self.personal_best_fitness[i] = trial_fitness\n\n                if trial_fitness < self.global_best_fitness:\n                    self.global_best = trial\n                    self.global_best_fitness = trial_fitness\n\n                # Chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.chaotic_local_search(i, func)\n        \n        return self.global_best, self.global_best_fitness\n\n    def chaotic_local_search(self, index, func):\n        chaos_factor = 0.2\n        for _ in range(5):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness\n                if neighbor_fitness < self.personal_best_fitness[index]:\n                    self.personal_best[index] = neighbor\n                    self.personal_best_fitness[index] = neighbor_fitness\n                if neighbor_fitness < self.global_best_fitness:\n                    self.global_best = neighbor\n                    self.global_best_fitness = neighbor_fitness", "name": "HybridChaoticSwarmDE", "description": "A hybrid optimization algorithm integrating PSO dynamics with chaotic differential evolution for enhanced convergence.", "configspace": "", "generation": 94, "fitness": 0.17128134047679144, "feedback": "The algorithm HybridChaoticSwarmDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.29185478738710346, 0.28513409867926165, 0.28763405823650723, 0.30815116247901964, 0.3253923884198533, 0.31416891674111713, 0.3210617982839675, 0.3205464011281953, 0.32976361428715817, 0.003498486845225357, 9.999999999998899e-05, 0.0003789264280265048, 9.999999999998899e-05, 0.011915451889436879, 9.999999999998899e-05, 0.00310586733458873, 0.003544316018357696, 0.0005903160601509194, 0.07200318088376212, 0.07950724886626881, 0.0702573543658791, 0.09199973527827898, 0.07193872656901001, 0.07980374885466168, 0.08152218866285732, 0.07644612601177503, 0.08862605372524157, 0.058213190203693976, 0.060666388127811444, 0.0595057736094885, 0.05802329468026168, 0.053943942111525534, 0.06084838717088137, 0.06369684663579189, 0.07492482939945388, 0.05849235871139613, 0.9727893235749654, 0.9682519610765209, 0.9603647250895957, 0.9726075014921132, 0.9718728115454428, 0.9776734081125976, 0.9731375466026255, 0.9717101043897858, 0.9663200800804681, 0.1556388244578919, 0.15557664616363598, 0.1581392494200965, 0.14430514146471873, 0.14209173878475778, 0.18112641735640633, 0.14551480456921984, 0.1587301408695483, 0.1445746947150539, 0.22004803698681685, 0.21845414748427183, 0.2116938162384876, 0.1998530310233606, 0.2007967531917335, 0.2189081325336022, 0.2433082985338021, 0.20809309986087532, 0.22226609340797243, 0.10914995304570652, 0.09545698436986405, 0.08217827024246893, 0.08811543208214134, 0.0691366054283582, 0.0777440535384416, 0.08695739599905938, 0.049049673509183545, 0.08843665406565471, 0.10409271073019832, 0.10041862631684761, 0.06277746262165951, 0.0916340511525412, 0.07894550450606963, 0.07105334001130925, 0.08287642397026829, 0.1067097330766752, 0.06464294592560293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0062698140036604455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08335404971559679, 0.050021348886298944, 0.10227837096771286, 0.0682210109885325, 0.08990380594089953, 0.07986130250536494, 0.03935297969107454, 0.039145785238297814, 0.051597891109291805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05823436184781894, 0.03823574265994467, 0.041568110618089626, 0.036211010658040665, 0.038314346270097666, 0.05102351176445996, 0.03791198262497786, 0.05192406532076965, 0.04687095931735019, 0.28722888916987976, 0.29209395511939684, 0.29059841942145737, 0.30374781219571867, 0.2858313366212002, 0.30988694695235786, 0.29827047367502024, 0.29075858583688563, 0.295375525698111, 0.08323113924854919, 0.079376278075864, 0.08012963541411988, 0.08063337014540917, 0.06458058833647373, 0.07171445118409192, 0.07949717934326239, 0.07942537150085405, 0.07407477842590904, 0.1467062687325098, 0.16239750398921182, 0.1593453481057926, 0.15311949948085435, 0.15298093262287615, 0.1465159830107826, 0.1294786005500822, 0.15448496307971304, 0.15386825058175713, 0.2206858940655969, 0.21021088468399263, 0.2149612132579326, 0.23132144594942738, 0.22190413500953377, 0.2275462371212672, 0.21815392027003666, 0.22077250441680674, 0.22285766382428573, 0.16835441067950507, 0.1560362664975895, 0.15892280600212416, 0.1478186035449357, 0.15611437081282054, 0.16723542805368508, 0.1627910038494399, 0.18226743955156877, 0.16294351452088573, 0.1762477633980727, 0.22622840340643235, 0.16942430613765935, 0.17272545751826074, 0.22073865389899805, 0.17786806603342598, 0.1867772192806625, 0.18200939210662048, 0.17395123766431675, 0.17302779533967294, 0.16634417214330355, 0.16613659501981204, 0.16806949846806052, 0.16335124137560064, 0.1778984340409181, 0.16431436854747494, 0.17358179991711808, 0.18269041025981192, 0.15241147996582605, 0.29702576836686845, 0.40222203670475143, 0.383815740463483, 0.17645693448137478, 0.16445144769967557, 0.17772197526623568, 0.24470663493008338, 0.19327570105912284, 0.2488555123883346, 0.1675714468132966, 0.3051260166354066, 0.34687181436211867, 0.30109730128006107, 0.18952442092730415, 0.19858061089227452, 0.37437272779239616, 0.314024916643726, 0.18761050000256374, 0.19495250413011023, 0.1899234847483231, 0.19413904614065636, 0.18855295590898635, 0.18006853006019485, 0.19669063414767796, 0.19114699218750397, 0.183644429780758, 0.0777305569457265, 0.07170041861388399, 0.0670244121675796, 0.06326105533715531, 0.07004932925905705, 0.06549707847951525, 0.06949680783832735, 0.07360446270808474, 0.06324645084001712]}, "mutation_prompt": null}
{"id": "214d4f00-f3a7-4766-b03a-c0c73b7e3ddd", "solution": "import numpy as np\n\nclass ChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Stochastic mutation factor\n                mutation_factor_dynamic = self.mutation_factor * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.chaotic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaotic_local_search(self, index, func):\n        chaos_factor = 0.3\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaoticSwarmDE", "description": "An adaptive stochastic swarm-based optimization algorithm fusing differential evolution with chaotic local search for accelerated convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.7734557969185117, 0.7143605348979436, 0.7628691966520122, 0.7647463487791044, 0.7503654175603911, 0.7544099471716148, 0.7369377472827409, 0.7498437727611628, 0.7632567053051462, 0.5411696882701349, 0.5497343874652325, 0.555586828346566, 0.5551838210367472, 0.5561060485362171, 0.5672315045485463, 0.539998523192052, 0.5734234127492221, 0.5905288687839805, 0.322050858043598, 0.3557646565130076, 0.31727935003956353, 0.2554989768917517, 0.19958756586555804, 0.32368150397542883, 0.37814675772998063, 0.28115886139727, 0.15752837590303093, 0.14987512003402825, 0.1080744381484301, 0.14308752840528705, 0.14996936853515186, 0.1417206738502842, 0.13366424338130112, 0.1261644422352347, 0.14387493304363086, 0.19104593068954756, 0.9248628023947818, 0.9136253663710884, 0.9012011877268926, 0.9334699706032932, 0.9256570443139709, 0.9460723877314675, 0.9153486017386661, 0.9427474608686871, 0.9077693546357399, 0.41966682393786126, 0.42090084000413563, 0.44062347286089476, 0.4092686760502151, 0.4601152719634012, 0.4309157345046394, 0.4360038035802729, 0.44950811019293746, 0.4347963394178237, 0.6580459775468942, 0.623240136346955, 0.7657087771829801, 0.7483526580091948, 0.707150853150777, 0.7104639742801158, 0.6497849109254064, 0.71617374337182, 0.7224566522007112, 0.42423477803701315, 0.1908755941104816, 0.17848512143016249, 0.26707451990442754, 0.17375106372113025, 0.24373393732992066, 0.25088711265254526, 0.26663481468465056, 0.21631682172026212, 0.19030366478217897, 0.10948710063852574, 0.1797835158125456, 0.21318791940716542, 0.19118395152357992, 0.3015374914064286, 0.1789313505374075, 0.17418557710087512, 0.21883940722676465, 0.26334361705230414, 0.2069285727935689, 0.32629826506762305, 0.2693350836190638, 0.2739767274432987, 0.28010924443296004, 0.3207875210376553, 0.16756614388774904, 0.21888068779263592, 0.4134651668108933, 0.4221520360408031, 0.3704998152303882, 0.39885451737320743, 0.34070772688121376, 0.3635895765463558, 0.3962679292888842, 0.433932887328637, 0.4277572329917173, 0.06840967547721644, 0.11920721615924545, 0.14145241453352753, 0.1153403066111166, 0.16676168450277018, 0.16199614992315037, 0.14552247984462863, 0.1532207708696922, 0.07414825566833372, 0.2331572089520264, 0.24967878150900735, 0.23472517186862174, 0.24541302487660932, 0.2690744802017836, 0.2855652947146867, 0.22214624820436468, 0.23333364809438095, 0.25090517542393287, 0.6442187461261122, 0.6201735315134068, 0.6177453827509762, 0.5873584667392228, 0.6035671517926006, 0.6062910012049643, 0.6028612192760827, 0.6023375646282791, 0.6145226983869784, 0.11462454747407014, 0.3613642288931279, 0.13181133175561977, 0.1337808220463601, 0.10968050452383071, 0.14095496764974813, 0.1234364021282548, 0.10779797321424234, 0.11668022078998164, 0.20441528037955836, 0.20373795381532345, 0.20445826098988185, 0.26001270349634553, 0.2190944781917361, 0.27670195726174507, 0.22686006720023733, 0.19102511318527682, 0.25363078833625663, 0.4098055405854192, 0.37037925423803975, 0.44424806627912894, 0.3969943473505575, 0.39361318195016903, 0.4171747984212304, 0.4552454515168407, 0.44393400027133834, 0.4271034957048865, 0.3084902712523636, 0.3262071865912838, 0.31590478174272907, 0.3082930809285991, 0.27926557337562075, 0.25974401163334615, 0.3236054641746665, 0.3463468225341769, 0.311134212186821, 0.19578263194352807, 0.19632062882060408, 0.20307061056268416, 0.2119705808555613, 0.19731630924412014, 0.21335934289780767, 0.23118454431151902, 0.19629022668564455, 0.20440639691720286, 0.21820291522337065, 0.2380194531002533, 0.37200129537473403, 0.20764915513928084, 0.20807845265870362, 0.2258980116470829, 0.42046938104990916, 0.22194491611400013, 0.4313480430589052, 0.6760592838467352, 0.1802620909214775, 0.7423350514808733, 0.7725148411466589, 0.1895219648028169, 0.6779017460493193, 0.694222853636675, 0.6641659908643713, 0.7261040730857043, 0.6792033449845574, 0.5879804815990433, 0.19964784790040613, 0.6273803702673394, 0.16240356982997417, 0.6715807606105054, 0.6238826801765707, 0.6463327272367441, 0.14746552340085894, 0.17680544658413344, 0.18034697191212112, 0.18363973657404697, 0.17904213904333932, 0.20827720685411455, 0.1838698132246941, 0.18417817546134618, 0.17689738199126348, 0.18688421159367286, 0.0896458949553891, 0.08009402024635515, 0.08447847874914627, 0.0847840380439111, 0.07928911558185481, 0.08439501294889162, 0.0795923603210511, 0.08147545076438723, 0.08213424841886297]}, "mutation_prompt": null}
{"id": "fd272a0d-7fe0-4b51-93cf-aef179b455ab", "solution": "import numpy as np\n\nclass ChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Stochastic mutation factor\n                mutation_factor_dynamic = self.mutation_factor * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.chaotic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaotic_local_search(self, index, func):\n        chaos_factor = 0.3\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaoticSwarmDE", "description": "An adaptive stochastic swarm-based optimization algorithm fusing differential evolution with chaotic local search for accelerated convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.7734557969185117, 0.7143605348979436, 0.7628691966520122, 0.7647463487791044, 0.7503654175603911, 0.7544099471716148, 0.7369377472827409, 0.7498437727611628, 0.7632567053051462, 0.5411696882701349, 0.5497343874652325, 0.555586828346566, 0.5551838210367472, 0.5561060485362171, 0.5672315045485463, 0.539998523192052, 0.5734234127492221, 0.5905288687839805, 0.322050858043598, 0.3557646565130076, 0.31727935003956353, 0.2554989768917517, 0.19958756586555804, 0.32368150397542883, 0.37814675772998063, 0.28115886139727, 0.15752837590303093, 0.14987512003402825, 0.1080744381484301, 0.14308752840528705, 0.14996936853515186, 0.1417206738502842, 0.13366424338130112, 0.1261644422352347, 0.14387493304363086, 0.19104593068954756, 0.9248628023947818, 0.9136253663710884, 0.9012011877268926, 0.9334699706032932, 0.9256570443139709, 0.9460723877314675, 0.9153486017386661, 0.9427474608686871, 0.9077693546357399, 0.41966682393786126, 0.42090084000413563, 0.44062347286089476, 0.4092686760502151, 0.4601152719634012, 0.4309157345046394, 0.4360038035802729, 0.44950811019293746, 0.4347963394178237, 0.6580459775468942, 0.623240136346955, 0.7657087771829801, 0.7483526580091948, 0.707150853150777, 0.7104639742801158, 0.6497849109254064, 0.71617374337182, 0.7224566522007112, 0.42423477803701315, 0.1908755941104816, 0.17848512143016249, 0.26707451990442754, 0.17375106372113025, 0.24373393732992066, 0.25088711265254526, 0.26663481468465056, 0.21631682172026212, 0.19030366478217897, 0.10948710063852574, 0.1797835158125456, 0.21318791940716542, 0.19118395152357992, 0.3015374914064286, 0.1789313505374075, 0.17418557710087512, 0.21883940722676465, 0.26334361705230414, 0.2069285727935689, 0.32629826506762305, 0.2693350836190638, 0.2739767274432987, 0.28010924443296004, 0.3207875210376553, 0.16756614388774904, 0.21888068779263592, 0.4134651668108933, 0.4221520360408031, 0.3704998152303882, 0.39885451737320743, 0.34070772688121376, 0.3635895765463558, 0.3962679292888842, 0.433932887328637, 0.4277572329917173, 0.06840967547721644, 0.11920721615924545, 0.14145241453352753, 0.1153403066111166, 0.16676168450277018, 0.16199614992315037, 0.14552247984462863, 0.1532207708696922, 0.07414825566833372, 0.2331572089520264, 0.24967878150900735, 0.23472517186862174, 0.24541302487660932, 0.2690744802017836, 0.2855652947146867, 0.22214624820436468, 0.23333364809438095, 0.25090517542393287, 0.6442187461261122, 0.6201735315134068, 0.6177453827509762, 0.5873584667392228, 0.6035671517926006, 0.6062910012049643, 0.6028612192760827, 0.6023375646282791, 0.6145226983869784, 0.11462454747407014, 0.3613642288931279, 0.13181133175561977, 0.1337808220463601, 0.10968050452383071, 0.14095496764974813, 0.1234364021282548, 0.10779797321424234, 0.11668022078998164, 0.20441528037955836, 0.20373795381532345, 0.20445826098988185, 0.26001270349634553, 0.2190944781917361, 0.27670195726174507, 0.22686006720023733, 0.19102511318527682, 0.25363078833625663, 0.4098055405854192, 0.37037925423803975, 0.44424806627912894, 0.3969943473505575, 0.39361318195016903, 0.4171747984212304, 0.4552454515168407, 0.44393400027133834, 0.4271034957048865, 0.3084902712523636, 0.3262071865912838, 0.31590478174272907, 0.3082930809285991, 0.27926557337562075, 0.25974401163334615, 0.3236054641746665, 0.3463468225341769, 0.311134212186821, 0.19578263194352807, 0.19632062882060408, 0.20307061056268416, 0.2119705808555613, 0.19731630924412014, 0.21335934289780767, 0.23118454431151902, 0.19629022668564455, 0.20440639691720286, 0.21820291522337065, 0.2380194531002533, 0.37200129537473403, 0.20764915513928084, 0.20807845265870362, 0.2258980116470829, 0.42046938104990916, 0.22194491611400013, 0.4313480430589052, 0.6760592838467352, 0.1802620909214775, 0.7423350514808733, 0.7725148411466589, 0.1895219648028169, 0.6779017460493193, 0.694222853636675, 0.6641659908643713, 0.7261040730857043, 0.6792033449845574, 0.5879804815990433, 0.19964784790040613, 0.6273803702673394, 0.16240356982997417, 0.6715807606105054, 0.6238826801765707, 0.6463327272367441, 0.14746552340085894, 0.17680544658413344, 0.18034697191212112, 0.18363973657404697, 0.17904213904333932, 0.20827720685411455, 0.1838698132246941, 0.18417817546134618, 0.17689738199126348, 0.18688421159367286, 0.0896458949553891, 0.08009402024635515, 0.08447847874914627, 0.0847840380439111, 0.07928911558185481, 0.08439501294889162, 0.0795923603210511, 0.08147545076438723, 0.08213424841886297]}, "mutation_prompt": null}
{"id": "a5ffc0de-29a4-4efe-b778-de861c9189b6", "solution": "import numpy as np\n\nclass HybridSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.9\n        self.crossover_prob = 0.9\n        self.local_search_prob = 0.3\n        self.inertia_weight = 0.5\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best = np.copy(self.population)\n        self.personal_best_fitness = np.full(self.population_size, float('inf'))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n        self.personal_best_fitness = np.copy(self.fitness)\n        global_best_idx = np.argmin(self.fitness)\n        global_best = self.population[global_best_idx]\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Update velocities\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive = self.cognitive_coeff * r1 * (self.personal_best[i] - self.population[i])\n                social = self.social_coeff * r2 * (global_best - self.population[i])\n                self.velocities[i] = self.inertia_weight * self.velocities[i] + cognitive + social\n                \n                # Particle swarm mutation\n                mutant = self.population[i] + self.velocities[i]\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    if trial_fitness < self.personal_best_fitness[i]:\n                        self.personal_best[i] = trial\n                        self.personal_best_fitness[i] = trial_fitness\n                        if trial_fitness < self.fitness[global_best_idx]:\n                            global_best_idx = i\n                            global_best = trial\n\n                # Adaptive local exploration\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.adaptive_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def adaptive_local_search(self, index, func):\n        local_step = 0.2 * (self.upper_bound - self.lower_bound)\n        neighbor = np.clip(self.population[index] + np.random.uniform(-local_step, local_step, self.dim), self.lower_bound, self.upper_bound)\n        neighbor_fitness = func(neighbor)\n        self.evaluations += 1\n\n        if neighbor_fitness < self.fitness[index]:\n            self.population[index] = neighbor\n            self.fitness[index] = neighbor_fitness", "name": "HybridSwarmDE", "description": "A hybrid algorithm combining dynamic differential evolution with particle swarm mutation and adaptive local exploration for enhanced convergence.", "configspace": "", "generation": 97, "fitness": 0.2528609276050527, "feedback": "The algorithm HybridSwarmDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.7646303763150059, 0.7920741917115277, 0.7980253365585468, 0.6637191757025094, 0.7927337886178807, 0.7797429103195406, 0.7811328333998027, 0.7750024068916113, 0.7794857121096967, 9.999999999998899e-05, 0.5897620911472202, 0.037673014331088384, 0.5312178332168964, 0.5707014552750795, 9.999999999998899e-05, 0.005827856541981369, 0.5672404479195744, 9.999999999998899e-05, 0.09347502266720675, 0.1129504740213424, 0.16438095750989012, 0.14235181837905309, 0.1504815658608042, 0.1078728627512926, 0.1396207613838678, 0.17035371666775978, 0.1368155690890127, 0.135859880077428, 0.23552154769302824, 0.1462716564340535, 0.13231206056089673, 0.11981261007054023, 0.11500711029982758, 0.14945388711943475, 0.1390109944746919, 0.15784156743830458, 0.9745451818184749, 0.9786384979174864, 0.9718017060408175, 0.9735201941420523, 0.9748074718803126, 0.9747381711336393, 0.9747800008137659, 0.977964379787702, 0.9751941500870904, 0.3323070417891064, 0.3201977920124498, 0.24774226412577494, 0.15084323183691772, 0.14980395473051067, 0.3163418477246305, 0.3510985423513653, 0.336065568383493, 0.2508989474843961, 0.16781145567997424, 0.8077944305087821, 0.17946359306600657, 0.1968067119002842, 0.33650714902044965, 0.19186546397206516, 0.1597275213321484, 0.7706076446190654, 0.439530904366779, 0.22159753168579277, 0.23680705152030534, 0.2784511427475689, 0.1135370607819356, 0.20961357631889943, 0.1060803511632481, 0.1520513680154496, 0.27538146274983366, 0.1998872321282824, 0.2132974150428243, 0.09473762051496382, 0.12653728657017294, 0.22738254800329538, 0.2410264591628235, 0.20616843453527467, 0.228899087518733, 0.22511866798356484, 0.03261578778287533, 0.0008383834395996326, 0.002407311478741958, 0.04904305766500383, 9.999999999998899e-05, 0.03830155406567082, 0.026594276440319642, 0.0001745570328330892, 9.999999999998899e-05, 0.024611284190782734, 0.07470154505915982, 0.1178980478794871, 0.06556631651480582, 0.09427022682459685, 0.1004118388776345, 0.04984116390863236, 0.11548612021673876, 0.0407338580411406, 0.0946834039990736, 0.042180901353387146, 0.13056127849862353, 0.09893251010848814, 0.1358357218008116, 0.07999925391743379, 0.06638751916820129, 0.19921224784715819, 0.06136722956275986, 0.06264499898513076, 0.005797821755594068, 0.011121951587852341, 0.18635692515990498, 0.2426361024904491, 0.12284674447988875, 0.11760886608396581, 0.045325599427244345, 0.07871425284188704, 0.16129148661090764, 0.49778939943140954, 0.5495128552601849, 0.5434661927800252, 0.5575609976172178, 0.5208936597769147, 0.5814294100953603, 0.5362955661481972, 0.5176458857453545, 0.5455170396401977, 0.07004474299523533, 0.09064937285071373, 0.08237850526429791, 0.048160874737361525, 0.08792426942545262, 0.09732690141653766, 0.06785632369264039, 0.1356971812714144, 0.09229845322677122, 0.2639536983269076, 0.15360357264903723, 0.17801878998532794, 0.1951444784954628, 0.26305480977984264, 0.23117816172492822, 0.15048193525122222, 0.2188866679035596, 0.22295235881851494, 0.31400844645737647, 0.20852850248909893, 0.2553631954933713, 0.34086953827411715, 0.35795696427691037, 0.26138728425186253, 0.25292285401282566, 0.2627573558421291, 0.332377768841148, 0.21087008317190636, 0.1678802839718222, 0.21840734158545283, 0.16600919918224355, 0.23127560489770826, 0.2143057552374592, 0.23004091910639157, 0.19938496493696956, 0.18539881012655246, 0.17906982396668503, 0.2120387394582146, 0.18788456673103904, 0.16515713876113403, 0.16829812553092305, 0.20746212095873884, 0.20228203743024187, 0.19139273129890755, 0.18934069589371072, 0.3087593591228196, 0.20212815647345017, 0.22532897249359807, 0.20379955061194122, 0.191521223178453, 0.2033625310229078, 0.19197473635263773, 0.229593385911654, 0.19631207731085054, 0.1299472767152321, 0.16754839256957998, 0.8615815590397061, 0.16230919543789135, 0.19942105201760063, 0.16510174429792424, 0.1408414928811157, 0.16434725675458917, 0.17141986764760986, 0.6070955598922274, 0.16892653664036483, 0.15922084168887762, 0.2920933677770283, 0.16817844914469626, 0.16858052698509618, 0.16747691599780823, 0.14269886450316316, 0.10339515018673684, 0.18228009254192112, 0.230666997588856, 0.2081688065863303, 0.18193189610565463, 0.2121982669915825, 0.19194889251436176, 0.22288983443465804, 0.19163724970553564, 0.19327642907147669, 0.058415366553261405, 0.09178867515267086, 0.09810169419517756, 0.08004968227832232, 0.07113454145121212, 0.09352251524511013, 0.06965874842069275, 0.07242452103287944, 0.06866740104939928]}, "mutation_prompt": null}
{"id": "15c35f53-642e-40f3-84b0-40486658e4f1", "solution": "import numpy as np\n\nclass ChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Stochastic mutation factor\n                mutation_factor_dynamic = self.mutation_factor * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.chaotic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaotic_local_search(self, index, func):\n        chaos_factor = 0.3\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaoticSwarmDE", "description": "An adaptive stochastic swarm-based optimization algorithm fusing differential evolution with chaotic local search for accelerated convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.7734557969185117, 0.7143605348979436, 0.7628691966520122, 0.7647463487791044, 0.7503654175603911, 0.7544099471716148, 0.7369377472827409, 0.7498437727611628, 0.7632567053051462, 0.5411696882701349, 0.5497343874652325, 0.555586828346566, 0.5551838210367472, 0.5561060485362171, 0.5672315045485463, 0.539998523192052, 0.5734234127492221, 0.5905288687839805, 0.322050858043598, 0.3557646565130076, 0.31727935003956353, 0.2554989768917517, 0.19958756586555804, 0.32368150397542883, 0.37814675772998063, 0.28115886139727, 0.15752837590303093, 0.14987512003402825, 0.1080744381484301, 0.14308752840528705, 0.14996936853515186, 0.1417206738502842, 0.13366424338130112, 0.1261644422352347, 0.14387493304363086, 0.19104593068954756, 0.9248628023947818, 0.9136253663710884, 0.9012011877268926, 0.9334699706032932, 0.9256570443139709, 0.9460723877314675, 0.9153486017386661, 0.9427474608686871, 0.9077693546357399, 0.41966682393786126, 0.42090084000413563, 0.44062347286089476, 0.4092686760502151, 0.4601152719634012, 0.4309157345046394, 0.4360038035802729, 0.44950811019293746, 0.4347963394178237, 0.6580459775468942, 0.623240136346955, 0.7657087771829801, 0.7483526580091948, 0.707150853150777, 0.7104639742801158, 0.6497849109254064, 0.71617374337182, 0.7224566522007112, 0.42423477803701315, 0.1908755941104816, 0.17848512143016249, 0.26707451990442754, 0.17375106372113025, 0.24373393732992066, 0.25088711265254526, 0.26663481468465056, 0.21631682172026212, 0.19030366478217897, 0.10948710063852574, 0.1797835158125456, 0.21318791940716542, 0.19118395152357992, 0.3015374914064286, 0.1789313505374075, 0.17418557710087512, 0.21883940722676465, 0.26334361705230414, 0.2069285727935689, 0.32629826506762305, 0.2693350836190638, 0.2739767274432987, 0.28010924443296004, 0.3207875210376553, 0.16756614388774904, 0.21888068779263592, 0.4134651668108933, 0.4221520360408031, 0.3704998152303882, 0.39885451737320743, 0.34070772688121376, 0.3635895765463558, 0.3962679292888842, 0.433932887328637, 0.4277572329917173, 0.06840967547721644, 0.11920721615924545, 0.14145241453352753, 0.1153403066111166, 0.16676168450277018, 0.16199614992315037, 0.14552247984462863, 0.1532207708696922, 0.07414825566833372, 0.2331572089520264, 0.24967878150900735, 0.23472517186862174, 0.24541302487660932, 0.2690744802017836, 0.2855652947146867, 0.22214624820436468, 0.23333364809438095, 0.25090517542393287, 0.6442187461261122, 0.6201735315134068, 0.6177453827509762, 0.5873584667392228, 0.6035671517926006, 0.6062910012049643, 0.6028612192760827, 0.6023375646282791, 0.6145226983869784, 0.11462454747407014, 0.3613642288931279, 0.13181133175561977, 0.1337808220463601, 0.10968050452383071, 0.14095496764974813, 0.1234364021282548, 0.10779797321424234, 0.11668022078998164, 0.20441528037955836, 0.20373795381532345, 0.20445826098988185, 0.26001270349634553, 0.2190944781917361, 0.27670195726174507, 0.22686006720023733, 0.19102511318527682, 0.25363078833625663, 0.4098055405854192, 0.37037925423803975, 0.44424806627912894, 0.3969943473505575, 0.39361318195016903, 0.4171747984212304, 0.4552454515168407, 0.44393400027133834, 0.4271034957048865, 0.3084902712523636, 0.3262071865912838, 0.31590478174272907, 0.3082930809285991, 0.27926557337562075, 0.25974401163334615, 0.3236054641746665, 0.3463468225341769, 0.311134212186821, 0.19578263194352807, 0.19632062882060408, 0.20307061056268416, 0.2119705808555613, 0.19731630924412014, 0.21335934289780767, 0.23118454431151902, 0.19629022668564455, 0.20440639691720286, 0.21820291522337065, 0.2380194531002533, 0.37200129537473403, 0.20764915513928084, 0.20807845265870362, 0.2258980116470829, 0.42046938104990916, 0.22194491611400013, 0.4313480430589052, 0.6760592838467352, 0.1802620909214775, 0.7423350514808733, 0.7725148411466589, 0.1895219648028169, 0.6779017460493193, 0.694222853636675, 0.6641659908643713, 0.7261040730857043, 0.6792033449845574, 0.5879804815990433, 0.19964784790040613, 0.6273803702673394, 0.16240356982997417, 0.6715807606105054, 0.6238826801765707, 0.6463327272367441, 0.14746552340085894, 0.17680544658413344, 0.18034697191212112, 0.18363973657404697, 0.17904213904333932, 0.20827720685411455, 0.1838698132246941, 0.18417817546134618, 0.17689738199126348, 0.18688421159367286, 0.0896458949553891, 0.08009402024635515, 0.08447847874914627, 0.0847840380439111, 0.07928911558185481, 0.08439501294889162, 0.0795923603210511, 0.08147545076438723, 0.08213424841886297]}, "mutation_prompt": null}
{"id": "55bba99f-ec56-4c81-84dc-76839f5041c4", "solution": "import numpy as np\n\nclass ChaoticSwarmDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(100, budget // 4)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.85\n        self.local_search_prob = 0.25\n        self.tournament_size = 3\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, float('inf'))\n        self.evaluations = 0\n        self.chaos_sequence = np.random.rand(self.population_size)\n\n    def __call__(self, func):\n        self.fitness = np.apply_along_axis(func, 1, self.population)\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                chosen = np.random.choice(indices, self.tournament_size, replace=False)\n                best_idx = min(chosen, key=lambda idx: self.fitness[idx])\n                a, b, c = self.population[best_idx], self.population[np.random.choice(indices)], self.population[np.random.choice(indices)]\n                \n                # Stochastic mutation factor\n                mutation_factor_dynamic = self.mutation_factor * np.random.rand()\n                mutant = np.clip(a + mutation_factor_dynamic * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                \n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Chaotic local search\n                if np.random.rand() < self.local_search_prob * (1 - self.evaluations / self.budget):\n                    self.chaotic_local_search(i, func)\n        \n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]\n\n    def chaotic_local_search(self, index, func):\n        chaos_factor = 0.3\n        for _ in range(3):\n            if self.evaluations >= self.budget:\n                break\n\n            self.chaos_sequence[index] = 4 * self.chaos_sequence[index] * (1 - self.chaos_sequence[index])\n            step_size = chaos_factor * (self.upper_bound - self.lower_bound) * (0.5 - self.chaos_sequence[index])\n            perturbation = np.random.normal(0, np.abs(step_size), self.dim)\n            neighbor = np.clip(self.population[index] + perturbation, self.lower_bound, self.upper_bound)\n            neighbor_fitness = func(neighbor)\n            self.evaluations += 1\n            \n            if neighbor_fitness < self.fitness[index]:\n                self.population[index] = neighbor\n                self.fitness[index] = neighbor_fitness", "name": "ChaoticSwarmDE", "description": "An adaptive stochastic swarm-based optimization algorithm fusing differential evolution with chaotic local search for accelerated convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b620b643-d9e1-4fcb-b222-0d4d2b062556", "metadata": {"aucs": [0.7734557969185117, 0.7143605348979436, 0.7628691966520122, 0.7647463487791044, 0.7503654175603911, 0.7544099471716148, 0.7369377472827409, 0.7498437727611628, 0.7632567053051462, 0.5411696882701349, 0.5497343874652325, 0.555586828346566, 0.5551838210367472, 0.5561060485362171, 0.5672315045485463, 0.539998523192052, 0.5734234127492221, 0.5905288687839805, 0.322050858043598, 0.3557646565130076, 0.31727935003956353, 0.2554989768917517, 0.19958756586555804, 0.32368150397542883, 0.37814675772998063, 0.28115886139727, 0.15752837590303093, 0.14987512003402825, 0.1080744381484301, 0.14308752840528705, 0.14996936853515186, 0.1417206738502842, 0.13366424338130112, 0.1261644422352347, 0.14387493304363086, 0.19104593068954756, 0.9248628023947818, 0.9136253663710884, 0.9012011877268926, 0.9334699706032932, 0.9256570443139709, 0.9460723877314675, 0.9153486017386661, 0.9427474608686871, 0.9077693546357399, 0.41966682393786126, 0.42090084000413563, 0.44062347286089476, 0.4092686760502151, 0.4601152719634012, 0.4309157345046394, 0.4360038035802729, 0.44950811019293746, 0.4347963394178237, 0.6580459775468942, 0.623240136346955, 0.7657087771829801, 0.7483526580091948, 0.707150853150777, 0.7104639742801158, 0.6497849109254064, 0.71617374337182, 0.7224566522007112, 0.42423477803701315, 0.1908755941104816, 0.17848512143016249, 0.26707451990442754, 0.17375106372113025, 0.24373393732992066, 0.25088711265254526, 0.26663481468465056, 0.21631682172026212, 0.19030366478217897, 0.10948710063852574, 0.1797835158125456, 0.21318791940716542, 0.19118395152357992, 0.3015374914064286, 0.1789313505374075, 0.17418557710087512, 0.21883940722676465, 0.26334361705230414, 0.2069285727935689, 0.32629826506762305, 0.2693350836190638, 0.2739767274432987, 0.28010924443296004, 0.3207875210376553, 0.16756614388774904, 0.21888068779263592, 0.4134651668108933, 0.4221520360408031, 0.3704998152303882, 0.39885451737320743, 0.34070772688121376, 0.3635895765463558, 0.3962679292888842, 0.433932887328637, 0.4277572329917173, 0.06840967547721644, 0.11920721615924545, 0.14145241453352753, 0.1153403066111166, 0.16676168450277018, 0.16199614992315037, 0.14552247984462863, 0.1532207708696922, 0.07414825566833372, 0.2331572089520264, 0.24967878150900735, 0.23472517186862174, 0.24541302487660932, 0.2690744802017836, 0.2855652947146867, 0.22214624820436468, 0.23333364809438095, 0.25090517542393287, 0.6442187461261122, 0.6201735315134068, 0.6177453827509762, 0.5873584667392228, 0.6035671517926006, 0.6062910012049643, 0.6028612192760827, 0.6023375646282791, 0.6145226983869784, 0.11462454747407014, 0.3613642288931279, 0.13181133175561977, 0.1337808220463601, 0.10968050452383071, 0.14095496764974813, 0.1234364021282548, 0.10779797321424234, 0.11668022078998164, 0.20441528037955836, 0.20373795381532345, 0.20445826098988185, 0.26001270349634553, 0.2190944781917361, 0.27670195726174507, 0.22686006720023733, 0.19102511318527682, 0.25363078833625663, 0.4098055405854192, 0.37037925423803975, 0.44424806627912894, 0.3969943473505575, 0.39361318195016903, 0.4171747984212304, 0.4552454515168407, 0.44393400027133834, 0.4271034957048865, 0.3084902712523636, 0.3262071865912838, 0.31590478174272907, 0.3082930809285991, 0.27926557337562075, 0.25974401163334615, 0.3236054641746665, 0.3463468225341769, 0.311134212186821, 0.19578263194352807, 0.19632062882060408, 0.20307061056268416, 0.2119705808555613, 0.19731630924412014, 0.21335934289780767, 0.23118454431151902, 0.19629022668564455, 0.20440639691720286, 0.21820291522337065, 0.2380194531002533, 0.37200129537473403, 0.20764915513928084, 0.20807845265870362, 0.2258980116470829, 0.42046938104990916, 0.22194491611400013, 0.4313480430589052, 0.6760592838467352, 0.1802620909214775, 0.7423350514808733, 0.7725148411466589, 0.1895219648028169, 0.6779017460493193, 0.694222853636675, 0.6641659908643713, 0.7261040730857043, 0.6792033449845574, 0.5879804815990433, 0.19964784790040613, 0.6273803702673394, 0.16240356982997417, 0.6715807606105054, 0.6238826801765707, 0.6463327272367441, 0.14746552340085894, 0.17680544658413344, 0.18034697191212112, 0.18363973657404697, 0.17904213904333932, 0.20827720685411455, 0.1838698132246941, 0.18417817546134618, 0.17689738199126348, 0.18688421159367286, 0.0896458949553891, 0.08009402024635515, 0.08447847874914627, 0.0847840380439111, 0.07928911558185481, 0.08439501294889162, 0.0795923603210511, 0.08147545076438723, 0.08213424841886297]}, "mutation_prompt": null}
