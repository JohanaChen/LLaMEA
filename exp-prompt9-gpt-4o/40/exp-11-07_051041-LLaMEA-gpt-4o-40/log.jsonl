{"id": "757110a0-09f6-448c-b782-0ab2ec18ca1c", "solution": "import numpy as np\n\nclass MultiStrategyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.cross_prob = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.best_value = np.min(fitness)\n        self.best_solution = self.population[np.argmin(fitness)]\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            next_generation = []\n\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    next_generation.append(self.de_variant_1(i, fitness, func))\n                else:\n                    next_generation.append(self.de_variant_2(i, fitness, func))\n\n            self.population = np.array(next_generation)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            self.evaluations += self.population_size\n\n            current_best_value = np.min(fitness)\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[np.argmin(fitness)]\n\n        return self.best_solution\n\n    def de_variant_1(self, index, fitness, func):\n        idxs = [idx for idx in range(self.population_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n        return self.crossover(self.population[index], mutant)\n\n    def de_variant_2(self, index, fitness, func):\n        idxs = [idx for idx in range(self.population_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (c - b), self.lower_bound, self.upper_bound)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "MultiStrategyDifferentialEvolution", "description": "A multi-strategy differential evolution with adaptive mutation and crossover rates to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.09114254906707481, "feedback": "The algorithm MultiStrategyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": null, "metadata": {"aucs": [0.15757667324175384, 0.14929275968788025, 0.1493000279367388, 0.16010118429452813, 0.16410827557406737, 0.1506836804484668, 0.14450684290575466, 0.14628316208115244, 0.1506161031638401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04644179359851208, 0.03256176889716622, 0.0489901189246007, 0.03163645867518694, 0.041864021116482575, 0.056737746269490685, 0.02679669052667033, 0.033600626148703516, 0.04101853461711236, 0.028117525220162864, 0.02039229438808654, 0.02030806145292008, 0.03495660189492733, 0.039810316728860595, 0.014822713298116241, 0.023638975288313824, 0.018568689614975153, 0.025414888706571603, 0.14244043580677512, 0.36991429720689284, 0.19936200128625636, 0.5350304649778123, 0.15645438605416473, 0.1482592707880096, 0.17477002399093688, 0.15355412795915602, 0.6067883704612718, 0.06702026410462258, 0.04568026531466818, 0.062318220331759266, 0.08064690696652455, 0.039716801610853114, 0.09803715813046643, 0.09630656385982717, 0.06785559790114004, 0.06799808482868552, 0.11478285527776844, 0.11442348783796752, 0.10058334919320533, 0.12322726862300237, 0.09235355871458528, 0.13122652086241415, 0.08061076480218343, 0.09326121824541456, 0.13003236325426182, 9.999999999998899e-05, 0.04165763850552051, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005695196196131569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003682524604056936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11811819142290991, 0.0797616715931424, 0.04549864406025572, 0.06919915266588339, 0.044379440023829875, 0.06576094359867857, 0.03359166252185064, 0.0626186988123082, 0.027435751037778178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17194154188773458, 0.19494631162022147, 0.1731310241857429, 0.18874085499539206, 0.16482560304135063, 0.18619336041548318, 0.18765040924789833, 0.18944924846820732, 0.18367320692470634, 0.03831950931547945, 0.03392995858950565, 0.04637986025962304, 0.0638190835137229, 0.04031500137841526, 0.05330419434864908, 0.050812083183044754, 0.04789829612337726, 0.04575300979688057, 0.12970003338625935, 0.14415422171407521, 0.13926014898288008, 0.13535602605502572, 0.1510738776054712, 0.18116851960581648, 0.16792798457560898, 0.1259152580134738, 0.13522736305691962, 0.14946590264271675, 0.14591790543048977, 0.1613932299901244, 0.1782091913616345, 0.16009794732273785, 0.14888558036403354, 0.15334371336430486, 0.17377774300845283, 0.16269544648056777, 0.09265020638853805, 0.11207989538289875, 0.11062980263929878, 0.13100366587279955, 0.11275790886156267, 0.09402705010165768, 0.09794228949352202, 0.10840736603964674, 0.1003815288005877, 0.13924354273272443, 0.14689897384889006, 0.13438190360810043, 0.15597193318014657, 0.15084742685612906, 0.1528862754212592, 0.1482622678288268, 0.14009765761887916, 0.1456022682923629, 0.15831402654965787, 0.1242399668740467, 0.1429502035853618, 0.0744453102008481, 0.12719559051329343, 0.1265463641240614, 0.14373474012744902, 0.12826065937807674, 0.14567752455016636, 0.16512975614115422, 0.15126402043490816, 0.14707866917381185, 0.14348453277103634, 0.1413578830604043, 0.18038726521140003, 0.1392334181205822, 0.1349806879067048, 0.14643216729043085, 0.12700927063653233, 0.15217455591855977, 0.14475270434838616, 0.12138748562636925, 0.1427713857162325, 0.18528594690084066, 0.1787456320556563, 0.1259813315530044, 0.1665904267660051, 0.18843795786563167, 0.18361346403954926, 0.1762627215514454, 0.1942402724783956, 0.18284736188846573, 0.1769846730946283, 0.1731842909413137, 0.21108241178581544, 0.1843032321037812, 0.03890562276144083, 0.06074622014632336, 0.04736909227712016, 0.04582201954741871, 0.04441424515254733, 0.04216465066954478, 0.05773954635643275, 0.04360071204232041, 0.042760963469648194]}, "mutation_prompt": null}
{"id": "e5aefce6-600b-44fe-809f-d7c3c63ccf76", "solution": "import numpy as np\n\nclass MultiStrategyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.cross_prob = 0.9\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.best_value = np.min(fitness)\n        self.best_solution = self.population[np.argmin(fitness)]\n        self.evaluations += self.population_size\n\n        while self.evaluations < self.budget:\n            next_generation = []\n\n            for i in range(self.population_size):\n                if np.random.rand() < 0.5:\n                    next_generation.append(self.de_variant_1(i, fitness, func))\n                else:\n                    next_generation.append(self.de_variant_2(i, fitness, func))\n\n            self.population = np.array(next_generation)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            self.evaluations += self.population_size\n\n            current_best_value = np.min(fitness)\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[np.argmin(fitness)]\n\n        return self.best_solution\n\n    def de_variant_1(self, index, fitness, func):\n        idxs = [idx for idx in range(self.population_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n        return self.crossover(self.population[index], mutant)\n\n    def de_variant_2(self, index, fitness, func):\n        idxs = [idx for idx in range(self.population_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (c - b), self.lower_bound, self.upper_bound)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "MultiStrategyDifferentialEvolution", "description": "A multi-strategy differential evolution with adaptive mutation and crossover rates to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "757110a0-09f6-448c-b782-0ab2ec18ca1c", "metadata": {"aucs": [0.15757667324175384, 0.14929275968788025, 0.1493000279367388, 0.16010118429452813, 0.16410827557406737, 0.1506836804484668, 0.14450684290575466, 0.14628316208115244, 0.1506161031638401, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04644179359851208, 0.03256176889716622, 0.0489901189246007, 0.03163645867518694, 0.041864021116482575, 0.056737746269490685, 0.02679669052667033, 0.033600626148703516, 0.04101853461711236, 0.028117525220162864, 0.02039229438808654, 0.02030806145292008, 0.03495660189492733, 0.039810316728860595, 0.014822713298116241, 0.023638975288313824, 0.018568689614975153, 0.025414888706571603, 0.14244043580677512, 0.36991429720689284, 0.19936200128625636, 0.5350304649778123, 0.15645438605416473, 0.1482592707880096, 0.17477002399093688, 0.15355412795915602, 0.6067883704612718, 0.06702026410462258, 0.04568026531466818, 0.062318220331759266, 0.08064690696652455, 0.039716801610853114, 0.09803715813046643, 0.09630656385982717, 0.06785559790114004, 0.06799808482868552, 0.11478285527776844, 0.11442348783796752, 0.10058334919320533, 0.12322726862300237, 0.09235355871458528, 0.13122652086241415, 0.08061076480218343, 0.09326121824541456, 0.13003236325426182, 9.999999999998899e-05, 0.04165763850552051, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005695196196131569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003682524604056936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11811819142290991, 0.0797616715931424, 0.04549864406025572, 0.06919915266588339, 0.044379440023829875, 0.06576094359867857, 0.03359166252185064, 0.0626186988123082, 0.027435751037778178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17194154188773458, 0.19494631162022147, 0.1731310241857429, 0.18874085499539206, 0.16482560304135063, 0.18619336041548318, 0.18765040924789833, 0.18944924846820732, 0.18367320692470634, 0.03831950931547945, 0.03392995858950565, 0.04637986025962304, 0.0638190835137229, 0.04031500137841526, 0.05330419434864908, 0.050812083183044754, 0.04789829612337726, 0.04575300979688057, 0.12970003338625935, 0.14415422171407521, 0.13926014898288008, 0.13535602605502572, 0.1510738776054712, 0.18116851960581648, 0.16792798457560898, 0.1259152580134738, 0.13522736305691962, 0.14946590264271675, 0.14591790543048977, 0.1613932299901244, 0.1782091913616345, 0.16009794732273785, 0.14888558036403354, 0.15334371336430486, 0.17377774300845283, 0.16269544648056777, 0.09265020638853805, 0.11207989538289875, 0.11062980263929878, 0.13100366587279955, 0.11275790886156267, 0.09402705010165768, 0.09794228949352202, 0.10840736603964674, 0.1003815288005877, 0.13924354273272443, 0.14689897384889006, 0.13438190360810043, 0.15597193318014657, 0.15084742685612906, 0.1528862754212592, 0.1482622678288268, 0.14009765761887916, 0.1456022682923629, 0.15831402654965787, 0.1242399668740467, 0.1429502035853618, 0.0744453102008481, 0.12719559051329343, 0.1265463641240614, 0.14373474012744902, 0.12826065937807674, 0.14567752455016636, 0.16512975614115422, 0.15126402043490816, 0.14707866917381185, 0.14348453277103634, 0.1413578830604043, 0.18038726521140003, 0.1392334181205822, 0.1349806879067048, 0.14643216729043085, 0.12700927063653233, 0.15217455591855977, 0.14475270434838616, 0.12138748562636925, 0.1427713857162325, 0.18528594690084066, 0.1787456320556563, 0.1259813315530044, 0.1665904267660051, 0.18843795786563167, 0.18361346403954926, 0.1762627215514454, 0.1942402724783956, 0.18284736188846573, 0.1769846730946283, 0.1731842909413137, 0.21108241178581544, 0.1843032321037812, 0.03890562276144083, 0.06074622014632336, 0.04736909227712016, 0.04582201954741871, 0.04441424515254733, 0.04216465066954478, 0.05773954635643275, 0.04360071204232041, 0.042760963469648194]}, "mutation_prompt": null}
{"id": "8764cb9d-9646-4334-bc47-d62a563ddc93", "solution": "import numpy as np\n\nclass HybridAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 8 * dim\n        self.initial_mutation_factor = 0.6\n        self.initial_cross_prob = 0.85\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.best_value = np.min(fitness)\n        self.best_solution = self.population[np.argmin(fitness)]\n        self.evaluations += self.population_size\n        mutation_factor = self.initial_mutation_factor\n        cross_prob = self.initial_cross_prob\n\n        while self.evaluations < self.budget:\n            next_generation = []\n\n            for i in range(self.population_size):\n                variant_choice = np.random.rand()\n                if variant_choice < 0.3:\n                    next_gen_candidate = self.de_variant_1(i, mutation_factor, cross_prob)\n                elif variant_choice < 0.6:\n                    next_gen_candidate = self.de_variant_2(i, mutation_factor, cross_prob)\n                else:\n                    next_gen_candidate = self.de_variant_3(i, mutation_factor, cross_prob)\n                \n                next_generation.append(next_gen_candidate)\n\n            self.population = np.array(next_generation)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            self.evaluations += self.population_size\n\n            current_best_value = np.min(fitness)\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[np.argmin(fitness)]\n\n            mutation_factor = 0.8 * mutation_factor + 0.2 * np.random.rand()\n            cross_prob = 0.8 * cross_prob + 0.2 * np.random.rand()\n\n        return self.best_solution\n\n    def de_variant_1(self, index, mutation_factor, cross_prob):\n        idxs = [idx for idx in range(self.population_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n        return self.crossover(self.population[index], mutant, cross_prob)\n\n    def de_variant_2(self, index, mutation_factor, cross_prob):\n        idxs = [idx for idx in range(self.population_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + mutation_factor * (c - b), self.lower_bound, self.upper_bound)\n        return self.crossover(self.population[index], mutant, cross_prob)\n    \n    def de_variant_3(self, index, mutation_factor, cross_prob):\n        idxs = [idx for idx in range(self.population_size) if idx != index]\n        a, b, c, d = self.population[np.random.choice(idxs, 4, replace=False)]\n        mutant = np.clip(a + mutation_factor * (b - c + d), self.lower_bound, self.upper_bound)\n        return self.crossover(self.population[index], mutant, cross_prob)\n\n    def crossover(self, target, mutant, cross_prob):\n        cross_points = np.random.rand(self.dim) < cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridAdaptiveDifferentialEvolution", "description": "A hybrid adaptive differential evolution with dynamic population updates and self-adaptive parameters for improved exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": 0.07222455677903157, "feedback": "The algorithm HybridAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.08.", "error": "", "parent_id": "757110a0-09f6-448c-b782-0ab2ec18ca1c", "metadata": {"aucs": [0.17590537100377657, 0.10574948243981785, 0.1335021195006464, 0.11117060789296307, 0.07672239031624417, 0.16930289711511026, 0.10495176272283757, 0.1330304466789537, 0.18201424994364335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020880745413973445, 0.02623802004006559, 0.00904332111538475, 0.024351045457993714, 0.03773463244944619, 0.02794624661279832, 0.028116643829935728, 0.03113385449462036, 0.032099305204947304, 0.0033651720984835265, 0.02375365765011761, 9.999999999998899e-05, 0.01959972157639278, 0.018111436659947522, 0.008949504930328867, 0.01055296836474462, 9.999999999998899e-05, 0.0026390477965567705, 0.892959092777145, 0.0949074974223566, 0.09992938740477197, 0.14189355969600603, 0.1356969666807203, 0.17542822337691355, 0.10160778800472547, 0.09828726712980729, 0.18065387369340047, 0.06274794416174423, 0.03663848231997613, 0.025270385613842317, 0.037714228479821754, 0.0350296053715734, 0.08089573074943623, 9.999999999998899e-05, 0.025663316502488542, 0.003046648421727527, 0.10027683525177622, 0.06695324642168621, 0.08125371453193853, 0.09818406520093159, 0.08478264884847708, 0.1104502423982252, 0.1199872445299277, 0.08543237274680682, 0.0813160903134642, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01284170550572905, 0.00820194503396432, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020672665065130214, 0.025738544270330732, 0.05085875879655266, 0.03420590566290371, 0.012612797637494233, 0.06448461958413032, 0.009180882882924513, 0.004708261362426525, 0.0017536764315185804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15952520930136194, 0.1425622740265522, 0.1566437742889255, 0.16634152966221716, 0.1363229933259711, 0.1430778467158762, 0.16112956940342849, 0.13087694150820628, 0.14508309303527656, 0.04684539311231861, 0.022867924398725203, 0.02198412468535549, 0.03266886175302153, 0.0054518508766544516, 0.04949339484568249, 0.036777944981007726, 0.052900989665575215, 0.03624202765376827, 0.14058025140891606, 0.11146395983695423, 0.14366033945593049, 0.15382451212701398, 0.13726531527718344, 0.15554861903291328, 0.1323902740287043, 0.11455839065412621, 0.12862378986478418, 0.13753677528370323, 0.14645618860629417, 0.1592661733818993, 0.13800672315110074, 0.15087616652218816, 0.1503998752858664, 0.12182141196244123, 0.17377774300845283, 0.13778764931143228, 0.10710008093884171, 0.07208302104067354, 0.0846409746043566, 0.06939343434198364, 0.0728757523695156, 0.0932369944591801, 0.08572076652882865, 0.0997711199450243, 0.07584695591198776, 0.12297542018801011, 0.13736120583277756, 0.13345086981233123, 0.1578255877100765, 0.1265099919585133, 0.1313169117830899, 0.12245976138762271, 0.11694170855617192, 0.1261963614278906, 0.15077446352837598, 9.999999999998899e-05, 0.08477695884255332, 9.999999999998899e-05, 0.13237954931564055, 0.13709527461505144, 0.03169018261104939, 9.999999999998899e-05, 9.999999999998899e-05, 0.17144029748600265, 0.13916481129289404, 0.11426741580831035, 0.1175454955030627, 0.1207914665021157, 0.12102554694744427, 0.11427967883214063, 0.1103702934450943, 0.1268779149553948, 0.11811645777223967, 0.10267165755511809, 0.10845628039311539, 0.07324910979668642, 0.07726668500622258, 0.157853225471824, 0.20054053109432957, 0.12015533551372681, 0.07537165745222973, 0.18871306626628248, 0.22409163292573786, 0.17687783385850775, 0.16976261406490756, 0.191056157215163, 0.187304702292027, 0.17908496154204656, 0.16647947974592847, 0.18220995015523989, 0.0429791664832172, 0.03393668820794915, 0.033413201993158115, 0.027015293023570086, 0.03425093938292756, 0.029153691211342814, 0.027407374270557505, 0.020733902203136867, 0.03849562785926974]}, "mutation_prompt": null}
{"id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 3, "fitness": 0.14623145063031656, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "757110a0-09f6-448c-b782-0ab2ec18ca1c", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "7598545f-cd78-435a-b035-0bcd81edcaea", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "3f5c596a-09a8-40f1-adb5-4cc7eb299090", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "ea535245-714d-4c51-b90f-abfbf3a68e77", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "e92367e9-82f9-4ff9-ab1a-8e3fd98c6684", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "c6539af3-fc4d-4215-9ffe-284294729948", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "09d3b5f4-11e1-4a24-bf43-ef8cee6ac564", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "578dbb7f-cabf-4708-8c8a-dd5d3b77fae9", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 6 * dim  # Further reduced population size\n        self.mutation_factor = 0.8  # Increased mutation factor for exploration\n        self.cross_prob = 0.9  # Increased crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.5:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation with adaptive strategy\n            if np.random.rand() < 0.5:\n                self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A refined hybrid differential evolution with adaptive mutation and strategic parameter adjustments to boost optimization performance.", "configspace": "", "generation": 10, "fitness": 0.12645984111724604, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.18260090114831218, 0.18707398863445823, 0.16579654723795034, 0.20761509610772455, 0.2141109342591987, 0.21661410972890682, 0.1972600916648647, 0.17877617923485178, 0.17408094583403777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043778666920223586, 0.040669055144526456, 0.04068230766728098, 0.04935414033777452, 0.044888302694346516, 0.07686120545288977, 0.04135503744309499, 0.057529632195362446, 0.046405893715417035, 0.02571934103200091, 0.040650088362086945, 0.03028528398297836, 0.033989895312705465, 0.0479260629773578, 0.03516194269167772, 0.032766342872219134, 0.020394409327853302, 0.028568831534555694, 0.9792922225090721, 0.9903602914800326, 0.9890217268177202, 0.9877826668474603, 0.9872730797192949, 0.9834153039054955, 0.9876799890699743, 0.9827893290897128, 0.9931217718112215, 0.08136274002109734, 0.07071370252767828, 0.07745528698314119, 0.06916678288228106, 0.10939700872173197, 0.07483005744597682, 0.09729927109058567, 0.08690159412378995, 0.09509637745383426, 0.1406931467879453, 0.09317532413513019, 0.11692913361776847, 0.1260831611189378, 0.12199922064327307, 0.12831256369461153, 0.1334909907342986, 0.15045311633878666, 0.13844324799321717, 0.00547840459053317, 9.999999999998899e-05, 0.0021822914664731963, 9.999999999998899e-05, 0.03822097938968838, 0.01134928661999457, 9.999999999998899e-05, 0.056068786326443076, 0.004114577988571511, 0.035591656547171224, 0.03192046798431225, 0.036508082358191696, 9.999999999998899e-05, 0.0012606282901314048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03437224079433343, 0.04344153396581718, 0.04077761205055308, 0.05237772339892688, 0.05265883955166062, 0.008869276756210076, 0.05638524428818181, 0.044412115857959344, 0.058747688789082875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020253119740093473, 9.999999999998899e-05, 0.013669651828880913, 0.002988540572729792, 9.999999999998899e-05, 0.17931521539838247, 0.20827830752475984, 0.18934644412490664, 0.2574272143657038, 0.19665349015469524, 0.20946325911582553, 0.22842783008062373, 0.16805199392667414, 0.1896860849687526, 0.04728364070247404, 0.0621423845037703, 0.05244197502816317, 0.05769347043010353, 0.04615142496376634, 0.06128733130757069, 0.0484528733481826, 0.04363534325488583, 0.03604796219084805, 0.1369984080983626, 0.13258607420419377, 0.13112845427198094, 0.15135939592833003, 0.14245546060594694, 0.14545850209969702, 0.13524073612325915, 0.13973114368528672, 0.14116611603101215, 0.17804808660367377, 0.16032939639562427, 0.17045236408079345, 0.1795777649190402, 0.1655489359721194, 0.15617049815335127, 0.17391787625044175, 0.17593377350159445, 0.16915458580272646, 0.10889038282720487, 0.10970096070973157, 0.11947381599363072, 0.10604006897632134, 0.11927734389460909, 0.10373173351499099, 0.10896759837685244, 0.1096741777507817, 0.11117564238108002, 0.15157385590939398, 0.14520085077404477, 0.14973201872859354, 0.14056139987068805, 0.13882294946479246, 0.14997444261755666, 0.15550209353164413, 0.1422208357850293, 0.1532783910667509, 0.13805179430238224, 0.14040088001136797, 0.13482585411683268, 0.12495496452756638, 0.14463895474628974, 0.15305022769080245, 0.1364767301524349, 0.09816751670103863, 0.11929407361595679, 0.17870093896139938, 0.13597165783010712, 0.14033650856614333, 0.14838000100708726, 0.16638179478470794, 0.187090808537958, 0.12805471128784973, 0.14266042850061966, 0.1602505234852395, 0.14277281912745077, 0.15035916146329886, 0.1390960145685045, 0.14111863432722005, 0.12098061377836822, 0.12004302181238524, 0.1880680967771543, 0.18906941710388603, 0.19787968143270795, 0.17845980365115865, 0.185581511369302, 0.1805591919756886, 0.1781066159791257, 0.1822935120170398, 0.1790713730498359, 0.19155534422044562, 0.18788738955023387, 0.18954802182066866, 0.036039675063033405, 0.04522565318851335, 0.04943182124400303, 0.04026235621114849, 0.0423198441088416, 0.06019982260756973, 0.0497891802192042, 0.040740657239856204, 0.049360415832913174]}, "mutation_prompt": null}
{"id": "13ba52fb-b28a-405f-b849-365eaef5ded4", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "df8234d3-1ff9-4a71-b589-6515edfd7886", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 10 * dim  # Adjusted population size for diversity\n        self.mutation_factor = 0.8  # Enhanced mutation factor for exploration\n        self.cross_prob = 0.9  # Increased crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.6:  # More adaptive choice\n                    next_gen.append(self.variant_best1(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand2(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elite-guided search\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best1(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.self_adaptive_crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.self_adaptive_crossover(self.population[index], mutant)\n    \n    def self_adaptive_crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation, elite-guided search, and self-adaptive crossover for improved performance.", "configspace": "", "generation": 12, "fitness": 0.13171070880043625, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.28176888433180625, 0.16586766027919153, 0.17678355994381167, 0.21711480583397658, 0.2531338674656066, 0.23215645053619471, 0.2213663305175726, 0.2057759999051174, 0.21768360557836264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040295098468438484, 0.07201253646331751, 0.041575876752202756, 0.06550997006825332, 0.04529375939381719, 0.06162477376607134, 0.05742083536612097, 0.06135635238861292, 0.04657015545464127, 0.03263772933753639, 0.024259529198529695, 0.029873239245422845, 0.038800673710093214, 0.03232248362227308, 0.02952257264020408, 0.027118165927304982, 0.031181822365923484, 0.028336418568713273, 0.984918232909058, 0.9809436922796806, 0.9886403336707464, 0.9834152285382021, 0.9767992191637153, 0.9860840627614681, 0.9752943957758904, 0.9857684012387714, 0.9873180582700994, 0.0832360434254269, 0.08583505917490586, 0.09813659458273782, 0.07290953593170724, 0.13776508529957177, 0.06433288873946563, 0.10944284249191638, 0.0957196204666263, 0.09017283066154047, 0.1633729543319956, 0.13191608675189492, 0.12055918347280425, 0.14237790937042516, 0.12414930363227028, 0.16876370755593384, 0.1351815326900343, 0.14272544039199475, 0.17125473349539133, 0.007683562364105501, 0.009733127175877598, 0.0008634306378960677, 0.02558105064691263, 0.007830506092417977, 0.006436533935062827, 0.028221568075388448, 0.0033195581438277832, 9.999999999998899e-05, 0.04575613171326898, 0.04492188238068717, 0.05650566595512696, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021292735489898074, 0.002001247799256811, 0.01487946555806452, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07125477398251334, 0.03036483386134392, 0.04310507178782519, 0.04648582863766715, 0.03801820905562614, 0.09415386522305347, 0.05042444326741147, 0.039634445118737704, 0.05011866625275785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006181192278939873, 9.999999999998899e-05, 0.012433687654746839, 0.001622011664819678, 9.999999999998899e-05, 0.008077015482715666, 0.019222636856140674, 0.014164677957511418, 0.009397777002826624, 0.19441621612661553, 0.20627648593065773, 0.20504673889197267, 0.20261075720931132, 0.2196981357538188, 0.21030720935834812, 0.22529188789123278, 0.1983641761848104, 0.22025352962440403, 0.05868955092534456, 0.05996872219803118, 0.0599543553980586, 0.04559787963078166, 0.037132685799501686, 0.0599441443659563, 0.04723607523579865, 0.04520779375289952, 0.04277496832668115, 0.13799037986213147, 0.14275446264601777, 0.14228455994590838, 0.12511683434951915, 0.18220944534978623, 0.18436250852124214, 0.14660311491030953, 0.14722002770338527, 0.13442058772062793, 0.17115075348495523, 0.16098106465755335, 0.1734165453635793, 0.16241243287990015, 0.16278791285420613, 0.16050185697329178, 0.18576845846238055, 0.1882408767295246, 0.18308185748484374, 0.11491480098108187, 0.1063949755921636, 0.10718094054086924, 0.12725998119769577, 0.10233219562591622, 0.12228827938961206, 0.119995906094434, 0.13061685926624, 0.12565476914490825, 0.1632393866874423, 0.15801994592504964, 0.15489210706682754, 0.1567112008620417, 0.14489807336799554, 0.15608782912575736, 0.15414446278727623, 0.1440604662956212, 0.14792068606679842, 0.1414991739158863, 0.1444709658987029, 0.1345195657291166, 0.1435566381896748, 0.13994478319399717, 0.1545224161399834, 0.1425315493458702, 0.1392795019428742, 0.14425005173412697, 0.18334053627900326, 0.14247459987459044, 0.1423907695816219, 0.1641867174859517, 0.15246011953112426, 0.17132451664785642, 0.15798475478357543, 0.16506174701256837, 0.15485550071081544, 0.1540655051365597, 0.1509682443093061, 0.1578240572178553, 0.13496329383815786, 0.13032419829322694, 0.13376888990812819, 0.2014436848043627, 0.1957119611830792, 0.17991705585995676, 0.183157419972248, 0.1743989749335798, 0.1864897877561278, 0.1890725772520866, 0.1777301865567994, 0.18719643145548548, 0.19556940357738017, 0.18718357435388266, 0.17378515321734245, 0.043697263233107186, 0.04298102947124882, 0.05436291729620024, 0.04120832791688045, 0.04324061164593418, 0.04885894418892678, 0.04656090005946645, 0.05313721808941041, 0.05917198659321454]}, "mutation_prompt": null}
{"id": "fa9d3760-7b71-4fc5-a880-9f7b0ff1ad74", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "f38a255e-330a-4b9b-84b1-0749257bdebc", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "bef51a51-28aa-4411-b1f0-54033deae295", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "1ec3765c-9709-4707-ab56-3440b06fee8c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "aeb5a42c-7658-4987-9573-3836f9b6105d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "c6a3b59d-354f-421e-ab56-ff18bd03ce60", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "0c1efcb2-a57c-4daa-ad5c-a7073427f323", "solution": "import numpy as np\n\nclass EnhancedHybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_pop_size = 6 * dim  # Dynamic initial population size\n        self.mutation_factor = 0.8  # Adaptive mutation factor\n        self.cross_prob = 0.9  # Increased crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.initial_pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.initial_pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.initial_pop_size):\n                if np.random.rand() < 0.8:\n                    next_gen.append(self.variant_best(i, fitness))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.initial_pop_size)] = self.best_solution\n            self.evaluations += self.initial_pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.initial_pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.initial_pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedHybridDifferentialEvolution", "description": "Enhanced Hybrid Differential Evolution with dynamic population size and adaptive mutation to improve exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": 0.14027245753679787, "feedback": "The algorithm EnhancedHybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.22416299632251235, 0.23533629805106282, 0.22897497476218664, 0.2429088466776509, 0.18554819566057612, 0.26989261796236785, 0.23999837443148797, 0.2414681904849958, 0.2732448556346815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06100716995030109, 0.09462221574434038, 0.06378864434312803, 0.05538170940758935, 0.06496786398411736, 0.060138947715746904, 0.0654840758586277, 0.060327013523542194, 0.06384928148094182, 0.03578589863135473, 0.05371780407808291, 0.03550027794896704, 0.055701865968092346, 0.03310788043756896, 0.06555274077962625, 0.041483184144070595, 0.044806743614585365, 0.05761540401219245, 0.9888051911308521, 0.9913997109720667, 0.9913147504622289, 0.9933587829818946, 0.9880002978509463, 0.9811883016535263, 0.9876687521353286, 0.9934822617702869, 0.991981257562535, 0.08072670060521991, 0.12140545023770155, 0.0902242414783444, 0.09681355192668706, 0.1073505510955165, 0.10927333252680982, 0.11255432711348201, 0.11234877631385976, 0.11381806925354654, 0.14952693422902608, 0.15618837426856513, 0.14055751057769084, 0.20286086164939288, 0.1623431248996492, 0.20477716495441778, 0.13132030482613133, 0.16577887904474953, 0.15371011434918525, 0.047835138377402275, 0.00018836850262737848, 0.032153153516544464, 0.05135989149921183, 0.02002010928897202, 0.030098367705176154, 0.055405703768140246, 0.014471169897107172, 0.10458449610954557, 0.01913124168333802, 0.04429935878372904, 0.01877331440585661, 0.037570087024073495, 0.009001711034225979, 0.02532594066921412, 0.011137015740482425, 0.025300677416874695, 0.0045057596274403755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04062516368993674, 0.02458277903644701, 0.014911790779551848, 0.07181439861885375, 0.07169730346725467, 0.0038689097428252772, 0.0827935047201599, 0.037325336652906715, 0.029500073542542693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008251584298268444, 0.02106111055041071, 9.999999999998899e-05, 0.006132191907039508, 0.02193369572355608, 0.039418681086503926, 0.035725285100702386, 9.999999999998899e-05, 0.031013525066201697, 0.2673948489106689, 0.1973265715831387, 0.22358924440646533, 0.23622924254399413, 0.220295667952764, 0.23394224505709393, 0.20261735986236307, 0.2282456498304415, 0.24168105055832034, 0.09347311971529304, 0.08190692968283497, 0.05642442136920123, 0.06193166140471362, 0.05343673592702092, 0.06408215157265895, 0.06274957157225891, 0.03537497273313761, 0.04503515195254981, 0.13602812351232385, 0.1445997883192065, 0.22256933692066327, 0.13170136421620848, 0.14722779824634435, 0.16791560410040052, 0.16009964622996864, 0.14047077811504327, 0.14582286848333537, 0.17267274162062352, 0.1643761570731911, 0.169632796581904, 0.17115310526000904, 0.1638511733665564, 0.16391515850912242, 0.1816475630181551, 0.20144227798702208, 0.19081154757309027, 0.12160992233607282, 0.13791808826656105, 0.13494999249212414, 0.13673732383869952, 0.12683199651139243, 0.1275138645120123, 0.14912412820933663, 0.13787663962394958, 0.15721471006555532, 0.20297172157453536, 0.17388834436684975, 0.19103833802791703, 0.15271936939620123, 0.15033328287058068, 0.16093163547350176, 0.1898309450803407, 0.15589500367833586, 0.1759167623627349, 0.1436907604908172, 0.15549239306746054, 0.1437232049578675, 0.15117296671037517, 0.13801129293942738, 0.15298250256717671, 0.15002788375490395, 0.15247819559870168, 0.14955865755302966, 0.1489038591269426, 0.1694278262836182, 0.14753058142172648, 0.17882298104293537, 0.15643506254228723, 0.16470646927337385, 0.12926943472526597, 0.17837691988531956, 0.17639116779363762, 0.16700025921789452, 0.16016009974746592, 0.11237000930715713, 0.1850808570910828, 0.155116591863396, 0.11202477337890837, 0.13679888814310104, 0.19988499007614546, 0.20120546187723476, 0.2061146495595766, 0.17926542543031299, 0.1897256378331993, 0.1824029257107329, 0.17571064319685614, 0.1978140095490769, 0.18261075496712598, 0.17477580413448612, 0.19422727089359448, 0.04905473183320497, 0.060577475672582426, 0.05278231187834903, 0.0498277616388304, 0.04457227508107042, 0.055658872521109126, 0.048573990473132156, 0.05501805036518925, 0.0506491658047129]}, "mutation_prompt": null}
{"id": "3c44f842-e0d1-4a26-a68c-f683b1c8326a", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "c233b412-2eb2-4560-afc7-53f0c878848d", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 6 * dim  # Adjusted population size\n        self.mutation_factor = 0.8  # Dynamic mutation factor\n        self.cross_prob = 0.9  # Increased crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.6:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n            \n            # Local search strategy\n            next_gen = self.local_search(next_gen, func)\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, population, func):\n        for i in range(self.pop_size):\n            trial = population[i] + np.random.normal(0, 0.1, self.dim)\n            trial = np.clip(trial, self.lb, self.ub)\n            if func(trial) < func(population[i]):\n                population[i] = trial\n        return population", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with dynamic parameter adjustment and local search integration for improved efficiency.", "configspace": "", "generation": 21, "fitness": 0.12596872162595185, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.1780789844664883, 0.1742949940997649, 0.14701082434236667, 0.20021418477915853, 0.23730713305540352, 0.22280258943432008, 0.2061186063284881, 0.18593743329633028, 0.17523786951294973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041120074838665865, 0.04706272790599009, 0.04270332188393855, 0.04589708478890975, 0.04876687549062886, 0.04087973132528877, 0.0603673678689689, 0.044424789056268676, 0.05227688900773375, 0.033683706359084686, 0.016907692599967383, 0.03003985822229971, 0.02658604261050046, 0.038079407975805224, 0.029042046722977277, 0.03714428999752761, 0.04286592998999461, 0.026643897322511156, 0.9565202511716813, 0.9704081207950601, 0.9781842397330069, 0.9642272205280018, 0.9637165262494445, 0.9541099457070118, 0.9706260749372656, 0.9455313196918659, 0.988450894863759, 0.057300547417240555, 0.105792261982532, 0.08491140411587406, 0.07981987185739581, 0.06188782851629804, 0.10323580615713512, 0.07615554047153206, 0.08050708270675444, 0.08047129837534761, 0.12027537769667196, 0.11496885854806005, 0.10978703212760832, 0.15674089264512603, 0.1448771776921256, 0.09516622702782462, 0.1128152977070126, 0.1320717793422055, 0.14474504765866025, 0.0033515613876831107, 0.04938344617610024, 0.017610596613099938, 0.0347801873045166, 0.013042713855312416, 0.011128692326998535, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006403083094502771, 0.025408729117256557, 0.0399599340921486, 0.00981617898951559, 0.00021723398444450925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010422707234435835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0720164855037243, 0.02786224702677742, 0.030430113385596425, 0.046319646006792614, 0.005797717226172616, 0.048635459010354154, 0.0379726837981299, 0.02577133692714373, 0.05189039890622493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006695726990686657, 0.01814364974827254, 9.999999999998899e-05, 0.008960257434392771, 0.007428226880757061, 0.01948058564289845, 0.1960187833604493, 0.1812328811611037, 0.17756717315126846, 0.23240544683464381, 0.1907272662063848, 0.19537937860006704, 0.2125355446694055, 0.1803657941509229, 0.16625789195060803, 0.05866938591853721, 0.060729512721207524, 0.057171581402777005, 0.06475413657347417, 0.05037406011228629, 0.051421244666414734, 0.030646322962813777, 0.05119286719467386, 0.043406420475502805, 0.1423843824297213, 0.14009931061618242, 0.24092357059013025, 0.1390872610459326, 0.21864286034279146, 0.11205842360050411, 0.1457785273120824, 0.12210199148617618, 0.15048395613150078, 0.17505466559401617, 0.15835428635949156, 0.1959311757856207, 0.15825776935140912, 0.14957224973074268, 0.15991423127599247, 0.1739606116926531, 0.18163402488886804, 0.163651973197812, 0.09967428869966644, 0.10883639114980337, 0.11519702479275529, 0.13652046789751038, 0.11635778975064337, 0.09620579677647889, 0.12072468883679244, 0.11666754489403408, 0.11400710098036382, 0.15264632013813084, 0.13832963780894825, 0.17805470961748693, 0.14355418860396985, 0.1579389960141505, 0.15270221303236575, 0.18698462492945322, 0.13974103950347072, 0.14988455005978507, 0.12962514436677852, 0.09818255343339877, 0.1575935033925825, 0.12975832273098842, 0.14025606997054052, 0.13151384885048478, 0.14118526445991264, 0.15136417434401195, 0.09097259721603645, 0.16006972404969366, 0.17980460538861298, 0.15793719743964307, 0.16379125555626284, 0.15942167303571075, 0.159022395785819, 0.12013123223934619, 0.163715903308015, 0.18405082617067314, 0.1657718135328885, 0.1529902527865573, 0.1043541459490781, 0.0990615831240842, 0.11122822450249603, 0.09066998003796256, 0.19256589333845775, 0.19501931237222436, 0.19043815017820664, 0.18284485182981303, 0.18379215583561404, 0.19187941813740605, 0.1772877295223323, 0.18097932837467356, 0.19087032684520355, 0.19088506826245333, 0.1742440684687987, 0.16929521122408353, 0.04874245282476963, 0.04556063568968949, 0.05523893185122197, 0.05422915592978994, 0.04227143830765001, 0.06189931929201142, 0.05750081558188935, 0.05188293485548545, 0.06490494089855092]}, "mutation_prompt": null}
{"id": "01f88f41-7749-4be1-a00a-d25e5b2f6306", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "b67360fb-d0bd-4108-9f4b-a4de0b021b5d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "487a66a4-15ad-4f6e-aa15-102a66024ddf", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(4 * dim, 30)  # Dynamically set population size\n        self.mutation_factor_base = 0.6  # Base mutation factor\n        self.cross_prob = 0.9  # Increased crossover probability for diversity\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            adaptive_mutation = self.mutation_factor_base + 0.2 * (1 - self.evaluations / self.budget)\n            next_gen = []\n\n            for i in range(self.pop_size):\n                next_gen.append(self.variant_adaptive(i, adaptive_mutation, fitness, func))\n            \n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_adaptive(self, index, adaptive_mutation, fitness, func):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + adaptive_mutation * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Hybrid Differential Evolution with adaptive population sizing and dynamic mutation for improved convergence.", "configspace": "", "generation": 24, "fitness": 0.1148270256326219, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.18.", "error": "", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.1360524310327963, 0.1558752289760743, 0.17216279220651554, 0.1590938598614985, 0.17082375384580495, 0.17514725084827054, 0.16920128274350643, 0.16586754659275704, 0.1535836756764022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03240231493398482, 0.026635487102963595, 0.0499220498250903, 0.037532759543308924, 0.05803242622373872, 0.035271291563051865, 0.025791845881148023, 0.03422161040800642, 0.03799921958838459, 0.02272199805973485, 0.030056208608234547, 0.03914477493475221, 0.028702040330194523, 0.017051155686152786, 0.03148534170282091, 0.03924210855953858, 0.02065360721550602, 0.04125622232384485, 0.9440148434727081, 0.952618627617997, 0.9297963893097553, 0.8616938146368546, 0.9804228420862058, 0.9316851948811745, 0.9363602978815332, 0.9262226339563646, 0.9253803803897185, 0.0689384980310056, 0.04864753210089767, 0.0748268185185289, 0.0694016875488469, 0.07030511728877242, 0.052688175851077546, 0.08172453312977068, 0.08085211136565484, 0.06928397406314724, 0.10119112977082279, 0.09971628338333471, 0.08295529308179816, 0.09616224823397423, 0.09417875719816116, 0.10386925397780666, 0.10174328470663108, 0.10279504183403676, 0.09153743329629416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013572375895320565, 9.999999999998899e-05, 9.999999999998899e-05, 0.009499935834250794, 9.999999999998899e-05, 0.00799096567597446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006296265755205699, 0.019087103820072504, 0.02607660782961574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029438215839847515, 0.027252635167699157, 0.060924009203227936, 0.04848981792379958, 0.03505101942504529, 0.025736431045045527, 0.02343544148051857, 0.028399226119357857, 0.011571481908039472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1608181987625985, 0.1937892603222392, 0.1681361544748221, 0.17594203484931004, 0.1729402466369987, 0.18320323768831293, 0.17922330075810355, 0.1609739646657652, 0.1662592119317411, 0.04070410795546053, 0.05365807726817662, 0.05719691690469586, 0.04707158352452645, 0.026655048429143013, 0.03189156891092937, 0.028163992258264603, 0.034481334362541416, 0.04133858432093929, 0.1364067139645755, 0.13137571706038764, 0.13540824862723988, 0.1429052944626097, 0.15981088819279354, 0.14132884565843107, 0.15201744396766548, 0.12578499042251, 0.19737465776617968, 0.14958489755369142, 0.16044973641469829, 0.14734623797360547, 0.14488505412193686, 0.15103417807638275, 0.13962235405804546, 0.1622741250698505, 0.17377774300845283, 0.1509287090944359, 0.09203407961256704, 0.09014861926719964, 0.09139071511108832, 0.09097824831786128, 0.09534433636592454, 0.08940874811487243, 0.09444798559782552, 0.1033793431686707, 0.12000213897887646, 0.1492386469826642, 0.13597758223555323, 0.1378293843908741, 0.1468174277078298, 0.14723323214111317, 0.13794159870448697, 0.1428669398301552, 0.1379881483251878, 0.13982581171032582, 0.11541704941204012, 0.10868857323649972, 0.12754205823310605, 0.11415305102077622, 0.07515795526245461, 0.13588489659519853, 0.11857219055562396, 0.12267761963094659, 0.12447136450007035, 0.138079781888793, 0.14242975594034346, 0.13100592269090716, 0.1588289414814491, 0.17779373772030116, 0.11052087325426507, 0.16050589190054, 0.14839915049558494, 0.12989335351945597, 0.20035393954782743, 0.15406667063749468, 0.14538639690548005, 0.11048005626243596, 0.16581975172034347, 0.12344825840207285, 0.12757721861667048, 0.16688829381944104, 0.15814097972164998, 0.1920888729951895, 0.18520817916638277, 0.18269965739141458, 0.17549214458779572, 0.1746278044222489, 0.18356783298685875, 0.18937917635856805, 0.16962050764555692, 0.17079603198418136, 0.039617392814584096, 0.03556247426731751, 0.03972060569605307, 0.04944667046371287, 0.040691616923680174, 0.045628553760087565, 0.03536109251733799, 0.07060911883331955, 0.04582304914884139]}, "mutation_prompt": null}
{"id": "1ea8f1b1-0be9-46f7-9c45-282c35e306bf", "solution": "import numpy as np\n\nclass AdaptiveDualVariantDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 10 * dim  # Adjusted population size\n        self.mutation_factor = 0.8  # Modified mutation factor\n        self.cross_prob = 0.9  # Modified crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        self.update_best(fitness)\n        while self.evaluations < self.budget:\n            next_gen = []\n            for i in range(self.pop_size):\n                variant_choice = np.random.rand()\n                if variant_choice < 0.6:\n                    next_gen.append(self.variant_best(i, fitness))\n                elif variant_choice < 0.8:\n                    next_gen.append(self.variant_rand1(i))\n                else:\n                    next_gen.append(self.variant_rand2(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            self.update_best(fitness)\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def update_best(self, fitness):\n        current_best_idx = np.argmin(fitness)\n        current_best_value = fitness[current_best_idx]\n        if current_best_value < self.best_value:\n            self.best_value = current_best_value\n            self.best_solution = self.population[current_best_idx]\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip((a + b) / 2, self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDualVariantDE", "description": "Adaptive dual-variant differential evolution with dynamic crossover and mutation for enhanced convergence and diversity.", "configspace": "", "generation": 25, "fitness": 0.1436471947043058, "feedback": "The algorithm AdaptiveDualVariantDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.19812300072568234, 0.2174388092149837, 0.2138994595708653, 0.24513118010313506, 0.26852626782895317, 0.23840828092631816, 0.26396003863392137, 0.20956678442169707, 0.24240567279811143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06394233855207554, 0.054357734022029036, 0.0752716263116705, 0.06831577053578008, 0.06059515315716557, 0.07316004326562087, 0.05724227300770124, 0.06607982562747894, 0.059639744671196926, 0.03865913492135875, 0.049055248820282005, 0.048069389754220926, 0.051785626582014466, 0.05366135628606239, 0.043786737271916176, 0.05655879124370111, 0.04922364781267641, 0.05108788983138002, 0.9787168452811656, 0.9805175156527901, 0.9806667146623709, 0.9808346033534964, 0.9858507758818034, 0.9806190990751172, 0.985757402013025, 0.9860479623597576, 0.9851047747169742, 0.14438247603147103, 0.15255149934045986, 0.10670242699234189, 0.10656023205018916, 0.1102319357613778, 0.10638113940936678, 0.13612920468086798, 0.1266124934510613, 0.11645107762444329, 0.15970154874804043, 0.15930308990838293, 0.1613139662620542, 0.20274289119925415, 0.14633186653261365, 0.18170976104844827, 0.1606729799365868, 0.16035205376065076, 0.1924673530536487, 0.05640798536790115, 0.0362760665973727, 0.030625191568100285, 0.014392468929352975, 0.01836536539029987, 0.03934145187683935, 0.06637957259065574, 0.014242391312125124, 0.04378124766668956, 0.029430538320179056, 0.04712447174470713, 0.046636978102772675, 0.016886358389819778, 9.999999999998899e-05, 0.008572842534368852, 0.029352531368821433, 0.007023309350647877, 0.02518923008168461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06455072799144379, 0.07544918152001878, 0.04701437082432036, 0.021300664654987256, 0.050920270374395615, 0.04092361025552349, 0.057740599839230855, 0.09447421153763702, 0.018737623838777973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015046784736066021, 0.007846030572436602, 0.0004581321332152166, 0.013640361006380441, 0.016201801579527664, 0.012458481332409566, 0.029890866508038516, 0.017939213296711776, 0.012871351457034552, 0.23236801868344703, 0.2577958704229214, 0.22168824735360004, 0.23966120859475837, 0.22775401004379714, 0.24220529993066442, 0.22257308571925083, 0.22196208730316325, 0.23187956166298818, 0.06745580876817892, 0.06843584790944146, 0.07679859811388956, 0.06458363158187952, 0.06959464107861713, 0.05599458981750938, 0.061921261700202734, 0.06987607927257156, 0.05947913209320377, 0.16272183321804368, 0.13211894159355275, 0.13195180312314003, 0.16309136691108328, 0.13381502750277063, 0.17407201225188096, 0.18095503293933957, 0.18434182866325954, 0.18070513846261782, 0.19001472442109568, 0.17858221697419852, 0.19346196502690427, 0.1931382537837808, 0.17320456666041795, 0.20269577336171984, 0.19174634415448777, 0.1872130341808218, 0.19148894411832384, 0.1348357447438857, 0.1208011100248384, 0.12807131450407083, 0.11239654297579216, 0.13219533977770048, 0.12075802009548531, 0.1360891484641521, 0.16210262020720145, 0.14210586916496937, 0.16707596278633974, 0.1641629646997721, 0.1551420258198053, 0.16159706378155936, 0.19086487021794396, 0.16640353328619895, 0.1682381297205513, 0.1727667683310139, 0.18131068714354792, 0.16045173256958167, 0.15624557500275604, 0.1559036631885805, 0.1694733720109085, 0.15387551015952827, 0.1553056580869392, 0.15623217052501026, 0.15639088060171147, 0.1646961676878218, 0.2877691883203508, 0.15444949115147155, 0.14455923635957857, 0.17529000893112168, 0.15945495075596905, 0.14900011946886993, 0.13688691880841508, 0.16092821415376546, 0.20293583393295644, 0.16593403267245288, 0.16143394242335507, 0.16473671456553052, 0.1736139946038222, 0.16013742306433632, 0.16540802846248848, 0.2071605486145086, 0.22202452372084158, 0.1395566601845385, 0.18768059545018323, 0.1870463716243268, 0.1770603362558224, 0.17653188246201867, 0.18611058041338402, 0.17548476803575264, 0.1822945989317999, 0.18929747681740028, 0.18484718962594593, 0.0550064494669652, 0.05531131716081095, 0.06777843037828046, 0.06013590496632748, 0.054228477346668136, 0.06826193953058102, 0.06071965958193193, 0.05758291077580702, 0.0653393048002312]}, "mutation_prompt": null}
{"id": "0ba53b23-2b6c-4473-8f91-c089602b70a5", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "0e7afa3e-608d-4699-9002-a09936958f7d", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "92b562e2-584e-4680-b738-7c25ef82e89c", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "d4a15b92-e135-491c-b1ee-bd06fdf5b1e8", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "1bf28ec1-9d37-47c1-9f89-68ad17c6e590", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 8 * dim  # Reduced population size\n        self.mutation_factor = 0.7  # Adjusted mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = []\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:\n                    next_gen.append(self.variant_best(i, fitness, func))\n                else:\n                    next_gen.append(self.variant_rand1(i))\n\n            self.population = np.array(next_gen)\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist preservation\n            self.population[np.random.randint(self.pop_size)] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness, func):\n        best_idx = np.argmin(fitness)\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = [idx for idx in range(self.pop_size) if idx != index]\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "A hybrid differential evolution with adaptive strategies and elitist mechanism to enhance convergence efficiency across diverse problems.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.25583830511910044, 0.23251313366014514, 0.21266807853419734, 0.25457932796875893, 0.26543825391715126, 0.262336194879521, 0.26164646576660955, 0.2626466104633889, 0.2623965804115814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08164274405264027, 0.05006618830811038, 0.0614033118444669, 0.07108077664652779, 0.06348435761009019, 0.05468481783159529, 0.06676995156911869, 0.08380345645163068, 0.06430488189266603, 0.04453752951337153, 0.038117538017859776, 0.06427467170433498, 0.05871111426516129, 0.057302544111954234, 0.052703346819617414, 0.047958302687463816, 0.08648134416470943, 0.05079709219481754, 0.9800533718799858, 0.9874423254675797, 0.9834257856476755, 0.9800455509301775, 0.9838479053194464, 0.9812426408278399, 0.9841659433517509, 0.9839420220823395, 0.981853830865071, 0.10202761238453417, 0.12059156224333278, 0.08700799999003561, 0.13638834951656575, 0.11325833185449319, 0.138403927657741, 0.12052134968340067, 0.16281720768116303, 0.11102991737465817, 0.12531015814866697, 0.059617693728273524, 0.18242146624240385, 0.17342036653155934, 0.16032447196597444, 0.17163955903832628, 0.15039500054460042, 0.16627259888368773, 0.14631855020526985, 0.004994134660638361, 0.014723513451582071, 0.02235591631942302, 0.01470173774088157, 0.05385846583905296, 0.005272519362530148, 0.04272569801710524, 0.04395339915632934, 0.013343524252366512, 0.0677969118878653, 0.039109094688502544, 0.06368842195608226, 9.999999999998899e-05, 0.010779704087297448, 0.02576206063037878, 0.08572978850871427, 0.0019115552282311654, 0.05010596459531402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030789807744276976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422122620257654, 0.029436830896936383, 0.06358309294369535, 0.10788692319866422, 0.06122315355804708, 9.999999999998899e-05, 0.04142741517640547, 0.022742937759706705, 0.0351832110893856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009168303778991138, 0.011639543468131008, 0.03441092435830828, 0.022021261162032513, 0.018827372146078547, 0.015034134187936199, 0.02307237691991737, 0.014181221052995019, 0.0318083090716611, 0.2342073612809753, 0.2293952300698714, 0.22320656428838648, 0.24632807518010458, 0.2735313924342042, 0.264022257731367, 0.21372895814983417, 0.2227670471040547, 0.21745514758009699, 0.07233219632231047, 0.08980666804590587, 0.08536940112162594, 0.06364122022221075, 0.06128853422523384, 0.06973162351927553, 0.07322193661908427, 0.057832368396221856, 0.07612822735560332, 0.1490275766445266, 0.14566930379788212, 0.1446969635026547, 0.26428593934030087, 0.16178065603449454, 0.160667100724732, 0.1431745148410548, 0.1836030198193065, 0.20315558753659602, 0.19992328870101117, 0.17655580178208052, 0.2391748170197342, 0.18509480050566296, 0.1858129546900681, 0.1720377529061976, 0.20000057448015973, 0.2130396424564137, 0.19415217786174488, 0.12419397990310621, 0.1316690614944489, 0.1149908243825375, 0.12585966709974106, 0.1559010017310688, 0.12258027920995607, 0.13141926300284135, 0.15135834729494857, 0.1416081068151449, 0.18300653730008376, 0.13638106033648023, 0.1641692483290531, 0.17550647538740538, 0.1568582026729971, 0.17000598872226802, 0.1794351841406191, 0.19124987696261775, 0.173553195790491, 0.16583047208687618, 0.15519857189298414, 0.1658178620004077, 0.17202105773256715, 0.15112703625837332, 0.1501434549352183, 0.15133605500759073, 0.15481919789312537, 0.14972621472669434, 0.16506453765852125, 0.16830640954138432, 0.1501322155210788, 0.18189739730672438, 0.1617259113773435, 0.1587110276275786, 0.12957427657956322, 0.17488564189678413, 0.18924959965687826, 0.2138716814706979, 0.1719557972615905, 0.1715481796353432, 0.21074336600929566, 0.20053035316757828, 0.2016118782459183, 0.20798690269987952, 0.20748670552098925, 0.20673227520620674, 0.17827620718440396, 0.17658185093196954, 0.1926397749254466, 0.1868615765218612, 0.18307620177086037, 0.1935641482144409, 0.20246859114790283, 0.18196236911014718, 0.1870566301984221, 0.055651058921161733, 0.0641627252708944, 0.05808836248082372, 0.06669729985325845, 0.06222717431775859, 0.06017297951830192, 0.07309272529223287, 0.055197811588726275, 0.07005673853444039]}, "mutation_prompt": null}
{"id": "2743708b-e819-4cc2-9ae4-872655f7ae9b", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(4 * dim, 20)  # Dynamic population size based on dimension\n        self.mutation_factor = 0.6  # Adaptive mutation factor\n        self.cross_prob = 0.9  # Increased crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.8:  # Slightly favored best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand2(i)\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist reinforcement\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + 0.5 * (b - c) + self.mutation_factor * (np.mean(self.population, axis=0) - a), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with Adaptive Mutation and Dynamic Population.", "configspace": "", "generation": 31, "fitness": 0.26700510211711614, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "f2bf81b8-fa67-45f5-bb2e-7935dbdef7a2", "metadata": {"aucs": [0.9442151569677951, 0.9255204166739436, 0.9255194862479702, 0.9398962315842676, 0.9298958044375555, 0.9305116082244709, 0.9443809659310727, 0.9303669358435003, 0.9444040682711966, 0.38804014595254854, 0.20463466485458914, 0.72136926879946, 0.4143787351731161, 0.3457943974907087, 0.2908814253069478, 0.28024886711917874, 0.36968112459873814, 0.5679875960537478, 0.045053357827051, 0.1360579979637081, 0.11675023765725268, 0.08635730192515145, 0.0895238899314128, 0.11790954222693928, 0.08088343610162008, 0.11978994226598605, 0.05937576419059565, 0.19076257842333322, 0.07304965137301767, 0.10636953981013575, 0.08333391140451207, 0.11279270111581496, 0.06727151578164048, 0.056980705996383385, 0.1620134396983669, 0.144188091163158, 0.9886260896460897, 0.9877633633160691, 0.9896964241540591, 0.9919687625438531, 0.976006680708175, 0.9909435795985571, 0.9886818405012677, 0.9795178928938197, 0.9888874386141459, 0.49199801137230004, 0.318273137576511, 0.6497598138570949, 0.1539119251187836, 0.181076677270131, 0.39844509267500594, 0.2747222930868892, 0.08464637420784982, 0.2780775423752765, 0.2311884203034974, 0.1510763280864541, 0.10479751400275727, 0.951963363991197, 0.194363787115316, 0.21516196575918745, 0.12862936778339862, 0.17699425227163013, 0.36660079860523487, 0.1466781990924768, 0.18932493672673323, 0.18019178516442136, 0.17555404400804142, 0.13512905322458535, 0.15459220510827165, 0.17674210393027534, 0.17536645360519054, 0.2020214295600713, 0.14434899915131105, 0.14748855135659866, 0.17843936641223335, 0.15778195549630214, 0.22009804900758168, 0.1470151787695675, 0.20551954672311823, 0.05973662623420628, 0.13468880743439327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030426746304371033, 0.0830972230934427, 0.038132861997129064, 0.03879021541535599, 0.022012837049415035, 0.03274587937128248, 0.045807885143247074, 0.031992214919208894, 0.07204894379233628, 0.04971092059524396, 0.09414913919442391, 0.12788123426632514, 0.038247145038030284, 0.1392620836387385, 0.14756435683614977, 0.0861957720064096, 0.18387586528306543, 0.2624872702505693, 0.10106088653947243, 0.056050570820935564, 0.14940166507443609, 0.014942137479067474, 0.14525103212482227, 0.1914176201048826, 0.07243853416415968, 0.14220022079969785, 0.07241732965984915, 0.11139414159117822, 0.5966887382934735, 0.5098902594050241, 0.5446126738128785, 0.5338586658381361, 0.5425253810355366, 0.4670459256889481, 0.5135180433120297, 0.4600844300240384, 0.5257087964665366, 0.19237282641591413, 0.07016018440219318, 0.07992947326299349, 0.08040277716291588, 0.19223674153007408, 0.11118510086713307, 0.10639679205518149, 0.10698907398765822, 0.10142897533321704, 0.1298523121193359, 0.3605637256918395, 0.22518113865814982, 0.22276418047600188, 0.3773495053757019, 0.24354188477826866, 0.17309036188548665, 0.16579169541610916, 0.29019211323040583, 0.28146936446551474, 0.36584746728363293, 0.21370400413511859, 0.2548644621261992, 0.23861027833919357, 0.20551198734299814, 0.23059803239117704, 0.3126174054182176, 0.31003767936545834, 0.1476843962798159, 0.3389919122183187, 0.20685112374545989, 0.224832313978802, 0.20338082501247623, 0.27966910362469, 0.22817744358565428, 0.20721928756253694, 0.3130335435081605, 0.1972619998491878, 0.1979483132551999, 0.21707584035765726, 0.19279920044747145, 0.22720610718757506, 0.21055733595092574, 0.24200975970303773, 0.20925264831797885, 0.2432199306692624, 0.22608144250563733, 0.19627562478615324, 0.18232209925205278, 0.1814323064741994, 0.909683369277501, 0.19209508778516626, 0.197710974014229, 0.19527281498844928, 0.2000550415357195, 0.15903678915382602, 0.17354940671022434, 0.14855608229092798, 0.9549910983101709, 0.20181566706226417, 0.2016731104310876, 0.0998872073925342, 0.17032651802701804, 0.11306739389862663, 0.46037439590924756, 0.21296146170391916, 0.12793599867792815, 0.21356373128070805, 0.2815778826746176, 0.21365695871133694, 0.11343455684181458, 0.3317853373278543, 0.10505362950797792, 0.22162060872666145, 0.21432478165905022, 0.20717080501471696, 0.2642077540082026, 0.19399531627028577, 0.187264225791418, 0.22379881355509945, 0.2255917565147122, 0.22841647294585432, 0.0897713602773168, 0.0822398861782504, 0.08564457696664574, 0.10964260521208469, 0.06678481130308678, 0.16757925036957844, 0.14645787641514596, 0.08037009348619395, 0.09776226804462473]}, "mutation_prompt": null}
{"id": "4bf46f25-b318-4cb2-92ac-cd21e995655f", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(4 * dim, 20)  # Dynamic population size based on dimension\n        self.mutation_factor = 0.6  # Adaptive mutation factor\n        self.cross_prob = 0.9  # Increased crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.8:  # Slightly favored best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand2(i)\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n            \n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Elitist reinforcement\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + 0.5 * (b - c) + self.mutation_factor * (np.mean(self.population, axis=0) - a), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n    \n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with Adaptive Mutation and Dynamic Population.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2743708b-e819-4cc2-9ae4-872655f7ae9b", "metadata": {"aucs": [0.9442151569677951, 0.9255204166739436, 0.9255194862479702, 0.9398962315842676, 0.9298958044375555, 0.9305116082244709, 0.9443809659310727, 0.9303669358435003, 0.9444040682711966, 0.38804014595254854, 0.20463466485458914, 0.72136926879946, 0.4143787351731161, 0.3457943974907087, 0.2908814253069478, 0.28024886711917874, 0.36968112459873814, 0.5679875960537478, 0.045053357827051, 0.1360579979637081, 0.11675023765725268, 0.08635730192515145, 0.0895238899314128, 0.11790954222693928, 0.08088343610162008, 0.11978994226598605, 0.05937576419059565, 0.19076257842333322, 0.07304965137301767, 0.10636953981013575, 0.08333391140451207, 0.11279270111581496, 0.06727151578164048, 0.056980705996383385, 0.1620134396983669, 0.144188091163158, 0.9886260896460897, 0.9877633633160691, 0.9896964241540591, 0.9919687625438531, 0.976006680708175, 0.9909435795985571, 0.9886818405012677, 0.9795178928938197, 0.9888874386141459, 0.49199801137230004, 0.318273137576511, 0.6497598138570949, 0.1539119251187836, 0.181076677270131, 0.39844509267500594, 0.2747222930868892, 0.08464637420784982, 0.2780775423752765, 0.2311884203034974, 0.1510763280864541, 0.10479751400275727, 0.951963363991197, 0.194363787115316, 0.21516196575918745, 0.12862936778339862, 0.17699425227163013, 0.36660079860523487, 0.1466781990924768, 0.18932493672673323, 0.18019178516442136, 0.17555404400804142, 0.13512905322458535, 0.15459220510827165, 0.17674210393027534, 0.17536645360519054, 0.2020214295600713, 0.14434899915131105, 0.14748855135659866, 0.17843936641223335, 0.15778195549630214, 0.22009804900758168, 0.1470151787695675, 0.20551954672311823, 0.05973662623420628, 0.13468880743439327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030426746304371033, 0.0830972230934427, 0.038132861997129064, 0.03879021541535599, 0.022012837049415035, 0.03274587937128248, 0.045807885143247074, 0.031992214919208894, 0.07204894379233628, 0.04971092059524396, 0.09414913919442391, 0.12788123426632514, 0.038247145038030284, 0.1392620836387385, 0.14756435683614977, 0.0861957720064096, 0.18387586528306543, 0.2624872702505693, 0.10106088653947243, 0.056050570820935564, 0.14940166507443609, 0.014942137479067474, 0.14525103212482227, 0.1914176201048826, 0.07243853416415968, 0.14220022079969785, 0.07241732965984915, 0.11139414159117822, 0.5966887382934735, 0.5098902594050241, 0.5446126738128785, 0.5338586658381361, 0.5425253810355366, 0.4670459256889481, 0.5135180433120297, 0.4600844300240384, 0.5257087964665366, 0.19237282641591413, 0.07016018440219318, 0.07992947326299349, 0.08040277716291588, 0.19223674153007408, 0.11118510086713307, 0.10639679205518149, 0.10698907398765822, 0.10142897533321704, 0.1298523121193359, 0.3605637256918395, 0.22518113865814982, 0.22276418047600188, 0.3773495053757019, 0.24354188477826866, 0.17309036188548665, 0.16579169541610916, 0.29019211323040583, 0.28146936446551474, 0.36584746728363293, 0.21370400413511859, 0.2548644621261992, 0.23861027833919357, 0.20551198734299814, 0.23059803239117704, 0.3126174054182176, 0.31003767936545834, 0.1476843962798159, 0.3389919122183187, 0.20685112374545989, 0.224832313978802, 0.20338082501247623, 0.27966910362469, 0.22817744358565428, 0.20721928756253694, 0.3130335435081605, 0.1972619998491878, 0.1979483132551999, 0.21707584035765726, 0.19279920044747145, 0.22720610718757506, 0.21055733595092574, 0.24200975970303773, 0.20925264831797885, 0.2432199306692624, 0.22608144250563733, 0.19627562478615324, 0.18232209925205278, 0.1814323064741994, 0.909683369277501, 0.19209508778516626, 0.197710974014229, 0.19527281498844928, 0.2000550415357195, 0.15903678915382602, 0.17354940671022434, 0.14855608229092798, 0.9549910983101709, 0.20181566706226417, 0.2016731104310876, 0.0998872073925342, 0.17032651802701804, 0.11306739389862663, 0.46037439590924756, 0.21296146170391916, 0.12793599867792815, 0.21356373128070805, 0.2815778826746176, 0.21365695871133694, 0.11343455684181458, 0.3317853373278543, 0.10505362950797792, 0.22162060872666145, 0.21432478165905022, 0.20717080501471696, 0.2642077540082026, 0.19399531627028577, 0.187264225791418, 0.22379881355509945, 0.2255917565147122, 0.22841647294585432, 0.0897713602773168, 0.0822398861782504, 0.08564457696664574, 0.10964260521208469, 0.06678481130308678, 0.16757925036957844, 0.14645787641514596, 0.08037009348619395, 0.09776226804462473]}, "mutation_prompt": null}
{"id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 33, "fitness": 0.30666542012765524, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "2743708b-e819-4cc2-9ae4-872655f7ae9b", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "399d2708-8003-40c3-93be-45b895835103", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(4 * dim, 20)  # Adjusted dynamic population size\n        self.mutation_factor = 0.6  # Slightly increased mutation factor for diversity\n        self.cross_prob = 0.9  # Higher crossover probability for more exploration\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.6:  # Adjusted probability for strategy\n                    next_gen[i] = self.strategy_best(i, fitness)\n                else:\n                    next_gen[i] = self.strategy_rand2(i)  # New strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Introduce dynamic diversity mechanism\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def strategy_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def strategy_rand2(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        # Modified strategy for improved exploration\n        mutant = np.clip(b + self.mutation_factor * (a - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Population Size and Strategy Adaptation for Improved Performance.", "configspace": "", "generation": 34, "fitness": 0.1702263079053093, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.30117277802794207, 0.30789393698759326, 0.2819996590282703, 0.3996299232497327, 0.3763685586433647, 0.35575371686517865, 0.35656204383471546, 0.363434331144909, 0.35681273596843643, 0.022683441394892312, 9.999999999998899e-05, 9.999999999998899e-05, 0.001224770100575423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025360557325971866, 9.999999999998899e-05, 0.09257549867107095, 0.07454664162645619, 0.07345510810864742, 0.05825147287054677, 0.06989875234084697, 0.08377751364731156, 0.08267547714860679, 0.07986631343883688, 0.08026131735913589, 0.05873435122145243, 0.0659423042046765, 0.06920793234420819, 0.08758471328868511, 0.08727502486272964, 0.06301791987503713, 0.09417439481778167, 0.07797946444010417, 0.0709064797191934, 0.982375481045431, 0.9799625215655752, 0.9904584231065454, 0.9832111498477972, 0.9890267521270191, 0.9926549143170635, 0.9903994036240332, 0.9737996647215019, 0.9889666238507321, 0.17811750715006214, 0.1933686873293925, 0.1674884904031806, 0.14047027661131073, 0.16093282379179275, 0.1305175748513282, 0.08900708773100507, 0.1551514302951893, 0.18554895793948678, 0.17245785517700207, 0.15394501262235005, 0.17857056764058488, 0.16062242248591718, 0.25865149832112944, 0.1929005117669541, 0.20251728041286599, 0.22436614231677487, 0.2083567906244369, 0.08959808090302779, 0.12031619596690213, 0.0808557767955288, 0.1152973443960027, 0.0656967420351593, 0.09392093073038199, 0.10871697621945164, 0.1166644452595067, 0.09103088443684793, 0.09645495129911796, 0.06223895352106579, 0.08503732676592757, 0.08138510343131744, 0.07565137329413096, 0.054974203986912884, 0.07827433051876254, 0.08364099211746856, 0.0524934151345382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07423806019565071, 0.039999066629788804, 0.05501915339814567, 0.0981987999671795, 0.04687888275262797, 0.020331662861737043, 0.05331150839476417, 0.04283073496151413, 0.06516858432686135, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04580399746913211, 0.04941275062233075, 0.03915604445684062, 0.05502171958093094, 0.052267415948603735, 0.0606414770280691, 0.05959261037723407, 0.04071223214581898, 0.06129204294698776, 0.321252828172119, 0.2828541724809621, 0.28669721937523596, 0.3201346896199949, 0.32328537659334755, 0.3125258064966565, 0.313210409948554, 0.296605060455956, 0.2643848089606434, 0.10641984558471285, 0.07386915389842108, 0.0853473802003003, 0.08841282557889374, 0.06623118786414328, 0.0857862893595609, 0.06931148174217283, 0.07531936473998302, 0.07957069841677, 0.16552395784289053, 0.182751325325471, 0.17343896595625263, 0.16103649212143478, 0.15303839023881483, 0.17458479941608607, 0.19249186002952878, 0.1389213580989943, 0.16377285296653465, 0.21564951097350904, 0.20525813747843002, 0.2399973040207164, 0.22538225213297192, 0.21869250892252134, 0.20546140001366897, 0.25630247320108857, 0.23876068628468017, 0.2137572745244325, 0.15941009199701106, 0.14782288339650818, 0.16964736790395563, 0.1642790602993751, 0.14949594614554185, 0.13439869635191393, 0.16830430162487797, 0.17314316571787336, 0.1665981656727321, 0.19053303151904155, 0.1787251417987603, 0.1927941039590353, 0.16812097325671527, 0.1944121115959957, 0.17801430512384997, 0.17846167493023113, 0.18412788620936738, 0.186252439549646, 0.17514632994026835, 0.17105103251134535, 0.16098848020745404, 0.1602190749358382, 0.17270375623335754, 0.17159388954526622, 0.16840602506789926, 0.16853625806584127, 0.1763045423594073, 0.5199624773929487, 0.17112350583170355, 0.1538306389823627, 0.17662228538183133, 0.1941036637024911, 0.1668788705966474, 0.18588415657856894, 0.16644440482931444, 0.19305904134665386, 0.2159242031027906, 0.16836955023000977, 0.08205971402717682, 0.24147675858992323, 0.16345824329695768, 0.2035909669685424, 0.21371827606549165, 0.37541663875946096, 0.20800528117665895, 0.17724568424287468, 0.1824676390270622, 0.17344492110211596, 0.17519885999926987, 0.1849965186202619, 0.21276119403331095, 0.19945276168635384, 0.21388749857663858, 0.19048727755725137, 0.07504593964981832, 0.07728987341817917, 0.07642840856884692, 0.06628274298680448, 0.06463440614826033, 0.07251614417469732, 0.07042326992534476, 0.06388775227828414, 0.0723988002200735]}, "mutation_prompt": null}
{"id": "2564943f-5923-41d6-82b1-10a77bdee480", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "af2201e7-202b-4c3a-9106-3d068e42a845", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "19ba7400-8138-4894-b890-1706f00d11b9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "4ec001f8-2eb4-4e2c-bf18-6c0981435a52", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "cbfb1901-3f07-4103-a98d-99b25c922010", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "87eed4ac-bb12-40e2-a041-e05edcbd89ef", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "40314323-6f3e-4885-b429-8ede27ef3f99", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "fa07bc22-2ecb-42da-b354-b29c0881d3bd", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "b745497e-5450-4aa3-87d9-1ff5f1cb62f1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "ce71b5e4-006f-4cca-8bf9-798b750c1d75", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "8c31d293-2853-44ac-b2e5-c0038337d49e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "5fc331c7-3cb2-4589-a7aa-c6d7dc01b349", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "c1790efc-293d-4113-9f91-0024c2773beb", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "a422dadd-d74b-44e4-a573-c44c1f5b5564", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "f084b3a5-fa51-4ab1-86c4-a389c581d698", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "3e792e31-c4dd-47d1-8af8-20ea9a9db2c5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "4d02ef9b-a40f-4ef3-a262-f88a4f2a5017", "solution": "import numpy as np\n\nclass HybridAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(4 * dim, 25)  # Adjusted dynamic population size\n        self.mutation_factor = 0.6  # Dynamic mutation factor\n        self.cross_prob = 0.9  # Improved crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.8:  # Adjusted probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand_local(i, fitness)  # Local search\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Enhance exploration\n            self.population[np.random.choice(range(self.pop_size))] = np.random.uniform(self.lb, self.ub, self.dim)\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand_local(self, index, fitness):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.local_search(self.crossover(self.population[index], mutant))\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def local_search(self, trial):\n        perturbation = np.random.normal(0, 0.1, self.dim)\n        improved = np.clip(trial + perturbation, self.lb, self.ub)\n        return improved", "name": "HybridAdaptiveDE", "description": "Hybrid Adaptive Differential Evolution integrating local search and dynamic parameter tuning for enhanced convergence.", "configspace": "", "generation": 51, "fitness": 0.16154885664309063, "feedback": "The algorithm HybridAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.2534795259725816, 0.2582206348017144, 0.30320068330188354, 0.2805428200451068, 0.27509989167896387, 0.2785281467088866, 0.255102516297665, 0.26260752996187453, 0.2706696226209694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08569318682591598, 0.0793736774611854, 0.06570320222584358, 0.0815651393741802, 0.06908654898954192, 0.06881605927556211, 0.08811928389333656, 0.07391347992492758, 0.08337939318458232, 0.0597813084430896, 0.07687751348350902, 0.06546555237496776, 0.05315098200881008, 0.06307518793497602, 0.07226170282333044, 0.07642614739982656, 0.06418182027185826, 0.08475934811224184, 0.9909782510576772, 0.9920567292421321, 0.9848410132606171, 0.9756211905058094, 0.985449319101741, 0.9894376254406764, 0.9948057507892859, 0.9863794969413424, 0.9853477648037996, 0.1360288064159908, 0.1363806089757862, 0.1436633768123614, 0.1360888593379843, 0.15538752167586223, 0.14734825298542842, 0.1637949256401383, 0.14886616118727636, 0.14839448550744383, 0.18732546479456202, 0.21606029805009597, 0.1732677208490846, 0.1956476934318373, 0.18910215976047184, 0.1760946426541775, 0.19658743204997908, 0.1835252614438756, 0.16943590497122296, 0.10864104012118769, 0.06647880525166561, 0.07788180775256193, 0.07085581670690355, 0.08226692794787627, 0.08565034293530738, 0.08726672612264774, 0.07118626537333073, 0.09106434461202917, 0.0638936214477962, 0.07031109308035388, 0.09391690685197851, 0.07280895013079447, 0.09168256724395729, 0.10553373461826154, 0.049437884079231664, 0.06244891360971594, 0.08355821114311857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07507822239429973, 0.053317912609528006, 0.05623443982035625, 0.046093553103924934, 0.06348313052190502, 0.054946905905159604, 0.0590722524571653, 0.07600670280657562, 0.06669227063276428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03559325379007927, 0.04409778560842714, 0.03517483128413512, 0.014819211162545587, 0.027214610290693053, 0.03723085403057669, 0.023958114907419836, 0.03339696352725352, 0.02499557880257175, 0.26337044601666526, 0.2648651293613048, 0.32253205193839685, 0.2578069318932339, 0.29261355996976013, 0.28926809550861166, 0.250312101999166, 0.27437871083897447, 0.27506239067781635, 0.07589581328142436, 0.07332637205385617, 0.07915062196221567, 0.0791846862361123, 0.07169591881638648, 0.07891760647824775, 0.06383978480953378, 0.07943646089549916, 0.0730045429373658, 0.16398838463476417, 0.1433142461222937, 0.18444342818906978, 0.13971871974519057, 0.14555370281521407, 0.17362496071128386, 0.1353737031793728, 0.14886010039240427, 0.149983831921088, 0.1983005120685234, 0.19322511894326666, 0.20886206209012148, 0.19541486423641086, 0.2035538474977936, 0.20367739923910444, 0.20161834287827118, 0.22286352705456025, 0.20943762807029875, 0.1419407997570381, 0.16981101749244243, 0.14715362548597244, 0.14649830234839323, 0.13860647983787344, 0.15001515367049612, 0.15866264877564973, 0.15060196682692162, 0.16222310496536796, 0.1884343774017032, 0.1887159303839243, 0.16820353727581627, 0.18601436033913776, 0.2112704593932514, 0.17938279290857795, 0.1818844803211601, 0.17689307928257858, 0.18767111478086262, 0.17103529722887156, 0.17329564904665418, 0.1678621208464185, 0.1770142002925129, 0.17845226220994703, 0.16777913196351713, 0.19505937922742844, 0.17194371989834467, 0.17715373521984745, 0.15779116723930087, 0.16355302265485694, 0.16230456061404896, 0.19085517247452122, 0.27413228542993295, 0.21695492999579502, 0.26782248381198326, 0.22257691794177337, 0.24042982148991165, 0.2007791871090645, 0.16759522602469645, 0.2048962352942002, 0.21812326285633565, 0.25128726309154736, 0.17338929614820553, 0.18974175880058597, 0.20260224315882547, 0.2143214229001823, 0.1895085983256135, 0.19871018102350324, 0.17956605611585963, 0.19041369040805123, 0.18248766733056265, 0.18397642212979404, 0.18006625356882944, 0.1784889611817969, 0.17319467447102432, 0.07896484025241757, 0.06572072891588465, 0.06576042363044887, 0.06246273290540816, 0.07335923006808276, 0.06714859535372397, 0.06188958807426315, 0.07061456077055372, 0.07102106493359173]}, "mutation_prompt": null}
{"id": "134bcd86-5c11-44bf-b2dd-c8f7b61f5560", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "f4b3b8fa-1835-493c-ade5-ab0a302a4f18", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "b1ee97ab-e609-4508-abbd-c490e3299029", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "938bbb48-9f4d-4808-8113-72cbbc18bf99", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "266c73e2-37ba-48d8-b29c-6cd07685b9a2", "solution": "import numpy as np\n\nclass HybridDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(4 * dim, 25)  # Reduced base population size\n        self.mutation_factor = 0.6  # Adjusted mutation factor\n        self.cross_prob = 0.9  # Higher crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.6:  # Adjusted probability for hybrid variant\n                    next_gen[i] = self.hybrid_variant(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Maintain population diversity\n            for j in np.random.choice(range(self.pop_size), size=2, replace=False):\n                self.population[j] = np.random.uniform(self.lb, self.ub, self.dim)\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def hybrid_variant(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        c = self.population[best_idx]\n        mutant = np.clip(c + self.mutation_factor * ((a + b) / 2 - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "HybridDifferentialEvolution", "description": "Hybrid Differential Evolution with Dynamic Control and Adaptive Population Strategies.", "configspace": "", "generation": 56, "fitness": 0.16541875587815782, "feedback": "The algorithm HybridDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.16.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.3226946798329382, 0.3299337668600498, 0.30962400643957966, 0.2680662086979554, 0.266680319593567, 0.29287956571914253, 0.25568884138659287, 0.2644579891201373, 0.26460397677450875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07671189857586136, 0.07192155667441091, 0.06744099928693992, 0.0749044445370004, 0.06839993531350952, 0.07779799357232009, 0.09131835601081151, 0.07862870215287387, 0.08861710157946012, 0.06939062042804911, 0.06612745196082581, 0.07580761104428058, 0.06604385518231826, 0.06773121442203411, 0.05884190151058155, 0.06315593117892238, 0.07069346000928378, 0.06413904011579197, 0.7305262548476672, 0.6480562927419988, 0.8747074143785833, 0.704148939191503, 0.859206039633367, 0.7639552353838825, 0.9236100556854387, 0.6620437641997499, 0.8555477507825432, 0.13446394642530524, 0.1489545263649148, 0.15379848625679826, 0.11709075134630054, 0.12721911102560102, 0.12122297484732514, 0.16381540638854053, 0.1469246950478329, 0.09747661144899744, 0.22200653405849202, 0.19629322736459498, 0.1867889251631384, 0.19499931958148764, 0.19188154560694382, 0.18802874255886248, 0.16458341373197904, 0.200154250719499, 0.16828869837474503, 0.07238967090883774, 0.10225656487362722, 0.11991437759701273, 0.05378731016994864, 0.11330216511782643, 0.0910131785271655, 0.09069215189645041, 0.11182665460777885, 0.09734924797207789, 0.11749740164524569, 0.13918284737365172, 0.14176748720463328, 0.11238529802393882, 0.1513476253541246, 0.12760779808818423, 0.1299875400110717, 0.12238935046637966, 0.12247741862842598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005915859129406287, 9.999999999998899e-05, 0.09478590540314513, 0.11339730061771114, 0.12305046556076982, 0.058022890121907755, 0.0671208371475861, 0.0750662928702237, 0.16213047002135716, 0.17399155267565003, 0.1277525656327302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003128625281473396, 0.024155138278141974, 0.009787655886489333, 0.021203486936620886, 0.03742664934444184, 0.03371195225874346, 0.020480612761810346, 0.05963341699180258, 0.0035187189775206518, 0.27974721609342657, 0.3071362375819895, 0.2983670454177887, 0.2670828432888849, 0.267019891279069, 0.27563968355250457, 0.295536227722749, 0.32314883966485364, 0.3302530092370368, 0.08358902519295464, 0.06084770941758377, 0.06924220298913275, 0.08351548852389534, 0.08267025202179357, 0.06820845432123046, 0.06769068153585944, 0.07593390868745487, 0.08700438810351097, 0.16558524924398565, 0.1702598503956042, 0.14110654603244677, 0.18694504638823795, 0.15011690141125933, 0.1574817039471218, 0.19252101691389223, 0.1626325035977796, 0.16551153554576215, 0.21025283982763265, 0.19984137888349685, 0.20089867092355795, 0.22817735021170937, 0.23112100660382007, 0.23692114904544148, 0.19737986890404036, 0.2026029838759017, 0.20746010773102552, 0.16268108523437785, 0.17157729033340763, 0.1483124644207101, 0.19537934027578063, 0.17896499160978985, 0.16899148021529942, 0.13625773271690356, 0.15604881701027984, 0.15383151868623446, 0.20380240557530727, 0.2158499857436681, 0.20541357368248392, 0.21408585628879373, 0.2550630326385752, 0.22634305786236386, 0.19069578687332878, 0.211527873404585, 0.21833286417807007, 0.16783479173030758, 0.16949611446700052, 0.16567517477107319, 0.17051869987723567, 0.17137265439577276, 0.19134875035888077, 0.17028512498773252, 0.1707457490880674, 0.16267933730781026, 0.1792904429216574, 0.22397415561711764, 0.18181635407156604, 0.27355960329730056, 0.3409288343882436, 0.28296958618086154, 0.445723884968093, 0.3452289483908182, 0.1916234750873509, 0.30811592851536984, 0.3244234937414672, 0.3172578598821436, 0.2527332306953787, 0.16193589285186027, 0.18508758777745737, 0.2039948473138934, 0.17631761482552943, 0.21780594204513637, 0.1764809176798091, 0.19263640873828347, 0.17730906300639704, 0.20383180144353763, 0.19131396336055018, 0.17964188092384137, 0.18248718953661947, 0.17756362031496387, 0.18019623106346738, 0.07695984556463809, 0.08066738774784277, 0.07470068036049904, 0.08421820159776039, 0.0791993489269569, 0.08330550266654557, 0.0780789420791107, 0.08605506066740487, 0.07830434808459819]}, "mutation_prompt": null}
{"id": "8e798905-e078-4de0-a3dd-ece4ca02ed0d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "393200c7-fecd-4c07-b974-0adab3ba36e2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "2817d84d-237b-4d3c-87c5-9e1bd38f9238", "solution": "import numpy as np\n\nclass DynamicDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(4 * dim, 20)  # Adjusted dynamic population size\n        self.mutation_factor = 0.6  # Slightly increased mutation factor\n        self.cross_prob = 0.9  # Improved crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.75:  # Enhanced probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand2(i)  # New strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Introduce diversity more effectively\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.adaptive_crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def adaptive_crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        return np.where(cross_points, mutant, target)", "name": "DynamicDifferentialEvolution", "description": "Dynamic Differential Evolution with Adaptive Population and Strategy Enhancement for Efficient Optimization.", "configspace": "", "generation": 59, "fitness": 0.2715675763537402, "feedback": "The algorithm DynamicDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8338060047540803, 0.7946443456898038, 0.7564408804265237, 0.8495468387479875, 0.7946031034981182, 0.8378151028368355, 0.8567117275598126, 0.8668872301517994, 0.1755272316981249, 0.5463796969151795, 0.5675178854222922, 0.5346643709947271, 0.5314445816755428, 0.5815252979975212, 0.38891341500900856, 0.672187580010958, 0.05518889776238722, 0.5267125480614263, 0.15373678557794068, 0.09527900451693172, 0.11512321124125613, 0.12137144921359577, 0.14173820626142808, 0.11635018924863727, 0.11840279320667069, 0.10589275135493303, 0.10522698583152612, 0.08538650808655779, 0.11160745130083327, 0.12090507385010352, 0.10448709042713766, 0.10121740583732974, 0.1017179809532065, 0.12019139249728372, 0.134039480368359, 0.006245773256308373, 0.990592812436934, 0.9855310481092746, 0.9892923181162121, 0.9923111396719231, 0.9906735426171477, 0.9921373911653182, 0.9910199774324492, 0.9790416147575014, 0.9901288718752478, 0.41492402050793054, 0.059590998210014234, 0.5685008613850696, 0.6871234807518045, 0.15188589847569112, 0.15327525259538655, 0.6838155450148707, 0.3178846993579475, 0.0738375807093733, 0.22675321619085997, 0.17172877355076688, 0.3076300423893267, 0.2058372837742133, 0.19138987669476726, 0.1603461849569643, 0.3729265132011066, 0.20672559088330322, 0.7554488837806876, 0.1325853967161793, 0.2152465557750235, 0.12120916543648041, 0.1320886410171348, 0.12320542320658001, 0.12914664801293352, 0.19302727688382126, 0.20579859641566578, 0.18294530386437446, 0.2361659503543998, 0.20848109806551274, 0.22891056952035693, 0.14507527360491934, 0.21463801494654766, 0.13012025417822082, 0.11608348254079848, 0.10535754268735453, 0.2638786622183208, 0.0028566953836145492, 9.999999999998899e-05, 0.016754039096869566, 0.04147561218458573, 9.999999999998899e-05, 9.999999999998899e-05, 0.03640352615757314, 9.999999999998899e-05, 0.017324763565295553, 0.020609848236869732, 0.06950042215650176, 0.0763386786189274, 0.14269300271075003, 0.07467964470476396, 0.061463668768468205, 0.03610875211725906, 0.08228305869980101, 0.09755993532401985, 0.03721349073489433, 0.06439671962046778, 0.05284970104243725, 0.20538007115057078, 0.22293449819213507, 0.07667364470360494, 0.09245952498879284, 0.0916870335251797, 0.16461372595319368, 0.15514695930730726, 0.03964912561229361, 0.12082159255645186, 0.006427671533520196, 0.16400597817864582, 0.14059607561050358, 9.999999999998899e-05, 0.1121425827104271, 0.06652237488390889, 0.5224628193118988, 0.5084898673702234, 0.5341461610794903, 0.5489769293217042, 0.5544657289463406, 0.5387929292096533, 0.5321107439584389, 0.5358760061923908, 0.5197217926326427, 0.11292253954881526, 0.09220044538019356, 0.0988027136286973, 0.09910539473917579, 0.09412554398124906, 0.09615387857988933, 0.11496471178964962, 0.09178449674244527, 0.10156849218176811, 0.27558083396081, 0.2639450821475936, 0.18462045357320866, 0.2690911496706041, 0.5078972497769463, 0.14684225703789378, 0.2091119602347461, 0.14248190683363915, 0.1780116983409814, 0.24105871485111197, 0.26644135331732555, 0.3929994681621537, 0.15194987808471327, 0.4872096689368305, 0.3576998252361576, 0.5044032850889675, 0.4340153734011848, 0.4235503707903552, 0.20792666684486671, 0.30923863148460085, 0.18786578409336296, 0.11901701533347808, 0.2867821605321631, 0.2515458319902052, 0.15614033802027627, 0.3061640921941715, 0.36570372946610796, 0.18385786131479176, 0.22276442335335622, 0.19510840507157268, 0.19279767168611306, 0.20668756508034403, 0.20271677385132203, 0.1911872697716419, 0.19186589368945206, 0.2023214740578856, 0.6332211759372357, 0.2146752634761805, 0.24438742878340103, 0.20385513721659698, 0.20884525438827695, 0.22958889578970532, 0.22903054857139027, 0.17280426318535813, 0.18737073160126994, 0.9011757726131442, 0.17300602433850676, 0.1722912437967261, 0.16821210762116456, 0.1998031890951223, 0.13124925913276253, 0.18871862450547827, 0.10706605372548261, 0.10788714413199707, 0.08275472870743383, 0.20924407604169926, 0.6418091668614347, 0.7423181980851031, 0.5492464028060144, 0.21224400720469483, 0.5201557015477648, 0.1279478927425256, 0.15655365215341366, 0.17862319243006863, 0.17819280992664077, 0.18725269255264865, 0.19294168234361964, 0.1836880980341351, 0.18780070530241855, 0.22371392829081893, 0.18771380425173412, 0.1793497642566172, 0.09619604384493219, 0.07490280139933003, 0.07521087703245488, 0.07932125323071026, 0.08397188226310082, 0.0742639413846331, 0.10196739530657739, 0.04474119348444383, 0.08618320680900105]}, "mutation_prompt": null}
{"id": "4b6ede02-b047-40fc-85e2-417abbc161f1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "7d487829-e139-4815-9389-862916f5ddc1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "359d65b5-41d8-4f3a-a62d-77eea3f14659", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "d4ebb574-f9d2-4309-80d1-df3066d95894", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "30771818-a9d6-434f-a2e8-eeddd6664ccb", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "87a15fdc-1e1d-476b-9cee-0988b259d3c9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "4a8f83d5-90c1-4379-bc6c-2c0de02c2963", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "2aa6b689-c968-41b3-ac0d-3207e006aa48", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(7 * dim, 50)  # Further increased dynamic population size\n        self.mutation_factor = 0.6  # Adaptive mutation factor\n        self.cross_prob = 0.9  # Increased crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n        self.strategy_prob = [0.5, 0.5]  # Probability for selection of strategies\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                strategy_choice = np.random.choice([0, 1], p=self.strategy_prob)\n                if strategy_choice == 0:\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand2(i)  # New strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Dynamic Strategy Selection\n            self.strategy_prob = self.update_strategy_prob(fitness, current_best_value)\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(c + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def update_strategy_prob(self, fitness, current_best_value):\n        improvement = np.mean(fitness) - current_best_value\n        if improvement > 0:\n            self.strategy_prob[0] += 0.1 * improvement\n            self.strategy_prob[1] -= 0.1 * improvement\n        self.strategy_prob = np.clip(self.strategy_prob, 0.1, 0.9)\n        return self.strategy_prob / np.sum(self.strategy_prob)", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Strategy Selection and Parameter Adaptation for Improved Optimization.", "configspace": "", "generation": 67, "fitness": 0.275829011030019, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.7805937286605434, 0.7646809368579099, 0.752091175358355, 0.7748955886399804, 0.8080929196928284, 0.778531423972227, 0.7821532544714078, 0.7839649007933717, 0.7543923192292875, 9.999999999998899e-05, 0.35643178243026263, 0.13363353031936986, 0.026204378097717362, 0.4926169189187104, 9.999999999998899e-05, 0.24221109770430915, 0.48295573083284904, 0.3823415539801296, 0.11034777834530796, 0.10836772457188582, 0.10912562223195832, 0.11733462234181624, 0.11362915894328562, 0.15000832527372676, 0.11616420659648119, 0.09426641544936643, 0.16954459252478116, 0.03695483926422638, 0.146801165217189, 0.13088606789263135, 0.11507079067050596, 0.08939536301395945, 0.03831274892221903, 0.10924720177786007, 0.12293481585665778, 0.11715047486668484, 0.9843192500861151, 0.9791000259838667, 0.9885418041266386, 0.9831019568336544, 0.9785118521692426, 0.9675961085575836, 0.9778011064558246, 0.9810333358643395, 0.9860646350945372, 0.674096559462246, 0.646170650714318, 0.6235227835108339, 0.6468659482517602, 0.6835195142668813, 0.6473744684101762, 0.6208263166485619, 0.6467409819469199, 0.6444148687011364, 0.22628027366093162, 0.37776209718699594, 0.792109511608016, 0.20961549953617709, 0.20816210519186806, 0.2061679802870071, 0.23111747807429894, 0.8120623659466286, 0.16458028319778872, 0.2722890719745703, 0.13579910926500816, 0.2081644339267008, 0.20923952064546014, 0.20542902407519148, 0.12788084000351374, 0.20137886069413913, 0.20228759526450402, 0.20279111808659878, 0.1924524115055004, 0.21903602591524318, 0.2197395214661435, 0.1764926382232952, 0.16312873790763005, 0.19348410019113993, 0.2397497878216388, 0.08791394863147362, 0.11816539086620326, 0.005662806736927761, 9.999999999998899e-05, 0.02643662327570162, 0.037335831178553436, 9.999999999998899e-05, 0.007310364223592991, 0.00018738385281247272, 9.999999999998899e-05, 0.0693028708659722, 0.036014535386810875, 0.06471327589712017, 0.06710568226608571, 0.01856291766594187, 0.04233373921291461, 0.007320188939861305, 0.03396587309760979, 0.10824811226894293, 0.04359900718682441, 0.22236598407163322, 0.0326596953964039, 0.04065251632212552, 0.06712522902801354, 0.06430229088390804, 0.08504274221364683, 0.08593053754472768, 0.06779791940113211, 0.05907470931629011, 0.10236580795158734, 0.12826530947075476, 0.17300066184112584, 0.20401933121164917, 0.04452681866144381, 0.22386102035356248, 0.11689843846176629, 0.2330484421415926, 0.07717548002257135, 0.5429792797030584, 0.5151974600668219, 0.5366752676720987, 0.5579792329783864, 0.48047932399890947, 0.5334591750286908, 0.5364140263231723, 0.5540749794137082, 0.5822273358188816, 0.11404941842892435, 0.09114405002482784, 0.11276535021088385, 0.14163103854271608, 0.1224352512764304, 0.12436222498092808, 0.10595229908067705, 0.06728791184368565, 0.08391613147986066, 0.21165855393190813, 0.33936323342311747, 0.20876315943517343, 0.2659381635615512, 0.2621537712942277, 0.29157687406849186, 0.20131921092096794, 0.3392976606965651, 0.19734198010948445, 0.462042219504767, 0.26466141437413193, 0.27874061244596937, 0.4269374192231966, 0.4605692203495516, 0.4683158540951071, 0.319516716029406, 0.45579061879841787, 0.47882474849277246, 0.3131194619373614, 0.2856308098390318, 0.2401619610118988, 0.20890813559121102, 0.25290224653956406, 0.28019474440208547, 0.2638684760089479, 0.3047809033569221, 0.34574730346488236, 0.19327308262137988, 0.19515979770448144, 0.21289076459916234, 0.2072784106329384, 0.21262075850958095, 0.1704409496823377, 0.23890824731563742, 0.24518366894044608, 0.21706232133180925, 0.1825460059381835, 0.21941959956032409, 0.21605413064121515, 0.21589831469261678, 0.18356113119007877, 0.20507712260850508, 0.2061669186668088, 0.2379367792688355, 0.2463222381723401, 0.19643258879760728, 0.21149351064722377, 0.11134820265981271, 0.1775626232604538, 0.19768379062651864, 0.1310766067688124, 0.15211972149266728, 0.16920872305219758, 0.14819716170436137, 0.1516499071924794, 0.2099279791157942, 0.07342340047936102, 0.4705373034208665, 0.17390607580304152, 0.09386958883806984, 0.21239133078264272, 0.3087884909787362, 0.7937397726386978, 0.1830425196212876, 0.18955594453762992, 0.19105698927879555, 0.18837792806415776, 0.2015205382905938, 0.23062819272933188, 0.23970268645843584, 0.19085352663826238, 0.18659022795016555, 0.07786399615753603, 0.11843983458104501, 0.08345681735617072, 0.08124580819247385, 0.09463560034265195, 0.07861451019441534, 0.08351842545578037, 0.09589996492733899, 0.09282342328491855]}, "mutation_prompt": null}
{"id": "826ae792-8ebb-41e7-8d59-8a18aa4ebc5f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(4 * dim, 25)  # Adjusted population size\n        self.mutation_factor = 0.6  # Updated mutation factor\n        self.cross_prob = 0.9  # Increased crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n        self.success_rate_threshold = 0.2  # New threshold for success rate\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n        success_count = 0\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                strategy_prob = np.random.rand()\n                if strategy_prob < 0.5:\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand2(i)  # Refined strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n                success_count += 1\n\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n            # Monitor success rate and adapt\n            if success_count / self.pop_size < self.success_rate_threshold:\n                self.mutation_factor *= 1.1\n            success_count = 0\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(c + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive Differential Evolution with Dynamic Adaptation and Strategic Diversity Injection.", "configspace": "", "generation": 68, "fitness": 0.10037771323156032, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.19.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.1403837325522922, 0.12230525047948382, 0.12596186028909906, 0.15587378175822464, 0.12003214046275501, 0.14074501191959954, 0.14716735260488623, 0.14318055994066003, 0.1157217393820501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03570924573799583, 0.03897148086718427, 0.022175454691329866, 0.021994240397255838, 0.033232057897296774, 0.011785546132173308, 0.022635172005230797, 0.03238587258393022, 0.034577010741090985, 0.02249806867703441, 0.005059289175365467, 0.012700641342497154, 0.01959972157639278, 0.02651970357378597, 0.005270798136852828, 0.025738054296862156, 9.999999999998899e-05, 9.999999999998899e-05, 0.9895193372623659, 0.9824662857027259, 0.9881192021619294, 0.9854304496580083, 0.987788783306553, 0.9877499572876126, 0.9899270594281666, 0.9802984232598236, 0.9906750961842655, 0.03258619183131739, 0.03681298500631425, 0.017637607168424108, 0.03983084395030878, 0.01667905252674029, 0.033404166414988334, 0.05403316133210867, 0.03884549264550241, 0.028430901414776555, 0.14434051794951264, 0.05147679153799911, 0.07214615464485019, 0.10499903534139399, 0.06086591370297245, 0.09852800532758899, 0.060936343952394, 0.08247217155846243, 0.0837917664547162, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018691759756954363, 9.999999999998899e-05, 0.052454918690922336, 9.999999999998899e-05, 9.999999999998899e-05, 0.03331671078361764, 0.0034195727890353744, 0.037466689096438466, 0.03099637171411962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1524362312321773, 0.202701291197539, 0.14838054695461433, 0.1353036230353486, 0.15655753309155462, 0.13941064610526588, 0.15041868709602946, 0.19014513733877347, 0.14223807711487735, 0.029324739023940505, 0.04092298652584336, 0.029938657420258474, 0.018186715787764984, 0.033270277759558264, 0.01842291420219011, 0.03366682486146477, 0.02917947980674085, 0.033623300456066096, 0.10544122628152419, 0.09319775963610522, 0.12982363200218638, 0.1060997328061074, 0.10906922660596752, 0.0765457292363988, 0.09164143429973737, 0.10895756528306955, 0.15067029457995107, 0.12760923069826835, 0.1472984865374698, 0.14352810184653642, 0.15385802025012707, 0.13472935670921082, 0.13356127192538703, 0.14808016558373216, 0.17377774300845283, 0.17757697422656382, 0.0838676539142259, 0.10929937906989795, 0.07268380328825375, 0.0895358510686074, 0.08702979386528642, 0.07318120912623693, 0.08519529889677846, 0.09386031173166853, 0.07637543908896938, 0.1311242709978, 0.1199944822246487, 0.13345086981233123, 0.11188211502889589, 0.13475496736513926, 0.12024722589610737, 0.13000948574973337, 0.09740877043756901, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13517226866743148, 9.999999999998899e-05, 0.1271756298400547, 9.999999999998899e-05, 0.10171423624953801, 0.16119518671258248, 0.11308268714160807, 0.13923917046273215, 0.1207914665021157, 0.09710240843494355, 0.09456215850637018, 0.11211786592165174, 0.13371562924942937, 0.1684046203119487, 0.10051730792859848, 0.09154146221232862, 0.057116100188888574, 0.07369118161262089, 0.10360952496452969, 0.10999618645396947, 0.17546461167250982, 0.15868830800521316, 0.14696390156164107, 0.1615029463201103, 0.14763022729669195, 0.15772219262752518, 0.1848908763000281, 0.15268736007716, 0.15945110681817243, 0.17688990438814434, 0.16326856448865712, 0.02582418224183569, 0.02260633438403381, 0.05602690562092594, 0.050186256162377485, 0.0331229582434176, 0.0281277987706533, 0.018998396754376867, 0.022864441535219382, 0.02127127680591223]}, "mutation_prompt": null}
{"id": "362c02b8-1299-4e4a-a3e3-f1e0f2e2e687", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "2baf8944-5696-4ff8-a29a-654e1d1641b2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "e6e1ff6c-ff97-4d4b-aa44-686200d2840a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "1d247a90-c869-41ab-8f47-a6fc8f0fb8e3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "92fba581-9a89-4d05-a5f6-b36965396cc7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "cad727c5-0475-4df0-acd4-f6996525f50e", "solution": "import numpy as np\n\nclass EnhancedExplorationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(6 * dim, 40)  # Adjusted dynamic population size\n        self.mutation_factor = 0.6  # Adjusted mutation factor\n        self.cross_prob = 0.9  # Higher crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.65:  # Modified probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand2(i)  # New strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            idx_to_replace = np.random.choice(range(self.pop_size))\n            self.population[idx_to_replace] = 0.5 * (self.best_solution + self.population[idx_to_replace])\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedExplorationDE", "description": "Enhanced Exploration Differential Evolution with Adaptive Parameters for Improved Convergence.", "configspace": "", "generation": 74, "fitness": 0.16282156449678123, "feedback": "The algorithm EnhancedExplorationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.2489644875502136, 0.26733188862162593, 0.2653891891487534, 0.30900001460254967, 0.32851836877625284, 0.32925677240799067, 0.28259732397973325, 0.2713072432922907, 0.30321853616368677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07896099512664478, 0.06238656758679484, 0.07637552960297822, 0.09250571298968202, 0.0802924156094772, 0.09373332292688341, 0.0826002863104286, 0.09727159735848567, 0.09375982602688582, 0.08635530054974738, 0.06826122018991931, 0.0698757942330136, 0.05931169205586195, 0.05960050532897698, 0.053208125737686185, 0.0835559653076694, 0.07220647519273604, 0.05421148202252879, 0.9708025010799847, 0.9873956147540498, 0.9833696833778971, 0.9789452051011098, 0.9881397896932014, 0.978912707543455, 0.9817708488588455, 0.9728934570130289, 0.9791683804002018, 0.1461687464985829, 0.16945574444439093, 0.15144722250234122, 0.15905706248663953, 0.21318817982993388, 0.15561041792424313, 0.16109872472077336, 0.17106452774873016, 0.1876708439131839, 0.1779034532963888, 0.16138849204743333, 0.1888571134879199, 0.18152707988412864, 0.20888267529381932, 0.19437712096004944, 0.1925928055695042, 0.20292440933006617, 0.19328701365014989, 0.08330933036762433, 0.0738976098555355, 0.08286037095754561, 0.1245645313158582, 0.0766272480359943, 0.11124095520384325, 0.08175345130038147, 0.07469434126703, 0.08093869964578593, 0.08705379892731324, 0.08850236647856291, 0.10999764243437293, 0.08127642567089388, 0.06191360852993455, 0.03864940639112324, 0.0698994549937102, 0.0024069328486732156, 0.05177013784550544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056762269946814214, 0.09969287422734996, 0.07897806031126897, 0.01990137547602766, 0.0020490572158401443, 0.006376833363226586, 0.013492327627489198, 0.05859333143355938, 0.0393923160001215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04045077656566953, 0.027667952585490818, 0.04440435184311975, 0.03946861252834932, 0.04719355003092096, 0.023918926179989808, 0.05479828640312934, 0.06266420737515932, 0.04408602652634985, 0.28148138715034676, 0.2703377805768068, 0.25996956600597665, 0.3170715652880961, 0.2797924776635422, 0.26516997799809805, 0.30038163594355105, 0.268816290435993, 0.2908842695934125, 0.08650257716377419, 0.09120056495323536, 0.11881141154110142, 0.08593944572647028, 0.08352029351746626, 0.07554215480693005, 0.07385108877287838, 0.06997884508260999, 0.08825224342837779, 0.2103710723315434, 0.14437627266710973, 0.13833569264890522, 0.15454155754434773, 0.2228022076578403, 0.17046557991538558, 0.23113122181433876, 0.16094082588458747, 0.18874169980844868, 0.21530032349336448, 0.21847091043424838, 0.20897119595311342, 0.21325368163306746, 0.20873263172297152, 0.18577569177698683, 0.2251967703483525, 0.2296592190613258, 0.22901202968109102, 0.15650306442964756, 0.17305778961631657, 0.09634891860370676, 0.14170884420255403, 0.15837934852177038, 0.1334447373310088, 0.1756011436201912, 0.16515691438954405, 0.17988934780389076, 0.17087627102185465, 0.17443875519797092, 0.17709329430718734, 0.16270909210636897, 0.1890676093815583, 0.17456000990158405, 0.16544186176655273, 0.1661220698946394, 0.1977520063226561, 0.16771527884018955, 0.17138386573904263, 0.1717732872107024, 0.16341240670279822, 0.16081080082023602, 0.16557517441500313, 0.1617731133164091, 0.1641626349163029, 0.16932985256312894, 0.16530222565750463, 0.1669985840931133, 0.15301275195887798, 0.3418318596179616, 0.166655950236834, 0.18396606351269595, 0.16541547698172543, 0.10663512836512434, 0.2651707505981843, 0.12408100363901864, 0.1672370556126056, 0.17650594688061505, 0.22038414282696028, 0.21755407561011364, 0.18306577291173043, 0.2100686543269379, 0.20669461171508496, 0.20274668734099655, 0.17636429722900726, 0.1869980048024903, 0.17841754669964593, 0.18567595543361726, 0.19008308639167992, 0.17583647035199834, 0.19662083172691192, 0.17165967728036813, 0.18930756329608822, 0.0748310737871134, 0.06353310099155018, 0.07305196574436956, 0.0709365983975957, 0.07373296554460196, 0.06262990905380994, 0.0691512307175588, 0.07171866577323649, 0.0660086854093952]}, "mutation_prompt": null}
{"id": "4b49c8db-d92d-4a1e-91d9-dad0fc9232ef", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "ae1850db-5afd-424b-a0dc-581e9010cc8f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "b5eeb53f-4860-4d99-8ef4-19bdf8bea965", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "3cec0210-e119-4234-8e76-c60b285b6a4e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "8f6cfae8-0069-42a8-ab9d-4337307c1404", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "c7e692ca-5ca7-4f30-9523-1c5dc7392487", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(6 * dim, 40)  # Further increased and dynamic population size\n        self.init_mutation_factor = 0.6  # Initial mutation factor with adaptive strategy\n        self.init_cross_prob = 0.9  # Initial crossover probability slightly increased\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            self.mutation_factor = self.init_mutation_factor * (1 - self.evaluations / self.budget)\n            self.cross_prob = self.init_cross_prob * (self.evaluations / self.budget)\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.75:  # Higher probability for best variant strategy\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand2(i)  # New strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Enhanced diversity preservation mechanism\n            diversity_idx = np.argmin(np.var(self.population, axis=0))\n            self.population[diversity_idx] = np.random.uniform(self.lb, self.ub, self.dim)\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(b + self.mutation_factor * (a - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Control and Diversity Preservation for Improved Optimization.", "configspace": "", "generation": 80, "fitness": 0.20959660280535208, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.46529159928589947, 0.45600617025271717, 0.45655076453379106, 0.46674529152227817, 0.4308274554051402, 0.47838636287997016, 0.43467275498437097, 0.443632768290961, 0.45835000012350946, 0.1102649923557033, 0.05057422387972965, 0.0525403647278494, 0.09033308944277652, 0.07799904638774391, 0.07799568114195177, 0.05970721617074737, 0.0821573582452243, 0.05630010647786998, 0.11939165409296604, 0.10248317213844516, 0.1122473811512682, 0.08221127687234309, 0.10430248522699581, 0.11749874895663104, 0.10890823411389061, 0.10416241058207398, 0.18931349053291768, 0.0912090398029628, 0.08083233696769199, 0.08561833573052768, 0.0794434089804903, 0.0989002298186693, 0.10077667382078559, 0.08769826883930221, 0.10517651172917086, 0.15732357238259542, 0.9411767368892072, 0.9243980971070211, 0.9590919358278895, 0.9425580956965574, 0.926224071120584, 0.9482240362256211, 0.93200513585535, 0.944318758932069, 0.9248701787524152, 0.2895938061472433, 0.23573450134427, 0.2781695231691097, 0.2693400903253913, 0.27551814055288737, 0.2811405624203227, 0.24422766391009276, 0.25677544628559035, 0.20935167162928103, 0.27135134922289816, 0.22109570414837687, 0.2047003723535109, 0.2010842516103536, 0.20844390298128312, 0.2904742396226434, 0.2005142278576042, 0.49618174909849533, 0.46065088181997504, 0.1276193720768577, 0.10386138924258426, 0.12264999187813597, 0.12694898334739724, 0.11067954107393108, 0.12473666898800817, 0.12485914788280639, 0.10871934368228542, 0.1265244911117237, 0.1066177129017728, 0.1434177149685324, 0.0947028514459185, 0.11223716026202057, 0.10760508952327841, 0.10707621923663468, 0.13357299939257428, 0.13681934793150408, 0.11992347721574004, 9.999999999998899e-05, 9.999999999998899e-05, 0.00983216618379179, 0.007191716773685242, 9.999999999998899e-05, 9.999999999998899e-05, 0.031542105190263126, 9.999999999998899e-05, 9.999999999998899e-05, 0.0452301038422962, 0.10330004868172549, 0.04005498977955635, 0.03167683821322731, 0.032360412347335665, 0.04830654292957426, 0.06586487462441781, 0.02712811787723768, 0.0825573115695506, 0.056845954983104074, 0.012557063168323612, 0.021202821669906946, 0.029420358294148685, 0.03098121042406221, 0.023557240928809953, 0.04903561757944497, 0.01795808653191977, 0.03934094810076183, 0.0626756709459827, 0.09278721350666053, 0.0821361221237108, 0.09360195807116656, 0.09411058295811203, 0.07263359887815846, 0.043653994047068045, 0.09632640922072255, 0.07532611385485288, 0.3947448888047649, 0.36581512764335866, 0.38673205746580475, 0.38676233804642335, 0.3717569296153683, 0.3663167180523488, 0.3625499190018979, 0.36989265377476244, 0.3802255458161723, 0.09753931988464282, 0.09646945731541223, 0.10316666166018362, 0.1058398403173314, 0.1011549220192759, 0.10287621918353285, 0.0955805807738942, 0.09117070722852516, 0.10889592821334426, 0.1553828882344549, 0.17013816303567486, 0.14976436478887845, 0.1910253453384716, 0.31903813567586026, 0.18131254276927022, 0.20253969690980944, 0.15220352197176767, 0.27602500106172034, 0.27342642934898154, 0.27384772028220006, 0.28597551847324987, 0.2676706794616325, 0.27635274598179027, 0.3027891728249609, 0.2679312016278791, 0.28150163950069396, 0.28199427790009923, 0.21127293321853746, 0.21103760479247125, 0.21710768258356716, 0.23373651176825194, 0.2287919658937616, 0.22887612275943248, 0.22651185358264847, 0.22438837606264528, 0.16288418813012318, 0.20291477706529004, 0.18835997235523927, 0.18510220531824229, 0.22798028033583673, 0.20392705521103438, 0.19915132286431203, 0.1975902703672131, 0.19048307647462592, 0.18357769170327765, 0.2952956732136581, 0.18978099214947397, 0.1859172428771272, 0.1746078198762292, 0.19472727859528494, 0.19316793285223643, 0.18424360027894515, 0.18950579538855628, 0.1879764257563462, 0.584079607169963, 0.19361730487468742, 0.5605423529229316, 0.17372093828085966, 0.1670985079392483, 0.18944731427141448, 0.15620684239995297, 0.5851941017562974, 0.17817190916568615, 0.24171426997167134, 0.16951055173141727, 0.5684753867885904, 0.15765658154055695, 0.1923221458675427, 0.1441875428436462, 0.20154212292973483, 0.3482308700796396, 0.19935794933976103, 0.19496400450269114, 0.17780596671063853, 0.19338393867091286, 0.1887220954102946, 0.1971135363804266, 0.19938826384787134, 0.22787436642260717, 0.1803161256839494, 0.19444318794005833, 0.07981437684081683, 0.07542350809417409, 0.07715813752153322, 0.07629618773135594, 0.07509746594091682, 0.08065683238038779, 0.09744244985293882, 0.07863996618721902, 0.08050868026955282]}, "mutation_prompt": null}
{"id": "6cd03588-b4bc-438f-b3a5-f1251c091107", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "cd1bff1d-7717-4747-9179-3347775068a2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "59378c02-34b2-4224-90c7-1b5ae7e686f2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "c02d8091-b9cb-4c1f-95b1-6edbc0aca312", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(7 * dim, 35)  # Further increased dynamic population size for diversity\n        self.mutation_factor = 0.6  # Adjusted mutation factor for better balance\n        self.cross_prob = 0.9  # Higher crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n        self.diversity_threshold = 0.15  # New diversity threshold\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.5:  # Balanced probability for variant selection\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            self.apply_diversity_mechanism()\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n    \n    def apply_diversity_mechanism(self):  # New method to maintain population diversity\n        if np.random.rand() < self.diversity_threshold:\n            random_idx = np.random.choice(range(self.pop_size))\n            self.population[random_idx] = np.random.uniform(self.lb, self.ub, self.dim)", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Balanced Exploration and Exploitation using Novel Diversity Mechanisms.", "configspace": "", "generation": 84, "fitness": 0.14591893523165417, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.1882262263449409, 0.24891517746444802, 0.22280727352876695, 0.28019141048247453, 0.29663304948878344, 0.2576921491225215, 0.24621731657987178, 0.24264466270264207, 0.23554108452814826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0612099893690784, 0.06859158030517043, 0.10556130969609567, 0.05755869656882806, 0.0668162929671402, 0.06666872617247388, 0.09152377569870018, 0.07333031879602425, 0.060010018031904644, 0.03580730769713758, 0.03806488449108891, 0.045883069934353315, 0.04411476055014241, 0.050009528860427754, 0.035641153091756084, 0.0472184835046493, 0.06275154567919239, 0.05667514974022547, 0.9894881524547136, 0.9805360247796973, 0.9803359098859963, 0.9790970638852952, 0.9741547871187657, 0.9711590512934066, 0.9794220892016062, 0.9808365798345959, 0.9869739028040933, 0.13132159290426193, 0.10656709650953033, 0.09995051943617494, 0.11373352064679876, 0.12254335685442619, 0.11114046744838035, 0.1201660341902121, 0.12716969559990798, 0.114479586518062, 0.14882603575475428, 0.15042609229816117, 0.17894173958451443, 0.1926483203081626, 0.18029268421873368, 0.16670746939728376, 0.21422692130295884, 0.19494805510698088, 0.14266864920583888, 0.022812122771482812, 0.04216909490144949, 0.061411903187892136, 0.05240693079291692, 0.030524507553984392, 0.03660190614283676, 0.028632072575070167, 0.039702902208583524, 0.019152031383206314, 0.03590230741557299, 0.0731386784512128, 0.04933159826830669, 0.028576906492609355, 0.023018073573241926, 0.0033228269467645566, 0.010895867036697982, 0.046442108533400694, 0.06676064958341144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07488325375205473, 0.0491428373544619, 0.05055175146897073, 0.04091158703338893, 0.05705712222649795, 0.055378494523347976, 0.0431441025974284, 0.05167487095401013, 0.039835584869299945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007822585980014396, 0.013072871879168946, 0.007372968074175645, 0.006562534716116675, 0.0404685696272874, 0.016240373803518393, 0.019291908939433777, 0.023801148319050336, 0.03599656691842501, 0.22515664945461256, 0.2376995038610924, 0.22337742245218217, 0.2422851977950905, 0.2372874803054792, 0.24091579464354684, 0.23358078142220773, 0.2375040436174949, 0.2143198509167007, 0.07025003023045773, 0.07806025127545091, 0.07854394613965199, 0.07035232347420006, 0.0512352349088534, 0.058463571746590115, 0.06251015078801248, 0.05932628781945137, 0.06687203831528965, 0.14623846495983128, 0.14303066991747804, 0.14394976620919953, 0.1622434697402093, 0.15124000549579908, 0.15371991897323367, 0.15968089430738497, 0.148581591954147, 0.13577283533973972, 0.1949191158583813, 0.17861449473076096, 0.18165372465507623, 0.17729448699044847, 0.1702918320345036, 0.16882552406080975, 0.19340864486559772, 0.19093346130789057, 0.18898356788109627, 0.13203388124095505, 0.12886053810074993, 0.16442627017232914, 0.14207750325180768, 0.12236187401474652, 0.1269058146800104, 0.13478581532502687, 0.1421076716289521, 0.1257571300266438, 0.15655893405235655, 0.16215891393255955, 0.15821976608245802, 0.17107515181925315, 0.16856280958323422, 0.18041675139639757, 0.17030999191769847, 0.1708209031299759, 0.1733397716485361, 0.1617036040725638, 0.15408149566478935, 0.14944747283148385, 0.15683307911996303, 0.1540160310557538, 0.17966490778717548, 0.15090031676394433, 0.16771009326631758, 0.16765665655744688, 0.3071858777767671, 0.2868309820105973, 0.1621203888631213, 0.18849417549862968, 0.15334722694962277, 0.17811126765140384, 0.21731155874064467, 0.21441349204193438, 0.16854766429087953, 0.16764915692793325, 0.16604072209601872, 0.16596421114231685, 0.16405500593726774, 0.12313536158370753, 0.16385384939372927, 0.20987749008229006, 0.20139135617776405, 0.20434267377410864, 0.18171119936313174, 0.1764584125461377, 0.1918764898430685, 0.1837071022224923, 0.1854996148670559, 0.1856835854156006, 0.19236980351357402, 0.18433351532536757, 0.16655737385799751, 0.055467662581051846, 0.05764540457680356, 0.05686725007157856, 0.058612560728916296, 0.06635342706081593, 0.06729264132003299, 0.06771385107606731, 0.057299665075803974, 0.05867385128639324]}, "mutation_prompt": null}
{"id": "b6a3065c-6e66-4383-afb2-8fa7dc39bb53", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "fa8c88ce-8442-4690-8a7b-19d3dd21d6bd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(10 * dim, 40)  # More adaptive population size\n        self.mutation_factor = 0.6  # Adjusted mutation factor for better exploration\n        self.cross_prob = 0.9  # Increased crossover probability for higher diversity\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.8:  # Higher chance for best strategy\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand2(i)  # New strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n            \n            # Maintain diversity while keeping best\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c, d = self.population[np.random.choice(idxs, 4, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c) + 0.5 * (d - a), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedAdaptiveDE", "description": "Enhanced Adaptive Differential Evolution with dynamic population and mutation adjustment for improved exploration and exploitation.", "configspace": "", "generation": 86, "fitness": 0.29306792622657685, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.7782696203846129, 0.7712124714910507, 0.7573230970646153, 0.7894270821012453, 0.7717802326989295, 0.7989731508483522, 0.7538877309657359, 0.7976703640412426, 0.7766285544755354, 0.40536723449602774, 0.42832830397578847, 0.07140499611402351, 0.46261052928632085, 0.3817350665483952, 0.11192672572487539, 0.16441860612668968, 0.35816640220044227, 0.5084875047901314, 0.11062341512160534, 0.1500565292715308, 0.11321188817632333, 0.14249337639939708, 0.12857763432168412, 0.14354888229378848, 0.16152524969685633, 0.11044847112592926, 0.10905009919776842, 0.12704341290211485, 0.11991919685303398, 0.13027329697092738, 0.1011271068802897, 0.09958082130532386, 0.1271102774636793, 0.09942939873547496, 0.07342567669431888, 0.10264398091191684, 0.9730912890879512, 0.9764694554123741, 0.9858677623734269, 0.9821748508013903, 0.9729025233275245, 0.9812666832680565, 0.9816496644635527, 0.9776358358299886, 0.9834377716470486, 0.5470659537276306, 0.6160829608507321, 0.6240416681372144, 0.613834804716564, 0.30627595376094674, 0.4894989714043807, 0.6322047013136252, 0.6601032750444388, 0.6479530295622831, 0.22179827240135253, 0.2207972575914986, 0.2249344078790726, 0.7883719965306403, 0.3471304329201781, 0.7963713468300333, 0.23388387689922696, 0.7785104141576814, 0.22959922705331093, 0.26104716416732576, 0.20474432117220898, 0.2224003419354763, 0.2445867346768389, 0.24388478172787886, 0.12400662402700457, 0.2687434496104387, 0.20311691424606693, 0.20959959136132023, 0.21720324669703073, 0.22714076208149037, 0.2275105311049328, 0.25192391600219743, 0.20750967601945636, 0.23693883791652193, 0.18207385094204254, 0.1444024986140101, 0.16399818849726233, 0.007167694205358788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019453271248029314, 0.107790993770846, 9.999999999998899e-05, 9.999999999998899e-05, 0.053348694659286267, 0.05095804660142389, 0.11731204907161807, 0.07800702412906269, 9.999999999998899e-05, 0.010145901246514044, 0.11284978907586207, 0.06199737961653495, 0.058362256965546866, 0.02981432995441169, 0.05771013043057205, 0.04218098473646792, 0.14211845566829684, 0.24100092952352736, 0.06376427372718974, 0.08797446143093623, 0.10480457404539523, 0.146573437804694, 0.09500669654071348, 0.015220318238217678, 0.23553110923099974, 0.2609145697764462, 0.22560036624766822, 0.18367901675274, 0.09252210269491912, 0.12428795645403701, 0.1254553091728816, 0.5307046493754324, 0.5288033956322333, 0.5606448589465012, 0.5378340555729961, 0.557524853173135, 0.5630498547096423, 0.5305775980086975, 0.5281217022455689, 0.5229609060311532, 0.12336934650383169, 0.12970271467567762, 0.08091260777220399, 0.09812333058101197, 0.10508223055177224, 0.13223221970795984, 0.1437081677544476, 0.13219188341172172, 0.11999772129395792, 0.11163577644226119, 0.25295378187536466, 0.21104238746082316, 0.2917483670974311, 0.25831104754629464, 0.18655339841821972, 0.3080505042197209, 0.4359298350982145, 0.19864520908189287, 0.28895284229189433, 0.37390829115132374, 0.45013070180043335, 0.4256832545001018, 0.24708501172841824, 0.4861775935776532, 0.4730879206860973, 0.2766587755099086, 0.48788757609579925, 0.37449631873556166, 0.30199822550991073, 0.2857159480647823, 0.3285067774624971, 0.3210246390912058, 0.28178663351720823, 0.23178316452242276, 0.2610446006894942, 0.2496444796951507, 0.20071704206957208, 0.17614389623133575, 0.1910043682610002, 0.21259849179352996, 0.20667005895424628, 0.22547535377275163, 0.20038505109759597, 0.16840830539237084, 0.20970880273222603, 0.18810882809118257, 0.24126787468991173, 0.18777898769551926, 0.5628383198559187, 0.18294472396882244, 0.21914335172890742, 0.2256943636612283, 0.48029628976884287, 0.1901966758858078, 0.19865038877739905, 0.1530108902998385, 0.14738792976050463, 0.15736754888758664, 0.19849445377952657, 0.19964742366245225, 0.14205810742905922, 0.17153086730474565, 0.8533670200785832, 0.7278708206820902, 0.20920938283946422, 0.12673372025298069, 0.21016921857375426, 0.1688506413349976, 0.1521301488467609, 0.21235782803649716, 0.8173380833181655, 0.7786896198774106, 0.18171139821766769, 0.1743408018795517, 0.19323610103250288, 0.19832375544783987, 0.20235876596349123, 0.18655772244549473, 0.1919327921244116, 0.18832059560685654, 0.20271859669358405, 0.09310708053108685, 0.08028009429078864, 0.08257753872969242, 0.07428418907303458, 0.07623697928585937, 0.08783394191677196, 0.08134168286314158, 0.0795519365328683, 0.08398372662754083]}, "mutation_prompt": null}
{"id": "4596fc44-8db8-493e-9b5d-19ba4b7de803", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "b4416354-0063-4eaa-9a06-f49f42ac6965", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "42568aba-74c1-4a85-86ce-ef1a30c6fb8f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "6d4f73e8-28b0-4c59-b660-6938b43921e5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(6 * dim, 40)  # Increased dynamic population size\n        self.mutation_factor = 0.6  # Adjusted mutation factor\n        self.cross_prob = 0.9  # Higher crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.75:  # Higher probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand2(i)  # New strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity using alternate best solution\n            if np.random.rand() < 0.2:  # Introduce controlled randomness\n                self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand2(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c, d = self.population[np.random.choice(idxs, 4, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c + d), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Reinforced Diversity and Dynamic Strategy Balancing.", "configspace": "", "generation": 90, "fitness": 0.15183481330369433, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.27836144573133326, 0.28103141380214003, 0.24916529064070858, 0.3002957170373859, 0.31748841789123816, 0.31485450865867015, 0.1819643862972321, 0.25886094098960866, 0.29714687587054955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07575512528137607, 0.05688460875691248, 0.09073339939069791, 0.06213847497289915, 0.08485366327318367, 0.07943378214502739, 0.05376576137854283, 0.03725834202652878, 0.04642630349189003, 0.06685036028989821, 0.08181986029059318, 0.05360533385073463, 0.05198314065436571, 0.05913380083448194, 0.06335894438586187, 0.06685320756843016, 0.06385409000820219, 0.06979805071733569, 0.9848409334609572, 0.9874289243327727, 0.9904584769387935, 0.9796244840410018, 0.9792238879004176, 0.9819252760111088, 0.9842176306067221, 0.9846208871522368, 0.9821788554270791, 0.14880990578769016, 0.10144633109932844, 0.14905247654509257, 0.12226104703778906, 0.13396042231299776, 0.1276022317397033, 0.11455806729987872, 0.13278982817226348, 0.0876274329406842, 0.19676199112128345, 0.1681499713680933, 0.16862324803069728, 0.17577729972826306, 0.17955847494581212, 0.18050185249644002, 0.21322358952544107, 0.18665010300898244, 0.17879096226494617, 0.06142271076270844, 0.044349406895883514, 0.0721214352250199, 9.999999999998899e-05, 0.07194202005521033, 0.08566429478081605, 0.07348618917415606, 0.013037667647852524, 0.07291496694247412, 0.04797576643915158, 0.09941398027347892, 0.05345021797799765, 0.013074294330216785, 0.0009650916125799602, 0.03185235845155043, 0.05704656721092527, 0.07663254919417162, 0.019704106513507624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012718262998062557, 0.0046464135721829836, 0.013916586830514333, 0.010679636624512878, 9.999999999998899e-05, 9.999999999998899e-05, 0.028022262131846443, 0.007068300898881552, 0.006871454535649302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024708968895872374, 0.032290279288316515, 0.0013176863360991886, 9.999999999998899e-05, 0.047796858428332256, 0.018618593209707934, 0.038470295463061355, 0.030168152532410897, 0.049026462323188746, 0.271282067291751, 0.28895939234281454, 0.28118477411536114, 0.28267366795672255, 0.27487471678930686, 0.2726080358321741, 0.2814398965527214, 0.25888537614091267, 0.27818279852715777, 0.055171408602582184, 0.10026055917716326, 0.07571198799917744, 0.08270500703302186, 0.07170555496237463, 0.07601348808827857, 0.06023080194862618, 0.07214898711785533, 0.0679737309826145, 0.21621846611195994, 0.1980293284641268, 0.14385645388626112, 0.12649236292416977, 0.15622915122488246, 0.16755380449500956, 0.14516370291879888, 0.15340103529152438, 0.18638384422688192, 0.21250260713688818, 0.19783034005329658, 0.1830411049721674, 0.20944578214182497, 0.1844757898382251, 0.1679965932187535, 0.22351026340228775, 0.22185737484058887, 0.20248472517032512, 0.14421044185231602, 0.13718109107836118, 0.13329935271916327, 0.14283613730876965, 0.13828791856446876, 0.14110126472095086, 0.159357273945542, 0.18233752390021385, 0.11901289032296392, 0.18155968539922818, 0.13639405511463298, 0.17584306426358454, 0.1998788537484698, 0.13565471015060226, 0.16240921338851844, 0.18013773845085956, 0.19644532461931052, 0.18104938414520566, 0.172056384213232, 0.1653251423657135, 0.169922130218084, 0.17506468719236568, 0.16760692862070392, 0.17191522543400373, 0.1745089719675461, 0.17145814938565818, 0.16749966278450246, 0.3838202219425564, 0.11616332388105854, 0.15392195914327855, 0.17487941647213445, 0.1581662768642944, 0.1726133852987607, 0.25224693391747266, 0.16021507503953547, 0.16800298728717533, 0.2558593846658235, 0.1941945894741428, 0.14284129775299803, 0.08202839325224598, 0.20388832256314227, 0.1113789963346068, 0.2071773301208122, 0.1259536829297836, 0.17893411557444727, 0.16624893333917823, 0.18534287845346964, 0.1737163632413351, 0.1691478474013589, 0.1774009335724317, 0.16898129398803208, 0.17487964594131444, 0.17903876021178566, 0.20297744436533638, 0.0778936033468326, 0.07000831843711908, 0.08070058023848137, 0.0670671658789388, 0.06417325524945028, 0.06777520456491604, 0.06953453665680986, 0.06935780176882722, 0.0701375516858892]}, "mutation_prompt": null}
{"id": "49ccec7b-08ee-42fe-9a12-158661d5e165", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "b7f3b27f-835c-4cda-ab56-a63388e26f97", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "859335cf-2775-45a5-b2c1-8862a16b87d7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "1874a4ee-d9eb-476f-9921-8aaa0f8a8265", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "52145df0-8979-44f2-b85e-25297595b8a3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "9dbc6f3b-37e5-4345-996a-d9790bc1e0da", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "a6dd5244-bb4f-4e2c-9051-7533286af6a2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
{"id": "8e526493-ee7d-4b7e-8615-126cfd90591a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(7 * dim, 35)  # Further dynamic population size adjustment\n        self.mutation_factor = 0.6  # Adjusted mutation factor for exploration-exploitation balance\n        self.cross_prob = 0.9  # Increased crossover probability for better information sharing\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.6:  # Adjusted probability for best variant\n                    next_gen[i] = self.mutation_variant(i, fitness)\n                else:\n                    next_gen[i] = self.random_mutation_variant(i)  # Alternative mutation strategy\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Enhanced diversity mechanism\n            if self.evaluations % (self.pop_size * 3) == 0:\n                random_idx = np.random.choice(range(self.pop_size))\n                self.population[random_idx] = np.random.uniform(self.lb, self.ub, self.dim)\n            else:\n                self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def mutation_variant(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.perform_crossover(self.population[index], mutant)\n\n    def random_mutation_variant(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.perform_crossover(self.population[index], mutant)\n\n    def perform_crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Improved Diversity Management and Dynamic Adjustment Mechanisms.", "configspace": "", "generation": 98, "fitness": 0.1556212545310233, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.244722807308402, 0.22615589436329042, 0.2875592595380091, 0.3424622116576276, 0.30124686752559393, 0.2901346017666466, 0.2672819788490318, 0.2582433031654757, 0.2555886325107334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07527876392021193, 0.0726871415789605, 0.07759205290104687, 0.08689849080937218, 0.0674365154397748, 0.08131411086017382, 0.07026187753679025, 0.07224551679045543, 0.07410755474401687, 0.05740135950393488, 0.04779975746617515, 0.05305908994563646, 0.049781277066100804, 0.056075168083562166, 0.046281148872515554, 0.05713306424874187, 0.05308161719459825, 0.06962116247124772, 0.9850304784208324, 0.9905334922131769, 0.9805230712306534, 0.9880343274891734, 0.9867973309874727, 0.9586569993516769, 0.9887886120235424, 0.9832979331752927, 0.9870737877508827, 0.13891926532739507, 0.1548839347126708, 0.1354762517678273, 0.13726318001923954, 0.1273647006157127, 0.11971923513022409, 0.1577901169764706, 0.13649971991347487, 0.12316944353146264, 0.16547772125000282, 0.16105096136560515, 0.18843522878149932, 0.17338368955174976, 0.16321759773480293, 0.20280467168174088, 0.16412810499451658, 0.18121485772574442, 0.2145238215127232, 0.058911025500644754, 0.05400799280008273, 0.02335604135435876, 0.07066474977671677, 0.05443651148864881, 0.06519500215797958, 0.032893005729820124, 0.08546319440330585, 0.03527599054528341, 0.07167162693792706, 0.05782713800602901, 0.04377978279213002, 0.028233211446994755, 0.08134894420866168, 0.038906227682990124, 0.02547215487264043, 0.061945119301646256, 0.055669399211421666, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018396973462216915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06582825452505803, 0.07229633342881303, 0.03767485049342145, 0.043172967104155524, 0.07588499035125351, 0.06449955346725877, 0.0401610387922241, 0.03921603216363223, 0.050994908870319655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012938180608630834, 0.02192348522386689, 0.010405484012361188, 0.015920268017153294, 0.027211479967261365, 0.03948780405900654, 0.02876441068252822, 0.03152841455610922, 0.03118125384642534, 0.2631227829511069, 0.2793536243246495, 0.27253805918326957, 0.26716885313707495, 0.28649080841053864, 0.285742999064142, 0.2549671707081299, 0.2593025757058969, 0.22849341625649833, 0.06614580284211258, 0.07556051102187977, 0.08604891791197966, 0.06967078780637381, 0.06931991634619916, 0.06860679746734788, 0.06325522608137812, 0.06810564719569867, 0.08973305921215557, 0.14153221778186198, 0.15200685075646125, 0.1465801434406636, 0.15884467022074367, 0.18760243921582787, 0.15361618686125678, 0.18777273017989982, 0.17827902607334367, 0.1806825393719086, 0.20921632832206316, 0.19163076040425375, 0.1976064958218322, 0.19782954756319282, 0.195010580879174, 0.19803681167063725, 0.18931482914176656, 0.21029757434830532, 0.20717274056297297, 0.15234131157701136, 0.14131772741900517, 0.1383906280891799, 0.13801222237523703, 0.13204663423312524, 0.12491023948806035, 0.13589582570493708, 0.1550385414126607, 0.15180681122016504, 0.19146022253546002, 0.17965120424082437, 0.1823742600267103, 0.17486615844750453, 0.1652976686849572, 0.15620267381113917, 0.166884588205633, 0.23616962206861458, 0.1848972370273888, 0.1570904684280796, 0.16452655483908207, 0.16174724226534176, 0.16003606803378256, 0.15948651267529024, 0.18188061232344555, 0.15393418711866502, 0.1586561999778081, 0.16128573051038309, 0.3366698541311063, 0.2885855196821646, 0.1640382687180687, 0.1596946849709988, 0.17242367845910178, 0.2932936304514716, 0.18587191467392405, 0.19752332075647983, 0.24748968847110386, 0.16770502208961824, 0.18969039720457526, 0.12327341985859075, 0.14808690971020555, 0.16473968161284935, 0.20065650980704053, 0.20535460476345657, 0.20370975017347615, 0.19980832449478758, 0.17871028781632559, 0.18105519366768985, 0.1963762270389089, 0.17929916350021435, 0.1949044114525751, 0.18140795753407624, 0.19927398876649216, 0.1896818651153862, 0.18328938291159513, 0.061185440655237455, 0.06598111880816082, 0.05523212784640785, 0.06230423687972653, 0.06292742278230179, 0.08223958566212419, 0.06188906046314113, 0.06710209362032515, 0.06575336608255533]}, "mutation_prompt": null}
{"id": "c464de04-327e-4651-b2f4-f9cf1ddd3aa1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = max(5 * dim, 30)  # Increased dynamic population size\n        self.mutation_factor = 0.5  # More versatile mutation factor\n        self.cross_prob = 0.85  # Adjusted crossover probability\n        self.population = np.random.uniform(self.lb, self.ub, (self.pop_size, dim))\n        self.best_solution = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        fitness = np.apply_along_axis(func, 1, self.population)\n        best_idx = np.argmin(fitness)\n        self.best_value = fitness[best_idx]\n        self.best_solution = self.population[best_idx]\n        self.evaluations += self.pop_size\n\n        while self.evaluations < self.budget:\n            next_gen = np.empty((self.pop_size, self.dim))\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.7:  # Increased probability for best variant\n                    next_gen[i] = self.variant_best(i, fitness)\n                else:\n                    next_gen[i] = self.variant_rand1(i)  # Different strategy variant\n\n            self.population = next_gen\n            fitness = np.apply_along_axis(func, 1, self.population)\n            current_best_idx = np.argmin(fitness)\n            current_best_value = fitness[current_best_idx]\n\n            if current_best_value < self.best_value:\n                self.best_value = current_best_value\n                self.best_solution = self.population[current_best_idx]\n\n            # Reinforce diversity\n            self.population[np.random.choice(range(self.pop_size))] = self.best_solution\n            self.evaluations += self.pop_size\n\n        return self.best_solution\n\n    def variant_best(self, index, fitness):\n        best_idx = np.argmin(fitness)\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b = self.population[np.random.choice(idxs, 2, replace=False)]\n        mutant = np.clip(self.population[best_idx] + self.mutation_factor * (a - b), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def variant_rand1(self, index):\n        idxs = np.delete(np.arange(self.pop_size), index)\n        a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n        mutant = np.clip(a + self.mutation_factor * (b - c), self.lb, self.ub)\n        return self.crossover(self.population[index], mutant)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.cross_prob\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Enhanced Selection and Dynamic Strategy Adjustment.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "64072df9-b27e-4c0b-88a5-3af373c8dec4", "metadata": {"aucs": [0.8841779392458238, 0.8759280268200964, 0.8631546764393567, 0.8963945644360396, 0.8981118127386317, 0.871631749630288, 0.8979123905156459, 0.8850959136441047, 0.8622185217410936, 0.729104951504148, 0.215199408334098, 0.6486435130707977, 0.753170631548326, 0.5686988586069919, 0.7039912701694204, 0.6803969821535135, 0.7628315316837597, 0.3234881233863497, 0.14399877419656126, 0.15635908701876522, 0.11270960327816937, 0.14244445578896558, 0.12189029419153175, 0.11919165494782413, 0.10712125768284564, 0.1851382257443127, 0.13835265829762533, 0.11495020389416588, 0.10995483802611994, 0.11386038479663096, 0.1230075130295194, 0.05529242585362426, 0.1144685870031219, 0.10870303430426376, 0.10084091363009207, 0.10809192450903427, 0.9740528535607986, 0.9941706804973247, 0.9831415390365779, 0.9751042213612042, 0.9837306947251787, 0.9707513851862185, 0.9739923235937354, 0.9817354087625775, 0.9911964439325244, 0.8080091806499048, 0.10610290008836876, 0.804813092888129, 0.3793996075477605, 0.7310275428842932, 0.7889174008004337, 0.8135341346576654, 0.7592895191536442, 0.7763743045917658, 0.22850731118728296, 0.22773064555553568, 0.1405796357147101, 0.1948138748738133, 0.37722483086178804, 0.2780848421077461, 0.14849297427367691, 0.1515868567005999, 0.24205923267073015, 0.2129187272579499, 0.1274750483754602, 0.20051297514923616, 0.3322497471899254, 0.17267405512184542, 0.17672313434308906, 0.22518281601204604, 0.21106407565695284, 0.20621196428856237, 0.19731756109373433, 0.13620026037167388, 0.12796583447920784, 0.2313388120942651, 0.21526093189771278, 0.177648245989375, 0.27948283828985176, 0.14874152413014363, 0.13215952469221226, 9.999999999998899e-05, 9.999999999998899e-05, 0.005135465178089715, 0.01789410822989068, 9.999999999998899e-05, 9.999999999998899e-05, 0.003669619648550948, 0.0420959005660374, 9.999999999998899e-05, 0.045868023768870114, 0.05587658292221054, 0.05534505260976963, 0.05297490609261257, 0.02115979233129983, 0.029485499604155252, 0.12481169273895898, 0.09631508460208371, 0.10237248460915382, 0.3659531898504148, 0.16266789876991383, 0.052009054038515745, 0.09405840598259019, 0.15019846029942763, 0.07674738411225879, 0.09930867675881039, 0.13439089116817826, 0.283898153066762, 0.07040184186946585, 0.044573625008761386, 0.23852118908477316, 0.06846998084447864, 0.15527917796869917, 0.06950001735557432, 0.1371251842556701, 0.15691886905799823, 0.1158008591846994, 0.5229676924906228, 0.5406846442769054, 0.5258709940042461, 0.5267774920384068, 0.5838236743663325, 0.605617673751246, 0.5748881415317473, 0.5709153428443559, 0.5703017916281812, 0.10077624420511144, 0.08649415918452885, 0.1090421685292442, 0.17632549446946488, 0.08992315010114105, 0.14008023815188075, 0.0885530229722955, 0.15524599645400083, 0.11551644350785284, 0.20774984383351547, 0.1874040415734537, 0.22405669095705638, 0.17447080119553215, 0.2259274676791322, 0.20117048915904512, 0.13215292309003035, 0.2107519543519104, 0.20066835324633392, 0.5251308237526284, 0.45168290176405546, 0.4396176943542026, 0.7391135879543358, 0.2604938144043839, 0.24645006626824084, 0.4285413478753499, 0.6177922987619072, 0.36778822600907934, 0.2953267853754248, 0.27541640724233396, 0.26019063380411145, 0.31134535330788404, 0.2741226885197109, 0.2134463570730183, 0.25996822103769845, 0.3501917037282556, 0.2947636414736746, 0.22067469766104508, 0.20163432550447935, 0.21076145933950274, 0.2234806421854275, 0.2238778017369828, 0.19305536983420313, 0.22151890882768388, 0.19278330886213335, 0.1903418372700304, 0.22526159108402244, 0.2068410297923602, 0.21193298744529554, 0.18905767619870506, 0.2258536249848584, 0.20706681472300592, 0.21047002384288827, 0.181641930214145, 0.19087669446541733, 0.934351941721722, 0.16190202671055753, 0.1887731751484646, 0.9329277162411187, 0.16698791425176296, 0.1481034648406634, 0.09975972049052617, 0.15897789133910556, 0.928784051864495, 0.2121802495048678, 0.15598364193282555, 0.11292587898863604, 0.6653881484614568, 0.1694120474415045, 0.7920133686853318, 0.21305425414283952, 0.21310055991133636, 0.1559707893637633, 0.18364906515758317, 0.17909749808658348, 0.20981956985314232, 0.19123402161603797, 0.21347369411287243, 0.20177957387405188, 0.17425921084045637, 0.24240645328007193, 0.18681204715447697, 0.0886032466011546, 0.11113335777168232, 0.08873781374081247, 0.10565983793741285, 0.10064845935190592, 0.08458763669096114, 0.13692406424768067, 0.1055699761530342, 0.11666288605300701]}, "mutation_prompt": null}
