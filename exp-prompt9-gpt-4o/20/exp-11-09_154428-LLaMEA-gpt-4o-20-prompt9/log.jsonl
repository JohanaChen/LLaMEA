{"id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.19344919535994098, "feedback": "The algorithm AdaptivePSOwithDifferentialLearning got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "b1d6d236-9fbb-40be-a796-ea7c9f7e9b7c", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "d2bdf40b-6d22-42e4-b896-955bffed954f", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "08e527c3-5475-4b59-a163-01e5151bc87f", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "f0ed1054-863a-4522-85da-9b6742e99001", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "cc4b8df3-9609-4e62-8ea3-1e364cb2529a", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "cceb9310-fa6d-4330-8814-6204a13d1e51", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "4f7c7907-c3ec-4ca6-ad6f-bb7557a45bdd", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "67bff31d-7810-45ba-9015-00ab3e89ea7d", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "6e1be469-4423-4ee7-99fa-f1cbb0c2aa72", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "e22b7884-5a6b-4f70-9bb9-c94ea2e7aa53", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "6e1f6112-8607-44c1-aa56-924d1928d297", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "a5e1f4f4-fdf2-4aa2-abfa-047f6b2c5c74", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "72175a5a-a3c4-43d6-aea1-d85b1f8d48a5", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "fbf08d2d-1084-4e3b-89a5-0a84d0c42a42", "solution": "import numpy as np\n\nclass AdaptivePSOwithDifferentialLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particle = np.random.choice(self.swarm_size, 3, replace=False)\n                differential_term = self.differential_coeff * (position[donor_particle[0]] - position[donor_particle[1]])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptivePSOwithDifferentialLearning", "description": "Adaptive Particle Swarm Optimization with Differential Learning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3476059556204769, 0.3476059556204769, 0.3476059556204769, 0.3484504316775068, 0.3484504316775068, 0.3484504316775068, 0.338660527027278, 0.338660527027278, 0.338660527027278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09171148155169762, 0.09171148155169762, 0.09171148155169762, 0.09142042259897987, 0.09142042259897987, 0.09142042259897987, 0.11447509126384103, 0.11447509126384103, 0.11447509126384103, 0.08707021292637784, 0.08707021292637784, 0.08707021292637784, 0.09853778153551862, 0.09853778153551862, 0.09853778153551862, 0.08474301531311978, 0.08474301531311978, 0.08474301531311978, 0.9154733263953252, 0.9154733263953252, 0.9154733263953252, 0.9328025734273468, 0.9328025734273468, 0.9328025734273468, 0.9449459228280944, 0.9449459228280944, 0.9449459228280944, 0.2012800388527527, 0.2012800388527527, 0.2012800388527527, 0.22129867576425188, 0.22129867576425188, 0.22129867576425188, 0.24866374122381685, 0.24866374122381685, 0.24866374122381685, 0.24214382023443326, 0.24214382023443326, 0.24214382023443326, 0.18343223834363975, 0.18343223834363975, 0.18343223834363975, 0.313725399309121, 0.313725399309121, 0.313725399309121, 0.15300938379850648, 0.15300938379850648, 0.15300938379850648, 0.13558715163860702, 0.13558715163860702, 0.13558715163860702, 0.1411862697524937, 0.1411862697524937, 0.1411862697524937, 0.13450559202143408, 0.13450559202143408, 0.13450559202143408, 0.14257231043723928, 0.14257231043723928, 0.14257231043723928, 0.14560263942323304, 0.14560263942323304, 0.14560263942323304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054780718056496536, 0.054780718056496536, 0.054780718056496536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16596221410089385, 0.16596221410089385, 0.16596221410089385, 0.06290638695910167, 0.06290638695910167, 0.06290638695910167, 0.09344943532688976, 0.09344943532688976, 0.09344943532688976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066836205439198, 0.07066836205439198, 0.07066836205439198, 0.06861701799746611, 0.06861701799746611, 0.06861701799746611, 0.05146329687902218, 0.05146329687902218, 0.05146329687902218, 0.3366008527941162, 0.3366008527941162, 0.3366008527941162, 0.35654307629068704, 0.35654307629068704, 0.35654307629068704, 0.3356174051231925, 0.3356174051231925, 0.3356174051231925, 0.09637264252901567, 0.09637264252901567, 0.09637264252901567, 0.09677731072151474, 0.09677731072151474, 0.09677731072151474, 0.09547297781458475, 0.09547297781458475, 0.09547297781458475, 0.1462095982326358, 0.1462095982326358, 0.1462095982326358, 0.17768318566101826, 0.17768318566101826, 0.17768318566101826, 0.1604643449115154, 0.1604643449115154, 0.1604643449115154, 0.2517984239164194, 0.2517984239164194, 0.2517984239164194, 0.24468770881833735, 0.24468770881833735, 0.24468770881833735, 0.23989375756414932, 0.23989375756414932, 0.23989375756414932, 0.15853399181471794, 0.15853399181471794, 0.15853399181471794, 0.18361972304884588, 0.18361972304884588, 0.18361972304884588, 0.12741079844165948, 0.12741079844165948, 0.12741079844165948, 0.2145838070985442, 0.2145838070985442, 0.2145838070985442, 0.20325676573715323, 0.20325676573715323, 0.20325676573715323, 0.21596474124618592, 0.21596474124618592, 0.21596474124618592, 0.19479268088534152, 0.19479268088534152, 0.19479268088534152, 0.18177344262192718, 0.18177344262192718, 0.18177344262192718, 0.1832838958022196, 0.1832838958022196, 0.1832838958022196, 0.1841227479065013, 0.1841227479065013, 0.1841227479065013, 0.19190919627185332, 0.19190919627185332, 0.19190919627185332, 0.16663450707013838, 0.16663450707013838, 0.16663450707013838, 0.4307698140793478, 0.4307698140793478, 0.4307698140793478, 0.20374382867304075, 0.20374382867304075, 0.20374382867304075, 0.45544741402394173, 0.45544741402394173, 0.45544741402394173, 0.19436536912909552, 0.19436536912909552, 0.19436536912909552, 0.18501038321049834, 0.18501038321049834, 0.18501038321049834, 0.1865715683544149, 0.1865715683544149, 0.1865715683544149, 0.09856690589605188, 0.09856690589605188, 0.09856690589605188, 0.08782625616899054, 0.08782625616899054, 0.08782625616899054, 0.11448150971874116, 0.11448150971874116, 0.11448150971874116]}, "mutation_prompt": null}
{"id": "1c83dc98-13b2-4e62-bedf-a9cf23b1f225", "solution": "import numpy as np\n\nclass VelocityAdaptivePSOwithSubgroupLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.6  # Slightly increase differential influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increase max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(1, self.swarm_size // 5)\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                differential_term = self.differential_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "VelocityAdaptivePSOwithSubgroupLearning", "description": "Velocity-adaptive Particle Swarm Optimization with Dynamic Subgroup Learning for improved convergence rates.", "configspace": "", "generation": 15, "fitness": 0.20987993904807695, "feedback": "The algorithm VelocityAdaptivePSOwithSubgroupLearning got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "d9067799-ffb5-4bea-91b7-f5f8d2029d82", "metadata": {"aucs": [0.3890455514979292, 0.3890455514979292, 0.3890455514979292, 0.39644969620497095, 0.39644969620497095, 0.39644969620497095, 0.346514969481868, 0.346514969481868, 0.346514969481868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11767620239386944, 0.11767620239386944, 0.11767620239386944, 0.11276964587123894, 0.11276964587123894, 0.11276964587123894, 0.08891067478618042, 0.08891067478618042, 0.08891067478618042, 0.11631175372447922, 0.11631175372447922, 0.11631175372447922, 0.09054419441459527, 0.09054419441459527, 0.09054419441459527, 0.09379831545489925, 0.09379831545489925, 0.09379831545489925, 0.9360240118544852, 0.9360240118544852, 0.9360240118544852, 0.9629685983201517, 0.9629685983201517, 0.9629685983201517, 0.9586975963458637, 0.9586975963458637, 0.9586975963458637, 0.22231008914170647, 0.22231008914170647, 0.22231008914170647, 0.22305763671672119, 0.22305763671672119, 0.22305763671672119, 0.2463132477263178, 0.2463132477263178, 0.2463132477263178, 0.24674351911997838, 0.24674351911997838, 0.24674351911997838, 0.2971629953710827, 0.2971629953710827, 0.2971629953710827, 0.231376738519239, 0.231376738519239, 0.231376738519239, 0.14840469221372987, 0.14840469221372987, 0.14840469221372987, 0.10306633681634614, 0.10306633681634614, 0.10306633681634614, 0.12799802057940468, 0.12799802057940468, 0.12799802057940468, 0.16228182149231174, 0.16228182149231174, 0.16228182149231174, 0.14539855503461263, 0.14539855503461263, 0.14539855503461263, 0.14701697735140895, 0.14701697735140895, 0.14701697735140895, 0.015158094458386562, 0.015158094458386562, 0.015158094458386562, 0.0039839423335575885, 0.0039839423335575885, 0.0039839423335575885, 0.08135618287914859, 0.08135618287914859, 0.08135618287914859, 0.09775059455984314, 0.09775059455984314, 0.09775059455984314, 0.04734461907357013, 0.04734461907357013, 0.04734461907357013, 0.11261246192939234, 0.11261246192939234, 0.11261246192939234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061815115559485045, 0.061815115559485045, 0.061815115559485045, 0.05817394110765539, 0.05817394110765539, 0.05817394110765539, 0.05395044782228908, 0.05395044782228908, 0.05395044782228908, 0.3558028394964363, 0.3558028394964363, 0.3558028394964363, 0.35068653703249275, 0.35068653703249275, 0.35068653703249275, 0.36693770761128375, 0.36693770761128375, 0.36693770761128375, 0.1072046877773768, 0.1072046877773768, 0.1072046877773768, 0.12297131726273713, 0.12297131726273713, 0.12297131726273713, 0.07957933169179376, 0.07957933169179376, 0.07957933169179376, 0.2011604387967305, 0.2011604387967305, 0.2011604387967305, 0.18605922358137128, 0.18605922358137128, 0.18605922358137128, 0.19240806132796728, 0.19240806132796728, 0.19240806132796728, 0.25714701272233165, 0.25714701272233165, 0.25714701272233165, 0.24972612641471847, 0.24972612641471847, 0.24972612641471847, 0.25681442312599834, 0.25681442312599834, 0.25681442312599834, 0.19050403171470953, 0.19050403171470953, 0.19050403171470953, 0.2031442925141903, 0.2031442925141903, 0.2031442925141903, 0.16165283024753296, 0.16165283024753296, 0.16165283024753296, 0.26261415018991485, 0.26261415018991485, 0.26261415018991485, 0.22896577049635147, 0.22896577049635147, 0.22896577049635147, 0.233305578120374, 0.233305578120374, 0.233305578120374, 0.20028361919245752, 0.20028361919245752, 0.20028361919245752, 0.17985796627463024, 0.17985796627463024, 0.17985796627463024, 0.22076408845488382, 0.22076408845488382, 0.22076408845488382, 0.4871654353955138, 0.4871654353955138, 0.4871654353955138, 0.1574117737432713, 0.1574117737432713, 0.1574117737432713, 0.1679173385292685, 0.1679173385292685, 0.1679173385292685, 0.40432300968341506, 0.40432300968341506, 0.40432300968341506, 0.5119645349242408, 0.5119645349242408, 0.5119645349242408, 0.4989308373619338, 0.4989308373619338, 0.4989308373619338, 0.18283998466802454, 0.18283998466802454, 0.18283998466802454, 0.19517572213505208, 0.19517572213505208, 0.19517572213505208, 0.1814232440647331, 0.1814232440647331, 0.1814232440647331, 0.08512462937030219, 0.08512462937030219, 0.08512462937030219, 0.08810074218940767, 0.08810074218940767, 0.08810074218940767, 0.09980108519337605, 0.09980108519337605, 0.09980108519337605]}, "mutation_prompt": null}
{"id": "a8e5e971-986b-4952-9f92-0d545952eb56", "solution": "import numpy as np\n\nclass VelocityAdaptivePSOwithSubgroupLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.6  # Slightly increase differential influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increase max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(1, self.swarm_size // 5)\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                differential_term = self.differential_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "VelocityAdaptivePSOwithSubgroupLearning", "description": "Velocity-adaptive Particle Swarm Optimization with Dynamic Subgroup Learning for improved convergence rates.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c83dc98-13b2-4e62-bedf-a9cf23b1f225", "metadata": {"aucs": [0.3890455514979292, 0.3890455514979292, 0.3890455514979292, 0.39644969620497095, 0.39644969620497095, 0.39644969620497095, 0.346514969481868, 0.346514969481868, 0.346514969481868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11767620239386944, 0.11767620239386944, 0.11767620239386944, 0.11276964587123894, 0.11276964587123894, 0.11276964587123894, 0.08891067478618042, 0.08891067478618042, 0.08891067478618042, 0.11631175372447922, 0.11631175372447922, 0.11631175372447922, 0.09054419441459527, 0.09054419441459527, 0.09054419441459527, 0.09379831545489925, 0.09379831545489925, 0.09379831545489925, 0.9360240118544852, 0.9360240118544852, 0.9360240118544852, 0.9629685983201517, 0.9629685983201517, 0.9629685983201517, 0.9586975963458637, 0.9586975963458637, 0.9586975963458637, 0.22231008914170647, 0.22231008914170647, 0.22231008914170647, 0.22305763671672119, 0.22305763671672119, 0.22305763671672119, 0.2463132477263178, 0.2463132477263178, 0.2463132477263178, 0.24674351911997838, 0.24674351911997838, 0.24674351911997838, 0.2971629953710827, 0.2971629953710827, 0.2971629953710827, 0.231376738519239, 0.231376738519239, 0.231376738519239, 0.14840469221372987, 0.14840469221372987, 0.14840469221372987, 0.10306633681634614, 0.10306633681634614, 0.10306633681634614, 0.12799802057940468, 0.12799802057940468, 0.12799802057940468, 0.16228182149231174, 0.16228182149231174, 0.16228182149231174, 0.14539855503461263, 0.14539855503461263, 0.14539855503461263, 0.14701697735140895, 0.14701697735140895, 0.14701697735140895, 0.015158094458386562, 0.015158094458386562, 0.015158094458386562, 0.0039839423335575885, 0.0039839423335575885, 0.0039839423335575885, 0.08135618287914859, 0.08135618287914859, 0.08135618287914859, 0.09775059455984314, 0.09775059455984314, 0.09775059455984314, 0.04734461907357013, 0.04734461907357013, 0.04734461907357013, 0.11261246192939234, 0.11261246192939234, 0.11261246192939234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061815115559485045, 0.061815115559485045, 0.061815115559485045, 0.05817394110765539, 0.05817394110765539, 0.05817394110765539, 0.05395044782228908, 0.05395044782228908, 0.05395044782228908, 0.3558028394964363, 0.3558028394964363, 0.3558028394964363, 0.35068653703249275, 0.35068653703249275, 0.35068653703249275, 0.36693770761128375, 0.36693770761128375, 0.36693770761128375, 0.1072046877773768, 0.1072046877773768, 0.1072046877773768, 0.12297131726273713, 0.12297131726273713, 0.12297131726273713, 0.07957933169179376, 0.07957933169179376, 0.07957933169179376, 0.2011604387967305, 0.2011604387967305, 0.2011604387967305, 0.18605922358137128, 0.18605922358137128, 0.18605922358137128, 0.19240806132796728, 0.19240806132796728, 0.19240806132796728, 0.25714701272233165, 0.25714701272233165, 0.25714701272233165, 0.24972612641471847, 0.24972612641471847, 0.24972612641471847, 0.25681442312599834, 0.25681442312599834, 0.25681442312599834, 0.19050403171470953, 0.19050403171470953, 0.19050403171470953, 0.2031442925141903, 0.2031442925141903, 0.2031442925141903, 0.16165283024753296, 0.16165283024753296, 0.16165283024753296, 0.26261415018991485, 0.26261415018991485, 0.26261415018991485, 0.22896577049635147, 0.22896577049635147, 0.22896577049635147, 0.233305578120374, 0.233305578120374, 0.233305578120374, 0.20028361919245752, 0.20028361919245752, 0.20028361919245752, 0.17985796627463024, 0.17985796627463024, 0.17985796627463024, 0.22076408845488382, 0.22076408845488382, 0.22076408845488382, 0.4871654353955138, 0.4871654353955138, 0.4871654353955138, 0.1574117737432713, 0.1574117737432713, 0.1574117737432713, 0.1679173385292685, 0.1679173385292685, 0.1679173385292685, 0.40432300968341506, 0.40432300968341506, 0.40432300968341506, 0.5119645349242408, 0.5119645349242408, 0.5119645349242408, 0.4989308373619338, 0.4989308373619338, 0.4989308373619338, 0.18283998466802454, 0.18283998466802454, 0.18283998466802454, 0.19517572213505208, 0.19517572213505208, 0.19517572213505208, 0.1814232440647331, 0.1814232440647331, 0.1814232440647331, 0.08512462937030219, 0.08512462937030219, 0.08512462937030219, 0.08810074218940767, 0.08810074218940767, 0.08810074218940767, 0.09980108519337605, 0.09980108519337605, 0.09980108519337605]}, "mutation_prompt": null}
{"id": "3ef14c3c-90f9-4ae3-889d-845a2af356d5", "solution": "import numpy as np\n\nclass VelocityAdaptivePSOwithSubgroupLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.6  # Slightly increase differential influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increase max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(1, self.swarm_size // 5)\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                differential_term = self.differential_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "VelocityAdaptivePSOwithSubgroupLearning", "description": "Velocity-adaptive Particle Swarm Optimization with Dynamic Subgroup Learning for improved convergence rates.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c83dc98-13b2-4e62-bedf-a9cf23b1f225", "metadata": {"aucs": [0.3890455514979292, 0.3890455514979292, 0.3890455514979292, 0.39644969620497095, 0.39644969620497095, 0.39644969620497095, 0.346514969481868, 0.346514969481868, 0.346514969481868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11767620239386944, 0.11767620239386944, 0.11767620239386944, 0.11276964587123894, 0.11276964587123894, 0.11276964587123894, 0.08891067478618042, 0.08891067478618042, 0.08891067478618042, 0.11631175372447922, 0.11631175372447922, 0.11631175372447922, 0.09054419441459527, 0.09054419441459527, 0.09054419441459527, 0.09379831545489925, 0.09379831545489925, 0.09379831545489925, 0.9360240118544852, 0.9360240118544852, 0.9360240118544852, 0.9629685983201517, 0.9629685983201517, 0.9629685983201517, 0.9586975963458637, 0.9586975963458637, 0.9586975963458637, 0.22231008914170647, 0.22231008914170647, 0.22231008914170647, 0.22305763671672119, 0.22305763671672119, 0.22305763671672119, 0.2463132477263178, 0.2463132477263178, 0.2463132477263178, 0.24674351911997838, 0.24674351911997838, 0.24674351911997838, 0.2971629953710827, 0.2971629953710827, 0.2971629953710827, 0.231376738519239, 0.231376738519239, 0.231376738519239, 0.14840469221372987, 0.14840469221372987, 0.14840469221372987, 0.10306633681634614, 0.10306633681634614, 0.10306633681634614, 0.12799802057940468, 0.12799802057940468, 0.12799802057940468, 0.16228182149231174, 0.16228182149231174, 0.16228182149231174, 0.14539855503461263, 0.14539855503461263, 0.14539855503461263, 0.14701697735140895, 0.14701697735140895, 0.14701697735140895, 0.015158094458386562, 0.015158094458386562, 0.015158094458386562, 0.0039839423335575885, 0.0039839423335575885, 0.0039839423335575885, 0.08135618287914859, 0.08135618287914859, 0.08135618287914859, 0.09775059455984314, 0.09775059455984314, 0.09775059455984314, 0.04734461907357013, 0.04734461907357013, 0.04734461907357013, 0.11261246192939234, 0.11261246192939234, 0.11261246192939234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061815115559485045, 0.061815115559485045, 0.061815115559485045, 0.05817394110765539, 0.05817394110765539, 0.05817394110765539, 0.05395044782228908, 0.05395044782228908, 0.05395044782228908, 0.3558028394964363, 0.3558028394964363, 0.3558028394964363, 0.35068653703249275, 0.35068653703249275, 0.35068653703249275, 0.36693770761128375, 0.36693770761128375, 0.36693770761128375, 0.1072046877773768, 0.1072046877773768, 0.1072046877773768, 0.12297131726273713, 0.12297131726273713, 0.12297131726273713, 0.07957933169179376, 0.07957933169179376, 0.07957933169179376, 0.2011604387967305, 0.2011604387967305, 0.2011604387967305, 0.18605922358137128, 0.18605922358137128, 0.18605922358137128, 0.19240806132796728, 0.19240806132796728, 0.19240806132796728, 0.25714701272233165, 0.25714701272233165, 0.25714701272233165, 0.24972612641471847, 0.24972612641471847, 0.24972612641471847, 0.25681442312599834, 0.25681442312599834, 0.25681442312599834, 0.19050403171470953, 0.19050403171470953, 0.19050403171470953, 0.2031442925141903, 0.2031442925141903, 0.2031442925141903, 0.16165283024753296, 0.16165283024753296, 0.16165283024753296, 0.26261415018991485, 0.26261415018991485, 0.26261415018991485, 0.22896577049635147, 0.22896577049635147, 0.22896577049635147, 0.233305578120374, 0.233305578120374, 0.233305578120374, 0.20028361919245752, 0.20028361919245752, 0.20028361919245752, 0.17985796627463024, 0.17985796627463024, 0.17985796627463024, 0.22076408845488382, 0.22076408845488382, 0.22076408845488382, 0.4871654353955138, 0.4871654353955138, 0.4871654353955138, 0.1574117737432713, 0.1574117737432713, 0.1574117737432713, 0.1679173385292685, 0.1679173385292685, 0.1679173385292685, 0.40432300968341506, 0.40432300968341506, 0.40432300968341506, 0.5119645349242408, 0.5119645349242408, 0.5119645349242408, 0.4989308373619338, 0.4989308373619338, 0.4989308373619338, 0.18283998466802454, 0.18283998466802454, 0.18283998466802454, 0.19517572213505208, 0.19517572213505208, 0.19517572213505208, 0.1814232440647331, 0.1814232440647331, 0.1814232440647331, 0.08512462937030219, 0.08512462937030219, 0.08512462937030219, 0.08810074218940767, 0.08810074218940767, 0.08810074218940767, 0.09980108519337605, 0.09980108519337605, 0.09980108519337605]}, "mutation_prompt": null}
{"id": "31a48aa7-032c-42e4-a1fd-f56b361c02ed", "solution": "import numpy as np\n\nclass VelocityAdaptivePSOwithSubgroupLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.6  # Slightly increase differential influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increase max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(1, self.swarm_size // 5)\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                differential_term = self.differential_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "VelocityAdaptivePSOwithSubgroupLearning", "description": "Velocity-adaptive Particle Swarm Optimization with Dynamic Subgroup Learning for improved convergence rates.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c83dc98-13b2-4e62-bedf-a9cf23b1f225", "metadata": {"aucs": [0.3890455514979292, 0.3890455514979292, 0.3890455514979292, 0.39644969620497095, 0.39644969620497095, 0.39644969620497095, 0.346514969481868, 0.346514969481868, 0.346514969481868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11767620239386944, 0.11767620239386944, 0.11767620239386944, 0.11276964587123894, 0.11276964587123894, 0.11276964587123894, 0.08891067478618042, 0.08891067478618042, 0.08891067478618042, 0.11631175372447922, 0.11631175372447922, 0.11631175372447922, 0.09054419441459527, 0.09054419441459527, 0.09054419441459527, 0.09379831545489925, 0.09379831545489925, 0.09379831545489925, 0.9360240118544852, 0.9360240118544852, 0.9360240118544852, 0.9629685983201517, 0.9629685983201517, 0.9629685983201517, 0.9586975963458637, 0.9586975963458637, 0.9586975963458637, 0.22231008914170647, 0.22231008914170647, 0.22231008914170647, 0.22305763671672119, 0.22305763671672119, 0.22305763671672119, 0.2463132477263178, 0.2463132477263178, 0.2463132477263178, 0.24674351911997838, 0.24674351911997838, 0.24674351911997838, 0.2971629953710827, 0.2971629953710827, 0.2971629953710827, 0.231376738519239, 0.231376738519239, 0.231376738519239, 0.14840469221372987, 0.14840469221372987, 0.14840469221372987, 0.10306633681634614, 0.10306633681634614, 0.10306633681634614, 0.12799802057940468, 0.12799802057940468, 0.12799802057940468, 0.16228182149231174, 0.16228182149231174, 0.16228182149231174, 0.14539855503461263, 0.14539855503461263, 0.14539855503461263, 0.14701697735140895, 0.14701697735140895, 0.14701697735140895, 0.015158094458386562, 0.015158094458386562, 0.015158094458386562, 0.0039839423335575885, 0.0039839423335575885, 0.0039839423335575885, 0.08135618287914859, 0.08135618287914859, 0.08135618287914859, 0.09775059455984314, 0.09775059455984314, 0.09775059455984314, 0.04734461907357013, 0.04734461907357013, 0.04734461907357013, 0.11261246192939234, 0.11261246192939234, 0.11261246192939234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061815115559485045, 0.061815115559485045, 0.061815115559485045, 0.05817394110765539, 0.05817394110765539, 0.05817394110765539, 0.05395044782228908, 0.05395044782228908, 0.05395044782228908, 0.3558028394964363, 0.3558028394964363, 0.3558028394964363, 0.35068653703249275, 0.35068653703249275, 0.35068653703249275, 0.36693770761128375, 0.36693770761128375, 0.36693770761128375, 0.1072046877773768, 0.1072046877773768, 0.1072046877773768, 0.12297131726273713, 0.12297131726273713, 0.12297131726273713, 0.07957933169179376, 0.07957933169179376, 0.07957933169179376, 0.2011604387967305, 0.2011604387967305, 0.2011604387967305, 0.18605922358137128, 0.18605922358137128, 0.18605922358137128, 0.19240806132796728, 0.19240806132796728, 0.19240806132796728, 0.25714701272233165, 0.25714701272233165, 0.25714701272233165, 0.24972612641471847, 0.24972612641471847, 0.24972612641471847, 0.25681442312599834, 0.25681442312599834, 0.25681442312599834, 0.19050403171470953, 0.19050403171470953, 0.19050403171470953, 0.2031442925141903, 0.2031442925141903, 0.2031442925141903, 0.16165283024753296, 0.16165283024753296, 0.16165283024753296, 0.26261415018991485, 0.26261415018991485, 0.26261415018991485, 0.22896577049635147, 0.22896577049635147, 0.22896577049635147, 0.233305578120374, 0.233305578120374, 0.233305578120374, 0.20028361919245752, 0.20028361919245752, 0.20028361919245752, 0.17985796627463024, 0.17985796627463024, 0.17985796627463024, 0.22076408845488382, 0.22076408845488382, 0.22076408845488382, 0.4871654353955138, 0.4871654353955138, 0.4871654353955138, 0.1574117737432713, 0.1574117737432713, 0.1574117737432713, 0.1679173385292685, 0.1679173385292685, 0.1679173385292685, 0.40432300968341506, 0.40432300968341506, 0.40432300968341506, 0.5119645349242408, 0.5119645349242408, 0.5119645349242408, 0.4989308373619338, 0.4989308373619338, 0.4989308373619338, 0.18283998466802454, 0.18283998466802454, 0.18283998466802454, 0.19517572213505208, 0.19517572213505208, 0.19517572213505208, 0.1814232440647331, 0.1814232440647331, 0.1814232440647331, 0.08512462937030219, 0.08512462937030219, 0.08512462937030219, 0.08810074218940767, 0.08810074218940767, 0.08810074218940767, 0.09980108519337605, 0.09980108519337605, 0.09980108519337605]}, "mutation_prompt": null}
{"id": "75d238f3-1a5d-43a6-8568-2d45384cebaa", "solution": "import numpy as np\n\nclass VelocityAdaptivePSOwithSubgroupLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.6  # Slightly increase differential influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increase max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(1, self.swarm_size // 5)\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                differential_term = self.differential_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "VelocityAdaptivePSOwithSubgroupLearning", "description": "Velocity-adaptive Particle Swarm Optimization with Dynamic Subgroup Learning for improved convergence rates.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c83dc98-13b2-4e62-bedf-a9cf23b1f225", "metadata": {"aucs": [0.3890455514979292, 0.3890455514979292, 0.3890455514979292, 0.39644969620497095, 0.39644969620497095, 0.39644969620497095, 0.346514969481868, 0.346514969481868, 0.346514969481868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11767620239386944, 0.11767620239386944, 0.11767620239386944, 0.11276964587123894, 0.11276964587123894, 0.11276964587123894, 0.08891067478618042, 0.08891067478618042, 0.08891067478618042, 0.11631175372447922, 0.11631175372447922, 0.11631175372447922, 0.09054419441459527, 0.09054419441459527, 0.09054419441459527, 0.09379831545489925, 0.09379831545489925, 0.09379831545489925, 0.9360240118544852, 0.9360240118544852, 0.9360240118544852, 0.9629685983201517, 0.9629685983201517, 0.9629685983201517, 0.9586975963458637, 0.9586975963458637, 0.9586975963458637, 0.22231008914170647, 0.22231008914170647, 0.22231008914170647, 0.22305763671672119, 0.22305763671672119, 0.22305763671672119, 0.2463132477263178, 0.2463132477263178, 0.2463132477263178, 0.24674351911997838, 0.24674351911997838, 0.24674351911997838, 0.2971629953710827, 0.2971629953710827, 0.2971629953710827, 0.231376738519239, 0.231376738519239, 0.231376738519239, 0.14840469221372987, 0.14840469221372987, 0.14840469221372987, 0.10306633681634614, 0.10306633681634614, 0.10306633681634614, 0.12799802057940468, 0.12799802057940468, 0.12799802057940468, 0.16228182149231174, 0.16228182149231174, 0.16228182149231174, 0.14539855503461263, 0.14539855503461263, 0.14539855503461263, 0.14701697735140895, 0.14701697735140895, 0.14701697735140895, 0.015158094458386562, 0.015158094458386562, 0.015158094458386562, 0.0039839423335575885, 0.0039839423335575885, 0.0039839423335575885, 0.08135618287914859, 0.08135618287914859, 0.08135618287914859, 0.09775059455984314, 0.09775059455984314, 0.09775059455984314, 0.04734461907357013, 0.04734461907357013, 0.04734461907357013, 0.11261246192939234, 0.11261246192939234, 0.11261246192939234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061815115559485045, 0.061815115559485045, 0.061815115559485045, 0.05817394110765539, 0.05817394110765539, 0.05817394110765539, 0.05395044782228908, 0.05395044782228908, 0.05395044782228908, 0.3558028394964363, 0.3558028394964363, 0.3558028394964363, 0.35068653703249275, 0.35068653703249275, 0.35068653703249275, 0.36693770761128375, 0.36693770761128375, 0.36693770761128375, 0.1072046877773768, 0.1072046877773768, 0.1072046877773768, 0.12297131726273713, 0.12297131726273713, 0.12297131726273713, 0.07957933169179376, 0.07957933169179376, 0.07957933169179376, 0.2011604387967305, 0.2011604387967305, 0.2011604387967305, 0.18605922358137128, 0.18605922358137128, 0.18605922358137128, 0.19240806132796728, 0.19240806132796728, 0.19240806132796728, 0.25714701272233165, 0.25714701272233165, 0.25714701272233165, 0.24972612641471847, 0.24972612641471847, 0.24972612641471847, 0.25681442312599834, 0.25681442312599834, 0.25681442312599834, 0.19050403171470953, 0.19050403171470953, 0.19050403171470953, 0.2031442925141903, 0.2031442925141903, 0.2031442925141903, 0.16165283024753296, 0.16165283024753296, 0.16165283024753296, 0.26261415018991485, 0.26261415018991485, 0.26261415018991485, 0.22896577049635147, 0.22896577049635147, 0.22896577049635147, 0.233305578120374, 0.233305578120374, 0.233305578120374, 0.20028361919245752, 0.20028361919245752, 0.20028361919245752, 0.17985796627463024, 0.17985796627463024, 0.17985796627463024, 0.22076408845488382, 0.22076408845488382, 0.22076408845488382, 0.4871654353955138, 0.4871654353955138, 0.4871654353955138, 0.1574117737432713, 0.1574117737432713, 0.1574117737432713, 0.1679173385292685, 0.1679173385292685, 0.1679173385292685, 0.40432300968341506, 0.40432300968341506, 0.40432300968341506, 0.5119645349242408, 0.5119645349242408, 0.5119645349242408, 0.4989308373619338, 0.4989308373619338, 0.4989308373619338, 0.18283998466802454, 0.18283998466802454, 0.18283998466802454, 0.19517572213505208, 0.19517572213505208, 0.19517572213505208, 0.1814232440647331, 0.1814232440647331, 0.1814232440647331, 0.08512462937030219, 0.08512462937030219, 0.08512462937030219, 0.08810074218940767, 0.08810074218940767, 0.08810074218940767, 0.09980108519337605, 0.09980108519337605, 0.09980108519337605]}, "mutation_prompt": null}
{"id": "8a6175bb-1ded-4a53-859f-a4af430fdf8f", "solution": "import numpy as np\n\nclass VelocityAdaptivePSOwithSubgroupLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.6  # Slightly increase differential influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increase max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(1, self.swarm_size // 5)\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                differential_term = self.differential_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "VelocityAdaptivePSOwithSubgroupLearning", "description": "Velocity-adaptive Particle Swarm Optimization with Dynamic Subgroup Learning for improved convergence rates.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c83dc98-13b2-4e62-bedf-a9cf23b1f225", "metadata": {"aucs": [0.3890455514979292, 0.3890455514979292, 0.3890455514979292, 0.39644969620497095, 0.39644969620497095, 0.39644969620497095, 0.346514969481868, 0.346514969481868, 0.346514969481868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11767620239386944, 0.11767620239386944, 0.11767620239386944, 0.11276964587123894, 0.11276964587123894, 0.11276964587123894, 0.08891067478618042, 0.08891067478618042, 0.08891067478618042, 0.11631175372447922, 0.11631175372447922, 0.11631175372447922, 0.09054419441459527, 0.09054419441459527, 0.09054419441459527, 0.09379831545489925, 0.09379831545489925, 0.09379831545489925, 0.9360240118544852, 0.9360240118544852, 0.9360240118544852, 0.9629685983201517, 0.9629685983201517, 0.9629685983201517, 0.9586975963458637, 0.9586975963458637, 0.9586975963458637, 0.22231008914170647, 0.22231008914170647, 0.22231008914170647, 0.22305763671672119, 0.22305763671672119, 0.22305763671672119, 0.2463132477263178, 0.2463132477263178, 0.2463132477263178, 0.24674351911997838, 0.24674351911997838, 0.24674351911997838, 0.2971629953710827, 0.2971629953710827, 0.2971629953710827, 0.231376738519239, 0.231376738519239, 0.231376738519239, 0.14840469221372987, 0.14840469221372987, 0.14840469221372987, 0.10306633681634614, 0.10306633681634614, 0.10306633681634614, 0.12799802057940468, 0.12799802057940468, 0.12799802057940468, 0.16228182149231174, 0.16228182149231174, 0.16228182149231174, 0.14539855503461263, 0.14539855503461263, 0.14539855503461263, 0.14701697735140895, 0.14701697735140895, 0.14701697735140895, 0.015158094458386562, 0.015158094458386562, 0.015158094458386562, 0.0039839423335575885, 0.0039839423335575885, 0.0039839423335575885, 0.08135618287914859, 0.08135618287914859, 0.08135618287914859, 0.09775059455984314, 0.09775059455984314, 0.09775059455984314, 0.04734461907357013, 0.04734461907357013, 0.04734461907357013, 0.11261246192939234, 0.11261246192939234, 0.11261246192939234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061815115559485045, 0.061815115559485045, 0.061815115559485045, 0.05817394110765539, 0.05817394110765539, 0.05817394110765539, 0.05395044782228908, 0.05395044782228908, 0.05395044782228908, 0.3558028394964363, 0.3558028394964363, 0.3558028394964363, 0.35068653703249275, 0.35068653703249275, 0.35068653703249275, 0.36693770761128375, 0.36693770761128375, 0.36693770761128375, 0.1072046877773768, 0.1072046877773768, 0.1072046877773768, 0.12297131726273713, 0.12297131726273713, 0.12297131726273713, 0.07957933169179376, 0.07957933169179376, 0.07957933169179376, 0.2011604387967305, 0.2011604387967305, 0.2011604387967305, 0.18605922358137128, 0.18605922358137128, 0.18605922358137128, 0.19240806132796728, 0.19240806132796728, 0.19240806132796728, 0.25714701272233165, 0.25714701272233165, 0.25714701272233165, 0.24972612641471847, 0.24972612641471847, 0.24972612641471847, 0.25681442312599834, 0.25681442312599834, 0.25681442312599834, 0.19050403171470953, 0.19050403171470953, 0.19050403171470953, 0.2031442925141903, 0.2031442925141903, 0.2031442925141903, 0.16165283024753296, 0.16165283024753296, 0.16165283024753296, 0.26261415018991485, 0.26261415018991485, 0.26261415018991485, 0.22896577049635147, 0.22896577049635147, 0.22896577049635147, 0.233305578120374, 0.233305578120374, 0.233305578120374, 0.20028361919245752, 0.20028361919245752, 0.20028361919245752, 0.17985796627463024, 0.17985796627463024, 0.17985796627463024, 0.22076408845488382, 0.22076408845488382, 0.22076408845488382, 0.4871654353955138, 0.4871654353955138, 0.4871654353955138, 0.1574117737432713, 0.1574117737432713, 0.1574117737432713, 0.1679173385292685, 0.1679173385292685, 0.1679173385292685, 0.40432300968341506, 0.40432300968341506, 0.40432300968341506, 0.5119645349242408, 0.5119645349242408, 0.5119645349242408, 0.4989308373619338, 0.4989308373619338, 0.4989308373619338, 0.18283998466802454, 0.18283998466802454, 0.18283998466802454, 0.19517572213505208, 0.19517572213505208, 0.19517572213505208, 0.1814232440647331, 0.1814232440647331, 0.1814232440647331, 0.08512462937030219, 0.08512462937030219, 0.08512462937030219, 0.08810074218940767, 0.08810074218940767, 0.08810074218940767, 0.09980108519337605, 0.09980108519337605, 0.09980108519337605]}, "mutation_prompt": null}
{"id": "fff5c155-ea07-4ffe-8e56-3f9e68820448", "solution": "import numpy as np\n\nclass VelocityAdaptivePSOwithSubgroupLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.6  # Slightly increase differential influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increase max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(1, self.swarm_size // 5)\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                differential_term = self.differential_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "VelocityAdaptivePSOwithSubgroupLearning", "description": "Velocity-adaptive Particle Swarm Optimization with Dynamic Subgroup Learning for improved convergence rates.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c83dc98-13b2-4e62-bedf-a9cf23b1f225", "metadata": {"aucs": [0.3890455514979292, 0.3890455514979292, 0.3890455514979292, 0.39644969620497095, 0.39644969620497095, 0.39644969620497095, 0.346514969481868, 0.346514969481868, 0.346514969481868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11767620239386944, 0.11767620239386944, 0.11767620239386944, 0.11276964587123894, 0.11276964587123894, 0.11276964587123894, 0.08891067478618042, 0.08891067478618042, 0.08891067478618042, 0.11631175372447922, 0.11631175372447922, 0.11631175372447922, 0.09054419441459527, 0.09054419441459527, 0.09054419441459527, 0.09379831545489925, 0.09379831545489925, 0.09379831545489925, 0.9360240118544852, 0.9360240118544852, 0.9360240118544852, 0.9629685983201517, 0.9629685983201517, 0.9629685983201517, 0.9586975963458637, 0.9586975963458637, 0.9586975963458637, 0.22231008914170647, 0.22231008914170647, 0.22231008914170647, 0.22305763671672119, 0.22305763671672119, 0.22305763671672119, 0.2463132477263178, 0.2463132477263178, 0.2463132477263178, 0.24674351911997838, 0.24674351911997838, 0.24674351911997838, 0.2971629953710827, 0.2971629953710827, 0.2971629953710827, 0.231376738519239, 0.231376738519239, 0.231376738519239, 0.14840469221372987, 0.14840469221372987, 0.14840469221372987, 0.10306633681634614, 0.10306633681634614, 0.10306633681634614, 0.12799802057940468, 0.12799802057940468, 0.12799802057940468, 0.16228182149231174, 0.16228182149231174, 0.16228182149231174, 0.14539855503461263, 0.14539855503461263, 0.14539855503461263, 0.14701697735140895, 0.14701697735140895, 0.14701697735140895, 0.015158094458386562, 0.015158094458386562, 0.015158094458386562, 0.0039839423335575885, 0.0039839423335575885, 0.0039839423335575885, 0.08135618287914859, 0.08135618287914859, 0.08135618287914859, 0.09775059455984314, 0.09775059455984314, 0.09775059455984314, 0.04734461907357013, 0.04734461907357013, 0.04734461907357013, 0.11261246192939234, 0.11261246192939234, 0.11261246192939234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061815115559485045, 0.061815115559485045, 0.061815115559485045, 0.05817394110765539, 0.05817394110765539, 0.05817394110765539, 0.05395044782228908, 0.05395044782228908, 0.05395044782228908, 0.3558028394964363, 0.3558028394964363, 0.3558028394964363, 0.35068653703249275, 0.35068653703249275, 0.35068653703249275, 0.36693770761128375, 0.36693770761128375, 0.36693770761128375, 0.1072046877773768, 0.1072046877773768, 0.1072046877773768, 0.12297131726273713, 0.12297131726273713, 0.12297131726273713, 0.07957933169179376, 0.07957933169179376, 0.07957933169179376, 0.2011604387967305, 0.2011604387967305, 0.2011604387967305, 0.18605922358137128, 0.18605922358137128, 0.18605922358137128, 0.19240806132796728, 0.19240806132796728, 0.19240806132796728, 0.25714701272233165, 0.25714701272233165, 0.25714701272233165, 0.24972612641471847, 0.24972612641471847, 0.24972612641471847, 0.25681442312599834, 0.25681442312599834, 0.25681442312599834, 0.19050403171470953, 0.19050403171470953, 0.19050403171470953, 0.2031442925141903, 0.2031442925141903, 0.2031442925141903, 0.16165283024753296, 0.16165283024753296, 0.16165283024753296, 0.26261415018991485, 0.26261415018991485, 0.26261415018991485, 0.22896577049635147, 0.22896577049635147, 0.22896577049635147, 0.233305578120374, 0.233305578120374, 0.233305578120374, 0.20028361919245752, 0.20028361919245752, 0.20028361919245752, 0.17985796627463024, 0.17985796627463024, 0.17985796627463024, 0.22076408845488382, 0.22076408845488382, 0.22076408845488382, 0.4871654353955138, 0.4871654353955138, 0.4871654353955138, 0.1574117737432713, 0.1574117737432713, 0.1574117737432713, 0.1679173385292685, 0.1679173385292685, 0.1679173385292685, 0.40432300968341506, 0.40432300968341506, 0.40432300968341506, 0.5119645349242408, 0.5119645349242408, 0.5119645349242408, 0.4989308373619338, 0.4989308373619338, 0.4989308373619338, 0.18283998466802454, 0.18283998466802454, 0.18283998466802454, 0.19517572213505208, 0.19517572213505208, 0.19517572213505208, 0.1814232440647331, 0.1814232440647331, 0.1814232440647331, 0.08512462937030219, 0.08512462937030219, 0.08512462937030219, 0.08810074218940767, 0.08810074218940767, 0.08810074218940767, 0.09980108519337605, 0.09980108519337605, 0.09980108519337605]}, "mutation_prompt": null}
{"id": "8aec247a-f122-4d5f-a52b-0f5d4e87c33e", "solution": "import numpy as np\n\nclass VelocityAdaptivePSOwithSubgroupLearning:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50\n        self.inertia = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.differential_coeff = 0.6  # Slightly increase differential influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increase max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(1, self.swarm_size // 5)\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = self.inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                \n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                differential_term = self.differential_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                velocity[i] = inertia_term + cognitive_term + social_term + differential_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "VelocityAdaptivePSOwithSubgroupLearning", "description": "Velocity-adaptive Particle Swarm Optimization with Dynamic Subgroup Learning for improved convergence rates.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c83dc98-13b2-4e62-bedf-a9cf23b1f225", "metadata": {"aucs": [0.3890455514979292, 0.3890455514979292, 0.3890455514979292, 0.39644969620497095, 0.39644969620497095, 0.39644969620497095, 0.346514969481868, 0.346514969481868, 0.346514969481868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11767620239386944, 0.11767620239386944, 0.11767620239386944, 0.11276964587123894, 0.11276964587123894, 0.11276964587123894, 0.08891067478618042, 0.08891067478618042, 0.08891067478618042, 0.11631175372447922, 0.11631175372447922, 0.11631175372447922, 0.09054419441459527, 0.09054419441459527, 0.09054419441459527, 0.09379831545489925, 0.09379831545489925, 0.09379831545489925, 0.9360240118544852, 0.9360240118544852, 0.9360240118544852, 0.9629685983201517, 0.9629685983201517, 0.9629685983201517, 0.9586975963458637, 0.9586975963458637, 0.9586975963458637, 0.22231008914170647, 0.22231008914170647, 0.22231008914170647, 0.22305763671672119, 0.22305763671672119, 0.22305763671672119, 0.2463132477263178, 0.2463132477263178, 0.2463132477263178, 0.24674351911997838, 0.24674351911997838, 0.24674351911997838, 0.2971629953710827, 0.2971629953710827, 0.2971629953710827, 0.231376738519239, 0.231376738519239, 0.231376738519239, 0.14840469221372987, 0.14840469221372987, 0.14840469221372987, 0.10306633681634614, 0.10306633681634614, 0.10306633681634614, 0.12799802057940468, 0.12799802057940468, 0.12799802057940468, 0.16228182149231174, 0.16228182149231174, 0.16228182149231174, 0.14539855503461263, 0.14539855503461263, 0.14539855503461263, 0.14701697735140895, 0.14701697735140895, 0.14701697735140895, 0.015158094458386562, 0.015158094458386562, 0.015158094458386562, 0.0039839423335575885, 0.0039839423335575885, 0.0039839423335575885, 0.08135618287914859, 0.08135618287914859, 0.08135618287914859, 0.09775059455984314, 0.09775059455984314, 0.09775059455984314, 0.04734461907357013, 0.04734461907357013, 0.04734461907357013, 0.11261246192939234, 0.11261246192939234, 0.11261246192939234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061815115559485045, 0.061815115559485045, 0.061815115559485045, 0.05817394110765539, 0.05817394110765539, 0.05817394110765539, 0.05395044782228908, 0.05395044782228908, 0.05395044782228908, 0.3558028394964363, 0.3558028394964363, 0.3558028394964363, 0.35068653703249275, 0.35068653703249275, 0.35068653703249275, 0.36693770761128375, 0.36693770761128375, 0.36693770761128375, 0.1072046877773768, 0.1072046877773768, 0.1072046877773768, 0.12297131726273713, 0.12297131726273713, 0.12297131726273713, 0.07957933169179376, 0.07957933169179376, 0.07957933169179376, 0.2011604387967305, 0.2011604387967305, 0.2011604387967305, 0.18605922358137128, 0.18605922358137128, 0.18605922358137128, 0.19240806132796728, 0.19240806132796728, 0.19240806132796728, 0.25714701272233165, 0.25714701272233165, 0.25714701272233165, 0.24972612641471847, 0.24972612641471847, 0.24972612641471847, 0.25681442312599834, 0.25681442312599834, 0.25681442312599834, 0.19050403171470953, 0.19050403171470953, 0.19050403171470953, 0.2031442925141903, 0.2031442925141903, 0.2031442925141903, 0.16165283024753296, 0.16165283024753296, 0.16165283024753296, 0.26261415018991485, 0.26261415018991485, 0.26261415018991485, 0.22896577049635147, 0.22896577049635147, 0.22896577049635147, 0.233305578120374, 0.233305578120374, 0.233305578120374, 0.20028361919245752, 0.20028361919245752, 0.20028361919245752, 0.17985796627463024, 0.17985796627463024, 0.17985796627463024, 0.22076408845488382, 0.22076408845488382, 0.22076408845488382, 0.4871654353955138, 0.4871654353955138, 0.4871654353955138, 0.1574117737432713, 0.1574117737432713, 0.1574117737432713, 0.1679173385292685, 0.1679173385292685, 0.1679173385292685, 0.40432300968341506, 0.40432300968341506, 0.40432300968341506, 0.5119645349242408, 0.5119645349242408, 0.5119645349242408, 0.4989308373619338, 0.4989308373619338, 0.4989308373619338, 0.18283998466802454, 0.18283998466802454, 0.18283998466802454, 0.19517572213505208, 0.19517572213505208, 0.19517572213505208, 0.1814232440647331, 0.1814232440647331, 0.1814232440647331, 0.08512462937030219, 0.08512462937030219, 0.08512462937030219, 0.08810074218940767, 0.08810074218940767, 0.08810074218940767, 0.09980108519337605, 0.09980108519337605, 0.09980108519337605]}, "mutation_prompt": null}
{"id": "947f911a-6319-45ed-a207-1bad4ec7a730", "solution": "import numpy as np\n\nclass EnhancedPSOwithAdaptiveInertia:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60  # Increased swarm size for better exploration\n        self.initial_inertia = 0.9  # Start with higher inertia for exploration\n        self.final_inertia = 0.4  # Decrease to encourage convergence later\n        self.cognitive_coeff = 1.4  # Slightly adjusted for balance\n        self.social_coeff = 1.6  # Slightly adjusted for balance\n        self.exploration_coeff = 0.7  # Encourage exploration through differential strategy\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.12  # Adjusted max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(2, self.swarm_size // 4)  # Larger subgroups for diversity\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)  # Adaptive inertia\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedPSOwithAdaptiveInertia", "description": "Enhanced Particle Swarm Optimization with Adaptive Inertia and Explorative Subgroup Dynamics.", "configspace": "", "generation": 23, "fitness": 0.21018754503620216, "feedback": "The algorithm EnhancedPSOwithAdaptiveInertia got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "1c83dc98-13b2-4e62-bedf-a9cf23b1f225", "metadata": {"aucs": [0.3878280047528494, 0.3878280047528494, 0.3878280047528494, 0.3805158393099777, 0.3805158393099777, 0.3805158393099777, 0.38050777367529276, 0.38050777367529276, 0.38050777367529276, 0.009804507442509158, 0.009804507442509158, 0.009804507442509158, 0.021613538847351066, 0.021613538847351066, 0.021613538847351066, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1062695549284981, 0.1062695549284981, 0.1062695549284981, 0.10249163492404534, 0.10249163492404534, 0.10249163492404534, 0.11267986973805288, 0.11267986973805288, 0.11267986973805288, 0.07317627100158641, 0.07317627100158641, 0.07317627100158641, 0.09469713227406518, 0.09469713227406518, 0.09469713227406518, 0.07853560603000165, 0.07853560603000165, 0.07853560603000165, 0.9397278382638629, 0.9397278382638629, 0.9397278382638629, 0.9197093836016851, 0.9197093836016851, 0.9197093836016851, 0.9395394156445652, 0.9395394156445652, 0.9395394156445652, 0.2372020468790983, 0.2372020468790983, 0.2372020468790983, 0.23829649298273003, 0.23829649298273003, 0.23829649298273003, 0.23652430865803986, 0.23652430865803986, 0.23652430865803986, 0.30031594856619725, 0.30031594856619725, 0.30031594856619725, 0.3091964695791114, 0.3091964695791114, 0.3091964695791114, 0.24476426917463512, 0.24476426917463512, 0.24476426917463512, 0.1619516951575486, 0.1619516951575486, 0.1619516951575486, 0.10561254781130847, 0.10561254781130847, 0.10561254781130847, 0.16034662135280797, 0.16034662135280797, 0.16034662135280797, 0.14983703040838758, 0.14983703040838758, 0.14983703040838758, 0.12911718612943224, 0.12911718612943224, 0.12911718612943224, 0.14411223591438538, 0.14411223591438538, 0.14411223591438538, 0.004753153441039992, 0.004753153441039992, 0.004753153441039992, 0.0028427817495476626, 0.0028427817495476626, 0.0028427817495476626, 0.005648496981128459, 0.005648496981128459, 0.005648496981128459, 0.11322294669401711, 0.11322294669401711, 0.11322294669401711, 0.1174393006084341, 0.1174393006084341, 0.1174393006084341, 0.13618669052938515, 0.13618669052938515, 0.13618669052938515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059148040774690935, 0.059148040774690935, 0.059148040774690935, 0.07212459115212677, 0.07212459115212677, 0.07212459115212677, 0.07793014274187882, 0.07793014274187882, 0.07793014274187882, 0.3478206669531413, 0.3478206669531413, 0.3478206669531413, 0.3662406226409328, 0.3662406226409328, 0.3662406226409328, 0.34511250538260607, 0.34511250538260607, 0.34511250538260607, 0.11381341975452708, 0.11381341975452708, 0.11381341975452708, 0.1147037820254958, 0.1147037820254958, 0.1147037820254958, 0.10942591519437339, 0.10942591519437339, 0.10942591519437339, 0.22623154696032632, 0.22623154696032632, 0.22623154696032632, 0.1957143831633208, 0.1957143831633208, 0.1957143831633208, 0.19179237859001874, 0.19179237859001874, 0.19179237859001874, 0.2699911821346562, 0.2699911821346562, 0.2699911821346562, 0.26152604182538064, 0.26152604182538064, 0.26152604182538064, 0.21671547066569696, 0.21671547066569696, 0.21671547066569696, 0.2000616439195514, 0.2000616439195514, 0.2000616439195514, 0.15989402943315867, 0.15989402943315867, 0.15989402943315867, 0.21974490426727677, 0.21974490426727677, 0.21974490426727677, 0.18879474796952522, 0.18879474796952522, 0.18879474796952522, 0.2704742753681928, 0.2704742753681928, 0.2704742753681928, 0.23513758533197793, 0.23513758533197793, 0.23513758533197793, 0.18979263563879056, 0.18979263563879056, 0.18979263563879056, 0.18360534110091586, 0.18360534110091586, 0.18360534110091586, 0.1835169174703325, 0.1835169174703325, 0.1835169174703325, 0.5295075693610605, 0.5295075693610605, 0.5295075693610605, 0.16566287134235003, 0.16566287134235003, 0.16566287134235003, 0.5296347530242596, 0.5296347530242596, 0.5296347530242596, 0.5152030000104688, 0.5152030000104688, 0.5152030000104688, 0.2092025308788934, 0.2092025308788934, 0.2092025308788934, 0.16666840123338678, 0.16666840123338678, 0.16666840123338678, 0.1849061322309411, 0.1849061322309411, 0.1849061322309411, 0.18373788480212172, 0.18373788480212172, 0.18373788480212172, 0.19165622079449207, 0.19165622079449207, 0.19165622079449207, 0.09642515402192986, 0.09642515402192986, 0.09642515402192986, 0.08495142716719706, 0.08495142716719706, 0.08495142716719706, 0.13176793422898336, 0.13176793422898336, 0.13176793422898336]}, "mutation_prompt": null}
{"id": "58d07fae-ff2d-485a-beee-338f5f26af2c", "solution": "import numpy as np\n\nclass EnhancedPSOwithAdaptiveInertia:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60  # Increased swarm size for better exploration\n        self.initial_inertia = 0.9  # Start with higher inertia for exploration\n        self.final_inertia = 0.4  # Decrease to encourage convergence later\n        self.cognitive_coeff = 1.4  # Slightly adjusted for balance\n        self.social_coeff = 1.6  # Slightly adjusted for balance\n        self.exploration_coeff = 0.7  # Encourage exploration through differential strategy\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.12  # Adjusted max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(2, self.swarm_size // 4)  # Larger subgroups for diversity\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)  # Adaptive inertia\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedPSOwithAdaptiveInertia", "description": "Enhanced Particle Swarm Optimization with Adaptive Inertia and Explorative Subgroup Dynamics.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "947f911a-6319-45ed-a207-1bad4ec7a730", "metadata": {"aucs": [0.3878280047528494, 0.3878280047528494, 0.3878280047528494, 0.3805158393099777, 0.3805158393099777, 0.3805158393099777, 0.38050777367529276, 0.38050777367529276, 0.38050777367529276, 0.009804507442509158, 0.009804507442509158, 0.009804507442509158, 0.021613538847351066, 0.021613538847351066, 0.021613538847351066, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1062695549284981, 0.1062695549284981, 0.1062695549284981, 0.10249163492404534, 0.10249163492404534, 0.10249163492404534, 0.11267986973805288, 0.11267986973805288, 0.11267986973805288, 0.07317627100158641, 0.07317627100158641, 0.07317627100158641, 0.09469713227406518, 0.09469713227406518, 0.09469713227406518, 0.07853560603000165, 0.07853560603000165, 0.07853560603000165, 0.9397278382638629, 0.9397278382638629, 0.9397278382638629, 0.9197093836016851, 0.9197093836016851, 0.9197093836016851, 0.9395394156445652, 0.9395394156445652, 0.9395394156445652, 0.2372020468790983, 0.2372020468790983, 0.2372020468790983, 0.23829649298273003, 0.23829649298273003, 0.23829649298273003, 0.23652430865803986, 0.23652430865803986, 0.23652430865803986, 0.30031594856619725, 0.30031594856619725, 0.30031594856619725, 0.3091964695791114, 0.3091964695791114, 0.3091964695791114, 0.24476426917463512, 0.24476426917463512, 0.24476426917463512, 0.1619516951575486, 0.1619516951575486, 0.1619516951575486, 0.10561254781130847, 0.10561254781130847, 0.10561254781130847, 0.16034662135280797, 0.16034662135280797, 0.16034662135280797, 0.14983703040838758, 0.14983703040838758, 0.14983703040838758, 0.12911718612943224, 0.12911718612943224, 0.12911718612943224, 0.14411223591438538, 0.14411223591438538, 0.14411223591438538, 0.004753153441039992, 0.004753153441039992, 0.004753153441039992, 0.0028427817495476626, 0.0028427817495476626, 0.0028427817495476626, 0.005648496981128459, 0.005648496981128459, 0.005648496981128459, 0.11322294669401711, 0.11322294669401711, 0.11322294669401711, 0.1174393006084341, 0.1174393006084341, 0.1174393006084341, 0.13618669052938515, 0.13618669052938515, 0.13618669052938515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059148040774690935, 0.059148040774690935, 0.059148040774690935, 0.07212459115212677, 0.07212459115212677, 0.07212459115212677, 0.07793014274187882, 0.07793014274187882, 0.07793014274187882, 0.3478206669531413, 0.3478206669531413, 0.3478206669531413, 0.3662406226409328, 0.3662406226409328, 0.3662406226409328, 0.34511250538260607, 0.34511250538260607, 0.34511250538260607, 0.11381341975452708, 0.11381341975452708, 0.11381341975452708, 0.1147037820254958, 0.1147037820254958, 0.1147037820254958, 0.10942591519437339, 0.10942591519437339, 0.10942591519437339, 0.22623154696032632, 0.22623154696032632, 0.22623154696032632, 0.1957143831633208, 0.1957143831633208, 0.1957143831633208, 0.19179237859001874, 0.19179237859001874, 0.19179237859001874, 0.2699911821346562, 0.2699911821346562, 0.2699911821346562, 0.26152604182538064, 0.26152604182538064, 0.26152604182538064, 0.21671547066569696, 0.21671547066569696, 0.21671547066569696, 0.2000616439195514, 0.2000616439195514, 0.2000616439195514, 0.15989402943315867, 0.15989402943315867, 0.15989402943315867, 0.21974490426727677, 0.21974490426727677, 0.21974490426727677, 0.18879474796952522, 0.18879474796952522, 0.18879474796952522, 0.2704742753681928, 0.2704742753681928, 0.2704742753681928, 0.23513758533197793, 0.23513758533197793, 0.23513758533197793, 0.18979263563879056, 0.18979263563879056, 0.18979263563879056, 0.18360534110091586, 0.18360534110091586, 0.18360534110091586, 0.1835169174703325, 0.1835169174703325, 0.1835169174703325, 0.5295075693610605, 0.5295075693610605, 0.5295075693610605, 0.16566287134235003, 0.16566287134235003, 0.16566287134235003, 0.5296347530242596, 0.5296347530242596, 0.5296347530242596, 0.5152030000104688, 0.5152030000104688, 0.5152030000104688, 0.2092025308788934, 0.2092025308788934, 0.2092025308788934, 0.16666840123338678, 0.16666840123338678, 0.16666840123338678, 0.1849061322309411, 0.1849061322309411, 0.1849061322309411, 0.18373788480212172, 0.18373788480212172, 0.18373788480212172, 0.19165622079449207, 0.19165622079449207, 0.19165622079449207, 0.09642515402192986, 0.09642515402192986, 0.09642515402192986, 0.08495142716719706, 0.08495142716719706, 0.08495142716719706, 0.13176793422898336, 0.13176793422898336, 0.13176793422898336]}, "mutation_prompt": null}
{"id": "d8a86226-2c77-49a5-9777-b37df1528edd", "solution": "import numpy as np\n\nclass HybridEnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5  # Enhanced cognitive learning\n        self.social_coeff = 1.8  # Enhanced social learning\n        self.exploration_coeff = 0.6\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.12\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(2, self.swarm_size // 3)  # Altered subgroup dynamics\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                # Hybrid learning with elite influence\n                elite_influence = 0.2 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "HybridEnhancedPSO", "description": "Hybrid-Enhanced PSO with Adaptive Learning and Differential Group Dynamics.", "configspace": "", "generation": 25, "fitness": 0.22314391519843094, "feedback": "The algorithm HybridEnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "947f911a-6319-45ed-a207-1bad4ec7a730", "metadata": {"aucs": [0.40216158878672337, 0.40216158878672337, 0.40216158878672337, 0.4023165230010469, 0.4023165230010469, 0.4023165230010469, 0.383963078935621, 0.383963078935621, 0.383963078935621, 0.018116365486304353, 0.018116365486304353, 0.018116365486304353, 0.0036850536157723157, 0.0036850536157723157, 0.0036850536157723157, 0.011438700920347378, 0.011438700920347378, 0.011438700920347378, 0.1271280503049662, 0.1271280503049662, 0.1271280503049662, 0.09137653460290951, 0.09137653460290951, 0.09137653460290951, 0.1145299556257725, 0.1145299556257725, 0.1145299556257725, 0.10066462165285739, 0.10066462165285739, 0.10066462165285739, 0.10390040352744667, 0.10390040352744667, 0.10390040352744667, 0.10407580388989823, 0.10407580388989823, 0.10407580388989823, 0.9443356451014966, 0.9443356451014966, 0.9443356451014966, 0.9407040005018353, 0.9407040005018353, 0.9407040005018353, 0.9470981760764546, 0.9470981760764546, 0.9470981760764546, 0.2540688615878416, 0.2540688615878416, 0.2540688615878416, 0.2517486145625585, 0.2517486145625585, 0.2517486145625585, 0.26887055706342067, 0.26887055706342067, 0.26887055706342067, 0.29032102065262544, 0.29032102065262544, 0.29032102065262544, 0.2806956808557072, 0.2806956808557072, 0.2806956808557072, 0.40547507370966973, 0.40547507370966973, 0.40547507370966973, 0.202346297057878, 0.202346297057878, 0.202346297057878, 0.1400268526808759, 0.1400268526808759, 0.1400268526808759, 0.16421579706061007, 0.16421579706061007, 0.16421579706061007, 0.1395753950439712, 0.1395753950439712, 0.1395753950439712, 0.17460718983714651, 0.17460718983714651, 0.17460718983714651, 0.1526949990975709, 0.1526949990975709, 0.1526949990975709, 0.048287797337731364, 0.048287797337731364, 0.048287797337731364, 0.005415181249372125, 0.005415181249372125, 0.005415181249372125, 0.000613153979644121, 0.000613153979644121, 0.000613153979644121, 0.12391780699747401, 0.12391780699747401, 0.12391780699747401, 0.08149489835755308, 0.08149489835755308, 0.08149489835755308, 0.13128952663800542, 0.13128952663800542, 0.13128952663800542, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008430658446090256, 0.0008430658446090256, 0.0008430658446090256, 0.07766323231294103, 0.07766323231294103, 0.07766323231294103, 0.07218648877788802, 0.07218648877788802, 0.07218648877788802, 0.07181542329239532, 0.07181542329239532, 0.07181542329239532, 0.37067324850720973, 0.37067324850720973, 0.37067324850720973, 0.3694511324282703, 0.3694511324282703, 0.3694511324282703, 0.36287715966205647, 0.36287715966205647, 0.36287715966205647, 0.10583007334038008, 0.10583007334038008, 0.10583007334038008, 0.11745733493785249, 0.11745733493785249, 0.11745733493785249, 0.10162598720215332, 0.10162598720215332, 0.10162598720215332, 0.2324138067403737, 0.2324138067403737, 0.2324138067403737, 0.21255371697527958, 0.21255371697527958, 0.21255371697527958, 0.211732946112962, 0.211732946112962, 0.211732946112962, 0.26047369419549427, 0.26047369419549427, 0.26047369419549427, 0.21796386490562558, 0.21796386490562558, 0.21796386490562558, 0.26510032919371884, 0.26510032919371884, 0.26510032919371884, 0.2146292467247527, 0.2146292467247527, 0.2146292467247527, 0.19735046168779125, 0.19735046168779125, 0.19735046168779125, 0.19795403065970485, 0.19795403065970485, 0.19795403065970485, 0.20238410271421647, 0.20238410271421647, 0.20238410271421647, 0.2331723702923315, 0.2331723702923315, 0.2331723702923315, 0.25033030527632205, 0.25033030527632205, 0.25033030527632205, 0.18952371846341742, 0.18952371846341742, 0.18952371846341742, 0.19308602605736502, 0.19308602605736502, 0.19308602605736502, 0.1854821342743257, 0.1854821342743257, 0.1854821342743257, 0.5938050627651386, 0.5938050627651386, 0.5938050627651386, 0.15751916937738408, 0.15751916937738408, 0.15751916937738408, 0.552559931992139, 0.552559931992139, 0.552559931992139, 0.4994281753273011, 0.4994281753273011, 0.4994281753273011, 0.20952696770343548, 0.20952696770343548, 0.20952696770343548, 0.4966407600661725, 0.4966407600661725, 0.4966407600661725, 0.18798774359057036, 0.18798774359057036, 0.18798774359057036, 0.18849481173046378, 0.18849481173046378, 0.18849481173046378, 0.18782255964018102, 0.18782255964018102, 0.18782255964018102, 0.07923373537875211, 0.07923373537875211, 0.07923373537875211, 0.07943473460705486, 0.07943473460705486, 0.07943473460705486, 0.10797513572989215, 0.10797513572989215, 0.10797513572989215]}, "mutation_prompt": null}
{"id": "beb99921-3d44-411f-905e-4d13835702ec", "solution": "import numpy as np\n\nclass HybridEnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5  # Enhanced cognitive learning\n        self.social_coeff = 1.8  # Enhanced social learning\n        self.exploration_coeff = 0.6\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.12\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_size = max(2, self.swarm_size // 3)  # Altered subgroup dynamics\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                # Hybrid learning with elite influence\n                elite_influence = 0.2 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "HybridEnhancedPSO", "description": "Hybrid-Enhanced PSO with Adaptive Learning and Differential Group Dynamics.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a86226-2c77-49a5-9777-b37df1528edd", "metadata": {"aucs": [0.40216158878672337, 0.40216158878672337, 0.40216158878672337, 0.4023165230010469, 0.4023165230010469, 0.4023165230010469, 0.383963078935621, 0.383963078935621, 0.383963078935621, 0.018116365486304353, 0.018116365486304353, 0.018116365486304353, 0.0036850536157723157, 0.0036850536157723157, 0.0036850536157723157, 0.011438700920347378, 0.011438700920347378, 0.011438700920347378, 0.1271280503049662, 0.1271280503049662, 0.1271280503049662, 0.09137653460290951, 0.09137653460290951, 0.09137653460290951, 0.1145299556257725, 0.1145299556257725, 0.1145299556257725, 0.10066462165285739, 0.10066462165285739, 0.10066462165285739, 0.10390040352744667, 0.10390040352744667, 0.10390040352744667, 0.10407580388989823, 0.10407580388989823, 0.10407580388989823, 0.9443356451014966, 0.9443356451014966, 0.9443356451014966, 0.9407040005018353, 0.9407040005018353, 0.9407040005018353, 0.9470981760764546, 0.9470981760764546, 0.9470981760764546, 0.2540688615878416, 0.2540688615878416, 0.2540688615878416, 0.2517486145625585, 0.2517486145625585, 0.2517486145625585, 0.26887055706342067, 0.26887055706342067, 0.26887055706342067, 0.29032102065262544, 0.29032102065262544, 0.29032102065262544, 0.2806956808557072, 0.2806956808557072, 0.2806956808557072, 0.40547507370966973, 0.40547507370966973, 0.40547507370966973, 0.202346297057878, 0.202346297057878, 0.202346297057878, 0.1400268526808759, 0.1400268526808759, 0.1400268526808759, 0.16421579706061007, 0.16421579706061007, 0.16421579706061007, 0.1395753950439712, 0.1395753950439712, 0.1395753950439712, 0.17460718983714651, 0.17460718983714651, 0.17460718983714651, 0.1526949990975709, 0.1526949990975709, 0.1526949990975709, 0.048287797337731364, 0.048287797337731364, 0.048287797337731364, 0.005415181249372125, 0.005415181249372125, 0.005415181249372125, 0.000613153979644121, 0.000613153979644121, 0.000613153979644121, 0.12391780699747401, 0.12391780699747401, 0.12391780699747401, 0.08149489835755308, 0.08149489835755308, 0.08149489835755308, 0.13128952663800542, 0.13128952663800542, 0.13128952663800542, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008430658446090256, 0.0008430658446090256, 0.0008430658446090256, 0.07766323231294103, 0.07766323231294103, 0.07766323231294103, 0.07218648877788802, 0.07218648877788802, 0.07218648877788802, 0.07181542329239532, 0.07181542329239532, 0.07181542329239532, 0.37067324850720973, 0.37067324850720973, 0.37067324850720973, 0.3694511324282703, 0.3694511324282703, 0.3694511324282703, 0.36287715966205647, 0.36287715966205647, 0.36287715966205647, 0.10583007334038008, 0.10583007334038008, 0.10583007334038008, 0.11745733493785249, 0.11745733493785249, 0.11745733493785249, 0.10162598720215332, 0.10162598720215332, 0.10162598720215332, 0.2324138067403737, 0.2324138067403737, 0.2324138067403737, 0.21255371697527958, 0.21255371697527958, 0.21255371697527958, 0.211732946112962, 0.211732946112962, 0.211732946112962, 0.26047369419549427, 0.26047369419549427, 0.26047369419549427, 0.21796386490562558, 0.21796386490562558, 0.21796386490562558, 0.26510032919371884, 0.26510032919371884, 0.26510032919371884, 0.2146292467247527, 0.2146292467247527, 0.2146292467247527, 0.19735046168779125, 0.19735046168779125, 0.19735046168779125, 0.19795403065970485, 0.19795403065970485, 0.19795403065970485, 0.20238410271421647, 0.20238410271421647, 0.20238410271421647, 0.2331723702923315, 0.2331723702923315, 0.2331723702923315, 0.25033030527632205, 0.25033030527632205, 0.25033030527632205, 0.18952371846341742, 0.18952371846341742, 0.18952371846341742, 0.19308602605736502, 0.19308602605736502, 0.19308602605736502, 0.1854821342743257, 0.1854821342743257, 0.1854821342743257, 0.5938050627651386, 0.5938050627651386, 0.5938050627651386, 0.15751916937738408, 0.15751916937738408, 0.15751916937738408, 0.552559931992139, 0.552559931992139, 0.552559931992139, 0.4994281753273011, 0.4994281753273011, 0.4994281753273011, 0.20952696770343548, 0.20952696770343548, 0.20952696770343548, 0.4966407600661725, 0.4966407600661725, 0.4966407600661725, 0.18798774359057036, 0.18798774359057036, 0.18798774359057036, 0.18849481173046378, 0.18849481173046378, 0.18849481173046378, 0.18782255964018102, 0.18782255964018102, 0.18782255964018102, 0.07923373537875211, 0.07923373537875211, 0.07923373537875211, 0.07943473460705486, 0.07943473460705486, 0.07943473460705486, 0.10797513572989215, 0.10797513572989215, 0.10797513572989215]}, "mutation_prompt": null}
{"id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "solution": "import numpy as np\n\nclass AdaptiveDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.6  # Enhanced cognitive learning\n        self.social_coeff = 1.9  # Enhanced social learning\n        self.exploration_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4  # Dynamic subgroup adjustment factor\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            adaptive_subgroup_size = max(2, int(self.swarm_size / subgroup_factor))\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, adaptive_subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                # Hybrid learning with elite influence\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveDynamicPSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Subgrouping for Enhanced Convergence.", "configspace": "", "generation": 27, "fitness": 0.2672578685435178, "feedback": "The algorithm AdaptiveDynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "d8a86226-2c77-49a5-9777-b37df1528edd", "metadata": {"aucs": [0.5944948726244728, 0.5944948726244728, 0.5944948726244728, 0.6080719350810411, 0.6080719350810411, 0.6080719350810411, 0.5959890397855385, 0.5959890397855385, 0.5959890397855385, 0.2635008162389413, 0.2635008162389413, 0.2635008162389413, 0.2024122428590337, 0.2024122428590337, 0.2024122428590337, 0.2135743420485503, 0.2135743420485503, 0.2135743420485503, 0.13775790151351008, 0.13775790151351008, 0.13775790151351008, 0.15202221854679043, 0.15202221854679043, 0.15202221854679043, 0.08492797626288684, 0.08492797626288684, 0.08492797626288684, 0.1232540474418502, 0.1232540474418502, 0.1232540474418502, 0.11340744406238423, 0.11340744406238423, 0.11340744406238423, 0.12751974410930578, 0.12751974410930578, 0.12751974410930578, 0.9546839391525543, 0.9546839391525543, 0.9546839391525543, 0.9581145087797608, 0.9581145087797608, 0.9581145087797608, 0.9558302270302627, 0.9558302270302627, 0.9558302270302627, 0.3301215814741655, 0.3301215814741655, 0.3301215814741655, 0.35076597345835203, 0.35076597345835203, 0.35076597345835203, 0.31275074745306986, 0.31275074745306986, 0.31275074745306986, 0.5216541666541996, 0.5216541666541996, 0.5216541666541996, 0.20959204031119838, 0.20959204031119838, 0.20959204031119838, 0.4806844896492557, 0.4806844896492557, 0.4806844896492557, 0.2571750199058086, 0.2571750199058086, 0.2571750199058086, 0.18243971876072085, 0.18243971876072085, 0.18243971876072085, 0.1534875596232449, 0.1534875596232449, 0.1534875596232449, 0.15305643143604464, 0.15305643143604464, 0.15305643143604464, 0.16365053762592052, 0.16365053762592052, 0.16365053762592052, 0.18203498937086593, 0.18203498937086593, 0.18203498937086593, 0.08376517811083906, 0.08376517811083906, 0.08376517811083906, 0.01876670711730899, 0.01876670711730899, 0.01876670711730899, 0.000832381684794048, 0.000832381684794048, 0.000832381684794048, 0.15409206204311054, 0.15409206204311054, 0.15409206204311054, 0.04925380528266543, 0.04925380528266543, 0.04925380528266543, 0.11074077702005147, 0.11074077702005147, 0.11074077702005147, 0.024195760572629066, 0.024195760572629066, 0.024195760572629066, 0.06532918221928918, 0.06532918221928918, 0.06532918221928918, 0.07757367094673773, 0.07757367094673773, 0.07757367094673773, 0.09313128027348305, 0.09313128027348305, 0.09313128027348305, 0.12719042896006671, 0.12719042896006671, 0.12719042896006671, 0.11235465062943728, 0.11235465062943728, 0.11235465062943728, 0.44259895571477137, 0.44259895571477137, 0.44259895571477137, 0.4591328168940869, 0.4591328168940869, 0.4591328168940869, 0.45869313313309035, 0.45869313313309035, 0.45869313313309035, 0.14099566653931883, 0.14099566653931883, 0.14099566653931883, 0.11333782236797907, 0.11333782236797907, 0.11333782236797907, 0.23990604664269055, 0.23990604664269055, 0.23990604664269055, 0.32109028951651053, 0.32109028951651053, 0.32109028951651053, 0.17786827766986169, 0.17786827766986169, 0.17786827766986169, 0.28664553332738874, 0.28664553332738874, 0.28664553332738874, 0.31514538159589045, 0.31514538159589045, 0.31514538159589045, 0.3105036183555492, 0.3105036183555492, 0.3105036183555492, 0.3775561924652381, 0.3775561924652381, 0.3775561924652381, 0.2575059386372196, 0.2575059386372196, 0.2575059386372196, 0.2546716886076572, 0.2546716886076572, 0.2546716886076572, 0.24722725373762233, 0.24722725373762233, 0.24722725373762233, 0.2121928517610211, 0.2121928517610211, 0.2121928517610211, 0.22637885304128813, 0.22637885304128813, 0.22637885304128813, 0.305539868248202, 0.305539868248202, 0.305539868248202, 0.21491745071361934, 0.21491745071361934, 0.21491745071361934, 0.1871140957792926, 0.1871140957792926, 0.1871140957792926, 0.205229498323509, 0.205229498323509, 0.205229498323509, 0.7614388655822166, 0.7614388655822166, 0.7614388655822166, 0.1579296889870584, 0.1579296889870584, 0.1579296889870584, 0.16884184014855597, 0.16884184014855597, 0.16884184014855597, 0.5077368868371629, 0.5077368868371629, 0.5077368868371629, 0.2104167707035728, 0.2104167707035728, 0.2104167707035728, 0.5389537170500873, 0.5389537170500873, 0.5389537170500873, 0.182303394022442, 0.182303394022442, 0.182303394022442, 0.18061519227697242, 0.18061519227697242, 0.18061519227697242, 0.18729587466795017, 0.18729587466795017, 0.18729587466795017, 0.09829756864761163, 0.09829756864761163, 0.09829756864761163, 0.09048282804749508, 0.09048282804749508, 0.09048282804749508, 0.10380227897020955, 0.10380227897020955, 0.10380227897020955]}, "mutation_prompt": null}
{"id": "c23a299e-54b7-41fe-9fe5-05c349276d33", "solution": "import numpy as np\n\nclass AdaptiveDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.6  # Enhanced cognitive learning\n        self.social_coeff = 1.9  # Enhanced social learning\n        self.exploration_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4  # Dynamic subgroup adjustment factor\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            adaptive_subgroup_size = max(2, int(self.swarm_size / subgroup_factor))\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, adaptive_subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                # Hybrid learning with elite influence\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveDynamicPSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Subgrouping for Enhanced Convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.5944948726244728, 0.5944948726244728, 0.5944948726244728, 0.6080719350810411, 0.6080719350810411, 0.6080719350810411, 0.5959890397855385, 0.5959890397855385, 0.5959890397855385, 0.2635008162389413, 0.2635008162389413, 0.2635008162389413, 0.2024122428590337, 0.2024122428590337, 0.2024122428590337, 0.2135743420485503, 0.2135743420485503, 0.2135743420485503, 0.13775790151351008, 0.13775790151351008, 0.13775790151351008, 0.15202221854679043, 0.15202221854679043, 0.15202221854679043, 0.08492797626288684, 0.08492797626288684, 0.08492797626288684, 0.1232540474418502, 0.1232540474418502, 0.1232540474418502, 0.11340744406238423, 0.11340744406238423, 0.11340744406238423, 0.12751974410930578, 0.12751974410930578, 0.12751974410930578, 0.9546839391525543, 0.9546839391525543, 0.9546839391525543, 0.9581145087797608, 0.9581145087797608, 0.9581145087797608, 0.9558302270302627, 0.9558302270302627, 0.9558302270302627, 0.3301215814741655, 0.3301215814741655, 0.3301215814741655, 0.35076597345835203, 0.35076597345835203, 0.35076597345835203, 0.31275074745306986, 0.31275074745306986, 0.31275074745306986, 0.5216541666541996, 0.5216541666541996, 0.5216541666541996, 0.20959204031119838, 0.20959204031119838, 0.20959204031119838, 0.4806844896492557, 0.4806844896492557, 0.4806844896492557, 0.2571750199058086, 0.2571750199058086, 0.2571750199058086, 0.18243971876072085, 0.18243971876072085, 0.18243971876072085, 0.1534875596232449, 0.1534875596232449, 0.1534875596232449, 0.15305643143604464, 0.15305643143604464, 0.15305643143604464, 0.16365053762592052, 0.16365053762592052, 0.16365053762592052, 0.18203498937086593, 0.18203498937086593, 0.18203498937086593, 0.08376517811083906, 0.08376517811083906, 0.08376517811083906, 0.01876670711730899, 0.01876670711730899, 0.01876670711730899, 0.000832381684794048, 0.000832381684794048, 0.000832381684794048, 0.15409206204311054, 0.15409206204311054, 0.15409206204311054, 0.04925380528266543, 0.04925380528266543, 0.04925380528266543, 0.11074077702005147, 0.11074077702005147, 0.11074077702005147, 0.024195760572629066, 0.024195760572629066, 0.024195760572629066, 0.06532918221928918, 0.06532918221928918, 0.06532918221928918, 0.07757367094673773, 0.07757367094673773, 0.07757367094673773, 0.09313128027348305, 0.09313128027348305, 0.09313128027348305, 0.12719042896006671, 0.12719042896006671, 0.12719042896006671, 0.11235465062943728, 0.11235465062943728, 0.11235465062943728, 0.44259895571477137, 0.44259895571477137, 0.44259895571477137, 0.4591328168940869, 0.4591328168940869, 0.4591328168940869, 0.45869313313309035, 0.45869313313309035, 0.45869313313309035, 0.14099566653931883, 0.14099566653931883, 0.14099566653931883, 0.11333782236797907, 0.11333782236797907, 0.11333782236797907, 0.23990604664269055, 0.23990604664269055, 0.23990604664269055, 0.32109028951651053, 0.32109028951651053, 0.32109028951651053, 0.17786827766986169, 0.17786827766986169, 0.17786827766986169, 0.28664553332738874, 0.28664553332738874, 0.28664553332738874, 0.31514538159589045, 0.31514538159589045, 0.31514538159589045, 0.3105036183555492, 0.3105036183555492, 0.3105036183555492, 0.3775561924652381, 0.3775561924652381, 0.3775561924652381, 0.2575059386372196, 0.2575059386372196, 0.2575059386372196, 0.2546716886076572, 0.2546716886076572, 0.2546716886076572, 0.24722725373762233, 0.24722725373762233, 0.24722725373762233, 0.2121928517610211, 0.2121928517610211, 0.2121928517610211, 0.22637885304128813, 0.22637885304128813, 0.22637885304128813, 0.305539868248202, 0.305539868248202, 0.305539868248202, 0.21491745071361934, 0.21491745071361934, 0.21491745071361934, 0.1871140957792926, 0.1871140957792926, 0.1871140957792926, 0.205229498323509, 0.205229498323509, 0.205229498323509, 0.7614388655822166, 0.7614388655822166, 0.7614388655822166, 0.1579296889870584, 0.1579296889870584, 0.1579296889870584, 0.16884184014855597, 0.16884184014855597, 0.16884184014855597, 0.5077368868371629, 0.5077368868371629, 0.5077368868371629, 0.2104167707035728, 0.2104167707035728, 0.2104167707035728, 0.5389537170500873, 0.5389537170500873, 0.5389537170500873, 0.182303394022442, 0.182303394022442, 0.182303394022442, 0.18061519227697242, 0.18061519227697242, 0.18061519227697242, 0.18729587466795017, 0.18729587466795017, 0.18729587466795017, 0.09829756864761163, 0.09829756864761163, 0.09829756864761163, 0.09048282804749508, 0.09048282804749508, 0.09048282804749508, 0.10380227897020955, 0.10380227897020955, 0.10380227897020955]}, "mutation_prompt": null}
{"id": "1c0997a3-c6c5-48e8-9962-be6c2d58ff21", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.2\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.exploration_coeff = 0.6\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.12\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 3\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * ((evaluations / self.budget)**2)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            elite_index = np.random.choice(self.swarm_size)\n            elite_position = personal_best_position[elite_index]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, max(2, int(self.swarm_size / subgroup_factor)), replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.1 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveDynamicPSO", "description": "Enhanced Adaptive Dynamic PSO with Randomized Elite and Non-linear Inertia Decay for Improved Convergence.", "configspace": "", "generation": 29, "fitness": 0.21832078099775565, "feedback": "The algorithm EnhancedAdaptiveDynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.3853127988084717, 0.3853127988084717, 0.3853127988084717, 0.39811502011073496, 0.39811502011073496, 0.39811502011073496, 0.40006327429540944, 0.40006327429540944, 0.40006327429540944, 0.041367386430034236, 0.041367386430034236, 0.041367386430034236, 0.006356119094185875, 0.006356119094185875, 0.006356119094185875, 0.0001098037639496452, 0.0001098037639496452, 0.0001098037639496452, 0.10644428012426088, 0.10644428012426088, 0.10644428012426088, 0.11748942479187408, 0.11748942479187408, 0.11748942479187408, 0.09903072176061689, 0.09903072176061689, 0.09903072176061689, 0.09006567259068377, 0.09006567259068377, 0.09006567259068377, 0.10585260579378031, 0.10585260579378031, 0.10585260579378031, 0.0988026429993033, 0.0988026429993033, 0.0988026429993033, 0.9462192630975432, 0.9462192630975432, 0.9462192630975432, 0.9512563015922553, 0.9512563015922553, 0.9512563015922553, 0.9501759955635914, 0.9501759955635914, 0.9501759955635914, 0.23992152415131696, 0.23992152415131696, 0.23992152415131696, 0.2634999806421292, 0.2634999806421292, 0.2634999806421292, 0.25443922759785653, 0.25443922759785653, 0.25443922759785653, 0.21138392685472718, 0.21138392685472718, 0.21138392685472718, 0.2869374963908934, 0.2869374963908934, 0.2869374963908934, 0.3170655824286247, 0.3170655824286247, 0.3170655824286247, 0.10370276327797978, 0.10370276327797978, 0.10370276327797978, 0.15911288398022394, 0.15911288398022394, 0.15911288398022394, 0.14938444697343944, 0.14938444697343944, 0.14938444697343944, 0.1389436899513825, 0.1389436899513825, 0.1389436899513825, 0.12556382775917296, 0.12556382775917296, 0.12556382775917296, 0.1579813918332409, 0.1579813918332409, 0.1579813918332409, 0.01050444699196229, 0.01050444699196229, 0.01050444699196229, 0.000613162552198232, 0.000613162552198232, 0.000613162552198232, 0.0018800666003344624, 0.0018800666003344624, 0.0018800666003344624, 0.12457121499033441, 0.12457121499033441, 0.12457121499033441, 0.15177357840131012, 0.15177357840131012, 0.15177357840131012, 0.1768318320061586, 0.1768318320061586, 0.1768318320061586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07916369661360201, 0.07916369661360201, 0.07916369661360201, 0.08838706345703318, 0.08838706345703318, 0.08838706345703318, 0.0962485283088137, 0.0962485283088137, 0.0962485283088137, 0.3614137837428827, 0.3614137837428827, 0.3614137837428827, 0.35901807200822666, 0.35901807200822666, 0.35901807200822666, 0.36461424979580437, 0.36461424979580437, 0.36461424979580437, 0.11096705415819375, 0.11096705415819375, 0.11096705415819375, 0.10144915579963876, 0.10144915579963876, 0.10144915579963876, 0.107760065139194, 0.107760065139194, 0.107760065139194, 0.16017192050962292, 0.16017192050962292, 0.16017192050962292, 0.24904264765469453, 0.24904264765469453, 0.24904264765469453, 0.18990384660110193, 0.18990384660110193, 0.18990384660110193, 0.2593178870567857, 0.2593178870567857, 0.2593178870567857, 0.27336604950073573, 0.27336604950073573, 0.27336604950073573, 0.27227222938829776, 0.27227222938829776, 0.27227222938829776, 0.18670551175982197, 0.18670551175982197, 0.18670551175982197, 0.19398594705668903, 0.19398594705668903, 0.19398594705668903, 0.16964774324924914, 0.16964774324924914, 0.16964774324924914, 0.2204492480734782, 0.2204492480734782, 0.2204492480734782, 0.26045728458394957, 0.26045728458394957, 0.26045728458394957, 0.23818632354109381, 0.23818632354109381, 0.23818632354109381, 0.23025162006737887, 0.23025162006737887, 0.23025162006737887, 0.20807524525359022, 0.20807524525359022, 0.20807524525359022, 0.17735549923214478, 0.17735549923214478, 0.17735549923214478, 0.581823709352558, 0.581823709352558, 0.581823709352558, 0.1574167224454135, 0.1574167224454135, 0.1574167224454135, 0.5603493341566762, 0.5603493341566762, 0.5603493341566762, 0.4815639971237712, 0.4815639971237712, 0.4815639971237712, 0.20807244282066129, 0.20807244282066129, 0.20807244282066129, 0.3316618471576418, 0.3316618471576418, 0.3316618471576418, 0.19035692399500959, 0.19035692399500959, 0.19035692399500959, 0.1880441233014486, 0.1880441233014486, 0.1880441233014486, 0.1905475416923439, 0.1905475416923439, 0.1905475416923439, 0.09049344699110429, 0.09049344699110429, 0.09049344699110429, 0.09731013235805497, 0.09731013235805497, 0.09731013235805497, 0.11217298369171735, 0.11217298369171735, 0.11217298369171735]}, "mutation_prompt": null}
{"id": "6d19f064-1f57-421e-a718-df01fdfaeb0f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.6\n        self.social_coeff = 1.9\n        self.exploration_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            adaptive_subgroup_size = max(2, int(self.swarm_size / subgroup_factor))\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, adaptive_subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.2 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Introduce elite-guided differential evolution for enhanced exploration\n            for i in range(self.swarm_size):\n                if np.random.rand() < 0.1:  # 10% chance to perform DE\n                    idxs = np.random.choice(self.swarm_size, 3, replace=False)\n                    a, b, c = personal_best_position[idxs]\n                    mutant = a + 0.8 * (b - c)\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    if func(mutant) < personal_best_value[i]:\n                        personal_best_position[i] = mutant\n                        personal_best_value[i] = func(mutant)\n                        evaluations += 1\n                        if personal_best_value[i] < global_best_value:\n                            global_best_value = personal_best_value[i]\n                            global_best_position = mutant\n\n        return global_best_value", "name": "EnhancedAdaptiveDynamicPSO", "description": "Enhanced Particle Swarm Optimization with Adaptive Learning and Elite-guided Differential Evolution for Improved Convergence.", "configspace": "", "generation": 30, "fitness": 0.2590532722726201, "feedback": "The algorithm EnhancedAdaptiveDynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.5380133809741459, 0.5380133809741459, 0.5380133809741459, 0.5201985330185209, 0.5201985330185209, 0.5201985330185209, 0.5188609434066855, 0.5188609434066855, 0.5188609434066855, 0.17360009384415753, 0.17360009384415753, 0.17360009384415753, 0.15356014964915266, 0.15356014964915266, 0.15356014964915266, 0.1751086780065052, 0.1751086780065052, 0.1751086780065052, 0.12484735336010455, 0.12484735336010455, 0.12484735336010455, 0.10377095161924377, 0.10377095161924377, 0.10377095161924377, 0.15462438085005648, 0.15462438085005648, 0.15462438085005648, 0.10043612261094459, 0.10043612261094459, 0.10043612261094459, 0.11745581869618837, 0.11745581869618837, 0.11745581869618837, 0.09569566231732385, 0.09569566231732385, 0.09569566231732385, 0.9440949914536323, 0.9440949914536323, 0.9440949914536323, 0.9578275750715912, 0.9578275750715912, 0.9578275750715912, 0.9560895957547743, 0.9560895957547743, 0.9560895957547743, 0.3128749674488275, 0.3128749674488275, 0.3128749674488275, 0.32329312112904485, 0.32329312112904485, 0.32329312112904485, 0.3188797843792366, 0.3188797843792366, 0.3188797843792366, 0.45384316665313396, 0.45384316665313396, 0.45384316665313396, 0.2580687659665226, 0.2580687659665226, 0.2580687659665226, 0.3902869849273981, 0.3902869849273981, 0.3902869849273981, 0.15424141484535936, 0.15424141484535936, 0.15424141484535936, 0.20459673868416006, 0.20459673868416006, 0.20459673868416006, 0.16371350952300767, 0.16371350952300767, 0.16371350952300767, 0.16827984429748577, 0.16827984429748577, 0.16827984429748577, 0.15121629563503125, 0.15121629563503125, 0.15121629563503125, 0.18133821269105255, 0.18133821269105255, 0.18133821269105255, 0.017354891848974652, 0.017354891848974652, 0.017354891848974652, 0.0050580657335552726, 0.0050580657335552726, 0.0050580657335552726, 0.031992703359739805, 0.031992703359739805, 0.031992703359739805, 0.18486114151823396, 0.18486114151823396, 0.18486114151823396, 0.13739851661375757, 0.13739851661375757, 0.13739851661375757, 0.16621859301746267, 0.16621859301746267, 0.16621859301746267, 0.02162532000227091, 0.02162532000227091, 0.02162532000227091, 0.012695935622972887, 0.012695935622972887, 0.012695935622972887, 0.07140519400957968, 0.07140519400957968, 0.07140519400957968, 0.14531317469936456, 0.14531317469936456, 0.14531317469936456, 0.11696087489349871, 0.11696087489349871, 0.11696087489349871, 0.1450535528341843, 0.1450535528341843, 0.1450535528341843, 0.45401265304805816, 0.45401265304805816, 0.45401265304805816, 0.44998038549263997, 0.44998038549263997, 0.44998038549263997, 0.44025953954025765, 0.44025953954025765, 0.44025953954025765, 0.16566842373887425, 0.16566842373887425, 0.16566842373887425, 0.1182945182350078, 0.1182945182350078, 0.1182945182350078, 0.12570110013615687, 0.12570110013615687, 0.12570110013615687, 0.29255914197135247, 0.29255914197135247, 0.29255914197135247, 0.23282357357162253, 0.23282357357162253, 0.23282357357162253, 0.208563557302208, 0.208563557302208, 0.208563557302208, 0.34967888314725837, 0.34967888314725837, 0.34967888314725837, 0.2514960503599458, 0.2514960503599458, 0.2514960503599458, 0.32019581524022334, 0.32019581524022334, 0.32019581524022334, 0.21256403385045008, 0.21256403385045008, 0.21256403385045008, 0.21776201766385828, 0.21776201766385828, 0.21776201766385828, 0.22892903479872406, 0.22892903479872406, 0.22892903479872406, 0.23292581148718405, 0.23292581148718405, 0.23292581148718405, 0.23045166809326745, 0.23045166809326745, 0.23045166809326745, 0.22152607875424313, 0.22152607875424313, 0.22152607875424313, 0.3790306647537953, 0.3790306647537953, 0.3790306647537953, 0.19003104321783526, 0.19003104321783526, 0.19003104321783526, 0.2023135894597965, 0.2023135894597965, 0.2023135894597965, 0.7571039294034263, 0.7571039294034263, 0.7571039294034263, 0.15755512325974264, 0.15755512325974264, 0.15755512325974264, 0.16821219621083017, 0.16821219621083017, 0.16821219621083017, 0.6389415398779145, 0.6389415398779145, 0.6389415398779145, 0.21073462359084738, 0.21073462359084738, 0.21073462359084738, 0.5523316215282076, 0.5523316215282076, 0.5523316215282076, 0.18061771298027363, 0.18061771298027363, 0.18061771298027363, 0.19493420072293643, 0.19493420072293643, 0.19493420072293643, 0.18867981171246317, 0.18867981171246317, 0.18867981171246317, 0.08764196539826685, 0.08764196539826685, 0.08764196539826685, 0.09018958533347265, 0.09018958533347265, 0.09018958533347265, 0.12937070878062118, 0.12937070878062118, 0.12937070878062118]}, "mutation_prompt": null}
{"id": "15a0e11e-70c5-4c2d-82d8-cb75c4353963", "solution": "import numpy as np\n\nclass AdaptiveDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.6  # Enhanced cognitive learning\n        self.social_coeff = 1.9  # Enhanced social learning\n        self.exploration_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4  # Dynamic subgroup adjustment factor\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            adaptive_subgroup_size = max(2, int(self.swarm_size / subgroup_factor))\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, adaptive_subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                # Hybrid learning with elite influence\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveDynamicPSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Subgrouping for Enhanced Convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.5944948726244728, 0.5944948726244728, 0.5944948726244728, 0.6080719350810411, 0.6080719350810411, 0.6080719350810411, 0.5959890397855385, 0.5959890397855385, 0.5959890397855385, 0.2635008162389413, 0.2635008162389413, 0.2635008162389413, 0.2024122428590337, 0.2024122428590337, 0.2024122428590337, 0.2135743420485503, 0.2135743420485503, 0.2135743420485503, 0.13775790151351008, 0.13775790151351008, 0.13775790151351008, 0.15202221854679043, 0.15202221854679043, 0.15202221854679043, 0.08492797626288684, 0.08492797626288684, 0.08492797626288684, 0.1232540474418502, 0.1232540474418502, 0.1232540474418502, 0.11340744406238423, 0.11340744406238423, 0.11340744406238423, 0.12751974410930578, 0.12751974410930578, 0.12751974410930578, 0.9546839391525543, 0.9546839391525543, 0.9546839391525543, 0.9581145087797608, 0.9581145087797608, 0.9581145087797608, 0.9558302270302627, 0.9558302270302627, 0.9558302270302627, 0.3301215814741655, 0.3301215814741655, 0.3301215814741655, 0.35076597345835203, 0.35076597345835203, 0.35076597345835203, 0.31275074745306986, 0.31275074745306986, 0.31275074745306986, 0.5216541666541996, 0.5216541666541996, 0.5216541666541996, 0.20959204031119838, 0.20959204031119838, 0.20959204031119838, 0.4806844896492557, 0.4806844896492557, 0.4806844896492557, 0.2571750199058086, 0.2571750199058086, 0.2571750199058086, 0.18243971876072085, 0.18243971876072085, 0.18243971876072085, 0.1534875596232449, 0.1534875596232449, 0.1534875596232449, 0.15305643143604464, 0.15305643143604464, 0.15305643143604464, 0.16365053762592052, 0.16365053762592052, 0.16365053762592052, 0.18203498937086593, 0.18203498937086593, 0.18203498937086593, 0.08376517811083906, 0.08376517811083906, 0.08376517811083906, 0.01876670711730899, 0.01876670711730899, 0.01876670711730899, 0.000832381684794048, 0.000832381684794048, 0.000832381684794048, 0.15409206204311054, 0.15409206204311054, 0.15409206204311054, 0.04925380528266543, 0.04925380528266543, 0.04925380528266543, 0.11074077702005147, 0.11074077702005147, 0.11074077702005147, 0.024195760572629066, 0.024195760572629066, 0.024195760572629066, 0.06532918221928918, 0.06532918221928918, 0.06532918221928918, 0.07757367094673773, 0.07757367094673773, 0.07757367094673773, 0.09313128027348305, 0.09313128027348305, 0.09313128027348305, 0.12719042896006671, 0.12719042896006671, 0.12719042896006671, 0.11235465062943728, 0.11235465062943728, 0.11235465062943728, 0.44259895571477137, 0.44259895571477137, 0.44259895571477137, 0.4591328168940869, 0.4591328168940869, 0.4591328168940869, 0.45869313313309035, 0.45869313313309035, 0.45869313313309035, 0.14099566653931883, 0.14099566653931883, 0.14099566653931883, 0.11333782236797907, 0.11333782236797907, 0.11333782236797907, 0.23990604664269055, 0.23990604664269055, 0.23990604664269055, 0.32109028951651053, 0.32109028951651053, 0.32109028951651053, 0.17786827766986169, 0.17786827766986169, 0.17786827766986169, 0.28664553332738874, 0.28664553332738874, 0.28664553332738874, 0.31514538159589045, 0.31514538159589045, 0.31514538159589045, 0.3105036183555492, 0.3105036183555492, 0.3105036183555492, 0.3775561924652381, 0.3775561924652381, 0.3775561924652381, 0.2575059386372196, 0.2575059386372196, 0.2575059386372196, 0.2546716886076572, 0.2546716886076572, 0.2546716886076572, 0.24722725373762233, 0.24722725373762233, 0.24722725373762233, 0.2121928517610211, 0.2121928517610211, 0.2121928517610211, 0.22637885304128813, 0.22637885304128813, 0.22637885304128813, 0.305539868248202, 0.305539868248202, 0.305539868248202, 0.21491745071361934, 0.21491745071361934, 0.21491745071361934, 0.1871140957792926, 0.1871140957792926, 0.1871140957792926, 0.205229498323509, 0.205229498323509, 0.205229498323509, 0.7614388655822166, 0.7614388655822166, 0.7614388655822166, 0.1579296889870584, 0.1579296889870584, 0.1579296889870584, 0.16884184014855597, 0.16884184014855597, 0.16884184014855597, 0.5077368868371629, 0.5077368868371629, 0.5077368868371629, 0.2104167707035728, 0.2104167707035728, 0.2104167707035728, 0.5389537170500873, 0.5389537170500873, 0.5389537170500873, 0.182303394022442, 0.182303394022442, 0.182303394022442, 0.18061519227697242, 0.18061519227697242, 0.18061519227697242, 0.18729587466795017, 0.18729587466795017, 0.18729587466795017, 0.09829756864761163, 0.09829756864761163, 0.09829756864761163, 0.09048282804749508, 0.09048282804749508, 0.09048282804749508, 0.10380227897020955, 0.10380227897020955, 0.10380227897020955]}, "mutation_prompt": null}
{"id": "7c9cb2b6-d780-47a9-bf4c-eea5d573e4a3", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Reduced swarm size for faster exploration\n        self.initial_inertia = 0.9  # Increased initial inertia for better exploration\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0  # Increased social influence\n        self.exploration_coeff = 0.6  # Enhanced exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.2  # Increased velocity range\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 3  # Adjusted subgroup factor for better focus\n\n        while evaluations < self.budget:\n            inertia = self.final_inertia + (self.initial_inertia - self.final_inertia) * np.exp(-5 * (evaluations / self.budget))\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, int(self.swarm_size / subgroup_factor), replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                # Enhanced leader influence\n                leader_influence = 0.2 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + leader_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with Adaptive Inertia and Leader Influence for Accelerated Convergence.", "configspace": "", "generation": 32, "fitness": 0.21287820936923868, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.3913457530024961, 0.3913457530024961, 0.3913457530024961, 0.39187255212850847, 0.39187255212850847, 0.39187255212850847, 0.4008036279139854, 0.4008036279139854, 0.4008036279139854, 0.019100010257283806, 0.019100010257283806, 0.019100010257283806, 0.025885840181252395, 0.025885840181252395, 0.025885840181252395, 0.00822717841484577, 0.00822717841484577, 0.00822717841484577, 0.11029272067199436, 0.11029272067199436, 0.11029272067199436, 0.1215287452289735, 0.1215287452289735, 0.1215287452289735, 0.09444934615056588, 0.09444934615056588, 0.09444934615056588, 0.09728389188316455, 0.09728389188316455, 0.09728389188316455, 0.07821577360605803, 0.07821577360605803, 0.07821577360605803, 0.08979606962534925, 0.08979606962534925, 0.08979606962534925, 0.9719112920674605, 0.9719112920674605, 0.9719112920674605, 0.9627584873078044, 0.9627584873078044, 0.9627584873078044, 0.9676667467055261, 0.9676667467055261, 0.9676667467055261, 0.2648135895648138, 0.2648135895648138, 0.2648135895648138, 0.26953969143214696, 0.26953969143214696, 0.26953969143214696, 0.279969948585837, 0.279969948585837, 0.279969948585837, 0.31554325654582815, 0.31554325654582815, 0.31554325654582815, 0.32160288564753037, 0.32160288564753037, 0.32160288564753037, 0.22825557216064463, 0.22825557216064463, 0.22825557216064463, 0.14788545593945457, 0.14788545593945457, 0.14788545593945457, 0.14235652367762197, 0.14235652367762197, 0.14235652367762197, 0.1466380971314022, 0.1466380971314022, 0.1466380971314022, 0.147081300538209, 0.147081300538209, 0.147081300538209, 0.15448559866292544, 0.15448559866292544, 0.15448559866292544, 0.1856915057526951, 0.1856915057526951, 0.1856915057526951, 0.03332753162071456, 0.03332753162071456, 0.03332753162071456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0961348955754514, 0.0961348955754514, 0.0961348955754514, 0.05041812165192172, 0.05041812165192172, 0.05041812165192172, 0.02831097768283053, 0.02831097768283053, 0.02831097768283053, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08037666359536311, 0.08037666359536311, 0.08037666359536311, 0.09439302269178518, 0.09439302269178518, 0.09439302269178518, 0.06465253042607477, 0.06465253042607477, 0.06465253042607477, 0.3635730740602948, 0.3635730740602948, 0.3635730740602948, 0.37707874031849975, 0.37707874031849975, 0.37707874031849975, 0.3746688263788991, 0.3746688263788991, 0.3746688263788991, 0.09118138918779128, 0.09118138918779128, 0.09118138918779128, 0.10397970103342591, 0.10397970103342591, 0.10397970103342591, 0.11400570488279305, 0.11400570488279305, 0.11400570488279305, 0.2164450511416134, 0.2164450511416134, 0.2164450511416134, 0.1658950614026531, 0.1658950614026531, 0.1658950614026531, 0.23036231639137206, 0.23036231639137206, 0.23036231639137206, 0.2715105063749905, 0.2715105063749905, 0.2715105063749905, 0.2743199803885412, 0.2743199803885412, 0.2743199803885412, 0.28099025545953427, 0.28099025545953427, 0.28099025545953427, 0.18018203800510313, 0.18018203800510313, 0.18018203800510313, 0.19747217103976633, 0.19747217103976633, 0.19747217103976633, 0.21494874792284935, 0.21494874792284935, 0.21494874792284935, 0.228610716297876, 0.228610716297876, 0.228610716297876, 0.20193783580122504, 0.20193783580122504, 0.20193783580122504, 0.22673004548887277, 0.22673004548887277, 0.22673004548887277, 0.1813632948334154, 0.1813632948334154, 0.1813632948334154, 0.1969748142997515, 0.1969748142997515, 0.1969748142997515, 0.18841110651270376, 0.18841110651270376, 0.18841110651270376, 0.5795165150547101, 0.5795165150547101, 0.5795165150547101, 0.17129449129571572, 0.17129449129571572, 0.17129449129571572, 0.13477448884122456, 0.13477448884122456, 0.13477448884122456, 0.4766383779751835, 0.4766383779751835, 0.4766383779751835, 0.20764684342802742, 0.20764684342802742, 0.20764684342802742, 0.4297479063407753, 0.4297479063407753, 0.4297479063407753, 0.18930563885768736, 0.18930563885768736, 0.18930563885768736, 0.19792810286653983, 0.19792810286653983, 0.19792810286653983, 0.19104820761921204, 0.19104820761921204, 0.19104820761921204, 0.08760737241938443, 0.08760737241938443, 0.08760737241938443, 0.09144049647152952, 0.09144049647152952, 0.09144049647152952, 0.10652605216470423, 0.10652605216470423, 0.10652605216470423]}, "mutation_prompt": null}
{"id": "aef432ac-1683-4529-be5d-1328a84ab319", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9  # Increased initial inertia for better exploration\n        self.final_inertia = 0.2  # Reduced final inertia for better exploitation\n        self.cognitive_coeff = 1.6\n        self.social_coeff = 1.9\n        self.exploration_coeff = 0.7  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 3  # Adjusted dynamic subgroup factor for better adaptation\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            adaptive_subgroup_size = max(2, int(self.swarm_size / subgroup_factor))\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, adaptive_subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)  # Use mean for exploration\n\n                # Hybrid learning with elite influence\n                elite_influence = 0.1 * np.random.rand(self.dim) * (elite_position - position[i])  # Slightly reduced\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveDynamicPSO", "description": "Enhanced AdaptiveDynamicPSO with Dynamic Inertia and Subgroup-Specific Exploration for Faster Convergence.", "configspace": "", "generation": 33, "fitness": 0.2001809118048074, "feedback": "The algorithm EnhancedAdaptiveDynamicPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.36971196169339005, 0.36971196169339005, 0.36971196169339005, 0.3580409222132058, 0.3580409222132058, 0.3580409222132058, 0.4239453057528213, 0.4239453057528213, 0.4239453057528213, 0.0075874853567061695, 0.0075874853567061695, 0.0075874853567061695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029894437242847238, 0.029894437242847238, 0.029894437242847238, 0.11809693293604628, 0.11809693293604628, 0.11809693293604628, 0.1099187225059799, 0.1099187225059799, 0.1099187225059799, 0.1183865191285004, 0.1183865191285004, 0.1183865191285004, 0.1031250910686996, 0.1031250910686996, 0.1031250910686996, 0.087258553914075, 0.087258553914075, 0.087258553914075, 0.09308373932298286, 0.09308373932298286, 0.09308373932298286, 0.9603894188995576, 0.9603894188995576, 0.9603894188995576, 0.9601092996079719, 0.9601092996079719, 0.9601092996079719, 0.9612122849194192, 0.9612122849194192, 0.9612122849194192, 0.2376608225486544, 0.2376608225486544, 0.2376608225486544, 0.23317156601306976, 0.23317156601306976, 0.23317156601306976, 0.2177098002561182, 0.2177098002561182, 0.2177098002561182, 0.2514196805105966, 0.2514196805105966, 0.2514196805105966, 0.20242987068752816, 0.20242987068752816, 0.20242987068752816, 0.2729118050314442, 0.2729118050314442, 0.2729118050314442, 0.11433228054051525, 0.11433228054051525, 0.11433228054051525, 0.168750424450697, 0.168750424450697, 0.168750424450697, 0.14638302766999278, 0.14638302766999278, 0.14638302766999278, 0.13977968343486424, 0.13977968343486424, 0.13977968343486424, 0.16411678528134344, 0.16411678528134344, 0.16411678528134344, 0.12860778473725842, 0.12860778473725842, 0.12860778473725842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00021224974354405735, 0.00021224974354405735, 0.00021224974354405735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09119079581969058, 0.09119079581969058, 0.09119079581969058, 0.06462352359782231, 0.06462352359782231, 0.06462352359782231, 0.09445644893721927, 0.09445644893721927, 0.09445644893721927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05946011255769679, 0.05946011255769679, 0.05946011255769679, 0.05991396384312242, 0.05991396384312242, 0.05991396384312242, 0.07420947838924696, 0.07420947838924696, 0.07420947838924696, 0.34431371270953337, 0.34431371270953337, 0.34431371270953337, 0.35139095973996604, 0.35139095973996604, 0.35139095973996604, 0.3404862528630229, 0.3404862528630229, 0.3404862528630229, 0.09127517497398019, 0.09127517497398019, 0.09127517497398019, 0.10558517456664462, 0.10558517456664462, 0.10558517456664462, 0.11486309550217577, 0.11486309550217577, 0.11486309550217577, 0.1815357687752286, 0.1815357687752286, 0.1815357687752286, 0.22982798798104864, 0.22982798798104864, 0.22982798798104864, 0.1781734115175133, 0.1781734115175133, 0.1781734115175133, 0.20243321726239505, 0.20243321726239505, 0.20243321726239505, 0.2496004026811831, 0.2496004026811831, 0.2496004026811831, 0.2544318576821294, 0.2544318576821294, 0.2544318576821294, 0.1985777204900705, 0.1985777204900705, 0.1985777204900705, 0.19313267057064343, 0.19313267057064343, 0.19313267057064343, 0.1729951634754514, 0.1729951634754514, 0.1729951634754514, 0.2135085745095764, 0.2135085745095764, 0.2135085745095764, 0.23437915575765544, 0.23437915575765544, 0.23437915575765544, 0.21151623190930724, 0.21151623190930724, 0.21151623190930724, 0.20023342078520834, 0.20023342078520834, 0.20023342078520834, 0.20004442727904603, 0.20004442727904603, 0.20004442727904603, 0.20232973242235686, 0.20232973242235686, 0.20232973242235686, 0.554968064887486, 0.554968064887486, 0.554968064887486, 0.1707760856929773, 0.1707760856929773, 0.1707760856929773, 0.16856169718900216, 0.16856169718900216, 0.16856169718900216, 0.48489310067431124, 0.48489310067431124, 0.48489310067431124, 0.20752032360177752, 0.20752032360177752, 0.20752032360177752, 0.09382727575177263, 0.09382727575177263, 0.09382727575177263, 0.1834946074557009, 0.1834946074557009, 0.1834946074557009, 0.19121737357400892, 0.19121737357400892, 0.19121737357400892, 0.19102748044242157, 0.19102748044242157, 0.19102748044242157, 0.09201854150762778, 0.09201854150762778, 0.09201854150762778, 0.09258415332170278, 0.09258415332170278, 0.09258415332170278, 0.08880205378058093, 0.08880205378058093, 0.08880205378058093]}, "mutation_prompt": null}
{"id": "545fe269-33fb-4465-bf9a-8b2dc5b6e557", "solution": "import numpy as np\n\nclass AdaptiveDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.6  # Enhanced cognitive learning\n        self.social_coeff = 1.9  # Enhanced social learning\n        self.exploration_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4  # Dynamic subgroup adjustment factor\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            adaptive_subgroup_size = max(2, int(self.swarm_size / subgroup_factor))\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, adaptive_subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                # Hybrid learning with elite influence\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveDynamicPSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Subgrouping for Enhanced Convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.5944948726244728, 0.5944948726244728, 0.5944948726244728, 0.6080719350810411, 0.6080719350810411, 0.6080719350810411, 0.5959890397855385, 0.5959890397855385, 0.5959890397855385, 0.2635008162389413, 0.2635008162389413, 0.2635008162389413, 0.2024122428590337, 0.2024122428590337, 0.2024122428590337, 0.2135743420485503, 0.2135743420485503, 0.2135743420485503, 0.13775790151351008, 0.13775790151351008, 0.13775790151351008, 0.15202221854679043, 0.15202221854679043, 0.15202221854679043, 0.08492797626288684, 0.08492797626288684, 0.08492797626288684, 0.1232540474418502, 0.1232540474418502, 0.1232540474418502, 0.11340744406238423, 0.11340744406238423, 0.11340744406238423, 0.12751974410930578, 0.12751974410930578, 0.12751974410930578, 0.9546839391525543, 0.9546839391525543, 0.9546839391525543, 0.9581145087797608, 0.9581145087797608, 0.9581145087797608, 0.9558302270302627, 0.9558302270302627, 0.9558302270302627, 0.3301215814741655, 0.3301215814741655, 0.3301215814741655, 0.35076597345835203, 0.35076597345835203, 0.35076597345835203, 0.31275074745306986, 0.31275074745306986, 0.31275074745306986, 0.5216541666541996, 0.5216541666541996, 0.5216541666541996, 0.20959204031119838, 0.20959204031119838, 0.20959204031119838, 0.4806844896492557, 0.4806844896492557, 0.4806844896492557, 0.2571750199058086, 0.2571750199058086, 0.2571750199058086, 0.18243971876072085, 0.18243971876072085, 0.18243971876072085, 0.1534875596232449, 0.1534875596232449, 0.1534875596232449, 0.15305643143604464, 0.15305643143604464, 0.15305643143604464, 0.16365053762592052, 0.16365053762592052, 0.16365053762592052, 0.18203498937086593, 0.18203498937086593, 0.18203498937086593, 0.08376517811083906, 0.08376517811083906, 0.08376517811083906, 0.01876670711730899, 0.01876670711730899, 0.01876670711730899, 0.000832381684794048, 0.000832381684794048, 0.000832381684794048, 0.15409206204311054, 0.15409206204311054, 0.15409206204311054, 0.04925380528266543, 0.04925380528266543, 0.04925380528266543, 0.11074077702005147, 0.11074077702005147, 0.11074077702005147, 0.024195760572629066, 0.024195760572629066, 0.024195760572629066, 0.06532918221928918, 0.06532918221928918, 0.06532918221928918, 0.07757367094673773, 0.07757367094673773, 0.07757367094673773, 0.09313128027348305, 0.09313128027348305, 0.09313128027348305, 0.12719042896006671, 0.12719042896006671, 0.12719042896006671, 0.11235465062943728, 0.11235465062943728, 0.11235465062943728, 0.44259895571477137, 0.44259895571477137, 0.44259895571477137, 0.4591328168940869, 0.4591328168940869, 0.4591328168940869, 0.45869313313309035, 0.45869313313309035, 0.45869313313309035, 0.14099566653931883, 0.14099566653931883, 0.14099566653931883, 0.11333782236797907, 0.11333782236797907, 0.11333782236797907, 0.23990604664269055, 0.23990604664269055, 0.23990604664269055, 0.32109028951651053, 0.32109028951651053, 0.32109028951651053, 0.17786827766986169, 0.17786827766986169, 0.17786827766986169, 0.28664553332738874, 0.28664553332738874, 0.28664553332738874, 0.31514538159589045, 0.31514538159589045, 0.31514538159589045, 0.3105036183555492, 0.3105036183555492, 0.3105036183555492, 0.3775561924652381, 0.3775561924652381, 0.3775561924652381, 0.2575059386372196, 0.2575059386372196, 0.2575059386372196, 0.2546716886076572, 0.2546716886076572, 0.2546716886076572, 0.24722725373762233, 0.24722725373762233, 0.24722725373762233, 0.2121928517610211, 0.2121928517610211, 0.2121928517610211, 0.22637885304128813, 0.22637885304128813, 0.22637885304128813, 0.305539868248202, 0.305539868248202, 0.305539868248202, 0.21491745071361934, 0.21491745071361934, 0.21491745071361934, 0.1871140957792926, 0.1871140957792926, 0.1871140957792926, 0.205229498323509, 0.205229498323509, 0.205229498323509, 0.7614388655822166, 0.7614388655822166, 0.7614388655822166, 0.1579296889870584, 0.1579296889870584, 0.1579296889870584, 0.16884184014855597, 0.16884184014855597, 0.16884184014855597, 0.5077368868371629, 0.5077368868371629, 0.5077368868371629, 0.2104167707035728, 0.2104167707035728, 0.2104167707035728, 0.5389537170500873, 0.5389537170500873, 0.5389537170500873, 0.182303394022442, 0.182303394022442, 0.182303394022442, 0.18061519227697242, 0.18061519227697242, 0.18061519227697242, 0.18729587466795017, 0.18729587466795017, 0.18729587466795017, 0.09829756864761163, 0.09829756864761163, 0.09829756864761163, 0.09048282804749508, 0.09048282804749508, 0.09048282804749508, 0.10380227897020955, 0.10380227897020955, 0.10380227897020955]}, "mutation_prompt": null}
{"id": "c8d0398b-6dc5-498f-bd40-649f005d0992", "solution": "import numpy as np\n\nclass AdaptiveDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.6  # Enhanced cognitive learning\n        self.social_coeff = 1.9  # Enhanced social learning\n        self.exploration_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4  # Dynamic subgroup adjustment factor\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            adaptive_subgroup_size = max(2, int(self.swarm_size / subgroup_factor))\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, adaptive_subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                # Hybrid learning with elite influence\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveDynamicPSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Subgrouping for Enhanced Convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.5944948726244728, 0.5944948726244728, 0.5944948726244728, 0.6080719350810411, 0.6080719350810411, 0.6080719350810411, 0.5959890397855385, 0.5959890397855385, 0.5959890397855385, 0.2635008162389413, 0.2635008162389413, 0.2635008162389413, 0.2024122428590337, 0.2024122428590337, 0.2024122428590337, 0.2135743420485503, 0.2135743420485503, 0.2135743420485503, 0.13775790151351008, 0.13775790151351008, 0.13775790151351008, 0.15202221854679043, 0.15202221854679043, 0.15202221854679043, 0.08492797626288684, 0.08492797626288684, 0.08492797626288684, 0.1232540474418502, 0.1232540474418502, 0.1232540474418502, 0.11340744406238423, 0.11340744406238423, 0.11340744406238423, 0.12751974410930578, 0.12751974410930578, 0.12751974410930578, 0.9546839391525543, 0.9546839391525543, 0.9546839391525543, 0.9581145087797608, 0.9581145087797608, 0.9581145087797608, 0.9558302270302627, 0.9558302270302627, 0.9558302270302627, 0.3301215814741655, 0.3301215814741655, 0.3301215814741655, 0.35076597345835203, 0.35076597345835203, 0.35076597345835203, 0.31275074745306986, 0.31275074745306986, 0.31275074745306986, 0.5216541666541996, 0.5216541666541996, 0.5216541666541996, 0.20959204031119838, 0.20959204031119838, 0.20959204031119838, 0.4806844896492557, 0.4806844896492557, 0.4806844896492557, 0.2571750199058086, 0.2571750199058086, 0.2571750199058086, 0.18243971876072085, 0.18243971876072085, 0.18243971876072085, 0.1534875596232449, 0.1534875596232449, 0.1534875596232449, 0.15305643143604464, 0.15305643143604464, 0.15305643143604464, 0.16365053762592052, 0.16365053762592052, 0.16365053762592052, 0.18203498937086593, 0.18203498937086593, 0.18203498937086593, 0.08376517811083906, 0.08376517811083906, 0.08376517811083906, 0.01876670711730899, 0.01876670711730899, 0.01876670711730899, 0.000832381684794048, 0.000832381684794048, 0.000832381684794048, 0.15409206204311054, 0.15409206204311054, 0.15409206204311054, 0.04925380528266543, 0.04925380528266543, 0.04925380528266543, 0.11074077702005147, 0.11074077702005147, 0.11074077702005147, 0.024195760572629066, 0.024195760572629066, 0.024195760572629066, 0.06532918221928918, 0.06532918221928918, 0.06532918221928918, 0.07757367094673773, 0.07757367094673773, 0.07757367094673773, 0.09313128027348305, 0.09313128027348305, 0.09313128027348305, 0.12719042896006671, 0.12719042896006671, 0.12719042896006671, 0.11235465062943728, 0.11235465062943728, 0.11235465062943728, 0.44259895571477137, 0.44259895571477137, 0.44259895571477137, 0.4591328168940869, 0.4591328168940869, 0.4591328168940869, 0.45869313313309035, 0.45869313313309035, 0.45869313313309035, 0.14099566653931883, 0.14099566653931883, 0.14099566653931883, 0.11333782236797907, 0.11333782236797907, 0.11333782236797907, 0.23990604664269055, 0.23990604664269055, 0.23990604664269055, 0.32109028951651053, 0.32109028951651053, 0.32109028951651053, 0.17786827766986169, 0.17786827766986169, 0.17786827766986169, 0.28664553332738874, 0.28664553332738874, 0.28664553332738874, 0.31514538159589045, 0.31514538159589045, 0.31514538159589045, 0.3105036183555492, 0.3105036183555492, 0.3105036183555492, 0.3775561924652381, 0.3775561924652381, 0.3775561924652381, 0.2575059386372196, 0.2575059386372196, 0.2575059386372196, 0.2546716886076572, 0.2546716886076572, 0.2546716886076572, 0.24722725373762233, 0.24722725373762233, 0.24722725373762233, 0.2121928517610211, 0.2121928517610211, 0.2121928517610211, 0.22637885304128813, 0.22637885304128813, 0.22637885304128813, 0.305539868248202, 0.305539868248202, 0.305539868248202, 0.21491745071361934, 0.21491745071361934, 0.21491745071361934, 0.1871140957792926, 0.1871140957792926, 0.1871140957792926, 0.205229498323509, 0.205229498323509, 0.205229498323509, 0.7614388655822166, 0.7614388655822166, 0.7614388655822166, 0.1579296889870584, 0.1579296889870584, 0.1579296889870584, 0.16884184014855597, 0.16884184014855597, 0.16884184014855597, 0.5077368868371629, 0.5077368868371629, 0.5077368868371629, 0.2104167707035728, 0.2104167707035728, 0.2104167707035728, 0.5389537170500873, 0.5389537170500873, 0.5389537170500873, 0.182303394022442, 0.182303394022442, 0.182303394022442, 0.18061519227697242, 0.18061519227697242, 0.18061519227697242, 0.18729587466795017, 0.18729587466795017, 0.18729587466795017, 0.09829756864761163, 0.09829756864761163, 0.09829756864761163, 0.09048282804749508, 0.09048282804749508, 0.09048282804749508, 0.10380227897020955, 0.10380227897020955, 0.10380227897020955]}, "mutation_prompt": null}
{"id": "08454403-72e3-4559-a52d-5c4b46522416", "solution": "import numpy as np\n\nclass AdaptiveDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.6  # Enhanced cognitive learning\n        self.social_coeff = 1.9  # Enhanced social learning\n        self.exploration_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4  # Dynamic subgroup adjustment factor\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            adaptive_subgroup_size = max(2, int(self.swarm_size / subgroup_factor))\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, adaptive_subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                # Hybrid learning with elite influence\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveDynamicPSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Subgrouping for Enhanced Convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.5944948726244728, 0.5944948726244728, 0.5944948726244728, 0.6080719350810411, 0.6080719350810411, 0.6080719350810411, 0.5959890397855385, 0.5959890397855385, 0.5959890397855385, 0.2635008162389413, 0.2635008162389413, 0.2635008162389413, 0.2024122428590337, 0.2024122428590337, 0.2024122428590337, 0.2135743420485503, 0.2135743420485503, 0.2135743420485503, 0.13775790151351008, 0.13775790151351008, 0.13775790151351008, 0.15202221854679043, 0.15202221854679043, 0.15202221854679043, 0.08492797626288684, 0.08492797626288684, 0.08492797626288684, 0.1232540474418502, 0.1232540474418502, 0.1232540474418502, 0.11340744406238423, 0.11340744406238423, 0.11340744406238423, 0.12751974410930578, 0.12751974410930578, 0.12751974410930578, 0.9546839391525543, 0.9546839391525543, 0.9546839391525543, 0.9581145087797608, 0.9581145087797608, 0.9581145087797608, 0.9558302270302627, 0.9558302270302627, 0.9558302270302627, 0.3301215814741655, 0.3301215814741655, 0.3301215814741655, 0.35076597345835203, 0.35076597345835203, 0.35076597345835203, 0.31275074745306986, 0.31275074745306986, 0.31275074745306986, 0.5216541666541996, 0.5216541666541996, 0.5216541666541996, 0.20959204031119838, 0.20959204031119838, 0.20959204031119838, 0.4806844896492557, 0.4806844896492557, 0.4806844896492557, 0.2571750199058086, 0.2571750199058086, 0.2571750199058086, 0.18243971876072085, 0.18243971876072085, 0.18243971876072085, 0.1534875596232449, 0.1534875596232449, 0.1534875596232449, 0.15305643143604464, 0.15305643143604464, 0.15305643143604464, 0.16365053762592052, 0.16365053762592052, 0.16365053762592052, 0.18203498937086593, 0.18203498937086593, 0.18203498937086593, 0.08376517811083906, 0.08376517811083906, 0.08376517811083906, 0.01876670711730899, 0.01876670711730899, 0.01876670711730899, 0.000832381684794048, 0.000832381684794048, 0.000832381684794048, 0.15409206204311054, 0.15409206204311054, 0.15409206204311054, 0.04925380528266543, 0.04925380528266543, 0.04925380528266543, 0.11074077702005147, 0.11074077702005147, 0.11074077702005147, 0.024195760572629066, 0.024195760572629066, 0.024195760572629066, 0.06532918221928918, 0.06532918221928918, 0.06532918221928918, 0.07757367094673773, 0.07757367094673773, 0.07757367094673773, 0.09313128027348305, 0.09313128027348305, 0.09313128027348305, 0.12719042896006671, 0.12719042896006671, 0.12719042896006671, 0.11235465062943728, 0.11235465062943728, 0.11235465062943728, 0.44259895571477137, 0.44259895571477137, 0.44259895571477137, 0.4591328168940869, 0.4591328168940869, 0.4591328168940869, 0.45869313313309035, 0.45869313313309035, 0.45869313313309035, 0.14099566653931883, 0.14099566653931883, 0.14099566653931883, 0.11333782236797907, 0.11333782236797907, 0.11333782236797907, 0.23990604664269055, 0.23990604664269055, 0.23990604664269055, 0.32109028951651053, 0.32109028951651053, 0.32109028951651053, 0.17786827766986169, 0.17786827766986169, 0.17786827766986169, 0.28664553332738874, 0.28664553332738874, 0.28664553332738874, 0.31514538159589045, 0.31514538159589045, 0.31514538159589045, 0.3105036183555492, 0.3105036183555492, 0.3105036183555492, 0.3775561924652381, 0.3775561924652381, 0.3775561924652381, 0.2575059386372196, 0.2575059386372196, 0.2575059386372196, 0.2546716886076572, 0.2546716886076572, 0.2546716886076572, 0.24722725373762233, 0.24722725373762233, 0.24722725373762233, 0.2121928517610211, 0.2121928517610211, 0.2121928517610211, 0.22637885304128813, 0.22637885304128813, 0.22637885304128813, 0.305539868248202, 0.305539868248202, 0.305539868248202, 0.21491745071361934, 0.21491745071361934, 0.21491745071361934, 0.1871140957792926, 0.1871140957792926, 0.1871140957792926, 0.205229498323509, 0.205229498323509, 0.205229498323509, 0.7614388655822166, 0.7614388655822166, 0.7614388655822166, 0.1579296889870584, 0.1579296889870584, 0.1579296889870584, 0.16884184014855597, 0.16884184014855597, 0.16884184014855597, 0.5077368868371629, 0.5077368868371629, 0.5077368868371629, 0.2104167707035728, 0.2104167707035728, 0.2104167707035728, 0.5389537170500873, 0.5389537170500873, 0.5389537170500873, 0.182303394022442, 0.182303394022442, 0.182303394022442, 0.18061519227697242, 0.18061519227697242, 0.18061519227697242, 0.18729587466795017, 0.18729587466795017, 0.18729587466795017, 0.09829756864761163, 0.09829756864761163, 0.09829756864761163, 0.09048282804749508, 0.09048282804749508, 0.09048282804749508, 0.10380227897020955, 0.10380227897020955, 0.10380227897020955]}, "mutation_prompt": null}
{"id": "6d5342a9-faea-4a43-8b8b-638ff8142a71", "solution": "import numpy as np\n\nclass AdaptiveDynamicPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.6  # Enhanced cognitive learning\n        self.social_coeff = 1.9  # Enhanced social learning\n        self.exploration_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4  # Dynamic subgroup adjustment factor\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            adaptive_subgroup_size = max(2, int(self.swarm_size / subgroup_factor))\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, adaptive_subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                # Hybrid learning with elite influence\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + exploration_term + elite_influence\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveDynamicPSO", "description": "Adaptive Particle Swarm Optimization with Dynamic Subgrouping for Enhanced Convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.5944948726244728, 0.5944948726244728, 0.5944948726244728, 0.6080719350810411, 0.6080719350810411, 0.6080719350810411, 0.5959890397855385, 0.5959890397855385, 0.5959890397855385, 0.2635008162389413, 0.2635008162389413, 0.2635008162389413, 0.2024122428590337, 0.2024122428590337, 0.2024122428590337, 0.2135743420485503, 0.2135743420485503, 0.2135743420485503, 0.13775790151351008, 0.13775790151351008, 0.13775790151351008, 0.15202221854679043, 0.15202221854679043, 0.15202221854679043, 0.08492797626288684, 0.08492797626288684, 0.08492797626288684, 0.1232540474418502, 0.1232540474418502, 0.1232540474418502, 0.11340744406238423, 0.11340744406238423, 0.11340744406238423, 0.12751974410930578, 0.12751974410930578, 0.12751974410930578, 0.9546839391525543, 0.9546839391525543, 0.9546839391525543, 0.9581145087797608, 0.9581145087797608, 0.9581145087797608, 0.9558302270302627, 0.9558302270302627, 0.9558302270302627, 0.3301215814741655, 0.3301215814741655, 0.3301215814741655, 0.35076597345835203, 0.35076597345835203, 0.35076597345835203, 0.31275074745306986, 0.31275074745306986, 0.31275074745306986, 0.5216541666541996, 0.5216541666541996, 0.5216541666541996, 0.20959204031119838, 0.20959204031119838, 0.20959204031119838, 0.4806844896492557, 0.4806844896492557, 0.4806844896492557, 0.2571750199058086, 0.2571750199058086, 0.2571750199058086, 0.18243971876072085, 0.18243971876072085, 0.18243971876072085, 0.1534875596232449, 0.1534875596232449, 0.1534875596232449, 0.15305643143604464, 0.15305643143604464, 0.15305643143604464, 0.16365053762592052, 0.16365053762592052, 0.16365053762592052, 0.18203498937086593, 0.18203498937086593, 0.18203498937086593, 0.08376517811083906, 0.08376517811083906, 0.08376517811083906, 0.01876670711730899, 0.01876670711730899, 0.01876670711730899, 0.000832381684794048, 0.000832381684794048, 0.000832381684794048, 0.15409206204311054, 0.15409206204311054, 0.15409206204311054, 0.04925380528266543, 0.04925380528266543, 0.04925380528266543, 0.11074077702005147, 0.11074077702005147, 0.11074077702005147, 0.024195760572629066, 0.024195760572629066, 0.024195760572629066, 0.06532918221928918, 0.06532918221928918, 0.06532918221928918, 0.07757367094673773, 0.07757367094673773, 0.07757367094673773, 0.09313128027348305, 0.09313128027348305, 0.09313128027348305, 0.12719042896006671, 0.12719042896006671, 0.12719042896006671, 0.11235465062943728, 0.11235465062943728, 0.11235465062943728, 0.44259895571477137, 0.44259895571477137, 0.44259895571477137, 0.4591328168940869, 0.4591328168940869, 0.4591328168940869, 0.45869313313309035, 0.45869313313309035, 0.45869313313309035, 0.14099566653931883, 0.14099566653931883, 0.14099566653931883, 0.11333782236797907, 0.11333782236797907, 0.11333782236797907, 0.23990604664269055, 0.23990604664269055, 0.23990604664269055, 0.32109028951651053, 0.32109028951651053, 0.32109028951651053, 0.17786827766986169, 0.17786827766986169, 0.17786827766986169, 0.28664553332738874, 0.28664553332738874, 0.28664553332738874, 0.31514538159589045, 0.31514538159589045, 0.31514538159589045, 0.3105036183555492, 0.3105036183555492, 0.3105036183555492, 0.3775561924652381, 0.3775561924652381, 0.3775561924652381, 0.2575059386372196, 0.2575059386372196, 0.2575059386372196, 0.2546716886076572, 0.2546716886076572, 0.2546716886076572, 0.24722725373762233, 0.24722725373762233, 0.24722725373762233, 0.2121928517610211, 0.2121928517610211, 0.2121928517610211, 0.22637885304128813, 0.22637885304128813, 0.22637885304128813, 0.305539868248202, 0.305539868248202, 0.305539868248202, 0.21491745071361934, 0.21491745071361934, 0.21491745071361934, 0.1871140957792926, 0.1871140957792926, 0.1871140957792926, 0.205229498323509, 0.205229498323509, 0.205229498323509, 0.7614388655822166, 0.7614388655822166, 0.7614388655822166, 0.1579296889870584, 0.1579296889870584, 0.1579296889870584, 0.16884184014855597, 0.16884184014855597, 0.16884184014855597, 0.5077368868371629, 0.5077368868371629, 0.5077368868371629, 0.2104167707035728, 0.2104167707035728, 0.2104167707035728, 0.5389537170500873, 0.5389537170500873, 0.5389537170500873, 0.182303394022442, 0.182303394022442, 0.182303394022442, 0.18061519227697242, 0.18061519227697242, 0.18061519227697242, 0.18729587466795017, 0.18729587466795017, 0.18729587466795017, 0.09829756864761163, 0.09829756864761163, 0.09829756864761163, 0.09048282804749508, 0.09048282804749508, 0.09048282804749508, 0.10380227897020955, 0.10380227897020955, 0.10380227897020955]}, "mutation_prompt": null}
{"id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 38, "fitness": 0.29072719746483644, "feedback": "The algorithm EnhancedLocalSearchPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "abf6bcc5-802c-41c6-a9ab-0733f5f09719", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "84d4d33d-8321-49b4-b877-7105ff137e31", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "cdd249ed-a066-4989-ba10-e1903a1fee8e", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "2fbdd2ee-b5c5-4cdc-adee-d01ff1c917d4", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "bb4a4c69-208e-44de-9101-dc64bcac1b75", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "49e5a491-895b-4da4-bcfb-b2c0cc373ab6", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "db511ae8-e8e0-467b-a061-118b36b97731", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "ca4ff84f-185b-4015-ad08-cb86919c1ced", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.1  # Further decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.5  # Slightly increased for enhanced local search\n        self.social_coeff = 1.8  # Slightly decreased for refined global exploration\n        self.exploration_coeff = 0.55  # Adjusted exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.2  # Increased max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            subgroups = np.array_split(np.argsort(personal_best_value), 3)  # Divide into 3 dynamic subgroups\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.8), 0.3, 1.0)  # Adjusted adaptive learning rate\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                subgroup_idx = [idx for g in subgroups for idx in g if idx != i]\n                donor_particles = np.random.choice(subgroup_idx, min(3, len(subgroup_idx)), replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.2 * np.random.rand(self.dim) * (elite_position - position[i])  # Increased elite influence\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Variable Subgroup Swarms and Dynamic Exploration Balancing for Improved Convergence.", "configspace": "", "generation": 45, "fitness": 0.28558894401525503, "feedback": "The algorithm EnhancedLocalSearchPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.8107775665639806, 0.8107775665639806, 0.8107775665639806, 0.8013936902790173, 0.8013936902790173, 0.8013936902790173, 0.7976704899616579, 0.7976704899616579, 0.7976704899616579, 0.06404201375512386, 0.06404201375512386, 0.06404201375512386, 0.45314399617538037, 0.45314399617538037, 0.45314399617538037, 0.11858520200399547, 0.11858520200399547, 0.11858520200399547, 0.17417900827031774, 0.17417900827031774, 0.17417900827031774, 0.13460841084034492, 0.13460841084034492, 0.13460841084034492, 0.14605067045631603, 0.14605067045631603, 0.14605067045631603, 0.09555788530006992, 0.09555788530006992, 0.09555788530006992, 0.0948732113836469, 0.0948732113836469, 0.0948732113836469, 0.09649654638086413, 0.09649654638086413, 0.09649654638086413, 0.9657760586632, 0.9657760586632, 0.9657760586632, 0.9662565432663069, 0.9662565432663069, 0.9662565432663069, 0.96683262009144, 0.96683262009144, 0.96683262009144, 0.438268138633211, 0.438268138633211, 0.438268138633211, 0.6424041606261552, 0.6424041606261552, 0.6424041606261552, 0.4281333938424574, 0.4281333938424574, 0.4281333938424574, 0.22446327353731887, 0.22446327353731887, 0.22446327353731887, 0.19166145948764357, 0.19166145948764357, 0.19166145948764357, 0.227779868474004, 0.227779868474004, 0.227779868474004, 0.16741415124696157, 0.16741415124696157, 0.16741415124696157, 0.1402609088001836, 0.1402609088001836, 0.1402609088001836, 0.1969100762931867, 0.1969100762931867, 0.1969100762931867, 0.12235306425127968, 0.12235306425127968, 0.12235306425127968, 0.16103587290393329, 0.16103587290393329, 0.16103587290393329, 0.18795059801869607, 0.18795059801869607, 0.18795059801869607, 0.04732295737354053, 0.04732295737354053, 0.04732295737354053, 0.05851606836750256, 0.05851606836750256, 0.05851606836750256, 0.04037758145487447, 0.04037758145487447, 0.04037758145487447, 0.05133293976022435, 0.05133293976022435, 0.05133293976022435, 0.11977761840498058, 0.11977761840498058, 0.11977761840498058, 0.15961548519475488, 0.15961548519475488, 0.15961548519475488, 0.20974242177009494, 0.20974242177009494, 0.20974242177009494, 0.11044449142716406, 0.11044449142716406, 0.11044449142716406, 0.15932959331265506, 0.15932959331265506, 0.15932959331265506, 0.09826075919228172, 0.09826075919228172, 0.09826075919228172, 0.04835887955568019, 0.04835887955568019, 0.04835887955568019, 0.17222152920157008, 0.17222152920157008, 0.17222152920157008, 0.5219335379349659, 0.5219335379349659, 0.5219335379349659, 0.5630832753538697, 0.5630832753538697, 0.5630832753538697, 0.4728892984499299, 0.4728892984499299, 0.4728892984499299, 0.09254641978178502, 0.09254641978178502, 0.09254641978178502, 0.16972829466449824, 0.16972829466449824, 0.16972829466449824, 0.11026532811818757, 0.11026532811818757, 0.11026532811818757, 0.2284799984369441, 0.2284799984369441, 0.2284799984369441, 0.23706621948516882, 0.23706621948516882, 0.23706621948516882, 0.3631213815048765, 0.3631213815048765, 0.3631213815048765, 0.4146169189852592, 0.4146169189852592, 0.4146169189852592, 0.4254362951942554, 0.4254362951942554, 0.4254362951942554, 0.5652061214486326, 0.5652061214486326, 0.5652061214486326, 0.24338767831197206, 0.24338767831197206, 0.24338767831197206, 0.2879870555918035, 0.2879870555918035, 0.2879870555918035, 0.3280410402159014, 0.3280410402159014, 0.3280410402159014, 0.24057331422593997, 0.24057331422593997, 0.24057331422593997, 0.25380572161964265, 0.25380572161964265, 0.25380572161964265, 0.2209697742789143, 0.2209697742789143, 0.2209697742789143, 0.1896724722303852, 0.1896724722303852, 0.1896724722303852, 0.19458515962930556, 0.19458515962930556, 0.19458515962930556, 0.20536076973988804, 0.20536076973988804, 0.20536076973988804, 0.8592732744962649, 0.8592732744962649, 0.8592732744962649, 0.1474234057262036, 0.1474234057262036, 0.1474234057262036, 0.1690995413385875, 0.1690995413385875, 0.1690995413385875, 0.6901440931440137, 0.6901440931440137, 0.6901440931440137, 0.20854460422630883, 0.20854460422630883, 0.20854460422630883, 0.16638392213615738, 0.16638392213615738, 0.16638392213615738, 0.1937500351610011, 0.1937500351610011, 0.1937500351610011, 0.19298067641106365, 0.19298067641106365, 0.19298067641106365, 0.1931341417466962, 0.1931341417466962, 0.1931341417466962, 0.0912367669814117, 0.0912367669814117, 0.0912367669814117, 0.10047871076419979, 0.10047871076419979, 0.10047871076419979, 0.1310195172423131, 0.1310195172423131, 0.1310195172423131]}, "mutation_prompt": null}
{"id": "6fd5e742-2959-4964-9e8e-a9a350009dcc", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "810d48ab-8f81-4f08-a0c4-2d6408453ad8", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "6128b017-2b35-4d49-836a-4113c3dc34b9", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "8fb85433-0f84-4737-a361-bb4a997f4216", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "1a684b23-6e0f-4d02-96bb-12328bba5168", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "802e3768-10f8-46a3-905d-0a3bef0ee583", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9  # Adjusted for a more gradual decrease\n        self.final_inertia = 0.3  # Increased slightly for better diversity retention\n        self.cognitive_coeff = 1.5  # Enhanced for individual learning\n        self.social_coeff = 1.8  # Adjusted for balanced exploration\n        self.exploration_coeff = 0.5  # Slightly decreased for focused search\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        dynamic_subgroup_size = max(1, self.swarm_size // 10)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.7), 0.2, 1.0)  # Adjusted learning rate window\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, dynamic_subgroup_size, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.2 * np.random.rand(self.dim) * (elite_position - position[i])  # Increased elite influence slightly\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Dynamic Subgrouping and Adaptive Elite Influence for Improved Convergence.", "configspace": "", "generation": 51, "fitness": 0.2821953730380785, "feedback": "The algorithm EnhancedLocalSearchPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.8336953498580676, 0.8336953498580676, 0.8336953498580676, 0.8209331592429185, 0.8209331592429185, 0.8209331592429185, 0.835135505231004, 0.835135505231004, 0.835135505231004, 0.20999532220722283, 0.20999532220722283, 0.20999532220722283, 0.09103469291557431, 0.09103469291557431, 0.09103469291557431, 0.33971221590865575, 0.33971221590865575, 0.33971221590865575, 0.10091241466196621, 0.10091241466196621, 0.10091241466196621, 0.11094507719338109, 0.11094507719338109, 0.11094507719338109, 0.11816752042327694, 0.11816752042327694, 0.11816752042327694, 0.1441114382559563, 0.1441114382559563, 0.1441114382559563, 0.1189775426207621, 0.1189775426207621, 0.1189775426207621, 0.13979666206254204, 0.13979666206254204, 0.13979666206254204, 0.9514930332457567, 0.9514930332457567, 0.9514930332457567, 0.9608234890543292, 0.9608234890543292, 0.9608234890543292, 0.9610903647772497, 0.9610903647772497, 0.9610903647772497, 0.5447507638506217, 0.5447507638506217, 0.5447507638506217, 0.46918258817473213, 0.46918258817473213, 0.46918258817473213, 0.5195733505618993, 0.5195733505618993, 0.5195733505618993, 0.21788017989169617, 0.21788017989169617, 0.21788017989169617, 0.19089752575291175, 0.19089752575291175, 0.19089752575291175, 0.8077920990834806, 0.8077920990834806, 0.8077920990834806, 0.1798924368136844, 0.1798924368136844, 0.1798924368136844, 0.22231791324092276, 0.22231791324092276, 0.22231791324092276, 0.2672758726147261, 0.2672758726147261, 0.2672758726147261, 0.12549080177192007, 0.12549080177192007, 0.12549080177192007, 0.14204223611508937, 0.14204223611508937, 0.14204223611508937, 0.2093094450195847, 0.2093094450195847, 0.2093094450195847, 0.08055182869873112, 0.08055182869873112, 0.08055182869873112, 0.0643460080453746, 0.0643460080453746, 0.0643460080453746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04769173729686882, 0.04769173729686882, 0.04769173729686882, 0.06478998799640068, 0.06478998799640068, 0.06478998799640068, 0.14178743446841524, 0.14178743446841524, 0.14178743446841524, 0.06759055628325328, 0.06759055628325328, 0.06759055628325328, 0.14865204241308316, 0.14865204241308316, 0.14865204241308316, 0.13720874220403834, 0.13720874220403834, 0.13720874220403834, 0.15317081343288375, 0.15317081343288375, 0.15317081343288375, 0.03852522359377286, 0.03852522359377286, 0.03852522359377286, 0.20597816115685508, 0.20597816115685508, 0.20597816115685508, 0.5107212402655974, 0.5107212402655974, 0.5107212402655974, 0.5898113423625471, 0.5898113423625471, 0.5898113423625471, 0.509353608524626, 0.509353608524626, 0.509353608524626, 0.13723303802741227, 0.13723303802741227, 0.13723303802741227, 0.0905519088475446, 0.0905519088475446, 0.0905519088475446, 0.15087919870718836, 0.15087919870718836, 0.15087919870718836, 0.22966848202445556, 0.22966848202445556, 0.22966848202445556, 0.1965416762768567, 0.1965416762768567, 0.1965416762768567, 0.2595880627718645, 0.2595880627718645, 0.2595880627718645, 0.32111995270899985, 0.32111995270899985, 0.32111995270899985, 0.33184370111526196, 0.33184370111526196, 0.33184370111526196, 0.305972715733667, 0.305972715733667, 0.305972715733667, 0.2720353359009732, 0.2720353359009732, 0.2720353359009732, 0.26672723256686437, 0.26672723256686437, 0.26672723256686437, 0.24462409266447604, 0.24462409266447604, 0.24462409266447604, 0.2195902539704464, 0.2195902539704464, 0.2195902539704464, 0.22197202309023933, 0.22197202309023933, 0.22197202309023933, 0.19830475964115113, 0.19830475964115113, 0.19830475964115113, 0.1912509078919168, 0.1912509078919168, 0.1912509078919168, 0.19538938712992926, 0.19538938712992926, 0.19538938712992926, 0.22162175682792873, 0.22162175682792873, 0.22162175682792873, 0.8884775086936864, 0.8884775086936864, 0.8884775086936864, 0.15810272609866882, 0.15810272609866882, 0.15810272609866882, 0.16901737654489857, 0.16901737654489857, 0.16901737654489857, 0.4304442924175148, 0.4304442924175148, 0.4304442924175148, 0.21222651045942809, 0.21222651045942809, 0.21222651045942809, 0.16781171545197104, 0.16781171545197104, 0.16781171545197104, 0.19921307610210104, 0.19921307610210104, 0.19921307610210104, 0.1787919344448341, 0.1787919344448341, 0.1787919344448341, 0.1877897843987718, 0.1877897843987718, 0.1877897843987718, 0.10242930762128566, 0.10242930762128566, 0.10242930762128566, 0.08381686299902436, 0.08381686299902436, 0.08381686299902436, 0.09152355031991077, 0.09152355031991077, 0.09152355031991077]}, "mutation_prompt": null}
{"id": "82823bdd-0cef-4f35-882a-20bf94eef37b", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "8cae9ed8-d92c-48c2-a83b-b8da14b39b3a", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "5e2a2230-7b19-4835-8716-83ae0cf16c9f", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "0c444f78-2ca6-45ca-b2c6-276a86b30a48", "solution": "import numpy as np\n\nclass StochasticDiversificationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9  # Increased initial inertia for diverse exploration\n        self.final_inertia = 0.3  # Increased final inertia to balance stability\n        self.cognitive_coeff = 1.5  # Enhanced cognitive coefficient for better individual learning\n        self.social_coeff = 1.8  # Slightly reduced for more controlled global influence\n        self.exploration_coeff = 0.7  # Enhanced exploration for subgroup diversification\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 3\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.8), 0.2, 1.0)  # Slightly adjusted adaptive learning rate\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.25 * np.random.rand(self.dim) * (elite_position - position[i])  # Increased elite influence\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "StochasticDiversificationPSO", "description": "Stochastic Diversification PSO with Dynamic Subgroup Exploration and Adaptive Elite Strategy for Improved Convergence.", "configspace": "", "generation": 55, "fitness": 0.2815235222028074, "feedback": "The algorithm StochasticDiversificationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.7878114526902626, 0.7878114526902626, 0.7878114526902626, 0.7732932877988417, 0.7732932877988417, 0.7732932877988417, 0.7875262161183983, 0.7875262161183983, 0.7875262161183983, 0.061826513642161296, 0.061826513642161296, 0.061826513642161296, 0.17499286574331285, 0.17499286574331285, 0.17499286574331285, 0.10516729006909442, 0.10516729006909442, 0.10516729006909442, 0.10379884770618175, 0.10379884770618175, 0.10379884770618175, 0.12425998202309707, 0.12425998202309707, 0.12425998202309707, 0.13985340496371468, 0.13985340496371468, 0.13985340496371468, 0.11560685871146326, 0.11560685871146326, 0.11560685871146326, 0.12436100809250528, 0.12436100809250528, 0.12436100809250528, 0.11866724296928455, 0.11866724296928455, 0.11866724296928455, 0.9474647650958951, 0.9474647650958951, 0.9474647650958951, 0.9545932964396205, 0.9545932964396205, 0.9545932964396205, 0.9604380057896638, 0.9604380057896638, 0.9604380057896638, 0.427277624397556, 0.427277624397556, 0.427277624397556, 0.46582183728426974, 0.46582183728426974, 0.46582183728426974, 0.5093250931357818, 0.5093250931357818, 0.5093250931357818, 0.22210470731389043, 0.22210470731389043, 0.22210470731389043, 0.3513662800844659, 0.3513662800844659, 0.3513662800844659, 0.7972255307143504, 0.7972255307143504, 0.7972255307143504, 0.183913956250209, 0.183913956250209, 0.183913956250209, 0.17956315907185239, 0.17956315907185239, 0.17956315907185239, 0.1678606382590162, 0.1678606382590162, 0.1678606382590162, 0.13134806958964307, 0.13134806958964307, 0.13134806958964307, 0.17427577230092917, 0.17427577230092917, 0.17427577230092917, 0.1867719757430235, 0.1867719757430235, 0.1867719757430235, 0.0064933787197775095, 0.0064933787197775095, 0.0064933787197775095, 0.0401794385477946, 0.0401794385477946, 0.0401794385477946, 0.032894745564131744, 0.032894745564131744, 0.032894745564131744, 0.03557312243605715, 0.03557312243605715, 0.03557312243605715, 0.05188059329391603, 0.05188059329391603, 0.05188059329391603, 0.1432087147705754, 0.1432087147705754, 0.1432087147705754, 0.08757582505101635, 0.08757582505101635, 0.08757582505101635, 0.14651594816148572, 0.14651594816148572, 0.14651594816148572, 0.19592575576873839, 0.19592575576873839, 0.19592575576873839, 0.07986727029387242, 0.07986727029387242, 0.07986727029387242, 0.03558891586558821, 0.03558891586558821, 0.03558891586558821, 0.12355344967270754, 0.12355344967270754, 0.12355344967270754, 0.5029538077036657, 0.5029538077036657, 0.5029538077036657, 0.5222106573703633, 0.5222106573703633, 0.5222106573703633, 0.5198716529345113, 0.5198716529345113, 0.5198716529345113, 0.12164504448467672, 0.12164504448467672, 0.12164504448467672, 0.0783886966061349, 0.0783886966061349, 0.0783886966061349, 0.14493877226699114, 0.14493877226699114, 0.14493877226699114, 0.2054870440455726, 0.2054870440455726, 0.2054870440455726, 0.15903103005237973, 0.15903103005237973, 0.15903103005237973, 0.19891843079059335, 0.19891843079059335, 0.19891843079059335, 0.3265468435079606, 0.3265468435079606, 0.3265468435079606, 0.3664216586210285, 0.3664216586210285, 0.3664216586210285, 0.3832747228799043, 0.3832747228799043, 0.3832747228799043, 0.2396869595204707, 0.2396869595204707, 0.2396869595204707, 0.21672976210607497, 0.21672976210607497, 0.21672976210607497, 0.16703286340709034, 0.16703286340709034, 0.16703286340709034, 0.23453311392497933, 0.23453311392497933, 0.23453311392497933, 0.21838819897635586, 0.21838819897635586, 0.21838819897635586, 0.22341981417913592, 0.22341981417913592, 0.22341981417913592, 0.21737494417219527, 0.21737494417219527, 0.21737494417219527, 0.1905361148815612, 0.1905361148815612, 0.1905361148815612, 0.20119667013520537, 0.20119667013520537, 0.20119667013520537, 0.8462002864487512, 0.8462002864487512, 0.8462002864487512, 0.15805871843867914, 0.15805871843867914, 0.15805871843867914, 0.8269524623575638, 0.8269524623575638, 0.8269524623575638, 0.4992120820216739, 0.4992120820216739, 0.4992120820216739, 0.21140380544485515, 0.21140380544485515, 0.21140380544485515, 0.397419729641301, 0.397419729641301, 0.397419729641301, 0.18083302539556445, 0.18083302539556445, 0.18083302539556445, 0.1839727848675985, 0.1839727848675985, 0.1839727848675985, 0.1769518542897669, 0.1769518542897669, 0.1769518542897669, 0.09564429292602439, 0.09564429292602439, 0.09564429292602439, 0.08868808465818934, 0.08868808465818934, 0.08868808465818934, 0.1099968294011684, 0.1099968294011684, 0.1099968294011684]}, "mutation_prompt": null}
{"id": "3b25f62c-b61c-4d1e-b37e-a386e9d5a7e4", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Reduced swarm size for faster computations\n        self.initial_inertia = 0.9  # Slightly increased for better exploration in the early phase\n        self.final_inertia = 0.3  # Adjusted final inertia for balance\n        self.cognitive_coeff = 1.6  # Increased cognitive coefficient for faster convergence\n        self.social_coeff = 1.8  # Adjusted for slightly better social learning\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.2  # Increased max velocity\n        self.exploration_coeff = 0.5  # Fine-tuned exploration coefficient\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        dynamic_subgroup_factor = 3  # Dynamic subgrouping for enhanced diversity\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.6), 0.3, 1.0)  # More aggressive learning rate adaptation\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, dynamic_subgroup_factor, replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.2 * np.random.rand(self.dim) * (elite_position - position[i])  # Enhanced elite influence\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveSwarmOptimizer", "description": "Adaptive Swarm Intelligence with Dynamic Subgrouping and Enhanced Elite Strategy for Accelerated Convergence.", "configspace": "", "generation": 56, "fitness": 0.27524816668840024, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.8395705237707233, 0.8395705237707233, 0.8395705237707233, 0.8433429020507226, 0.8433429020507226, 0.8433429020507226, 0.840062453407056, 0.840062453407056, 0.840062453407056, 0.013115203902393513, 0.013115203902393513, 0.013115203902393513, 0.005011625533921871, 0.005011625533921871, 0.005011625533921871, 0.15863344105651522, 0.15863344105651522, 0.15863344105651522, 0.11793052654203262, 0.11793052654203262, 0.11793052654203262, 0.15318018799126554, 0.15318018799126554, 0.15318018799126554, 0.11262075892469015, 0.11262075892469015, 0.11262075892469015, 0.1353457629897481, 0.1353457629897481, 0.1353457629897481, 0.11554398353337147, 0.11554398353337147, 0.11554398353337147, 0.10431521841805247, 0.10431521841805247, 0.10431521841805247, 0.9704353473867265, 0.9704353473867265, 0.9704353473867265, 0.9634077755022816, 0.9634077755022816, 0.9634077755022816, 0.9728609365622777, 0.9728609365622777, 0.9728609365622777, 0.5001101473787556, 0.5001101473787556, 0.5001101473787556, 0.5490939776525341, 0.5490939776525341, 0.5490939776525341, 0.46728299602278833, 0.46728299602278833, 0.46728299602278833, 0.22596501378969536, 0.22596501378969536, 0.22596501378969536, 0.36625112753361466, 0.36625112753361466, 0.36625112753361466, 0.17632765259342964, 0.17632765259342964, 0.17632765259342964, 0.17797566219420546, 0.17797566219420546, 0.17797566219420546, 0.20813361431189403, 0.20813361431189403, 0.20813361431189403, 0.1626929997788371, 0.1626929997788371, 0.1626929997788371, 0.16007039879457174, 0.16007039879457174, 0.16007039879457174, 0.12887789174705155, 0.12887789174705155, 0.12887789174705155, 0.12558217676917016, 0.12558217676917016, 0.12558217676917016, 0.05242852412440113, 0.05242852412440113, 0.05242852412440113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11883154773641014, 0.11883154773641014, 0.11883154773641014, 0.06234851406604558, 0.06234851406604558, 0.06234851406604558, 0.17601866016155177, 0.17601866016155177, 0.17601866016155177, 0.12163169448916256, 0.12163169448916256, 0.12163169448916256, 0.10155759783140383, 0.10155759783140383, 0.10155759783140383, 0.1472469253277935, 0.1472469253277935, 0.1472469253277935, 0.16251444299672235, 0.16251444299672235, 0.16251444299672235, 0.07252383986288624, 0.07252383986288624, 0.07252383986288624, 0.23192728097005433, 0.23192728097005433, 0.23192728097005433, 0.49626042918311963, 0.49626042918311963, 0.49626042918311963, 0.5114240223276931, 0.5114240223276931, 0.5114240223276931, 0.4847635579356574, 0.4847635579356574, 0.4847635579356574, 0.11571654927198671, 0.11571654927198671, 0.11571654927198671, 0.13459198985241638, 0.13459198985241638, 0.13459198985241638, 0.0990335090230956, 0.0990335090230956, 0.0990335090230956, 0.2427848247207085, 0.2427848247207085, 0.2427848247207085, 0.31437278051867545, 0.31437278051867545, 0.31437278051867545, 0.30999055900038364, 0.30999055900038364, 0.30999055900038364, 0.3963317235523678, 0.3963317235523678, 0.3963317235523678, 0.39896343848842475, 0.39896343848842475, 0.39896343848842475, 0.3398261463425756, 0.3398261463425756, 0.3398261463425756, 0.14982118226939423, 0.14982118226939423, 0.14982118226939423, 0.359508595069854, 0.359508595069854, 0.359508595069854, 0.173252417462065, 0.173252417462065, 0.173252417462065, 0.26429341989709454, 0.26429341989709454, 0.26429341989709454, 0.21741413593924153, 0.21741413593924153, 0.21741413593924153, 0.24950806081019028, 0.24950806081019028, 0.24950806081019028, 0.18719879074844004, 0.18719879074844004, 0.18719879074844004, 0.24228315622414442, 0.24228315622414442, 0.24228315622414442, 0.21915570525125183, 0.21915570525125183, 0.21915570525125183, 0.870950320822689, 0.870950320822689, 0.870950320822689, 0.17215730632410364, 0.17215730632410364, 0.17215730632410364, 0.10824880280353733, 0.10824880280353733, 0.10824880280353733, 0.6478309763083729, 0.6478309763083729, 0.6478309763083729, 0.21083951761137665, 0.21083951761137665, 0.21083951761137665, 0.1675469413158851, 0.1675469413158851, 0.1675469413158851, 0.1987148124857696, 0.1987148124857696, 0.1987148124857696, 0.18005526548632644, 0.18005526548632644, 0.18005526548632644, 0.19004970280508482, 0.19004970280508482, 0.19004970280508482, 0.09605117499242188, 0.09605117499242188, 0.09605117499242188, 0.09970386649186325, 0.09970386649186325, 0.09970386649186325, 0.12825498652385103, 0.12825498652385103, 0.12825498652385103]}, "mutation_prompt": null}
{"id": "5c4376c7-0454-4b6b-bba5-29b189902ed3", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "fe5192a6-1541-4804-90e6-f241c6a8a2d0", "solution": "import numpy as np\n\nclass AdaptiveEliteGuidedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Adjusted swarm size for better subgroup dynamics\n        self.initial_inertia = 0.9  # Increased initial inertia for broader exploration\n        self.final_inertia = 0.3  # Higher final inertia for controlled convergence\n        self.cognitive_coeff = 1.5  # Fine-tuned cognitive coefficient\n        self.social_coeff = 1.8  # Reduced social coefficient for balanced search\n        self.exploration_coeff = 0.7  # Enhanced exploration capability\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.2  # Adjusted velocity limits\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 3  # Adjusted subgroup factor for dynamic reallocation\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.7), 0.3, 1.0)  # Adjusted learning rate decay\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 4, replace=False)  # Adjusted donor selection\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.1 * np.random.rand(self.dim) * (elite_position - position[i])  # Reduced elite influence\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveEliteGuidedPSO", "description": "Adaptive Elite-Guided PSO with Enhanced Subgroup Dynamics for Optimized Convergence Speed.", "configspace": "", "generation": 58, "fitness": 0.26882336498632464, "feedback": "The algorithm AdaptiveEliteGuidedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.8073602717906025, 0.8073602717906025, 0.8073602717906025, 0.8053196315852903, 0.8053196315852903, 0.8053196315852903, 0.8017196801940045, 0.8017196801940045, 0.8017196801940045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1412224059828895, 0.1412224059828895, 0.1412224059828895, 0.12412289243318242, 0.12412289243318242, 0.12412289243318242, 0.09451982550801707, 0.09451982550801707, 0.09451982550801707, 0.09672663689707517, 0.09672663689707517, 0.09672663689707517, 0.10959464023328669, 0.10959464023328669, 0.10959464023328669, 0.1330925961128805, 0.1330925961128805, 0.1330925961128805, 0.9725539380675179, 0.9725539380675179, 0.9725539380675179, 0.9631596706435459, 0.9631596706435459, 0.9631596706435459, 0.9730282361205381, 0.9730282361205381, 0.9730282361205381, 0.6198451778417025, 0.6198451778417025, 0.6198451778417025, 0.4534970296836237, 0.4534970296836237, 0.4534970296836237, 0.3727297877059499, 0.3727297877059499, 0.3727297877059499, 0.22487093284415083, 0.22487093284415083, 0.22487093284415083, 0.34535049588532396, 0.34535049588532396, 0.34535049588532396, 0.3613516120893856, 0.3613516120893856, 0.3613516120893856, 0.1497152815841427, 0.1497152815841427, 0.1497152815841427, 0.1827671988368843, 0.1827671988368843, 0.1827671988368843, 0.15877973062350703, 0.15877973062350703, 0.15877973062350703, 0.127297835000325, 0.127297835000325, 0.127297835000325, 0.14437209730039868, 0.14437209730039868, 0.14437209730039868, 0.17541347427454546, 0.17541347427454546, 0.17541347427454546, 0.1587662777992036, 0.1587662777992036, 0.1587662777992036, 0.014235454046918727, 0.014235454046918727, 0.014235454046918727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06260792161484152, 0.06260792161484152, 0.06260792161484152, 0.05424124143406772, 0.05424124143406772, 0.05424124143406772, 0.22153191736884037, 0.22153191736884037, 0.22153191736884037, 0.09419111538571856, 0.09419111538571856, 0.09419111538571856, 0.06484861544914278, 0.06484861544914278, 0.06484861544914278, 0.22102187622385583, 0.22102187622385583, 0.22102187622385583, 0.25974524339657046, 0.25974524339657046, 0.25974524339657046, 0.03493162950435125, 0.03493162950435125, 0.03493162950435125, 0.07507132967219565, 0.07507132967219565, 0.07507132967219565, 0.4953750083785323, 0.4953750083785323, 0.4953750083785323, 0.5475346972898337, 0.5475346972898337, 0.5475346972898337, 0.46036365328230355, 0.46036365328230355, 0.46036365328230355, 0.11422894782699167, 0.11422894782699167, 0.11422894782699167, 0.14888555551675786, 0.14888555551675786, 0.14888555551675786, 0.1495089074132835, 0.1495089074132835, 0.1495089074132835, 0.4076873741273461, 0.4076873741273461, 0.4076873741273461, 0.2155944413747889, 0.2155944413747889, 0.2155944413747889, 0.2684723399810752, 0.2684723399810752, 0.2684723399810752, 0.3621770122806962, 0.3621770122806962, 0.3621770122806962, 0.304069383147782, 0.304069383147782, 0.304069383147782, 0.3859813921858708, 0.3859813921858708, 0.3859813921858708, 0.17297880610833327, 0.17297880610833327, 0.17297880610833327, 0.3229122527513365, 0.3229122527513365, 0.3229122527513365, 0.20699671165982658, 0.20699671165982658, 0.20699671165982658, 0.2640444003148851, 0.2640444003148851, 0.2640444003148851, 0.24341840497663403, 0.24341840497663403, 0.24341840497663403, 0.21622414095087794, 0.21622414095087794, 0.21622414095087794, 0.21133354944063032, 0.21133354944063032, 0.21133354944063032, 0.18551694764939852, 0.18551694764939852, 0.18551694764939852, 0.2054608605005558, 0.2054608605005558, 0.2054608605005558, 0.8465138244749596, 0.8465138244749596, 0.8465138244749596, 0.11420626729406558, 0.11420626729406558, 0.11420626729406558, 0.1352307299983675, 0.1352307299983675, 0.1352307299983675, 0.5522827275801879, 0.5522827275801879, 0.5522827275801879, 0.20891667793154334, 0.20891667793154334, 0.20891667793154334, 0.16677586940100753, 0.16677586940100753, 0.16677586940100753, 0.18386718389499046, 0.18386718389499046, 0.18386718389499046, 0.175220176297732, 0.175220176297732, 0.175220176297732, 0.1843219640763003, 0.1843219640763003, 0.1843219640763003, 0.09752464036858743, 0.09752464036858743, 0.09752464036858743, 0.09220680575004914, 0.09220680575004914, 0.09220680575004914, 0.10944692365536757, 0.10944692365536757, 0.10944692365536757]}, "mutation_prompt": null}
{"id": "aedd4b9b-3a5e-4327-b5ef-f0414ce5d18c", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "79e400fe-c8fa-474d-a293-3db4e66110a2", "solution": "import numpy as np\n\nclass QuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Reduced swarm size for faster adaptation\n        self.initial_inertia = 0.9  # Increased initial inertia for stronger global exploration\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.6\n        self.social_coeff = 1.8  # Adjusted for better global convergence\n        self.exploration_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.2  # Increased max velocity for exploration\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 5  # More dynamic subgroup factor for diverse exploration\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite_indices = np.argsort(personal_best_value)[:subgroup_factor]\n            elite_position = np.mean(personal_best_position[elite_indices], axis=0)\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.8), 0.15, 1.0)\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 4, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                levy_flight = np.random.standard_cauchy(self.dim) * 0.1\n                quantum_influence = 0.1 * np.random.rand(self.dim) * levy_flight\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + quantum_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "QuantumInspiredPSO", "description": "Adaptive Quantum-Inspired PSO with Dynamic Subgrouping and Quantum Levy Flights for Accelerated Convergence.", "configspace": "", "generation": 60, "fitness": 0.2768850927305899, "feedback": "The algorithm QuantumInspiredPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.636046598271387, 0.636046598271387, 0.636046598271387, 0.6250614346891128, 0.6250614346891128, 0.6250614346891128, 0.632075327777136, 0.632075327777136, 0.632075327777136, 0.1471909750431578, 0.1471909750431578, 0.1471909750431578, 0.14777397902255285, 0.14777397902255285, 0.14777397902255285, 0.135598017152463, 0.135598017152463, 0.135598017152463, 0.145050606203612, 0.145050606203612, 0.145050606203612, 0.14342874910302017, 0.14342874910302017, 0.14342874910302017, 0.16596525022376574, 0.16596525022376574, 0.16596525022376574, 0.12701224417397972, 0.12701224417397972, 0.12701224417397972, 0.1438733223374402, 0.1438733223374402, 0.1438733223374402, 0.16473223940085568, 0.16473223940085568, 0.16473223940085568, 0.9603024558667835, 0.9603024558667835, 0.9603024558667835, 0.963555639473784, 0.963555639473784, 0.963555639473784, 0.9632051163756276, 0.9632051163756276, 0.9632051163756276, 0.4605706078072741, 0.4605706078072741, 0.4605706078072741, 0.45646796063293327, 0.45646796063293327, 0.45646796063293327, 0.44475582857189055, 0.44475582857189055, 0.44475582857189055, 0.36486245444357335, 0.36486245444357335, 0.36486245444357335, 0.2064557453885013, 0.2064557453885013, 0.2064557453885013, 0.23083555587009563, 0.23083555587009563, 0.23083555587009563, 0.148188218171329, 0.148188218171329, 0.148188218171329, 0.2771088169924608, 0.2771088169924608, 0.2771088169924608, 0.2766727525785313, 0.2766727525785313, 0.2766727525785313, 0.12513307173952382, 0.12513307173952382, 0.12513307173952382, 0.1823426648652624, 0.1823426648652624, 0.1823426648652624, 0.19333155998358864, 0.19333155998358864, 0.19333155998358864, 0.0754865933151656, 0.0754865933151656, 0.0754865933151656, 0.01560719127896959, 0.01560719127896959, 0.01560719127896959, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13420424922645613, 0.13420424922645613, 0.13420424922645613, 0.06374213466878242, 0.06374213466878242, 0.06374213466878242, 0.07247191221827831, 0.07247191221827831, 0.07247191221827831, 0.03836793989928722, 0.03836793989928722, 0.03836793989928722, 0.12450575682838194, 0.12450575682838194, 0.12450575682838194, 0.07129033079846303, 0.07129033079846303, 0.07129033079846303, 0.11309354211962686, 0.11309354211962686, 0.11309354211962686, 0.08266263828992126, 0.08266263828992126, 0.08266263828992126, 0.07672633022720476, 0.07672633022720476, 0.07672633022720476, 0.5280212769082284, 0.5280212769082284, 0.5280212769082284, 0.5218893562576401, 0.5218893562576401, 0.5218893562576401, 0.5117593047879643, 0.5117593047879643, 0.5117593047879643, 0.123116182423883, 0.123116182423883, 0.123116182423883, 0.14970063010068768, 0.14970063010068768, 0.14970063010068768, 0.14561701028379848, 0.14561701028379848, 0.14561701028379848, 0.2540733849518666, 0.2540733849518666, 0.2540733849518666, 0.3528265346403634, 0.3528265346403634, 0.3528265346403634, 0.43397734917699005, 0.43397734917699005, 0.43397734917699005, 0.29668126880296897, 0.29668126880296897, 0.29668126880296897, 0.29888575405547535, 0.29888575405547535, 0.29888575405547535, 0.4000120380241915, 0.4000120380241915, 0.4000120380241915, 0.21908660804445512, 0.21908660804445512, 0.21908660804445512, 0.2839606015592714, 0.2839606015592714, 0.2839606015592714, 0.16573836616990334, 0.16573836616990334, 0.16573836616990334, 0.2227768154549713, 0.2227768154549713, 0.2227768154549713, 0.23021934732795057, 0.23021934732795057, 0.23021934732795057, 0.23346095130283817, 0.23346095130283817, 0.23346095130283817, 0.4642741023193978, 0.4642741023193978, 0.4642741023193978, 0.4770074667912597, 0.4770074667912597, 0.4770074667912597, 0.2148480267927646, 0.2148480267927646, 0.2148480267927646, 0.8504592819626329, 0.8504592819626329, 0.8504592819626329, 0.14975594685923366, 0.14975594685923366, 0.14975594685923366, 0.1696858836854762, 0.1696858836854762, 0.1696858836854762, 0.6747120629252552, 0.6747120629252552, 0.6747120629252552, 0.20926882803498004, 0.20926882803498004, 0.20926882803498004, 0.1668836791903635, 0.1668836791903635, 0.1668836791903635, 0.1813198357793434, 0.1813198357793434, 0.1813198357793434, 0.18182120758880727, 0.18182120758880727, 0.18182120758880727, 0.17855252884422823, 0.17855252884422823, 0.17855252884422823, 0.09942168180042132, 0.09942168180042132, 0.09942168180042132, 0.08590756740142147, 0.08590756740142147, 0.08590756740142147, 0.12414998532326205, 0.12414998532326205, 0.12414998532326205]}, "mutation_prompt": null}
{"id": "5d42caef-091a-4cec-943b-c8001ff613e3", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "2795a191-59f0-4e5b-98df-846012dabe5d", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "02409127-8429-4580-bc87-9cefdae9f44c", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9  # Slightly increased initial inertia\n        self.final_inertia = 0.3  # Adjusted final inertia for stability\n        self.cognitive_coeff = 1.5  # Further enhanced for local search\n        self.social_coeff = 1.8  # Slightly reduced for finer exploration\n        self.exploration_coeff = 0.7  # Further increased for exploration\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.3, 1.0)  # Adjusted learning rate bounds\n\n            for i in range(self.swarm_size):\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                dynamic_neighbors = np.random.choice(self.swarm_size, 3, replace=False)\n                exploration_term = self.exploration_coeff * np.mean(\n                    [position[neighbor] - position[i] for neighbor in dynamic_neighbors], axis=0)\n\n                elite_influence = 0.1 * r3 * (elite_position - position[i])  # Reduced elite influence\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] += 0.05 * np.random.normal(size=self.dim)  # Stochastic perturbation added\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Dynamic Neighborhoods and Stochastic Velocity Perturbations for Improved Exploration and Exploitation Balance.", "configspace": "", "generation": 63, "fitness": 0.24389518644103636, "feedback": "The algorithm EnhancedLocalSearchPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.4785617289599412, 0.4785617289599412, 0.4785617289599412, 0.47821254053750184, 0.47821254053750184, 0.47821254053750184, 0.4826888027434545, 0.4826888027434545, 0.4826888027434545, 0.03732084823088444, 0.03732084823088444, 0.03732084823088444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019618662728351555, 0.019618662728351555, 0.019618662728351555, 0.13083173160706196, 0.13083173160706196, 0.13083173160706196, 0.10634123953944818, 0.10634123953944818, 0.10634123953944818, 0.12978529417017848, 0.12978529417017848, 0.12978529417017848, 0.13747210398388232, 0.13747210398388232, 0.13747210398388232, 0.13875582359649563, 0.13875582359649563, 0.13875582359649563, 0.13469430589710973, 0.13469430589710973, 0.13469430589710973, 0.9500568442746491, 0.9500568442746491, 0.9500568442746491, 0.9557978113824332, 0.9557978113824332, 0.9557978113824332, 0.9448281901256236, 0.9448281901256236, 0.9448281901256236, 0.3493940240674185, 0.3493940240674185, 0.3493940240674185, 0.3391708912679665, 0.3391708912679665, 0.3391708912679665, 0.32976678598909015, 0.32976678598909015, 0.32976678598909015, 0.22485531724897634, 0.22485531724897634, 0.22485531724897634, 0.2102383655809419, 0.2102383655809419, 0.2102383655809419, 0.23128696456230569, 0.23128696456230569, 0.23128696456230569, 0.16054299899120028, 0.16054299899120028, 0.16054299899120028, 0.21589133359470913, 0.21589133359470913, 0.21589133359470913, 0.1711419304691706, 0.1711419304691706, 0.1711419304691706, 0.19864381996203273, 0.19864381996203273, 0.19864381996203273, 0.1742168247868483, 0.1742168247868483, 0.1742168247868483, 0.1735957705087452, 0.1735957705087452, 0.1735957705087452, 0.03873493924188387, 0.03873493924188387, 0.03873493924188387, 0.07266800544299223, 0.07266800544299223, 0.07266800544299223, 0.07328954651457154, 0.07328954651457154, 0.07328954651457154, 0.061952872425842354, 0.061952872425842354, 0.061952872425842354, 0.0742011395645713, 0.0742011395645713, 0.0742011395645713, 0.11256179318182169, 0.11256179318182169, 0.11256179318182169, 0.022291923661637014, 0.022291923661637014, 0.022291923661637014, 0.024110141441868294, 0.024110141441868294, 0.024110141441868294, 0.010977748545832777, 0.010977748545832777, 0.010977748545832777, 0.1289831056179923, 0.1289831056179923, 0.1289831056179923, 0.12196009646831951, 0.12196009646831951, 0.12196009646831951, 0.10895545600704792, 0.10895545600704792, 0.10895545600704792, 0.45673173652042875, 0.45673173652042875, 0.45673173652042875, 0.4468974452250766, 0.4468974452250766, 0.4468974452250766, 0.4583730492463879, 0.4583730492463879, 0.4583730492463879, 0.1202187138460884, 0.1202187138460884, 0.1202187138460884, 0.12039320141636423, 0.12039320141636423, 0.12039320141636423, 0.1456206503126215, 0.1456206503126215, 0.1456206503126215, 0.31030077996462246, 0.31030077996462246, 0.31030077996462246, 0.311783776270783, 0.311783776270783, 0.311783776270783, 0.19699980214690582, 0.19699980214690582, 0.19699980214690582, 0.32841245561348464, 0.32841245561348464, 0.32841245561348464, 0.30987953799635193, 0.30987953799635193, 0.30987953799635193, 0.30822082011408924, 0.30822082011408924, 0.30822082011408924, 0.2428544385009248, 0.2428544385009248, 0.2428544385009248, 0.24418264821224822, 0.24418264821224822, 0.24418264821224822, 0.19376856292084998, 0.19376856292084998, 0.19376856292084998, 0.23963604711333542, 0.23963604711333542, 0.23963604711333542, 0.23793799730883747, 0.23793799730883747, 0.23793799730883747, 0.2558847047997722, 0.2558847047997722, 0.2558847047997722, 0.18879421564002874, 0.18879421564002874, 0.18879421564002874, 0.19840506728222584, 0.19840506728222584, 0.19840506728222584, 0.21439778509456686, 0.21439778509456686, 0.21439778509456686, 0.7386319946583595, 0.7386319946583595, 0.7386319946583595, 0.17142505800261298, 0.17142505800261298, 0.17142505800261298, 0.16791778802651947, 0.16791778802651947, 0.16791778802651947, 0.5844667597678794, 0.5844667597678794, 0.5844667597678794, 0.5960774183565164, 0.5960774183565164, 0.5960774183565164, 0.16711371059381785, 0.16711371059381785, 0.16711371059381785, 0.2032987730377196, 0.2032987730377196, 0.2032987730377196, 0.18140035238790242, 0.18140035238790242, 0.18140035238790242, 0.18074742506715302, 0.18074742506715302, 0.18074742506715302, 0.0836452618377953, 0.0836452618377953, 0.0836452618377953, 0.08568664728715902, 0.08568664728715902, 0.08568664728715902, 0.11585107626439073, 0.11585107626439073, 0.11585107626439073]}, "mutation_prompt": null}
{"id": "9caf1a8e-f247-4079-8a6b-7a56c9e2298a", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "e0b4fde6-16d4-4fcf-a86d-78963804b5e8", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "a1f0b1fb-47aa-403a-a6e6-2453c43536c3", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "325af26e-f179-4a8d-b8a1-170f7e9d9dd7", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "933651fc-adb7-4b59-b0c5-30678ec901ae", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "78adef63-d2cc-40b4-bb74-a3d9c2436684", "solution": "import numpy as np\n\nclass EnhancedLocalSearchPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.2  # Decreased final inertia for faster convergence\n        self.cognitive_coeff = 1.4  # Adjusted for local search enhancement\n        self.social_coeff = 2.0  # Increased for better global exploration\n        self.exploration_coeff = 0.6  # Increased exploration coefficient\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        subgroup_factor = 4\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            elite = np.argmin(personal_best_value)\n            elite_position = personal_best_position[elite]\n            \n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.2, 1.0)  # Decrease learning rate adaptively\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                donor_particles = np.random.choice(self.swarm_size, 5, replace=False)\n                exploration_term = self.exploration_coeff * np.median(\n                    [position[donor] - position[i] for donor in donor_particles], axis=0)\n\n                elite_influence = 0.15 * np.random.rand(self.dim) * (elite_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + exploration_term + elite_influence)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedLocalSearchPSO", "description": "Enhanced Local Search PSO with Adaptive Learning Rates and Elite Communication for Accelerated Convergence.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.828735725876942, 0.828735725876942, 0.828735725876942, 0.8239180116762671, 0.8239180116762671, 0.8239180116762671, 0.8216764900540527, 0.8216764900540527, 0.8216764900540527, 0.42511291156157294, 0.42511291156157294, 0.42511291156157294, 0.12238192358670752, 0.12238192358670752, 0.12238192358670752, 0.21675317652459447, 0.21675317652459447, 0.21675317652459447, 0.11861209307384357, 0.11861209307384357, 0.11861209307384357, 0.11428234896396738, 0.11428234896396738, 0.11428234896396738, 0.17422734337133228, 0.17422734337133228, 0.17422734337133228, 0.14277502424027666, 0.14277502424027666, 0.14277502424027666, 0.10158749559291624, 0.10158749559291624, 0.10158749559291624, 0.08333468434286073, 0.08333468434286073, 0.08333468434286073, 0.95373573558736, 0.95373573558736, 0.95373573558736, 0.9445760811385311, 0.9445760811385311, 0.9445760811385311, 0.9551813808364622, 0.9551813808364622, 0.9551813808364622, 0.5264354205686624, 0.5264354205686624, 0.5264354205686624, 0.42688858708395616, 0.42688858708395616, 0.42688858708395616, 0.5177153268563468, 0.5177153268563468, 0.5177153268563468, 0.8113573181627588, 0.8113573181627588, 0.8113573181627588, 0.21112478004202595, 0.21112478004202595, 0.21112478004202595, 0.8137356418645757, 0.8137356418645757, 0.8137356418645757, 0.12544920163884077, 0.12544920163884077, 0.12544920163884077, 0.1886111014194044, 0.1886111014194044, 0.1886111014194044, 0.1748603868985461, 0.1748603868985461, 0.1748603868985461, 0.25701984633755914, 0.25701984633755914, 0.25701984633755914, 0.15728212319585888, 0.15728212319585888, 0.15728212319585888, 0.20835611380003694, 0.20835611380003694, 0.20835611380003694, 0.015145817976910392, 0.015145817976910392, 0.015145817976910392, 0.0674634360751506, 0.0674634360751506, 0.0674634360751506, 0.01489223665622541, 0.01489223665622541, 0.01489223665622541, 0.05163239062257419, 0.05163239062257419, 0.05163239062257419, 0.018416130869056913, 0.018416130869056913, 0.018416130869056913, 0.13001004856499954, 0.13001004856499954, 0.13001004856499954, 0.043595828614980014, 0.043595828614980014, 0.043595828614980014, 0.08929160712462636, 0.08929160712462636, 0.08929160712462636, 0.10004833060108298, 0.10004833060108298, 0.10004833060108298, 0.14876836750957467, 0.14876836750957467, 0.14876836750957467, 0.12927062606218753, 0.12927062606218753, 0.12927062606218753, 0.07936157723761261, 0.07936157723761261, 0.07936157723761261, 0.5141617215844729, 0.5141617215844729, 0.5141617215844729, 0.5257752665815538, 0.5257752665815538, 0.5257752665815538, 0.5184153071227404, 0.5184153071227404, 0.5184153071227404, 0.17277351530006346, 0.17277351530006346, 0.17277351530006346, 0.10391343234872585, 0.10391343234872585, 0.10391343234872585, 0.13451348554443088, 0.13451348554443088, 0.13451348554443088, 0.3229053812384779, 0.3229053812384779, 0.3229053812384779, 0.2170328512718247, 0.2170328512718247, 0.2170328512718247, 0.1952499747640084, 0.1952499747640084, 0.1952499747640084, 0.39384716150678656, 0.39384716150678656, 0.39384716150678656, 0.4638130066732621, 0.4638130066732621, 0.4638130066732621, 0.42089315319145193, 0.42089315319145193, 0.42089315319145193, 0.19534428151351357, 0.19534428151351357, 0.19534428151351357, 0.27462318102673433, 0.27462318102673433, 0.27462318102673433, 0.2094837723392059, 0.2094837723392059, 0.2094837723392059, 0.221838853132158, 0.221838853132158, 0.221838853132158, 0.21832562578341697, 0.21832562578341697, 0.21832562578341697, 0.2289226640854497, 0.2289226640854497, 0.2289226640854497, 0.2045390486642633, 0.2045390486642633, 0.2045390486642633, 0.21862739522711383, 0.21862739522711383, 0.21862739522711383, 0.2049100515773814, 0.2049100515773814, 0.2049100515773814, 0.8888224861560542, 0.8888224861560542, 0.8888224861560542, 0.1580837623246122, 0.1580837623246122, 0.1580837623246122, 0.1689770853407916, 0.1689770853407916, 0.1689770853407916, 0.4454531319551215, 0.4454531319551215, 0.4454531319551215, 0.2122719647880349, 0.2122719647880349, 0.2122719647880349, 0.09447966353121029, 0.09447966353121029, 0.09447966353121029, 0.19030857287952208, 0.19030857287952208, 0.19030857287952208, 0.21315402353962432, 0.21315402353962432, 0.21315402353962432, 0.18678858577418656, 0.18678858577418656, 0.18678858577418656, 0.10465806734854488, 0.10465806734854488, 0.10465806734854488, 0.06746845814227054, 0.06746845814227054, 0.06746845814227054, 0.1083606129999738, 0.1083606129999738, 0.1083606129999738]}, "mutation_prompt": null}
{"id": "f056b730-3e1c-4189-a454-10e29b41fe4d", "solution": "import numpy as np\n\nclass DynamicNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.2\n        self.social_coeff = 2.2\n        self.neighborhood_coeff = 0.3\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 10)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.8), 0.3, 1.0)\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "DynamicNeighborhoodPSO", "description": "Dynamic Neighborhood Influence PSO with Adaptive Subgroup Learning for Enhanced Convergence and Exploration.", "configspace": "", "generation": 70, "fitness": 0.33668653322543, "feedback": "The algorithm DynamicNeighborhoodPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "8fd1a8ef-b450-46d6-b145-e1f3f666e907", "metadata": {"aucs": [0.843972053810369, 0.843972053810369, 0.843972053810369, 0.8461538955321044, 0.8461538955321044, 0.8461538955321044, 0.8384141778320484, 0.8384141778320484, 0.8384141778320484, 0.37191933406411504, 0.37191933406411504, 0.37191933406411504, 0.19846170034345445, 0.19846170034345445, 0.19846170034345445, 0.6901428419481679, 0.6901428419481679, 0.6901428419481679, 0.717066729888254, 0.717066729888254, 0.717066729888254, 0.1178065114580813, 0.1178065114580813, 0.1178065114580813, 0.07082199495346464, 0.07082199495346464, 0.07082199495346464, 0.09377470575979552, 0.09377470575979552, 0.09377470575979552, 0.11049671463117117, 0.11049671463117117, 0.11049671463117117, 0.13248753784104006, 0.13248753784104006, 0.13248753784104006, 0.9350258732533703, 0.9350258732533703, 0.9350258732533703, 0.945082127654123, 0.945082127654123, 0.945082127654123, 0.9244642867723678, 0.9244642867723678, 0.9244642867723678, 0.6378748047658359, 0.6378748047658359, 0.6378748047658359, 0.5471961381813282, 0.5471961381813282, 0.5471961381813282, 0.6564204995541776, 0.6564204995541776, 0.6564204995541776, 0.7761939602029664, 0.7761939602029664, 0.7761939602029664, 0.2768621365142311, 0.2768621365142311, 0.2768621365142311, 0.3528700336618258, 0.3528700336618258, 0.3528700336618258, 0.12875629589294035, 0.12875629589294035, 0.12875629589294035, 0.22621189224259097, 0.22621189224259097, 0.22621189224259097, 0.1889112106302464, 0.1889112106302464, 0.1889112106302464, 0.20845975751760515, 0.20845975751760515, 0.20845975751760515, 0.18537829891098767, 0.18537829891098767, 0.18537829891098767, 0.20948172614742921, 0.20948172614742921, 0.20948172614742921, 0.024394302692352876, 0.024394302692352876, 0.024394302692352876, 0.10606607565995019, 0.10606607565995019, 0.10606607565995019, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08587070880928116, 0.08587070880928116, 0.08587070880928116, 0.028318601864777193, 0.028318601864777193, 0.028318601864777193, 0.08580368136504568, 0.08580368136504568, 0.08580368136504568, 0.25448521505927646, 0.25448521505927646, 0.25448521505927646, 0.2719272511855233, 0.2719272511855233, 0.2719272511855233, 0.1167013340105143, 0.1167013340105143, 0.1167013340105143, 0.1514818676438392, 0.1514818676438392, 0.1514818676438392, 0.24761467795268965, 0.24761467795268965, 0.24761467795268965, 0.11933635423976485, 0.11933635423976485, 0.11933635423976485, 0.5520951681971578, 0.5520951681971578, 0.5520951681971578, 0.5211466957769966, 0.5211466957769966, 0.5211466957769966, 0.5275016754620627, 0.5275016754620627, 0.5275016754620627, 0.11577620584414039, 0.11577620584414039, 0.11577620584414039, 0.10517674245364872, 0.10517674245364872, 0.10517674245364872, 0.10216077228908993, 0.10216077228908993, 0.10216077228908993, 0.5955561936188565, 0.5955561936188565, 0.5955561936188565, 0.32979091068519706, 0.32979091068519706, 0.32979091068519706, 0.7238825731215608, 0.7238825731215608, 0.7238825731215608, 0.3388905883745732, 0.3388905883745732, 0.3388905883745732, 0.3641034252330231, 0.3641034252330231, 0.3641034252330231, 0.5221120356066136, 0.5221120356066136, 0.5221120356066136, 0.19865237312672912, 0.19865237312672912, 0.19865237312672912, 0.2913286245750355, 0.2913286245750355, 0.2913286245750355, 0.2590950245052964, 0.2590950245052964, 0.2590950245052964, 0.21930149828010925, 0.21930149828010925, 0.21930149828010925, 0.24393313397747163, 0.24393313397747163, 0.24393313397747163, 0.243590442758835, 0.243590442758835, 0.243590442758835, 0.2199014124389722, 0.2199014124389722, 0.2199014124389722, 0.2145828051747557, 0.2145828051747557, 0.2145828051747557, 0.20880468458864732, 0.20880468458864732, 0.20880468458864732, 0.8932923155027819, 0.8932923155027819, 0.8932923155027819, 0.16826453065932656, 0.16826453065932656, 0.16826453065932656, 0.16830683876820585, 0.16830683876820585, 0.16830683876820585, 0.7725828304339244, 0.7725828304339244, 0.7725828304339244, 0.21183160448780824, 0.21183160448780824, 0.21183160448780824, 0.5655769693161259, 0.5655769693161259, 0.5655769693161259, 0.18292069098133645, 0.18292069098133645, 0.18292069098133645, 0.2001791589851576, 0.2001791589851576, 0.2001791589851576, 0.20853465891034717, 0.20853465891034717, 0.20853465891034717, 0.07883373764117663, 0.07883373764117663, 0.07883373764117663, 0.08681695150927793, 0.08681695150927793, 0.08681695150927793, 0.0840998084996134, 0.0840998084996134, 0.0840998084996134]}, "mutation_prompt": null}
{"id": "9ba9b351-cb16-4456-a639-4d5d9a67fc33", "solution": "import numpy as np\n\nclass AdaptiveMultiSwarmPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.4  # Adjusted for improved convergence\n        self.cognitive_coeff = 1.4  # Slightly increased for better individual exploration\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.4  # Increased neighborhood influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n        self.reset_probability = 0.1  # Introduced velocity reset probability\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(5, self.swarm_size // 8)  # Increased neighborhood size for diversity\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.75), 0.3, 1.0)\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n                \n                if np.random.rand() < self.reset_probability:  # Introduce velocity reset\n                    velocity[i] = np.random.uniform(-self.max_velocity, self.max_velocity, self.dim)\n                else:\n                    velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                \n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveMultiSwarmPSO", "description": "Adaptive Multi-Swarm PSO with Enhanced Velocity Reset and Stochastic Neighborhood Influence for Improved Convergence.", "configspace": "", "generation": 71, "fitness": 0.28943277944226947, "feedback": "The algorithm AdaptiveMultiSwarmPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "f056b730-3e1c-4189-a454-10e29b41fe4d", "metadata": {"aucs": [0.8177142078605464, 0.8177142078605464, 0.8177142078605464, 0.8096335108432808, 0.8096335108432808, 0.8096335108432808, 0.8193518048593738, 0.8193518048593738, 0.8193518048593738, 0.10811548395042847, 0.10811548395042847, 0.10811548395042847, 0.06803281139271244, 0.06803281139271244, 0.06803281139271244, 0.06958801046170227, 0.06958801046170227, 0.06958801046170227, 0.13909171660262165, 0.13909171660262165, 0.13909171660262165, 0.10954069320925441, 0.10954069320925441, 0.10954069320925441, 0.11767311271609637, 0.11767311271609637, 0.11767311271609637, 0.13853153987812916, 0.13853153987812916, 0.13853153987812916, 0.10887502393399207, 0.10887502393399207, 0.10887502393399207, 0.11337626107563081, 0.11337626107563081, 0.11337626107563081, 0.919962673066547, 0.919962673066547, 0.919962673066547, 0.9194273913884503, 0.9194273913884503, 0.9194273913884503, 0.9299273923493625, 0.9299273923493625, 0.9299273923493625, 0.4729202650153469, 0.4729202650153469, 0.4729202650153469, 0.4757689044746949, 0.4757689044746949, 0.4757689044746949, 0.5334561382526006, 0.5334561382526006, 0.5334561382526006, 0.3655999895501575, 0.3655999895501575, 0.3655999895501575, 0.21365153369012957, 0.21365153369012957, 0.21365153369012957, 0.38455248261035013, 0.38455248261035013, 0.38455248261035013, 0.17230903063270475, 0.17230903063270475, 0.17230903063270475, 0.19670527231795776, 0.19670527231795776, 0.19670527231795776, 0.12136859404732692, 0.12136859404732692, 0.12136859404732692, 0.16907120522978292, 0.16907120522978292, 0.16907120522978292, 0.12844171588846398, 0.12844171588846398, 0.12844171588846398, 0.1686122536946112, 0.1686122536946112, 0.1686122536946112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051242583116181906, 0.051242583116181906, 0.051242583116181906, 0.0057253370475127685, 0.0057253370475127685, 0.0057253370475127685, 0.07256317859125627, 0.07256317859125627, 0.07256317859125627, 0.08590854765705247, 0.08590854765705247, 0.08590854765705247, 0.1380935663021221, 0.1380935663021221, 0.1380935663021221, 0.046623993158095844, 0.046623993158095844, 0.046623993158095844, 0.0882449995017689, 0.0882449995017689, 0.0882449995017689, 0.18914957683541211, 0.18914957683541211, 0.18914957683541211, 0.13407632605838404, 0.13407632605838404, 0.13407632605838404, 0.036930682310793994, 0.036930682310793994, 0.036930682310793994, 0.14287895298009867, 0.14287895298009867, 0.14287895298009867, 0.48175035436337554, 0.48175035436337554, 0.48175035436337554, 0.4921683880251758, 0.4921683880251758, 0.4921683880251758, 0.5175255511094464, 0.5175255511094464, 0.5175255511094464, 0.1073903660870057, 0.1073903660870057, 0.1073903660870057, 0.11863396716107832, 0.11863396716107832, 0.11863396716107832, 0.17450152493369564, 0.17450152493369564, 0.17450152493369564, 0.36930768849362583, 0.36930768849362583, 0.36930768849362583, 0.3150258775799907, 0.3150258775799907, 0.3150258775799907, 0.34632124334422765, 0.34632124334422765, 0.34632124334422765, 0.32182900704913087, 0.32182900704913087, 0.32182900704913087, 0.3088941521809647, 0.3088941521809647, 0.3088941521809647, 0.3819042568189126, 0.3819042568189126, 0.3819042568189126, 0.15525409574361748, 0.15525409574361748, 0.15525409574361748, 0.29768550562596496, 0.29768550562596496, 0.29768550562596496, 0.22331101464037284, 0.22331101464037284, 0.22331101464037284, 0.21031550531037468, 0.21031550531037468, 0.21031550531037468, 0.2323077844633079, 0.2323077844633079, 0.2323077844633079, 0.27343417607992815, 0.27343417607992815, 0.27343417607992815, 0.2408585169995947, 0.2408585169995947, 0.2408585169995947, 0.1942687095274508, 0.1942687095274508, 0.1942687095274508, 0.21953581554927915, 0.21953581554927915, 0.21953581554927915, 0.8561108850616411, 0.8561108850616411, 0.8561108850616411, 0.16405623185038076, 0.16405623185038076, 0.16405623185038076, 0.8822622753167162, 0.8822622753167162, 0.8822622753167162, 0.5932201542186557, 0.5932201542186557, 0.5932201542186557, 0.21202742148696951, 0.21202742148696951, 0.21202742148696951, 0.7082890455411228, 0.7082890455411228, 0.7082890455411228, 0.19020224630217886, 0.19020224630217886, 0.19020224630217886, 0.18237255867083324, 0.18237255867083324, 0.18237255867083324, 0.18484448393814557, 0.18484448393814557, 0.18484448393814557, 0.09917277775061917, 0.09917277775061917, 0.09917277775061917, 0.08999068718840486, 0.08999068718840486, 0.08999068718840486, 0.11155108888028209, 0.11155108888028209, 0.11155108888028209]}, "mutation_prompt": null}
{"id": "ecf1424e-85b4-421c-acc3-bd16791972eb", "solution": "import numpy as np\n\nclass DynamicNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.2\n        self.social_coeff = 2.2\n        self.neighborhood_coeff = 0.3\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 10)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.8), 0.3, 1.0)\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "DynamicNeighborhoodPSO", "description": "Dynamic Neighborhood Influence PSO with Adaptive Subgroup Learning for Enhanced Convergence and Exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f056b730-3e1c-4189-a454-10e29b41fe4d", "metadata": {"aucs": [0.843972053810369, 0.843972053810369, 0.843972053810369, 0.8461538955321044, 0.8461538955321044, 0.8461538955321044, 0.8384141778320484, 0.8384141778320484, 0.8384141778320484, 0.37191933406411504, 0.37191933406411504, 0.37191933406411504, 0.19846170034345445, 0.19846170034345445, 0.19846170034345445, 0.6901428419481679, 0.6901428419481679, 0.6901428419481679, 0.717066729888254, 0.717066729888254, 0.717066729888254, 0.1178065114580813, 0.1178065114580813, 0.1178065114580813, 0.07082199495346464, 0.07082199495346464, 0.07082199495346464, 0.09377470575979552, 0.09377470575979552, 0.09377470575979552, 0.11049671463117117, 0.11049671463117117, 0.11049671463117117, 0.13248753784104006, 0.13248753784104006, 0.13248753784104006, 0.9350258732533703, 0.9350258732533703, 0.9350258732533703, 0.945082127654123, 0.945082127654123, 0.945082127654123, 0.9244642867723678, 0.9244642867723678, 0.9244642867723678, 0.6378748047658359, 0.6378748047658359, 0.6378748047658359, 0.5471961381813282, 0.5471961381813282, 0.5471961381813282, 0.6564204995541776, 0.6564204995541776, 0.6564204995541776, 0.7761939602029664, 0.7761939602029664, 0.7761939602029664, 0.2768621365142311, 0.2768621365142311, 0.2768621365142311, 0.3528700336618258, 0.3528700336618258, 0.3528700336618258, 0.12875629589294035, 0.12875629589294035, 0.12875629589294035, 0.22621189224259097, 0.22621189224259097, 0.22621189224259097, 0.1889112106302464, 0.1889112106302464, 0.1889112106302464, 0.20845975751760515, 0.20845975751760515, 0.20845975751760515, 0.18537829891098767, 0.18537829891098767, 0.18537829891098767, 0.20948172614742921, 0.20948172614742921, 0.20948172614742921, 0.024394302692352876, 0.024394302692352876, 0.024394302692352876, 0.10606607565995019, 0.10606607565995019, 0.10606607565995019, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08587070880928116, 0.08587070880928116, 0.08587070880928116, 0.028318601864777193, 0.028318601864777193, 0.028318601864777193, 0.08580368136504568, 0.08580368136504568, 0.08580368136504568, 0.25448521505927646, 0.25448521505927646, 0.25448521505927646, 0.2719272511855233, 0.2719272511855233, 0.2719272511855233, 0.1167013340105143, 0.1167013340105143, 0.1167013340105143, 0.1514818676438392, 0.1514818676438392, 0.1514818676438392, 0.24761467795268965, 0.24761467795268965, 0.24761467795268965, 0.11933635423976485, 0.11933635423976485, 0.11933635423976485, 0.5520951681971578, 0.5520951681971578, 0.5520951681971578, 0.5211466957769966, 0.5211466957769966, 0.5211466957769966, 0.5275016754620627, 0.5275016754620627, 0.5275016754620627, 0.11577620584414039, 0.11577620584414039, 0.11577620584414039, 0.10517674245364872, 0.10517674245364872, 0.10517674245364872, 0.10216077228908993, 0.10216077228908993, 0.10216077228908993, 0.5955561936188565, 0.5955561936188565, 0.5955561936188565, 0.32979091068519706, 0.32979091068519706, 0.32979091068519706, 0.7238825731215608, 0.7238825731215608, 0.7238825731215608, 0.3388905883745732, 0.3388905883745732, 0.3388905883745732, 0.3641034252330231, 0.3641034252330231, 0.3641034252330231, 0.5221120356066136, 0.5221120356066136, 0.5221120356066136, 0.19865237312672912, 0.19865237312672912, 0.19865237312672912, 0.2913286245750355, 0.2913286245750355, 0.2913286245750355, 0.2590950245052964, 0.2590950245052964, 0.2590950245052964, 0.21930149828010925, 0.21930149828010925, 0.21930149828010925, 0.24393313397747163, 0.24393313397747163, 0.24393313397747163, 0.243590442758835, 0.243590442758835, 0.243590442758835, 0.2199014124389722, 0.2199014124389722, 0.2199014124389722, 0.2145828051747557, 0.2145828051747557, 0.2145828051747557, 0.20880468458864732, 0.20880468458864732, 0.20880468458864732, 0.8932923155027819, 0.8932923155027819, 0.8932923155027819, 0.16826453065932656, 0.16826453065932656, 0.16826453065932656, 0.16830683876820585, 0.16830683876820585, 0.16830683876820585, 0.7725828304339244, 0.7725828304339244, 0.7725828304339244, 0.21183160448780824, 0.21183160448780824, 0.21183160448780824, 0.5655769693161259, 0.5655769693161259, 0.5655769693161259, 0.18292069098133645, 0.18292069098133645, 0.18292069098133645, 0.2001791589851576, 0.2001791589851576, 0.2001791589851576, 0.20853465891034717, 0.20853465891034717, 0.20853465891034717, 0.07883373764117663, 0.07883373764117663, 0.07883373764117663, 0.08681695150927793, 0.08681695150927793, 0.08681695150927793, 0.0840998084996134, 0.0840998084996134, 0.0840998084996134]}, "mutation_prompt": null}
{"id": "62db45e3-9925-4f04-a0e6-98d2798d52f0", "solution": "import numpy as np\n\nclass AdaptiveQuantumPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.quantum_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.8), 0.3, 1.0)\n\n            for i in range(self.swarm_size):\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                # Quantum inspired update\n                quantum_term = self.quantum_coeff * r3 * (np.random.uniform(self.lower_bound, self.upper_bound, self.dim) - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + quantum_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveQuantumPSO", "description": "Adaptive Quantum-Inspired Particle Swarm Optimization with Dynamic Leader Selection for Enhanced Convergence and Exploration.", "configspace": "", "generation": 73, "fitness": 0.16044235630205406, "feedback": "The algorithm AdaptiveQuantumPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "f056b730-3e1c-4189-a454-10e29b41fe4d", "metadata": {"aucs": [0.3631202772617528, 0.3631202772617528, 0.3631202772617528, 0.3234470463650898, 0.3234470463650898, 0.3234470463650898, 0.31614123720307485, 0.31614123720307485, 0.31614123720307485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09056232554020993, 0.09056232554020993, 0.09056232554020993, 0.09208037839599714, 0.09208037839599714, 0.09208037839599714, 0.08321139297920566, 0.08321139297920566, 0.08321139297920566, 0.09457902458423417, 0.09457902458423417, 0.09457902458423417, 0.07327304814737179, 0.07327304814737179, 0.07327304814737179, 0.08627824482477686, 0.08627824482477686, 0.08627824482477686, 0.11778399255505645, 0.11778399255505645, 0.11778399255505645, 0.10906279981860312, 0.10906279981860312, 0.10906279981860312, 0.12112881053099167, 0.12112881053099167, 0.12112881053099167, 0.2075899688057099, 0.2075899688057099, 0.2075899688057099, 0.2133412396247829, 0.2133412396247829, 0.2133412396247829, 0.20957683327618515, 0.20957683327618515, 0.20957683327618515, 0.16892635948542478, 0.16892635948542478, 0.16892635948542478, 0.27558659803026375, 0.27558659803026375, 0.27558659803026375, 0.24693252837952817, 0.24693252837952817, 0.24693252837952817, 0.11934393499482321, 0.11934393499482321, 0.11934393499482321, 0.12105717726057397, 0.12105717726057397, 0.12105717726057397, 0.1385630253577359, 0.1385630253577359, 0.1385630253577359, 0.13634166812921833, 0.13634166812921833, 0.13634166812921833, 0.12973621178494354, 0.12973621178494354, 0.12973621178494354, 0.11243506646730184, 0.11243506646730184, 0.11243506646730184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009223743404699558, 0.009223743404699558, 0.009223743404699558, 0.032181971932839004, 0.032181971932839004, 0.032181971932839004, 0.0944558836621664, 0.0944558836621664, 0.0944558836621664, 0.06036345696538192, 0.06036345696538192, 0.06036345696538192, 0.1596156660360999, 0.1596156660360999, 0.1596156660360999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055723725478935004, 0.055723725478935004, 0.055723725478935004, 0.06005358068900901, 0.06005358068900901, 0.06005358068900901, 0.05384882732154894, 0.05384882732154894, 0.05384882732154894, 0.33603977073231883, 0.33603977073231883, 0.33603977073231883, 0.3269510035430486, 0.3269510035430486, 0.3269510035430486, 0.35917990617686657, 0.35917990617686657, 0.35917990617686657, 0.06911477288086676, 0.06911477288086676, 0.06911477288086676, 0.08860178981459121, 0.08860178981459121, 0.08860178981459121, 0.07978917443628375, 0.07978917443628375, 0.07978917443628375, 0.17874232558280279, 0.17874232558280279, 0.17874232558280279, 0.19164101603694594, 0.19164101603694594, 0.19164101603694594, 0.13574742288262875, 0.13574742288262875, 0.13574742288262875, 0.24650018149674602, 0.24650018149674602, 0.24650018149674602, 0.25439854655051986, 0.25439854655051986, 0.25439854655051986, 0.21707304767506808, 0.21707304767506808, 0.21707304767506808, 0.16727425656696793, 0.16727425656696793, 0.16727425656696793, 0.1953100343033185, 0.1953100343033185, 0.1953100343033185, 0.1612843135129879, 0.1612843135129879, 0.1612843135129879, 0.23167227244492972, 0.23167227244492972, 0.23167227244492972, 0.24159178133069004, 0.24159178133069004, 0.24159178133069004, 0.213540093873835, 0.213540093873835, 0.213540093873835, 0.1868557446949899, 0.1868557446949899, 0.1868557446949899, 0.17604372547482194, 0.17604372547482194, 0.17604372547482194, 0.18440884704870664, 0.18440884704870664, 0.18440884704870664, 0.4252461274079151, 0.4252461274079151, 0.4252461274079151, 0.14311740212315294, 0.14311740212315294, 0.14311740212315294, 0.5011249590578709, 0.5011249590578709, 0.5011249590578709, 0.4377413186199427, 0.4377413186199427, 0.4377413186199427, 0.20387586786602307, 0.20387586786602307, 0.20387586786602307, 0.284498446720995, 0.284498446720995, 0.284498446720995, 0.19976149478186278, 0.19976149478186278, 0.19976149478186278, 0.1925165852981926, 0.1925165852981926, 0.1925165852981926, 0.19175758626172912, 0.19175758626172912, 0.19175758626172912, 0.08505522125586717, 0.08505522125586717, 0.08505522125586717, 0.0815669057150108, 0.0815669057150108, 0.0815669057150108, 0.08756166628585815, 0.08756166628585815, 0.08756166628585815]}, "mutation_prompt": null}
{"id": "519619a7-660d-4887-b332-14afabe3927f", "solution": "import numpy as np\n\nclass MultiStrategyAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.5\n        self.neighborhood_coeff = 0.4\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n        self.elite_percent = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 10)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.8), 0.4, 1.0)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            elite_indices = np.argpartition(personal_best_value, int(self.swarm_size * self.elite_percent))[:int(self.swarm_size * self.elite_percent)]\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n                \n                if i in elite_indices:\n                    velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term)\n                else:\n                    velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                    \n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "MultiStrategyAdaptivePSO", "description": "Multi-Strategy Adaptive Learning PSO with Adaptive Parameters for Robust Exploration and Exploitation.", "configspace": "", "generation": 74, "fitness": 0.31674406423353524, "feedback": "The algorithm MultiStrategyAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "f056b730-3e1c-4189-a454-10e29b41fe4d", "metadata": {"aucs": [0.8183408596981836, 0.8183408596981836, 0.8183408596981836, 0.8203495186835615, 0.8203495186835615, 0.8203495186835615, 0.8382768846849729, 0.8382768846849729, 0.8382768846849729, 0.13203309140173058, 0.13203309140173058, 0.13203309140173058, 0.6464614305543785, 0.6464614305543785, 0.6464614305543785, 0.6510451990334913, 0.6510451990334913, 0.6510451990334913, 0.11441531557088946, 0.11441531557088946, 0.11441531557088946, 0.09918856549680677, 0.09918856549680677, 0.09918856549680677, 0.15536622215785068, 0.15536622215785068, 0.15536622215785068, 0.1530988386669323, 0.1530988386669323, 0.1530988386669323, 0.12535800981018907, 0.12535800981018907, 0.12535800981018907, 0.10493750261208401, 0.10493750261208401, 0.10493750261208401, 0.9298198553975479, 0.9298198553975479, 0.9298198553975479, 0.9462777623566265, 0.9462777623566265, 0.9462777623566265, 0.9293021437557759, 0.9293021437557759, 0.9293021437557759, 0.7096088803022871, 0.7096088803022871, 0.7096088803022871, 0.5364095159339278, 0.5364095159339278, 0.5364095159339278, 0.6200810766140704, 0.6200810766140704, 0.6200810766140704, 0.22660344331824522, 0.22660344331824522, 0.22660344331824522, 0.27792876701794667, 0.27792876701794667, 0.27792876701794667, 0.22632846259624573, 0.22632846259624573, 0.22632846259624573, 0.2846142144416338, 0.2846142144416338, 0.2846142144416338, 0.16704125662815217, 0.16704125662815217, 0.16704125662815217, 0.21037981688949225, 0.21037981688949225, 0.21037981688949225, 0.23313634424786722, 0.23313634424786722, 0.23313634424786722, 0.22731384857249037, 0.22731384857249037, 0.22731384857249037, 0.21996855855729303, 0.21996855855729303, 0.21996855855729303, 0.08601792826578969, 0.08601792826578969, 0.08601792826578969, 0.05475328612752128, 0.05475328612752128, 0.05475328612752128, 0.04287130522312543, 0.04287130522312543, 0.04287130522312543, 0.0871702595946634, 0.0871702595946634, 0.0871702595946634, 0.058018615657898454, 0.058018615657898454, 0.058018615657898454, 0.16890204669580688, 0.16890204669580688, 0.16890204669580688, 0.08225533074961622, 0.08225533074961622, 0.08225533074961622, 0.34434859743080326, 0.34434859743080326, 0.34434859743080326, 0.1424541570687763, 0.1424541570687763, 0.1424541570687763, 0.3815924595515092, 0.3815924595515092, 0.3815924595515092, 0.039593445652836956, 0.039593445652836956, 0.039593445652836956, 0.22502993479717792, 0.22502993479717792, 0.22502993479717792, 0.5312293446494425, 0.5312293446494425, 0.5312293446494425, 0.4758760473758098, 0.4758760473758098, 0.4758760473758098, 0.5252957335149158, 0.5252957335149158, 0.5252957335149158, 0.1665446613338103, 0.1665446613338103, 0.1665446613338103, 0.12341510480869311, 0.12341510480869311, 0.12341510480869311, 0.11757644966439895, 0.11757644966439895, 0.11757644966439895, 0.1933996079623771, 0.1933996079623771, 0.1933996079623771, 0.24993652881080675, 0.24993652881080675, 0.24993652881080675, 0.6480741165843287, 0.6480741165843287, 0.6480741165843287, 0.33191497123350566, 0.33191497123350566, 0.33191497123350566, 0.40477054638556775, 0.40477054638556775, 0.40477054638556775, 0.46659939393636496, 0.46659939393636496, 0.46659939393636496, 0.24888406855069045, 0.24888406855069045, 0.24888406855069045, 0.24384164952429888, 0.24384164952429888, 0.24384164952429888, 0.25043923019473113, 0.25043923019473113, 0.25043923019473113, 0.23408899538645678, 0.23408899538645678, 0.23408899538645678, 0.20014087487139154, 0.20014087487139154, 0.20014087487139154, 0.26494530855516274, 0.26494530855516274, 0.26494530855516274, 0.2437238771879957, 0.2437238771879957, 0.2437238771879957, 0.1887670091613639, 0.1887670091613639, 0.1887670091613639, 0.24396126033853893, 0.24396126033853893, 0.24396126033853893, 0.8853945334690954, 0.8853945334690954, 0.8853945334690954, 0.16472745344692685, 0.16472745344692685, 0.16472745344692685, 0.1692560030078466, 0.1692560030078466, 0.1692560030078466, 0.8119253460799555, 0.8119253460799555, 0.8119253460799555, 0.2122927188122571, 0.2122927188122571, 0.2122927188122571, 0.12722706195412214, 0.12722706195412214, 0.12722706195412214, 0.2226083450413966, 0.2226083450413966, 0.2226083450413966, 0.20024173397050649, 0.20024173397050649, 0.20024173397050649, 0.20943949619846702, 0.20943949619846702, 0.20943949619846702, 0.10551292884314589, 0.10551292884314589, 0.10551292884314589, 0.09439725468586091, 0.09439725468586091, 0.09439725468586091, 0.13243221745810008, 0.13243221745810008, 0.13243221745810008]}, "mutation_prompt": null}
{"id": "362b467d-fe45-4fd4-b7e2-bc31e5445fce", "solution": "import numpy as np\n\nclass DynamicNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.2\n        self.social_coeff = 2.2\n        self.neighborhood_coeff = 0.3\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 10)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.8), 0.3, 1.0)\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "DynamicNeighborhoodPSO", "description": "Dynamic Neighborhood Influence PSO with Adaptive Subgroup Learning for Enhanced Convergence and Exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f056b730-3e1c-4189-a454-10e29b41fe4d", "metadata": {"aucs": [0.843972053810369, 0.843972053810369, 0.843972053810369, 0.8461538955321044, 0.8461538955321044, 0.8461538955321044, 0.8384141778320484, 0.8384141778320484, 0.8384141778320484, 0.37191933406411504, 0.37191933406411504, 0.37191933406411504, 0.19846170034345445, 0.19846170034345445, 0.19846170034345445, 0.6901428419481679, 0.6901428419481679, 0.6901428419481679, 0.717066729888254, 0.717066729888254, 0.717066729888254, 0.1178065114580813, 0.1178065114580813, 0.1178065114580813, 0.07082199495346464, 0.07082199495346464, 0.07082199495346464, 0.09377470575979552, 0.09377470575979552, 0.09377470575979552, 0.11049671463117117, 0.11049671463117117, 0.11049671463117117, 0.13248753784104006, 0.13248753784104006, 0.13248753784104006, 0.9350258732533703, 0.9350258732533703, 0.9350258732533703, 0.945082127654123, 0.945082127654123, 0.945082127654123, 0.9244642867723678, 0.9244642867723678, 0.9244642867723678, 0.6378748047658359, 0.6378748047658359, 0.6378748047658359, 0.5471961381813282, 0.5471961381813282, 0.5471961381813282, 0.6564204995541776, 0.6564204995541776, 0.6564204995541776, 0.7761939602029664, 0.7761939602029664, 0.7761939602029664, 0.2768621365142311, 0.2768621365142311, 0.2768621365142311, 0.3528700336618258, 0.3528700336618258, 0.3528700336618258, 0.12875629589294035, 0.12875629589294035, 0.12875629589294035, 0.22621189224259097, 0.22621189224259097, 0.22621189224259097, 0.1889112106302464, 0.1889112106302464, 0.1889112106302464, 0.20845975751760515, 0.20845975751760515, 0.20845975751760515, 0.18537829891098767, 0.18537829891098767, 0.18537829891098767, 0.20948172614742921, 0.20948172614742921, 0.20948172614742921, 0.024394302692352876, 0.024394302692352876, 0.024394302692352876, 0.10606607565995019, 0.10606607565995019, 0.10606607565995019, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08587070880928116, 0.08587070880928116, 0.08587070880928116, 0.028318601864777193, 0.028318601864777193, 0.028318601864777193, 0.08580368136504568, 0.08580368136504568, 0.08580368136504568, 0.25448521505927646, 0.25448521505927646, 0.25448521505927646, 0.2719272511855233, 0.2719272511855233, 0.2719272511855233, 0.1167013340105143, 0.1167013340105143, 0.1167013340105143, 0.1514818676438392, 0.1514818676438392, 0.1514818676438392, 0.24761467795268965, 0.24761467795268965, 0.24761467795268965, 0.11933635423976485, 0.11933635423976485, 0.11933635423976485, 0.5520951681971578, 0.5520951681971578, 0.5520951681971578, 0.5211466957769966, 0.5211466957769966, 0.5211466957769966, 0.5275016754620627, 0.5275016754620627, 0.5275016754620627, 0.11577620584414039, 0.11577620584414039, 0.11577620584414039, 0.10517674245364872, 0.10517674245364872, 0.10517674245364872, 0.10216077228908993, 0.10216077228908993, 0.10216077228908993, 0.5955561936188565, 0.5955561936188565, 0.5955561936188565, 0.32979091068519706, 0.32979091068519706, 0.32979091068519706, 0.7238825731215608, 0.7238825731215608, 0.7238825731215608, 0.3388905883745732, 0.3388905883745732, 0.3388905883745732, 0.3641034252330231, 0.3641034252330231, 0.3641034252330231, 0.5221120356066136, 0.5221120356066136, 0.5221120356066136, 0.19865237312672912, 0.19865237312672912, 0.19865237312672912, 0.2913286245750355, 0.2913286245750355, 0.2913286245750355, 0.2590950245052964, 0.2590950245052964, 0.2590950245052964, 0.21930149828010925, 0.21930149828010925, 0.21930149828010925, 0.24393313397747163, 0.24393313397747163, 0.24393313397747163, 0.243590442758835, 0.243590442758835, 0.243590442758835, 0.2199014124389722, 0.2199014124389722, 0.2199014124389722, 0.2145828051747557, 0.2145828051747557, 0.2145828051747557, 0.20880468458864732, 0.20880468458864732, 0.20880468458864732, 0.8932923155027819, 0.8932923155027819, 0.8932923155027819, 0.16826453065932656, 0.16826453065932656, 0.16826453065932656, 0.16830683876820585, 0.16830683876820585, 0.16830683876820585, 0.7725828304339244, 0.7725828304339244, 0.7725828304339244, 0.21183160448780824, 0.21183160448780824, 0.21183160448780824, 0.5655769693161259, 0.5655769693161259, 0.5655769693161259, 0.18292069098133645, 0.18292069098133645, 0.18292069098133645, 0.2001791589851576, 0.2001791589851576, 0.2001791589851576, 0.20853465891034717, 0.20853465891034717, 0.20853465891034717, 0.07883373764117663, 0.07883373764117663, 0.07883373764117663, 0.08681695150927793, 0.08681695150927793, 0.08681695150927793, 0.0840998084996134, 0.0840998084996134, 0.0840998084996134]}, "mutation_prompt": null}
{"id": "7d7ec1b2-b923-4503-98bb-f1a14517086f", "solution": "import numpy as np\n\nclass DynamicNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.2\n        self.social_coeff = 2.2\n        self.neighborhood_coeff = 0.3\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 10)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = np.clip(1.0 - evaluations / (self.budget * 0.8), 0.3, 1.0)\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "DynamicNeighborhoodPSO", "description": "Dynamic Neighborhood Influence PSO with Adaptive Subgroup Learning for Enhanced Convergence and Exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f056b730-3e1c-4189-a454-10e29b41fe4d", "metadata": {"aucs": [0.843972053810369, 0.843972053810369, 0.843972053810369, 0.8461538955321044, 0.8461538955321044, 0.8461538955321044, 0.8384141778320484, 0.8384141778320484, 0.8384141778320484, 0.37191933406411504, 0.37191933406411504, 0.37191933406411504, 0.19846170034345445, 0.19846170034345445, 0.19846170034345445, 0.6901428419481679, 0.6901428419481679, 0.6901428419481679, 0.717066729888254, 0.717066729888254, 0.717066729888254, 0.1178065114580813, 0.1178065114580813, 0.1178065114580813, 0.07082199495346464, 0.07082199495346464, 0.07082199495346464, 0.09377470575979552, 0.09377470575979552, 0.09377470575979552, 0.11049671463117117, 0.11049671463117117, 0.11049671463117117, 0.13248753784104006, 0.13248753784104006, 0.13248753784104006, 0.9350258732533703, 0.9350258732533703, 0.9350258732533703, 0.945082127654123, 0.945082127654123, 0.945082127654123, 0.9244642867723678, 0.9244642867723678, 0.9244642867723678, 0.6378748047658359, 0.6378748047658359, 0.6378748047658359, 0.5471961381813282, 0.5471961381813282, 0.5471961381813282, 0.6564204995541776, 0.6564204995541776, 0.6564204995541776, 0.7761939602029664, 0.7761939602029664, 0.7761939602029664, 0.2768621365142311, 0.2768621365142311, 0.2768621365142311, 0.3528700336618258, 0.3528700336618258, 0.3528700336618258, 0.12875629589294035, 0.12875629589294035, 0.12875629589294035, 0.22621189224259097, 0.22621189224259097, 0.22621189224259097, 0.1889112106302464, 0.1889112106302464, 0.1889112106302464, 0.20845975751760515, 0.20845975751760515, 0.20845975751760515, 0.18537829891098767, 0.18537829891098767, 0.18537829891098767, 0.20948172614742921, 0.20948172614742921, 0.20948172614742921, 0.024394302692352876, 0.024394302692352876, 0.024394302692352876, 0.10606607565995019, 0.10606607565995019, 0.10606607565995019, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08587070880928116, 0.08587070880928116, 0.08587070880928116, 0.028318601864777193, 0.028318601864777193, 0.028318601864777193, 0.08580368136504568, 0.08580368136504568, 0.08580368136504568, 0.25448521505927646, 0.25448521505927646, 0.25448521505927646, 0.2719272511855233, 0.2719272511855233, 0.2719272511855233, 0.1167013340105143, 0.1167013340105143, 0.1167013340105143, 0.1514818676438392, 0.1514818676438392, 0.1514818676438392, 0.24761467795268965, 0.24761467795268965, 0.24761467795268965, 0.11933635423976485, 0.11933635423976485, 0.11933635423976485, 0.5520951681971578, 0.5520951681971578, 0.5520951681971578, 0.5211466957769966, 0.5211466957769966, 0.5211466957769966, 0.5275016754620627, 0.5275016754620627, 0.5275016754620627, 0.11577620584414039, 0.11577620584414039, 0.11577620584414039, 0.10517674245364872, 0.10517674245364872, 0.10517674245364872, 0.10216077228908993, 0.10216077228908993, 0.10216077228908993, 0.5955561936188565, 0.5955561936188565, 0.5955561936188565, 0.32979091068519706, 0.32979091068519706, 0.32979091068519706, 0.7238825731215608, 0.7238825731215608, 0.7238825731215608, 0.3388905883745732, 0.3388905883745732, 0.3388905883745732, 0.3641034252330231, 0.3641034252330231, 0.3641034252330231, 0.5221120356066136, 0.5221120356066136, 0.5221120356066136, 0.19865237312672912, 0.19865237312672912, 0.19865237312672912, 0.2913286245750355, 0.2913286245750355, 0.2913286245750355, 0.2590950245052964, 0.2590950245052964, 0.2590950245052964, 0.21930149828010925, 0.21930149828010925, 0.21930149828010925, 0.24393313397747163, 0.24393313397747163, 0.24393313397747163, 0.243590442758835, 0.243590442758835, 0.243590442758835, 0.2199014124389722, 0.2199014124389722, 0.2199014124389722, 0.2145828051747557, 0.2145828051747557, 0.2145828051747557, 0.20880468458864732, 0.20880468458864732, 0.20880468458864732, 0.8932923155027819, 0.8932923155027819, 0.8932923155027819, 0.16826453065932656, 0.16826453065932656, 0.16826453065932656, 0.16830683876820585, 0.16830683876820585, 0.16830683876820585, 0.7725828304339244, 0.7725828304339244, 0.7725828304339244, 0.21183160448780824, 0.21183160448780824, 0.21183160448780824, 0.5655769693161259, 0.5655769693161259, 0.5655769693161259, 0.18292069098133645, 0.18292069098133645, 0.18292069098133645, 0.2001791589851576, 0.2001791589851576, 0.2001791589851576, 0.20853465891034717, 0.20853465891034717, 0.20853465891034717, 0.07883373764117663, 0.07883373764117663, 0.07883373764117663, 0.08681695150927793, 0.08681695150927793, 0.08681695150927793, 0.0840998084996134, 0.0840998084996134, 0.0840998084996134]}, "mutation_prompt": null}
{"id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 77, "fitness": 0.35259106049173994, "feedback": "The algorithm EnhancedAdaptiveNeighborhoodPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "f056b730-3e1c-4189-a454-10e29b41fe4d", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "bb3040d1-4569-4050-a652-aff32c2521c1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSOv2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9  # Slightly increased initial inertia for exploration\n        self.final_inertia = 0.3   # Slightly decreased final inertia for exploitation\n        self.cognitive_coeff = 1.4  # Slightly adjusted cognitive coefficient\n        self.social_coeff = 1.8   # Slightly adjusted social coefficient\n        self.neighborhood_coeff = 0.6  # Increased neighborhood influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increased max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        dynamic_neighborhood_size = lambda evals: max(3, int(self.swarm_size * (1 - (evals / self.budget))))\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.6 + 0.4 * np.tanh(1.0 - evaluations / (self.budget * 0.8))\n\n            for i in range(self.swarm_size):\n                neighborhood_size = dynamic_neighborhood_size(evaluations)\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSOv2", "description": "Adaptive Neighborhood PSO with Dynamic Neighborhoods and Self-Adaptive Parameters for Enhanced Exploration and Exploitation Balance.", "configspace": "", "generation": 78, "fitness": 0.3188008805330536, "feedback": "The algorithm EnhancedAdaptiveNeighborhoodPSOv2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8217678935405182, 0.8217678935405182, 0.8217678935405182, 0.817978422768789, 0.817978422768789, 0.817978422768789, 0.8031202966819035, 0.8031202966819035, 0.8031202966819035, 0.6213737821074201, 0.6213737821074201, 0.6213737821074201, 0.610796587921635, 0.610796587921635, 0.610796587921635, 0.630964050721889, 0.630964050721889, 0.630964050721889, 0.14989623117226425, 0.14989623117226425, 0.14989623117226425, 0.1166277181082711, 0.1166277181082711, 0.1166277181082711, 0.15133298943537865, 0.15133298943537865, 0.15133298943537865, 0.12084698290264806, 0.12084698290264806, 0.12084698290264806, 0.12300649144507458, 0.12300649144507458, 0.12300649144507458, 0.09782189064107971, 0.09782189064107971, 0.09782189064107971, 0.9518574558089201, 0.9518574558089201, 0.9518574558089201, 0.9353083405606498, 0.9353083405606498, 0.9353083405606498, 0.9440855779392321, 0.9440855779392321, 0.9440855779392321, 0.6993026800963353, 0.6993026800963353, 0.6993026800963353, 0.700334000215683, 0.700334000215683, 0.700334000215683, 0.6570306350249069, 0.6570306350249069, 0.6570306350249069, 0.342186736307986, 0.342186736307986, 0.342186736307986, 0.16108430979341537, 0.16108430979341537, 0.16108430979341537, 0.2312744707832156, 0.2312744707832156, 0.2312744707832156, 0.19471281837855592, 0.19471281837855592, 0.19471281837855592, 0.129471103723363, 0.129471103723363, 0.129471103723363, 0.22391621409334916, 0.22391621409334916, 0.22391621409334916, 0.22159559772362059, 0.22159559772362059, 0.22159559772362059, 0.1292160786462706, 0.1292160786462706, 0.1292160786462706, 0.17934946352812442, 0.17934946352812442, 0.17934946352812442, 0.05341223851528998, 0.05341223851528998, 0.05341223851528998, 0.01684580731211116, 0.01684580731211116, 0.01684580731211116, 0.008716348178265276, 0.008716348178265276, 0.008716348178265276, 0.0734740628931142, 0.0734740628931142, 0.0734740628931142, 0.05644167250227494, 0.05644167250227494, 0.05644167250227494, 0.1635825415405534, 0.1635825415405534, 0.1635825415405534, 0.15834637560140308, 0.15834637560140308, 0.15834637560140308, 0.16615684923278473, 0.16615684923278473, 0.16615684923278473, 0.29831243406468144, 0.29831243406468144, 0.29831243406468144, 0.053432216633820695, 0.053432216633820695, 0.053432216633820695, 0.1032421091970267, 0.1032421091970267, 0.1032421091970267, 0.12243732141518848, 0.12243732141518848, 0.12243732141518848, 0.546492822917414, 0.546492822917414, 0.546492822917414, 0.5240564039306315, 0.5240564039306315, 0.5240564039306315, 0.550441442479109, 0.550441442479109, 0.550441442479109, 0.1771812615521582, 0.1771812615521582, 0.1771812615521582, 0.11185581106811116, 0.11185581106811116, 0.11185581106811116, 0.0814729009165105, 0.0814729009165105, 0.0814729009165105, 0.5502575693715902, 0.5502575693715902, 0.5502575693715902, 0.18756379741575724, 0.18756379741575724, 0.18756379741575724, 0.2562048486446932, 0.2562048486446932, 0.2562048486446932, 0.2940672074039671, 0.2940672074039671, 0.2940672074039671, 0.28520542333779253, 0.28520542333779253, 0.28520542333779253, 0.31301728814844665, 0.31301728814844665, 0.31301728814844665, 0.26058521173381777, 0.26058521173381777, 0.26058521173381777, 0.23035490233398936, 0.23035490233398936, 0.23035490233398936, 0.23379576032547889, 0.23379576032547889, 0.23379576032547889, 0.2180933375866675, 0.2180933375866675, 0.2180933375866675, 0.25703262267758087, 0.25703262267758087, 0.25703262267758087, 0.19058752682785018, 0.19058752682785018, 0.19058752682785018, 0.2221774309826341, 0.2221774309826341, 0.2221774309826341, 0.18866887086832895, 0.18866887086832895, 0.18866887086832895, 0.248833789290139, 0.248833789290139, 0.248833789290139, 0.8799901993291587, 0.8799901993291587, 0.8799901993291587, 0.8729628123412179, 0.8729628123412179, 0.8729628123412179, 0.169417528568388, 0.169417528568388, 0.169417528568388, 0.7640485440980002, 0.7640485440980002, 0.7640485440980002, 0.21124685181004443, 0.21124685181004443, 0.21124685181004443, 0.16792344542525606, 0.16792344542525606, 0.16792344542525606, 0.21183419166205564, 0.21183419166205564, 0.21183419166205564, 0.18264543709830583, 0.18264543709830583, 0.18264543709830583, 0.17824974752620915, 0.17824974752620915, 0.17824974752620915, 0.10634433303199098, 0.10634433303199098, 0.10634433303199098, 0.08938353988843262, 0.08938353988843262, 0.08938353988843262, 0.15101174063112155, 0.15101174063112155, 0.15101174063112155]}, "mutation_prompt": null}
{"id": "4380e4c0-aa92-4cb2-bb5c-76653bf194f1", "solution": "import numpy as np\n\nclass HybridAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.4\n        self.social_coeff = 1.8\n        self.neighborhood_coeff = 0.6\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.2\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 10)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.6 + 0.4 * np.tanh(1.0 - evaluations / (self.budget * 0.85))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "HybridAdaptivePSO", "description": "Hybrid Adaptive PSO with Distributed Velocity Control for Accelerated Convergence.", "configspace": "", "generation": 79, "fitness": 0.34197645452929526, "feedback": "The algorithm HybridAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8140407752296825, 0.8140407752296825, 0.8140407752296825, 0.804645302947417, 0.804645302947417, 0.804645302947417, 0.8039675163699754, 0.8039675163699754, 0.8039675163699754, 0.6260657558766376, 0.6260657558766376, 0.6260657558766376, 0.6213535735786366, 0.6213535735786366, 0.6213535735786366, 0.6056216215222784, 0.6056216215222784, 0.6056216215222784, 0.16087831120800744, 0.16087831120800744, 0.16087831120800744, 0.13641826783204347, 0.13641826783204347, 0.13641826783204347, 0.1447775944647638, 0.1447775944647638, 0.1447775944647638, 0.13211687087483936, 0.13211687087483936, 0.13211687087483936, 0.09138408685169563, 0.09138408685169563, 0.09138408685169563, 0.122796016332689, 0.122796016332689, 0.122796016332689, 0.9723494718193111, 0.9723494718193111, 0.9723494718193111, 0.9565152843587849, 0.9565152843587849, 0.9565152843587849, 0.9564736676390494, 0.9564736676390494, 0.9564736676390494, 0.6526843341225208, 0.6526843341225208, 0.6526843341225208, 0.6801875471229111, 0.6801875471229111, 0.6801875471229111, 0.6239202686954007, 0.6239202686954007, 0.6239202686954007, 0.3705313963723422, 0.3705313963723422, 0.3705313963723422, 0.27067562560461145, 0.27067562560461145, 0.27067562560461145, 0.36979816629059403, 0.36979816629059403, 0.36979816629059403, 0.2002943348103874, 0.2002943348103874, 0.2002943348103874, 0.19379856837666887, 0.19379856837666887, 0.19379856837666887, 0.18855285884152517, 0.18855285884152517, 0.18855285884152517, 0.3019991264339774, 0.3019991264339774, 0.3019991264339774, 0.13347216544143525, 0.13347216544143525, 0.13347216544143525, 0.2265016556337014, 0.2265016556337014, 0.2265016556337014, 0.0465027254575362, 0.0465027254575362, 0.0465027254575362, 0.0683425102713271, 0.0683425102713271, 0.0683425102713271, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16082880123097132, 0.16082880123097132, 0.16082880123097132, 0.06677641609715501, 0.06677641609715501, 0.06677641609715501, 0.1202226768140765, 0.1202226768140765, 0.1202226768140765, 0.04350643918834651, 0.04350643918834651, 0.04350643918834651, 0.1319618178258415, 0.1319618178258415, 0.1319618178258415, 0.1547418297246379, 0.1547418297246379, 0.1547418297246379, 0.08880557802314926, 0.08880557802314926, 0.08880557802314926, 0.08484921322451178, 0.08484921322451178, 0.08484921322451178, 0.17874609369467764, 0.17874609369467764, 0.17874609369467764, 0.5072851220136235, 0.5072851220136235, 0.5072851220136235, 0.5785208455436035, 0.5785208455436035, 0.5785208455436035, 0.5261658228154815, 0.5261658228154815, 0.5261658228154815, 0.09742779482016595, 0.09742779482016595, 0.09742779482016595, 0.11491111099840234, 0.11491111099840234, 0.11491111099840234, 0.11569746878238618, 0.11569746878238618, 0.11569746878238618, 0.37579833494092596, 0.37579833494092596, 0.37579833494092596, 0.5719827700691328, 0.5719827700691328, 0.5719827700691328, 0.2536496562097502, 0.2536496562097502, 0.2536496562097502, 0.46696255082874516, 0.46696255082874516, 0.46696255082874516, 0.4809637874085242, 0.4809637874085242, 0.4809637874085242, 0.3875316438254668, 0.3875316438254668, 0.3875316438254668, 0.22130628857724455, 0.22130628857724455, 0.22130628857724455, 0.24106087064989357, 0.24106087064989357, 0.24106087064989357, 0.26567570519542527, 0.26567570519542527, 0.26567570519542527, 0.21887643533650103, 0.21887643533650103, 0.21887643533650103, 0.21984594096723853, 0.21984594096723853, 0.21984594096723853, 0.23429441867256395, 0.23429441867256395, 0.23429441867256395, 0.2002341002301773, 0.2002341002301773, 0.2002341002301773, 0.6374636526370878, 0.6374636526370878, 0.6374636526370878, 0.24063983246318832, 0.24063983246318832, 0.24063983246318832, 0.8608908351552615, 0.8608908351552615, 0.8608908351552615, 0.8540255022026504, 0.8540255022026504, 0.8540255022026504, 0.16866320634298793, 0.16866320634298793, 0.16866320634298793, 0.6446000394782563, 0.6446000394782563, 0.6446000394782563, 0.2106040648235924, 0.2106040648235924, 0.2106040648235924, 0.7706356673674141, 0.7706356673674141, 0.7706356673674141, 0.18031306498958488, 0.18031306498958488, 0.18031306498958488, 0.18587401477440557, 0.18587401477440557, 0.18587401477440557, 0.19439836750926975, 0.19439836750926975, 0.19439836750926975, 0.07922559347859293, 0.07922559347859293, 0.07922559347859293, 0.09019477050834446, 0.09019477050834446, 0.09019477050834446, 0.11938118028925104, 0.11938118028925104, 0.11938118028925104]}, "mutation_prompt": null}
{"id": "be3378f4-5b04-4a19-a08d-135a87d6f71b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "da9aeb54-1559-49bb-b112-37426e32aa32", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "bc965e7a-6c0b-4b05-ad68-42d6c78e2c5f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "f794032b-137c-41a4-ac2f-0a14dd0fe93d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_swarm_size = 40  # Dynamic swarm size\n        self.final_swarm_size = 80\n        self.initial_inertia = 0.9  # Slightly increased initial inertia for broader exploration\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.3  # Adjusted coefficients\n        self.social_coeff = 1.8\n        self.neighborhood_coeff = 0.6  # Increased neighborhood influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increased max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        swarm_size = self.initial_swarm_size\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n            swarm_size = int(self.initial_swarm_size + (self.final_swarm_size - self.initial_swarm_size) * (evaluations / self.budget))\n            position = np.resize(position, (swarm_size, self.dim))\n            velocity = np.resize(velocity, (swarm_size, self.dim))\n            personal_best_position = np.resize(personal_best_position, (swarm_size, self.dim))\n            personal_best_value = np.resize(personal_best_value, swarm_size)\n\n            for i in range(swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.6 + 0.4 * np.tanh(1.0 - evaluations / (self.budget * 0.9))  # Slight change\n\n            for i in range(swarm_size):\n                neighborhood_indices = np.random.choice(swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Dynamic Swarm Size and Improved Learning Strategy for Faster Convergence.", "configspace": "", "generation": 83, "fitness": 0.3471534632057554, "feedback": "The algorithm EnhancedAdaptiveNeighborhoodPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8343031177214205, 0.8343031177214205, 0.8343031177214205, 0.8479207612704318, 0.8479207612704318, 0.8479207612704318, 0.8314411866830742, 0.8314411866830742, 0.8314411866830742, 0.6256025061363473, 0.6256025061363473, 0.6256025061363473, 0.6422882689675059, 0.6422882689675059, 0.6422882689675059, 0.6254664359615849, 0.6254664359615849, 0.6254664359615849, 0.11525402761415093, 0.11525402761415093, 0.11525402761415093, 0.1678052790029918, 0.1678052790029918, 0.1678052790029918, 0.14320920129548576, 0.14320920129548576, 0.14320920129548576, 0.15083426977066905, 0.15083426977066905, 0.15083426977066905, 0.15545602585956808, 0.15545602585956808, 0.15545602585956808, 0.12803952199374413, 0.12803952199374413, 0.12803952199374413, 0.9674191307598634, 0.9674191307598634, 0.9674191307598634, 0.9672111022304154, 0.9672111022304154, 0.9672111022304154, 0.9672123451838007, 0.9672123451838007, 0.9672123451838007, 0.7095572366023798, 0.7095572366023798, 0.7095572366023798, 0.6811411099378848, 0.6811411099378848, 0.6811411099378848, 0.6960058034155159, 0.6960058034155159, 0.6960058034155159, 0.679983154454993, 0.679983154454993, 0.679983154454993, 0.16168376167738208, 0.16168376167738208, 0.16168376167738208, 0.1505191276795529, 0.1505191276795529, 0.1505191276795529, 0.31031029373485863, 0.31031029373485863, 0.31031029373485863, 0.2137985503664871, 0.2137985503664871, 0.2137985503664871, 0.1326401220610698, 0.1326401220610698, 0.1326401220610698, 0.2227151245381045, 0.2227151245381045, 0.2227151245381045, 0.2490320417597396, 0.2490320417597396, 0.2490320417597396, 0.24984678077745726, 0.24984678077745726, 0.24984678077745726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10229657618099774, 0.10229657618099774, 0.10229657618099774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11645999333069013, 0.11645999333069013, 0.11645999333069013, 0.06381607992331684, 0.06381607992331684, 0.06381607992331684, 0.2446404984689312, 0.2446404984689312, 0.2446404984689312, 0.04521899626059478, 0.04521899626059478, 0.04521899626059478, 0.27414624737279913, 0.27414624737279913, 0.27414624737279913, 0.1341486446393887, 0.1341486446393887, 0.1341486446393887, 0.1151737867195034, 0.1151737867195034, 0.1151737867195034, 0.11572193526382402, 0.11572193526382402, 0.11572193526382402, 0.08167687674865576, 0.08167687674865576, 0.08167687674865576, 0.5498988996533181, 0.5498988996533181, 0.5498988996533181, 0.5943667805172104, 0.5943667805172104, 0.5943667805172104, 0.548915950623964, 0.548915950623964, 0.548915950623964, 0.12553400548965454, 0.12553400548965454, 0.12553400548965454, 0.574947455172925, 0.574947455172925, 0.574947455172925, 0.15535260577288357, 0.15535260577288357, 0.15535260577288357, 0.498200240801559, 0.498200240801559, 0.498200240801559, 0.20909452275653206, 0.20909452275653206, 0.20909452275653206, 0.4112910006258963, 0.4112910006258963, 0.4112910006258963, 0.4551829640866658, 0.4551829640866658, 0.4551829640866658, 0.6614743823220054, 0.6614743823220054, 0.6614743823220054, 0.37496146878303394, 0.37496146878303394, 0.37496146878303394, 0.2704450802520587, 0.2704450802520587, 0.2704450802520587, 0.2839623513710168, 0.2839623513710168, 0.2839623513710168, 0.1656830586711423, 0.1656830586711423, 0.1656830586711423, 0.23377650059511323, 0.23377650059511323, 0.23377650059511323, 0.22113104258847494, 0.22113104258847494, 0.22113104258847494, 0.23881173868366057, 0.23881173868366057, 0.23881173868366057, 0.20857879045346994, 0.20857879045346994, 0.20857879045346994, 0.20509128905712692, 0.20509128905712692, 0.20509128905712692, 0.23544908517415242, 0.23544908517415242, 0.23544908517415242, 0.8992308323871092, 0.8992308323871092, 0.8992308323871092, 0.11464548988918755, 0.11464548988918755, 0.11464548988918755, 0.17717236110199663, 0.17717236110199663, 0.17717236110199663, 0.7887820414358485, 0.7887820414358485, 0.7887820414358485, 0.21250328234270477, 0.21250328234270477, 0.21250328234270477, 0.7885034579539016, 0.7885034579539016, 0.7885034579539016, 0.18968943576344877, 0.18968943576344877, 0.18968943576344877, 0.19664241342430056, 0.19664241342430056, 0.19664241342430056, 0.18337370850679224, 0.18337370850679224, 0.18337370850679224, 0.12601014907214336, 0.12601014907214336, 0.12601014907214336, 0.08221992865495309, 0.08221992865495309, 0.08221992865495309, 0.09393111446495672, 0.09393111446495672, 0.09393111446495672]}, "mutation_prompt": null}
{"id": "91a1290d-a4c7-4d31-95aa-a9b9619a311c", "solution": "import numpy as np\n\nclass AdaptiveConstrictionNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 2.05\n        self.social_coeff = 2.05\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.2\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        phi = self.cognitive_coeff + self.social_coeff\n        constriction_coeff = 2.0 / abs(2.0 - phi - np.sqrt(phi**2 - 4*phi))\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            dynamic_neighborhood_size = max(3, int(self.swarm_size * (1 - evaluations / self.budget)))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, dynamic_neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n\n                velocity[i] = constriction_coeff * (inertia_term + cognitive_term + social_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveConstrictionNeighborhoodPSO", "description": "Adaptive Constriction Coefficient PSO with Dynamic Neighborhood Size for Faster Convergence.", "configspace": "", "generation": 84, "fitness": 0.33113232912784224, "feedback": "The algorithm AdaptiveConstrictionNeighborhoodPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.855405501443822, 0.855405501443822, 0.855405501443822, 0.861849906322956, 0.861849906322956, 0.861849906322956, 0.8598182592304541, 0.8598182592304541, 0.8598182592304541, 0.6903638736374456, 0.6903638736374456, 0.6903638736374456, 0.6766021202180277, 0.6766021202180277, 0.6766021202180277, 0.6886198975976139, 0.6886198975976139, 0.6886198975976139, 0.1819108130403, 0.1819108130403, 0.1819108130403, 0.10595910949244702, 0.10595910949244702, 0.10595910949244702, 0.1286550037483981, 0.1286550037483981, 0.1286550037483981, 0.14217000915291922, 0.14217000915291922, 0.14217000915291922, 0.13979497331596924, 0.13979497331596924, 0.13979497331596924, 0.12084203768085333, 0.12084203768085333, 0.12084203768085333, 0.9613426635452226, 0.9613426635452226, 0.9613426635452226, 0.9672580122463045, 0.9672580122463045, 0.9672580122463045, 0.951527133599122, 0.951527133599122, 0.951527133599122, 0.6954497610326448, 0.6954497610326448, 0.6954497610326448, 0.7207631992203387, 0.7207631992203387, 0.7207631992203387, 0.6654445002297531, 0.6654445002297531, 0.6654445002297531, 0.5498825891422138, 0.5498825891422138, 0.5498825891422138, 0.19347911038958432, 0.19347911038958432, 0.19347911038958432, 0.3921538272613381, 0.3921538272613381, 0.3921538272613381, 0.21458569627223167, 0.21458569627223167, 0.21458569627223167, 0.19795492392724567, 0.19795492392724567, 0.19795492392724567, 0.2054117812138455, 0.2054117812138455, 0.2054117812138455, 0.13178658764406737, 0.13178658764406737, 0.13178658764406737, 0.16482018224986728, 0.16482018224986728, 0.16482018224986728, 0.24534792678487616, 0.24534792678487616, 0.24534792678487616, 0.1167196459771801, 0.1167196459771801, 0.1167196459771801, 0.03513375462644275, 0.03513375462644275, 0.03513375462644275, 0.007734559200285873, 0.007734559200285873, 0.007734559200285873, 0.08860917461464268, 0.08860917461464268, 0.08860917461464268, 0.06565214636303718, 0.06565214636303718, 0.06565214636303718, 0.08754503718088402, 0.08754503718088402, 0.08754503718088402, 0.10892329807035772, 0.10892329807035772, 0.10892329807035772, 0.07715760293607854, 0.07715760293607854, 0.07715760293607854, 0.14542786617610415, 0.14542786617610415, 0.14542786617610415, 0.24147856972261272, 0.24147856972261272, 0.24147856972261272, 0.28663054520040043, 0.28663054520040043, 0.28663054520040043, 0.13055704180601735, 0.13055704180601735, 0.13055704180601735, 0.5719876119931199, 0.5719876119931199, 0.5719876119931199, 0.569854714950354, 0.569854714950354, 0.569854714950354, 0.5536126165246553, 0.5536126165246553, 0.5536126165246553, 0.13138436708143986, 0.13138436708143986, 0.13138436708143986, 0.13483891719985952, 0.13483891719985952, 0.13483891719985952, 0.15044366584900182, 0.15044366584900182, 0.15044366584900182, 0.3095580557020279, 0.3095580557020279, 0.3095580557020279, 0.3940474717496373, 0.3940474717496373, 0.3940474717496373, 0.18477986942258773, 0.18477986942258773, 0.18477986942258773, 0.43253261219359196, 0.43253261219359196, 0.43253261219359196, 0.36411311008488245, 0.36411311008488245, 0.36411311008488245, 0.4782970362231095, 0.4782970362231095, 0.4782970362231095, 0.18660643088904083, 0.18660643088904083, 0.18660643088904083, 0.29515041110806073, 0.29515041110806073, 0.29515041110806073, 0.21990852393231297, 0.21990852393231297, 0.21990852393231297, 0.22325257617253957, 0.22325257617253957, 0.22325257617253957, 0.20958415775450745, 0.20958415775450745, 0.20958415775450745, 0.2520111084703017, 0.2520111084703017, 0.2520111084703017, 0.1965909298669456, 0.1965909298669456, 0.1965909298669456, 0.1973133976734126, 0.1973133976734126, 0.1973133976734126, 0.7646230344166554, 0.7646230344166554, 0.7646230344166554, 0.900132337098095, 0.900132337098095, 0.900132337098095, 0.11463903211017823, 0.11463903211017823, 0.11463903211017823, 0.16948460304383084, 0.16948460304383084, 0.16948460304383084, 0.4553618119463898, 0.4553618119463898, 0.4553618119463898, 0.2116724995158734, 0.2116724995158734, 0.2116724995158734, 0.10405483906644253, 0.10405483906644253, 0.10405483906644253, 0.21234268099796827, 0.21234268099796827, 0.21234268099796827, 0.20954227722365426, 0.20954227722365426, 0.20954227722365426, 0.2373213218140079, 0.2373213218140079, 0.2373213218140079, 0.09309721139239535, 0.09309721139239535, 0.09309721139239535, 0.09004406927270414, 0.09004406927270414, 0.09004406927270414, 0.12257575295115153, 0.12257575295115153, 0.12257575295115153]}, "mutation_prompt": null}
{"id": "7b158c35-797c-4632-b96b-3338f7da4ebc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "0682077d-398a-4725-8a4e-14fdb3494cdc", "solution": "import numpy as np\n\nclass AdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Reduced swarm size for faster iterations\n        self.initial_inertia = 0.9  # Slightly increased initial inertia\n        self.final_inertia = 0.3  # Lower final inertia for enhanced exploitation\n        self.cognitive_coeff = 2.0  # Increased cognitive coefficient\n        self.social_coeff = 1.5  # Reduced social coefficient\n        self.neighborhood_coeff = 0.6  # Increased neighborhood influence\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Increased max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(2, self.swarm_size // 10)  # Adjust neighborhood size dynamically\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.4 + 0.6 * np.tanh(1.0 - evaluations / (self.budget * 0.8))  # Modified adaptive learning rate\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveNeighborhoodPSO", "description": "Adaptive Swarm Intelligence with Dynamic Neighborhood Adjustment for Enhanced Convergence.", "configspace": "", "generation": 86, "fitness": 0.3356919496473624, "feedback": "The algorithm AdaptiveNeighborhoodPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8573261452432309, 0.8573261452432309, 0.8573261452432309, 0.8510431765146598, 0.8510431765146598, 0.8510431765146598, 0.8461556511977314, 0.8461556511977314, 0.8461556511977314, 0.6738763928807281, 0.6738763928807281, 0.6738763928807281, 0.6814512986475283, 0.6814512986475283, 0.6814512986475283, 0.6925798674992742, 0.6925798674992742, 0.6925798674992742, 0.6122899966017341, 0.6122899966017341, 0.6122899966017341, 0.14445323340485816, 0.14445323340485816, 0.14445323340485816, 0.15476328609626822, 0.15476328609626822, 0.15476328609626822, 0.11702276308291781, 0.11702276308291781, 0.11702276308291781, 0.12350140611262628, 0.12350140611262628, 0.12350140611262628, 0.12545389050113032, 0.12545389050113032, 0.12545389050113032, 0.9585569461299661, 0.9585569461299661, 0.9585569461299661, 0.959758215315992, 0.959758215315992, 0.959758215315992, 0.9680116516793191, 0.9680116516793191, 0.9680116516793191, 0.7408478910200449, 0.7408478910200449, 0.7408478910200449, 0.7548968191298748, 0.7548968191298748, 0.7548968191298748, 0.6860702782698744, 0.6860702782698744, 0.6860702782698744, 0.3727347900080843, 0.3727347900080843, 0.3727347900080843, 0.27850972210236014, 0.27850972210236014, 0.27850972210236014, 0.23603832847708572, 0.23603832847708572, 0.23603832847708572, 0.18826510992116063, 0.18826510992116063, 0.18826510992116063, 0.18211922321897622, 0.18211922321897622, 0.18211922321897622, 0.22808858366769513, 0.22808858366769513, 0.22808858366769513, 0.1521502492587823, 0.1521502492587823, 0.1521502492587823, 0.19600581848821752, 0.19600581848821752, 0.19600581848821752, 0.24600039211391045, 0.24600039211391045, 0.24600039211391045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030776604234546312, 0.030776604234546312, 0.030776604234546312, 0.0569714818661925, 0.0569714818661925, 0.0569714818661925, 0.08808858587298851, 0.08808858587298851, 0.08808858587298851, 0.05292052732962493, 0.05292052732962493, 0.05292052732962493, 0.14100561925345523, 0.14100561925345523, 0.14100561925345523, 0.2529838697332317, 0.2529838697332317, 0.2529838697332317, 0.07347922886977454, 0.07347922886977454, 0.07347922886977454, 0.1351818741827897, 0.1351818741827897, 0.1351818741827897, 0.14667546425638445, 0.14667546425638445, 0.14667546425638445, 0.038387459881855324, 0.038387459881855324, 0.038387459881855324, 0.1184977881530469, 0.1184977881530469, 0.1184977881530469, 0.5486985477977668, 0.5486985477977668, 0.5486985477977668, 0.6027032034190547, 0.6027032034190547, 0.6027032034190547, 0.5387697395911111, 0.5387697395911111, 0.5387697395911111, 0.1206153003913576, 0.1206153003913576, 0.1206153003913576, 0.11652271109599022, 0.11652271109599022, 0.11652271109599022, 0.13477610597304424, 0.13477610597304424, 0.13477610597304424, 0.3534121441867284, 0.3534121441867284, 0.3534121441867284, 0.5030736223195027, 0.5030736223195027, 0.5030736223195027, 0.3425790658846387, 0.3425790658846387, 0.3425790658846387, 0.36242209697120675, 0.36242209697120675, 0.36242209697120675, 0.3801399871608886, 0.3801399871608886, 0.3801399871608886, 0.42062210415287205, 0.42062210415287205, 0.42062210415287205, 0.2742532418552165, 0.2742532418552165, 0.2742532418552165, 0.3472187710171013, 0.3472187710171013, 0.3472187710171013, 0.27858399716796334, 0.27858399716796334, 0.27858399716796334, 0.23438518052209956, 0.23438518052209956, 0.23438518052209956, 0.23819747262793278, 0.23819747262793278, 0.23819747262793278, 0.21685930222826966, 0.21685930222826966, 0.21685930222826966, 0.2029312994001099, 0.2029312994001099, 0.2029312994001099, 0.17903276117894962, 0.17903276117894962, 0.17903276117894962, 0.2051754919532518, 0.2051754919532518, 0.2051754919532518, 0.890363020815169, 0.890363020815169, 0.890363020815169, 0.16443564873428185, 0.16443564873428185, 0.16443564873428185, 0.16856341160555544, 0.16856341160555544, 0.16856341160555544, 0.7683177404251278, 0.7683177404251278, 0.7683177404251278, 0.21262977217884238, 0.21262977217884238, 0.21262977217884238, 0.32061125526603373, 0.32061125526603373, 0.32061125526603373, 0.18162926934713064, 0.18162926934713064, 0.18162926934713064, 0.1725505639453344, 0.1725505639453344, 0.1725505639453344, 0.2013466847702875, 0.2013466847702875, 0.2013466847702875, 0.08750039033261214, 0.08750039033261214, 0.08750039033261214, 0.10409810360999305, 0.10409810360999305, 0.10409810360999305, 0.13376273646674763, 0.13376273646674763, 0.13376273646674763]}, "mutation_prompt": null}
{"id": "8b215e56-b9d1-4461-a15a-7e11a1bb194c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "76b894e0-9f33-47ac-88e5-2d2aaa05d91f", "solution": "import numpy as np\n\nclass AdaptiveChaoticNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.4\n        self.social_coeff = 2.1\n        self.neighborhood_coeff = 0.6\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 6)  # Increased neighborhood size\n\n        while evaluations < self.budget:\n            inertia = (self.initial_inertia - (self.initial_inertia - self.final_inertia) * \n                       (np.sin(evaluations / self.budget * np.pi / 2)))  # Dynamic inertia\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            chaotic_factor = 0.5 + 0.5 * np.sin(5.0 * np.pi * evaluations / self.budget)  # Chaotic factor\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = chaotic_factor * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveChaoticNeighborhoodPSO", "description": "Adaptive Chaotic Neighborhood PSO with Dynamic Inertia for Accelerated Convergence.", "configspace": "", "generation": 88, "fitness": 0.2997228774029509, "feedback": "The algorithm AdaptiveChaoticNeighborhoodPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8338369918172065, 0.8338369918172065, 0.8338369918172065, 0.829727347984975, 0.829727347984975, 0.829727347984975, 0.8301334219036935, 0.8301334219036935, 0.8301334219036935, 0.12117131187900454, 0.12117131187900454, 0.12117131187900454, 0.2606350845784168, 0.2606350845784168, 0.2606350845784168, 0.16048827380053177, 0.16048827380053177, 0.16048827380053177, 0.1264904521698269, 0.1264904521698269, 0.1264904521698269, 0.13121657567195344, 0.13121657567195344, 0.13121657567195344, 0.15093851560784477, 0.15093851560784477, 0.15093851560784477, 0.11756748815430473, 0.11756748815430473, 0.11756748815430473, 0.11032940126650792, 0.11032940126650792, 0.11032940126650792, 0.10309797447269864, 0.10309797447269864, 0.10309797447269864, 0.9393427100667342, 0.9393427100667342, 0.9393427100667342, 0.9247047900587975, 0.9247047900587975, 0.9247047900587975, 0.9181218374292242, 0.9181218374292242, 0.9181218374292242, 0.4975060332890656, 0.4975060332890656, 0.4975060332890656, 0.38621194616418175, 0.38621194616418175, 0.38621194616418175, 0.3635147098446885, 0.3635147098446885, 0.3635147098446885, 0.37775291379900977, 0.37775291379900977, 0.37775291379900977, 0.19250811417910696, 0.19250811417910696, 0.19250811417910696, 0.36226632627161726, 0.36226632627161726, 0.36226632627161726, 0.12432119259175523, 0.12432119259175523, 0.12432119259175523, 0.1965683920330854, 0.1965683920330854, 0.1965683920330854, 0.16658261368979077, 0.16658261368979077, 0.16658261368979077, 0.21580755642018135, 0.21580755642018135, 0.21580755642018135, 0.16409376615607252, 0.16409376615607252, 0.16409376615607252, 0.13132899351000793, 0.13132899351000793, 0.13132899351000793, 0.016886316848882976, 0.016886316848882976, 0.016886316848882976, 0.07990330598003803, 0.07990330598003803, 0.07990330598003803, 0.08184511234984149, 0.08184511234984149, 0.08184511234984149, 0.09365246261343418, 0.09365246261343418, 0.09365246261343418, 0.08558710244156431, 0.08558710244156431, 0.08558710244156431, 0.14463872590188254, 0.14463872590188254, 0.14463872590188254, 0.0766662223348058, 0.0766662223348058, 0.0766662223348058, 0.26491776580865956, 0.26491776580865956, 0.26491776580865956, 0.1547613746297135, 0.1547613746297135, 0.1547613746297135, 0.2093859302666522, 0.2093859302666522, 0.2093859302666522, 0.188124350988638, 0.188124350988638, 0.188124350988638, 0.2800690133086724, 0.2800690133086724, 0.2800690133086724, 0.519860521892142, 0.519860521892142, 0.519860521892142, 0.47789098207575953, 0.47789098207575953, 0.47789098207575953, 0.48795253818397666, 0.48795253818397666, 0.48795253818397666, 0.12534229409279452, 0.12534229409279452, 0.12534229409279452, 0.15042554111980333, 0.15042554111980333, 0.15042554111980333, 0.1299171962261233, 0.1299171962261233, 0.1299171962261233, 0.3057269575037276, 0.3057269575037276, 0.3057269575037276, 0.13327317404157024, 0.13327317404157024, 0.13327317404157024, 0.2212617440785174, 0.2212617440785174, 0.2212617440785174, 0.3543916055597396, 0.3543916055597396, 0.3543916055597396, 0.4165366767809531, 0.4165366767809531, 0.4165366767809531, 0.26535402735561153, 0.26535402735561153, 0.26535402735561153, 0.24556121821653587, 0.24556121821653587, 0.24556121821653587, 0.3316920877399935, 0.3316920877399935, 0.3316920877399935, 0.15450127515103018, 0.15450127515103018, 0.15450127515103018, 0.2382549533670114, 0.2382549533670114, 0.2382549533670114, 0.20016309812902855, 0.20016309812902855, 0.20016309812902855, 0.22374507755383743, 0.22374507755383743, 0.22374507755383743, 0.7789142045167027, 0.7789142045167027, 0.7789142045167027, 0.17778677892536854, 0.17778677892536854, 0.17778677892536854, 0.21310362890380197, 0.21310362890380197, 0.21310362890380197, 0.8970495577808612, 0.8970495577808612, 0.8970495577808612, 0.16816468916143934, 0.16816468916143934, 0.16816468916143934, 0.8889442383752426, 0.8889442383752426, 0.8889442383752426, 0.4673540311280976, 0.4673540311280976, 0.4673540311280976, 0.21328389766396927, 0.21328389766396927, 0.21328389766396927, 0.46215853112847605, 0.46215853112847605, 0.46215853112847605, 0.18992254473118275, 0.18992254473118275, 0.18992254473118275, 0.2005980749158387, 0.2005980749158387, 0.2005980749158387, 0.20618748189079883, 0.20618748189079883, 0.20618748189079883, 0.10298411168445853, 0.10298411168445853, 0.10298411168445853, 0.0917165139991013, 0.0917165139991013, 0.0917165139991013, 0.12732550085589844, 0.12732550085589844, 0.12732550085589844]}, "mutation_prompt": null}
{"id": "512d2c3b-cf38-4c64-9480-7830d9f532a2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "4e1f90ac-9669-4456-85aa-40728b5a0666", "solution": "import numpy as np\n\nclass QuantumEnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.7\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.6\n        self.social_coeff = 1.9\n        self.neighborhood_coeff = 0.6\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n            neighborhood_size = max(2, self.swarm_size // (10 + (evaluations // (self.budget // 2))))\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "QuantumEnhancedAdaptiveNeighborhoodPSO", "description": "Quantum-Enhanced Adaptive Neighborhood PSO with Dynamic Neighborhood Resizing for Accelerated Convergence.", "configspace": "", "generation": 90, "fitness": 0.34709070136541015, "feedback": "The algorithm QuantumEnhancedAdaptiveNeighborhoodPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8773450573431024, 0.8773450573431024, 0.8773450573431024, 0.8705373576942049, 0.8705373576942049, 0.8705373576942049, 0.869148489684084, 0.869148489684084, 0.869148489684084, 0.6975890912401742, 0.6975890912401742, 0.6975890912401742, 0.7240983285389535, 0.7240983285389535, 0.7240983285389535, 0.7078948117107007, 0.7078948117107007, 0.7078948117107007, 0.6701693144217981, 0.6701693144217981, 0.6701693144217981, 0.14274261545731548, 0.14274261545731548, 0.14274261545731548, 0.12559937804679522, 0.12559937804679522, 0.12559937804679522, 0.11635762446411735, 0.11635762446411735, 0.11635762446411735, 0.1064689559088201, 0.1064689559088201, 0.1064689559088201, 0.12332812957325912, 0.12332812957325912, 0.12332812957325912, 0.898652931672988, 0.898652931672988, 0.898652931672988, 0.9140317955620066, 0.9140317955620066, 0.9140317955620066, 0.9028258663588384, 0.9028258663588384, 0.9028258663588384, 0.7159386065031206, 0.7159386065031206, 0.7159386065031206, 0.7431864408323822, 0.7431864408323822, 0.7431864408323822, 0.7334319718193092, 0.7334319718193092, 0.7334319718193092, 0.22688099726761102, 0.22688099726761102, 0.22688099726761102, 0.1927801141321056, 0.1927801141321056, 0.1927801141321056, 0.2438381740729012, 0.2438381740729012, 0.2438381740729012, 0.17830756294570782, 0.17830756294570782, 0.17830756294570782, 0.20389945775444762, 0.20389945775444762, 0.20389945775444762, 0.13298773206076253, 0.13298773206076253, 0.13298773206076253, 0.205743943261385, 0.205743943261385, 0.205743943261385, 0.20160413608433514, 0.20160413608433514, 0.20160413608433514, 0.13233731439816387, 0.13233731439816387, 0.13233731439816387, 0.15467944250724397, 0.15467944250724397, 0.15467944250724397, 0.042720678042263205, 0.042720678042263205, 0.042720678042263205, 0.013287150257881297, 0.013287150257881297, 0.013287150257881297, 0.148341496877483, 0.148341496877483, 0.148341496877483, 0.06058110085335666, 0.06058110085335666, 0.06058110085335666, 0.1285213659709119, 0.1285213659709119, 0.1285213659709119, 0.10260603659340772, 0.10260603659340772, 0.10260603659340772, 0.16958583414319206, 0.16958583414319206, 0.16958583414319206, 0.1774854379613705, 0.1774854379613705, 0.1774854379613705, 0.2640431207708196, 0.2640431207708196, 0.2640431207708196, 0.13857500901909703, 0.13857500901909703, 0.13857500901909703, 0.2524411298298026, 0.2524411298298026, 0.2524411298298026, 0.6138909015971242, 0.6138909015971242, 0.6138909015971242, 0.5654908505669176, 0.5654908505669176, 0.5654908505669176, 0.5981068074664447, 0.5981068074664447, 0.5981068074664447, 0.08454157455935807, 0.08454157455935807, 0.08454157455935807, 0.11534660812305297, 0.11534660812305297, 0.11534660812305297, 0.11367500698066701, 0.11367500698066701, 0.11367500698066701, 0.1811112335442875, 0.1811112335442875, 0.1811112335442875, 0.415944282182126, 0.415944282182126, 0.415944282182126, 0.19974012545671538, 0.19974012545671538, 0.19974012545671538, 0.5657905738312621, 0.5657905738312621, 0.5657905738312621, 0.32327867912788044, 0.32327867912788044, 0.32327867912788044, 0.2683617024418994, 0.2683617024418994, 0.2683617024418994, 0.2578837818126124, 0.2578837818126124, 0.2578837818126124, 0.268371103712582, 0.268371103712582, 0.268371103712582, 0.2138788812514547, 0.2138788812514547, 0.2138788812514547, 0.2241986115019029, 0.2241986115019029, 0.2241986115019029, 0.23398339857959105, 0.23398339857959105, 0.23398339857959105, 0.2359145048008009, 0.2359145048008009, 0.2359145048008009, 0.1852895625760741, 0.1852895625760741, 0.1852895625760741, 0.18389024456950243, 0.18389024456950243, 0.18389024456950243, 0.25216299144608323, 0.25216299144608323, 0.25216299144608323, 0.9204972764523196, 0.9204972764523196, 0.9204972764523196, 0.16431650692995003, 0.16431650692995003, 0.16431650692995003, 0.9118809090677518, 0.9118809090677518, 0.9118809090677518, 0.7236116220599349, 0.7236116220599349, 0.7236116220599349, 0.21279283560737083, 0.21279283560737083, 0.21279283560737083, 0.7400602486896608, 0.7400602486896608, 0.7400602486896608, 0.1783097707916661, 0.1783097707916661, 0.1783097707916661, 0.1912664202068698, 0.1912664202068698, 0.1912664202068698, 0.18119598637953782, 0.18119598637953782, 0.18119598637953782, 0.12275149388556728, 0.12275149388556728, 0.12275149388556728, 0.08151576826646945, 0.08151576826646945, 0.08151576826646945, 0.15088623220787556, 0.15088623220787556, 0.15088623220787556]}, "mutation_prompt": null}
{"id": "e0fd5a6e-098d-4717-8b65-2e59d45e3ef0", "solution": "import numpy as np\n\nclass HybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.crossover_prob = 0.9\n        self.mutation_prob = 0.1\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            # Genetic algorithm components\n            if np.random.rand() < self.crossover_prob:\n                parents = np.random.choice(self.swarm_size, 2, replace=False)\n                crossover_point = np.random.randint(1, self.dim)\n                child1 = np.concatenate((position[parents[0], :crossover_point], position[parents[1], crossover_point:]))\n                child2 = np.concatenate((position[parents[1], :crossover_point], position[parents[0], crossover_point:]))\n                position[parents[0]] = child1\n                position[parents[1]] = child2\n\n            if np.random.rand() < self.mutation_prob:\n                mutate_idx = np.random.choice(self.swarm_size)\n                mutation_vector = np.random.normal(0, 0.1, self.dim)\n                position[mutate_idx] += mutation_vector\n                position[mutate_idx] = np.clip(position[mutate_idx], self.lower_bound, self.upper_bound)\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "HybridPSO_GA", "description": "Hybrid PSO-GA Algorithm Integrating Adaptive Crossover and Mutation for Enhanced Exploration and Exploitation Balance.", "configspace": "", "generation": 91, "fitness": 0.3483166801878173, "feedback": "The algorithm HybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8438081448432824, 0.8438081448432824, 0.8438081448432824, 0.8394716965946193, 0.8394716965946193, 0.8394716965946193, 0.8472340888581805, 0.8472340888581805, 0.8472340888581805, 0.665712959256197, 0.665712959256197, 0.665712959256197, 0.6431119441160704, 0.6431119441160704, 0.6431119441160704, 0.6540146124128561, 0.6540146124128561, 0.6540146124128561, 0.17632292683544237, 0.17632292683544237, 0.17632292683544237, 0.11186260095280709, 0.11186260095280709, 0.11186260095280709, 0.13744150929840693, 0.13744150929840693, 0.13744150929840693, 0.14030875399347809, 0.14030875399347809, 0.14030875399347809, 0.10839682690977293, 0.10839682690977293, 0.10839682690977293, 0.11408595485619466, 0.11408595485619466, 0.11408595485619466, 0.9244180261438497, 0.9244180261438497, 0.9244180261438497, 0.9397516944635379, 0.9397516944635379, 0.9397516944635379, 0.9256214181328929, 0.9256214181328929, 0.9256214181328929, 0.7208202502492803, 0.7208202502492803, 0.7208202502492803, 0.7050064282763004, 0.7050064282763004, 0.7050064282763004, 0.641696270688479, 0.641696270688479, 0.641696270688479, 0.22320802786483507, 0.22320802786483507, 0.22320802786483507, 0.2788839830617923, 0.2788839830617923, 0.2788839830617923, 0.23345136730599747, 0.23345136730599747, 0.23345136730599747, 0.20539783873498207, 0.20539783873498207, 0.20539783873498207, 0.2232551140594523, 0.2232551140594523, 0.2232551140594523, 0.210679494051086, 0.210679494051086, 0.210679494051086, 0.20862491127671312, 0.20862491127671312, 0.20862491127671312, 0.24375691662563348, 0.24375691662563348, 0.24375691662563348, 0.2602793870862129, 0.2602793870862129, 0.2602793870862129, 0.07114982777907664, 0.07114982777907664, 0.07114982777907664, 0.04887044451166189, 0.04887044451166189, 0.04887044451166189, 0.001474008046563391, 0.001474008046563391, 0.001474008046563391, 0.08354382590819764, 0.08354382590819764, 0.08354382590819764, 0.05363874616029829, 0.05363874616029829, 0.05363874616029829, 0.09422895158121014, 0.09422895158121014, 0.09422895158121014, 0.09165557480231001, 0.09165557480231001, 0.09165557480231001, 0.10376526796710073, 0.10376526796710073, 0.10376526796710073, 0.2362213123964816, 0.2362213123964816, 0.2362213123964816, 0.20639860313129998, 0.20639860313129998, 0.20639860313129998, 0.29996772332528143, 0.29996772332528143, 0.29996772332528143, 0.34540810717855985, 0.34540810717855985, 0.34540810717855985, 0.5589356642743255, 0.5589356642743255, 0.5589356642743255, 0.5630556181697071, 0.5630556181697071, 0.5630556181697071, 0.6076581928927727, 0.6076581928927727, 0.6076581928927727, 0.12581839966384412, 0.12581839966384412, 0.12581839966384412, 0.1268138412919112, 0.1268138412919112, 0.1268138412919112, 0.15225919918085307, 0.15225919918085307, 0.15225919918085307, 0.6351311642251877, 0.6351311642251877, 0.6351311642251877, 0.261725545381539, 0.261725545381539, 0.261725545381539, 0.22991227371498324, 0.22991227371498324, 0.22991227371498324, 0.26617394293066565, 0.26617394293066565, 0.26617394293066565, 0.4385472766043217, 0.4385472766043217, 0.4385472766043217, 0.5069174309218819, 0.5069174309218819, 0.5069174309218819, 0.18791425541396767, 0.18791425541396767, 0.18791425541396767, 0.30140101531400476, 0.30140101531400476, 0.30140101531400476, 0.2221696773624281, 0.2221696773624281, 0.2221696773624281, 0.23603794967312675, 0.23603794967312675, 0.23603794967312675, 0.20558380644294427, 0.20558380644294427, 0.20558380644294427, 0.27568002740093733, 0.27568002740093733, 0.27568002740093733, 0.19172302700935506, 0.19172302700935506, 0.19172302700935506, 0.19609663011007028, 0.19609663011007028, 0.19609663011007028, 0.19847335647253816, 0.19847335647253816, 0.19847335647253816, 0.9136258725351797, 0.9136258725351797, 0.9136258725351797, 0.15793668449767306, 0.15793668449767306, 0.15793668449767306, 0.9036434206152486, 0.9036434206152486, 0.9036434206152486, 0.8436219582510639, 0.8436219582510639, 0.8436219582510639, 0.21218373966334514, 0.21218373966334514, 0.21218373966334514, 0.8383611278340762, 0.8383611278340762, 0.8383611278340762, 0.17693847438154242, 0.17693847438154242, 0.17693847438154242, 0.20188439709283001, 0.20188439709283001, 0.20188439709283001, 0.1779474140495969, 0.1779474140495969, 0.1779474140495969, 0.09059228395702845, 0.09059228395702845, 0.09059228395702845, 0.10135402725950404, 0.10135402725950404, 0.10135402725950404, 0.10973773919799346, 0.10973773919799346, 0.10973773919799346]}, "mutation_prompt": null}
{"id": "cdcf464d-f4e7-4cde-820f-323e29da0095", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "ae7cdf1f-85f4-4537-bb73-d7a695d67f52", "solution": "import numpy as np\n\nclass AdaptiveVelocityPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 50  # Reduced swarm size\n        self.initial_inertia = 0.7  # Adjusted inertia\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 1.4  # Tweaked coefficients\n        self.social_coeff = 1.9\n        self.neighborhood_coeff = 0.6\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.15  # Adjusted max velocity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(4, self.swarm_size // 10)  # Changed neighborhood size\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_velocity = 0.6 + 0.4 * np.sin(evaluations / self.budget * np.pi)  # New velocity adaptation\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_velocity * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveVelocityPSO", "description": "Adaptive Velocity Control PSO with Dynamic Neighborhood for Faster Convergence.", "configspace": "", "generation": 93, "fitness": 0.3150795682055876, "feedback": "The algorithm AdaptiveVelocityPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.929638799902851, 0.929638799902851, 0.929638799902851, 0.9239115070294392, 0.9239115070294392, 0.9239115070294392, 0.929128131765036, 0.929128131765036, 0.929128131765036, 0.759021912689783, 0.759021912689783, 0.759021912689783, 0.6842475602351196, 0.6842475602351196, 0.6842475602351196, 0.6838172240997265, 0.6838172240997265, 0.6838172240997265, 0.16433493914788122, 0.16433493914788122, 0.16433493914788122, 0.11726084822674476, 0.11726084822674476, 0.11726084822674476, 0.1188102933052625, 0.1188102933052625, 0.1188102933052625, 0.12654326361204526, 0.12654326361204526, 0.12654326361204526, 0.10559712502439922, 0.10559712502439922, 0.10559712502439922, 0.07019501075572665, 0.07019501075572665, 0.07019501075572665, 0.9208276573996266, 0.9208276573996266, 0.9208276573996266, 0.8959560600603542, 0.8959560600603542, 0.8959560600603542, 0.936210730629206, 0.936210730629206, 0.936210730629206, 0.6376047972380119, 0.6376047972380119, 0.6376047972380119, 0.8479232075575496, 0.8479232075575496, 0.8479232075575496, 0.8015697548812408, 0.8015697548812408, 0.8015697548812408, 0.21995818854474447, 0.21995818854474447, 0.21995818854474447, 0.1617901299329425, 0.1617901299329425, 0.1617901299329425, 0.16113529787089553, 0.16113529787089553, 0.16113529787089553, 0.19812034368852505, 0.19812034368852505, 0.19812034368852505, 0.23226978200526605, 0.23226978200526605, 0.23226978200526605, 0.13586041214733358, 0.13586041214733358, 0.13586041214733358, 0.20041217899950658, 0.20041217899950658, 0.20041217899950658, 0.23966606019398418, 0.23966606019398418, 0.23966606019398418, 0.20501755691904777, 0.20501755691904777, 0.20501755691904777, 0.021476548023757425, 0.021476548023757425, 0.021476548023757425, 0.035235827295869604, 0.035235827295869604, 0.035235827295869604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13351427877673372, 0.13351427877673372, 0.13351427877673372, 0.0321693246932111, 0.0321693246932111, 0.0321693246932111, 0.1611140928397552, 0.1611140928397552, 0.1611140928397552, 0.08841134366293046, 0.08841134366293046, 0.08841134366293046, 0.11577903970462744, 0.11577903970462744, 0.11577903970462744, 0.26924421774529683, 0.26924421774529683, 0.26924421774529683, 0.19193091715591415, 0.19193091715591415, 0.19193091715591415, 0.08647419522000088, 0.08647419522000088, 0.08647419522000088, 0.15096184330021656, 0.15096184330021656, 0.15096184330021656, 0.5522689080659768, 0.5522689080659768, 0.5522689080659768, 0.5788319570175664, 0.5788319570175664, 0.5788319570175664, 0.5735446991414181, 0.5735446991414181, 0.5735446991414181, 0.11114788756268446, 0.11114788756268446, 0.11114788756268446, 0.08971197775035544, 0.08971197775035544, 0.08971197775035544, 0.1070657050521191, 0.1070657050521191, 0.1070657050521191, 0.18878250196745217, 0.18878250196745217, 0.18878250196745217, 0.22760080798398408, 0.22760080798398408, 0.22760080798398408, 0.2584136262603025, 0.2584136262603025, 0.2584136262603025, 0.41508292941869074, 0.41508292941869074, 0.41508292941869074, 0.24318424807090655, 0.24318424807090655, 0.24318424807090655, 0.4371754145273552, 0.4371754145273552, 0.4371754145273552, 0.19975318051233637, 0.19975318051233637, 0.19975318051233637, 0.2779203916206411, 0.2779203916206411, 0.2779203916206411, 0.15123983361256665, 0.15123983361256665, 0.15123983361256665, 0.21290109670242474, 0.21290109670242474, 0.21290109670242474, 0.30957038988556185, 0.30957038988556185, 0.30957038988556185, 0.24504618481083296, 0.24504618481083296, 0.24504618481083296, 0.18157287725474502, 0.18157287725474502, 0.18157287725474502, 0.17021296555971532, 0.17021296555971532, 0.17021296555971532, 0.226895925274744, 0.226895925274744, 0.226895925274744, 0.940364537173552, 0.940364537173552, 0.940364537173552, 0.11472033241504109, 0.11472033241504109, 0.11472033241504109, 0.16830516547138763, 0.16830516547138763, 0.16830516547138763, 0.833842150136143, 0.833842150136143, 0.833842150136143, 0.21331087318373332, 0.21331087318373332, 0.21331087318373332, 0.09484486998112529, 0.09484486998112529, 0.09484486998112529, 0.17659586569255026, 0.17659586569255026, 0.17659586569255026, 0.21635050157598879, 0.21635050157598879, 0.21635050157598879, 0.17342220363702854, 0.17342220363702854, 0.17342220363702854, 0.09402571335968002, 0.09402571335968002, 0.09402571335968002, 0.08628280569132041, 0.08628280569132041, 0.08628280569132041, 0.12249998215181479, 0.12249998215181479, 0.12249998215181479]}, "mutation_prompt": null}
{"id": "62965490-39e3-4f61-8fe4-eef7be66fdcb", "solution": "import numpy as np\n\nclass TimeVariantDynamicNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.9\n        self.final_inertia = 0.3\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 1.8\n        self.neighborhood_coeff = 0.7\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.2\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 6)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n            \n            adaptive_clamp_factor = 0.1 + 0.9 * (evaluations / self.budget)\n            self.max_velocity = adaptive_clamp_factor * (self.upper_bound - self.lower_bound) * 0.1\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = inertia_term + cognitive_term + social_term + neighborhood_term\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "TimeVariantDynamicNeighborhoodPSO", "description": "Time-Variant Dynamic Neighborhood PSO with Adaptive Velocity Clamping for Enhanced Convergence.", "configspace": "", "generation": 94, "fitness": 0.24388878791263427, "feedback": "The algorithm TimeVariantDynamicNeighborhoodPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.6452886370243295, 0.6452886370243295, 0.6452886370243295, 0.6062178010878557, 0.6062178010878557, 0.6062178010878557, 0.6340853699751043, 0.6340853699751043, 0.6340853699751043, 0.30702263107002137, 0.30702263107002137, 0.30702263107002137, 0.3189223875235152, 0.3189223875235152, 0.3189223875235152, 0.3391601180387901, 0.3391601180387901, 0.3391601180387901, 0.1431718027736102, 0.1431718027736102, 0.1431718027736102, 0.08942582065120952, 0.08942582065120952, 0.08942582065120952, 0.09063137194248483, 0.09063137194248483, 0.09063137194248483, 0.08252279471517432, 0.08252279471517432, 0.08252279471517432, 0.07877308386085857, 0.07877308386085857, 0.07877308386085857, 0.07322138023619973, 0.07322138023619973, 0.07322138023619973, 0.7161297407953912, 0.7161297407953912, 0.7161297407953912, 0.7393822011754687, 0.7393822011754687, 0.7393822011754687, 0.723189838725653, 0.723189838725653, 0.723189838725653, 0.35388591493236277, 0.35388591493236277, 0.35388591493236277, 0.34846980642919423, 0.34846980642919423, 0.34846980642919423, 0.3481086701215007, 0.3481086701215007, 0.3481086701215007, 0.15673902121914085, 0.15673902121914085, 0.15673902121914085, 0.20193708511134822, 0.20193708511134822, 0.20193708511134822, 0.1588581841406682, 0.1588581841406682, 0.1588581841406682, 0.17549932214495767, 0.17549932214495767, 0.17549932214495767, 0.1639273263686466, 0.1639273263686466, 0.1639273263686466, 0.19347168700345507, 0.19347168700345507, 0.19347168700345507, 0.1619864205383621, 0.1619864205383621, 0.1619864205383621, 0.16767101531502104, 0.16767101531502104, 0.16767101531502104, 0.14925965053114887, 0.14925965053114887, 0.14925965053114887, 0.08680074521030678, 0.08680074521030678, 0.08680074521030678, 0.019770125823369566, 0.019770125823369566, 0.019770125823369566, 0.008586744439736838, 0.008586744439736838, 0.008586744439736838, 0.11795511349188981, 0.11795511349188981, 0.11795511349188981, 0.0582752193425502, 0.0582752193425502, 0.0582752193425502, 0.17957277540222516, 0.17957277540222516, 0.17957277540222516, 0.04658570705775089, 0.04658570705775089, 0.04658570705775089, 0.07696463529281428, 0.07696463529281428, 0.07696463529281428, 0.08525782207658306, 0.08525782207658306, 0.08525782207658306, 0.13309520870174218, 0.13309520870174218, 0.13309520870174218, 0.10120717124102374, 0.10120717124102374, 0.10120717124102374, 0.144151812522892, 0.144151812522892, 0.144151812522892, 0.4584244171209322, 0.4584244171209322, 0.4584244171209322, 0.4292494995072359, 0.4292494995072359, 0.4292494995072359, 0.4548301303554648, 0.4548301303554648, 0.4548301303554648, 0.12430743134810562, 0.12430743134810562, 0.12430743134810562, 0.06558512328698485, 0.06558512328698485, 0.06558512328698485, 0.08816624587965527, 0.08816624587965527, 0.08816624587965527, 0.13620143341313962, 0.13620143341313962, 0.13620143341313962, 0.24965345791276417, 0.24965345791276417, 0.24965345791276417, 0.24650855571058916, 0.24650855571058916, 0.24650855571058916, 0.2963356336612458, 0.2963356336612458, 0.2963356336612458, 0.3556993088637196, 0.3556993088637196, 0.3556993088637196, 0.2563937707718107, 0.2563937707718107, 0.2563937707718107, 0.21920398282179865, 0.21920398282179865, 0.21920398282179865, 0.1627760075275273, 0.1627760075275273, 0.1627760075275273, 0.14659566779358557, 0.14659566779358557, 0.14659566779358557, 0.21852501112623446, 0.21852501112623446, 0.21852501112623446, 0.22350790343533367, 0.22350790343533367, 0.22350790343533367, 0.20876156893126152, 0.20876156893126152, 0.20876156893126152, 0.192138126314781, 0.192138126314781, 0.192138126314781, 0.17287649451250997, 0.17287649451250997, 0.17287649451250997, 0.21662275400295927, 0.21662275400295927, 0.21662275400295927, 0.7986684644613744, 0.7986684644613744, 0.7986684644613744, 0.1565829165647621, 0.1565829165647621, 0.1565829165647621, 0.7499553288507645, 0.7499553288507645, 0.7499553288507645, 0.5412019794334644, 0.5412019794334644, 0.5412019794334644, 0.2052021011003594, 0.2052021011003594, 0.2052021011003594, 0.12419452512117546, 0.12419452512117546, 0.12419452512117546, 0.18799022069291937, 0.18799022069291937, 0.18799022069291937, 0.1851400081994612, 0.1851400081994612, 0.1851400081994612, 0.1856157601715115, 0.1856157601715115, 0.1856157601715115, 0.09139859351086344, 0.09139859351086344, 0.09139859351086344, 0.08011620956277243, 0.08011620956277243, 0.08011620956277243, 0.10638193368824322, 0.10638193368824322, 0.10638193368824322]}, "mutation_prompt": null}
{"id": "1b5f2ff0-3a5f-4a53-88d5-db74deb0eb95", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "b244c129-34a1-403e-8503-6fc0bd25c177", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "84700194-ff6a-4ff1-bc43-833ad76e0b0f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "3f2da809-79a9-4f7c-9435-2af80049651e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
{"id": "3740f540-3802-4d10-9906-6142dc164a9f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveNeighborhoodPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 60\n        self.initial_inertia = 0.8\n        self.final_inertia = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.neighborhood_coeff = 0.5\n        self.max_velocity = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.max_velocity, self.max_velocity, (self.swarm_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        global_best_position = None\n        global_best_value = np.inf\n\n        evaluations = 0\n        neighborhood_size = max(3, self.swarm_size // 8)\n\n        while evaluations < self.budget:\n            inertia = self.initial_inertia - (self.initial_inertia - self.final_inertia) * (evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i].copy()\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i].copy()\n\n                if evaluations >= self.budget:\n                    break\n\n            adaptive_learning_rate = 0.5 + 0.5 * np.tanh(1.0 - evaluations / (self.budget * 0.9))\n\n            for i in range(self.swarm_size):\n                neighborhood_indices = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                neighborhood_best = min(neighborhood_indices, key=lambda idx: personal_best_value[idx])\n                neighborhood_best_position = personal_best_position[neighborhood_best]\n\n                r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                inertia_term = inertia * velocity[i]\n                cognitive_term = self.cognitive_coeff * r1 * (personal_best_position[i] - position[i])\n                social_term = self.social_coeff * r2 * (global_best_position - position[i])\n                neighborhood_term = self.neighborhood_coeff * r3 * (neighborhood_best_position - position[i])\n\n                velocity[i] = adaptive_learning_rate * (inertia_term + cognitive_term + social_term + neighborhood_term)\n                velocity[i] = np.clip(velocity[i], -self.max_velocity, self.max_velocity)\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedAdaptiveNeighborhoodPSO", "description": "Enhanced Adaptive Neighborhood PSO with Time-Variant Parameters for Improved Convergence and Solution Quality.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b52700a-d809-4ab5-a4be-23d253f7fa70", "metadata": {"aucs": [0.8633964944550405, 0.8633964944550405, 0.8633964944550405, 0.845855833872688, 0.845855833872688, 0.845855833872688, 0.8518692953330196, 0.8518692953330196, 0.8518692953330196, 0.6544145806442698, 0.6544145806442698, 0.6544145806442698, 0.672597649881396, 0.672597649881396, 0.672597649881396, 0.6670934460464877, 0.6670934460464877, 0.6670934460464877, 0.14970037122287616, 0.14970037122287616, 0.14970037122287616, 0.11172729169830331, 0.11172729169830331, 0.11172729169830331, 0.11520596303989317, 0.11520596303989317, 0.11520596303989317, 0.14422725810989434, 0.14422725810989434, 0.14422725810989434, 0.10894195563073295, 0.10894195563073295, 0.10894195563073295, 0.1364855274439929, 0.1364855274439929, 0.1364855274439929, 0.9301767713394029, 0.9301767713394029, 0.9301767713394029, 0.929498789287577, 0.929498789287577, 0.929498789287577, 0.9287155029326377, 0.9287155029326377, 0.9287155029326377, 0.7159640295130735, 0.7159640295130735, 0.7159640295130735, 0.7409597904237073, 0.7409597904237073, 0.7409597904237073, 0.7248251583595926, 0.7248251583595926, 0.7248251583595926, 0.17027966578010856, 0.17027966578010856, 0.17027966578010856, 0.2780067836165844, 0.2780067836165844, 0.2780067836165844, 0.23456613553335348, 0.23456613553335348, 0.23456613553335348, 0.21236481206449076, 0.21236481206449076, 0.21236481206449076, 0.20821081697463373, 0.20821081697463373, 0.20821081697463373, 0.13118956997241826, 0.13118956997241826, 0.13118956997241826, 0.12518890865986398, 0.12518890865986398, 0.12518890865986398, 0.24160816620781989, 0.24160816620781989, 0.24160816620781989, 0.2470934760762975, 0.2470934760762975, 0.2470934760762975, 0.19635065580187006, 0.19635065580187006, 0.19635065580187006, 0.044256145521626045, 0.044256145521626045, 0.044256145521626045, 0.012458735984935632, 0.012458735984935632, 0.012458735984935632, 0.11182357996986825, 0.11182357996986825, 0.11182357996986825, 0.07987509261860637, 0.07987509261860637, 0.07987509261860637, 0.11794940202979065, 0.11794940202979065, 0.11794940202979065, 0.09578777991883858, 0.09578777991883858, 0.09578777991883858, 0.21054029051526957, 0.21054029051526957, 0.21054029051526957, 0.23654483267951598, 0.23654483267951598, 0.23654483267951598, 0.18030445593560684, 0.18030445593560684, 0.18030445593560684, 0.22049938745951814, 0.22049938745951814, 0.22049938745951814, 0.27253922255059404, 0.27253922255059404, 0.27253922255059404, 0.5931313378637948, 0.5931313378637948, 0.5931313378637948, 0.5382504094375078, 0.5382504094375078, 0.5382504094375078, 0.5646326306242311, 0.5646326306242311, 0.5646326306242311, 0.10733207495350738, 0.10733207495350738, 0.10733207495350738, 0.11267333961323289, 0.11267333961323289, 0.11267333961323289, 0.12075665874288755, 0.12075665874288755, 0.12075665874288755, 0.5760355780058455, 0.5760355780058455, 0.5760355780058455, 0.31402967845086127, 0.31402967845086127, 0.31402967845086127, 0.34231619606523067, 0.34231619606523067, 0.34231619606523067, 0.4278967395394283, 0.4278967395394283, 0.4278967395394283, 0.44363550907427074, 0.44363550907427074, 0.44363550907427074, 0.5669962184798326, 0.5669962184798326, 0.5669962184798326, 0.25088183642895223, 0.25088183642895223, 0.25088183642895223, 0.2875648134444574, 0.2875648134444574, 0.2875648134444574, 0.19818546070108112, 0.19818546070108112, 0.19818546070108112, 0.20739652144310916, 0.20739652144310916, 0.20739652144310916, 0.2631671765272344, 0.2631671765272344, 0.2631671765272344, 0.22872881427987524, 0.22872881427987524, 0.22872881427987524, 0.20472915889741494, 0.20472915889741494, 0.20472915889741494, 0.19429977143177302, 0.19429977143177302, 0.19429977143177302, 0.19357128272771162, 0.19357128272771162, 0.19357128272771162, 0.9053761451341392, 0.9053761451341392, 0.9053761451341392, 0.16790972141222482, 0.16790972141222482, 0.16790972141222482, 0.9036471277156939, 0.9036471277156939, 0.9036471277156939, 0.8429588998401327, 0.8429588998401327, 0.8429588998401327, 0.2127276967405799, 0.2127276967405799, 0.2127276967405799, 0.8637355547731329, 0.8637355547731329, 0.8637355547731329, 0.18526188809511845, 0.18526188809511845, 0.18526188809511845, 0.17796800780422506, 0.17796800780422506, 0.17796800780422506, 0.19731575488270148, 0.19731575488270148, 0.19731575488270148, 0.10085851596314355, 0.10085851596314355, 0.10085851596314355, 0.09539573136100277, 0.09539573136100277, 0.09539573136100277, 0.07809647984474355, 0.07809647984474355, 0.07809647984474355]}, "mutation_prompt": null}
