{"id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 0, "fitness": 0.15633477504487972, "feedback": "The algorithm AMSSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "1fd506cb-1c19-4223-8661-795290f60033", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "d7b50c29-3153-4d9a-8698-3723991d29c3", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "c17e24ce-bafc-42cf-bd4d-097decd3be74", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "b5f27504-b489-4217-906a-70027c90458f", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "cc865c8d-9f2d-465d-a9b1-c7fd2d127ea9", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "5c4f9005-c3b5-40d2-b2c2-7806ae80920d", "solution": "import numpy as np\n\nclass EnhancedAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(10, dim + 2)  # Adaptive population size\n        self.scale_adjustment_factor = 0.8  # Adjusted scale factor\n        self.initial_scale = 0.2 * (self.upper_bound - self.lower_bound)  # Larger initial scale\n        self.success_threshold = 0.25  # Adjusted success threshold\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        success_history = []  # Track success rate over iterations\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            success_history.append(success_rate)\n            if len(success_history) > 5:\n                success_history.pop(0)\n\n            avg_success_rate = np.mean(success_history)\n            if avg_success_rate > self.success_threshold:\n                scale *= 1.1  # Dynamic scale increase\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EnhancedAMSSA", "description": "Enhanced AMSSA with adaptive population size and dynamic scaling for improved convergence.", "configspace": "", "generation": 6, "fitness": 0.14127266482866574, "feedback": "The algorithm EnhancedAMSSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.17.", "error": "", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9789820957736877, 0.9791073769797253, 0.9794435939766987, 0.4142242985396991, 0.15855354329582294, 0.9774235108502858, 0.9787613353278933, 0.980592440409792, 0.33533786542071486, 0.034604908153612945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051890887318978285, 0.04664030654760154, 0.055079623678371936, 0.09955452191508884, 0.07145680805712895, 0.023859803779486155, 0.04554335715592317, 0.013915553838971806, 0.09144255986660699, 0.03657934503484994, 0.07153581023626032, 0.027404068726126884, 0.04531056462070593, 0.002963931610104331, 0.012547897804199737, 0.048288708554289794, 0.012106286733104987, 0.022266453108675144, 0.12780941307664329, 0.062419268093860225, 0.08884299701659404, 0.07423287657864852, 0.06764544160381902, 0.17339591095679552, 0.07194202573583663, 0.07928059414619437, 0.23850119247856139, 0.24169152245664505, 0.035288723004881506, 0.11299869785866723, 0.1857357967413662, 0.184870925948447, 0.14686450867909284, 0.15958308305592528, 0.06181803141486086, 0.06837635934350694, 0.13762693565170359, 0.07993189247046961, 0.05897031904207761, 0.2868727028057927, 0.1623776787628336, 0.06758061737661991, 0.11755864762407786, 0.11771978966873253, 0.06640732276929395, 0.016175115388472827, 9.999999999998899e-05, 0.13985881144972445, 0.30023479008733733, 0.15310158180931033, 9.999999999998899e-05, 0.13185907718644108, 0.10119213474047428, 0.15409321143442045, 0.1539531233126782, 0.3108452581015746, 9.999999999998899e-05, 0.0034210374421953516, 0.16173812518829878, 0.13258435570656457, 0.13388085384994008, 0.23191981591359712, 0.1650809721810932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055963464840661614, 0.04084065383278501, 0.11646250924962875, 0.06035834299735543, 0.005570558939258952, 0.0073319094291022235, 0.08568723031664194, 0.03536489766893358, 0.019829332440791436, 0.2522885603162506, 0.09573958450803088, 9.999999999998899e-05, 0.10130444896249369, 0.11723873460499834, 0.1156795411861039, 0.11439674951331003, 0.11548194168097325, 0.0885315967339837, 0.12102717434525634, 0.08393021435950343, 0.08167182300179865, 0.007369288329868495, 0.11512728968248376, 0.024220908450177214, 0.07828330092716773, 9.999999999998899e-05, 0.1181363261090923, 0.45835127981420276, 0.192998200443514, 0.43916448535046415, 0.3407834383179432, 0.30657526095887455, 0.13200336400954893, 0.43897597825463697, 0.4093665241670468, 0.27392120950402665, 0.04652147498440351, 9.999999999998899e-05, 9.999999999998899e-05, 0.05837609294249546, 0.11795469239984901, 0.045555066388274335, 0.05827035464211827, 0.04321669013652718, 0.10889785521560347, 0.16708481671610897, 0.10570792727693756, 0.15081059776917227, 0.129662661991226, 0.17599283665057097, 0.13721756017454023, 0.15280342050595408, 0.125929863785049, 0.14446585435844495, 0.146476843099697, 0.13964557176304038, 0.11160853636401735, 0.2553125700077923, 0.11894898928913333, 0.11550466679173099, 0.2518806455042042, 0.12772412514303055, 0.09586805864292014, 0.0652512400476899, 0.05860188547332823, 0.15165053914137538, 0.07180833792424168, 0.09972327770692302, 0.11308195919876451, 0.07672138500307812, 0.11292568428890282, 0.0218400760723807, 0.1629450262851062, 0.2160017233805036, 0.1642802446603866, 0.20981471262868046, 0.19622530881929545, 0.1574145087501565, 0.23696080453741808, 0.13525314751118533, 0.16346116276198464, 0.17941950343720714, 0.1786820758590607, 0.18090710074764194, 0.15385294814061057, 0.1920037358292368, 0.1736121076973135, 0.1702036986567902, 0.16089061032649277, 0.1419578095582703, 0.18994941271612287, 0.12356467521064474, 0.06971356735489842, 0.17421682180440656, 0.0660555807758283, 0.10948456534756257, 0.1089043768942094, 0.12639619973799276, 0.16726007496541895, 0.4906664142283711, 0.11035788675726887, 0.08348135085409902, 0.17005188760551715, 0.21397710836325168, 0.11653251085772531, 0.11355772388842267, 0.1572594204921004, 0.1469845159004306, 0.22198845012021906, 0.1723405376706869, 0.21848563879094973, 0.23815519362806103, 0.19420782059323705, 0.1721960927683902, 0.20499294834365722, 0.22738818409955264, 0.1995609351882287, 0.06358857617569824, 0.09578860314091853, 0.059277643663944946, 0.11525880209888217, 0.02419680833561544, 0.04841187444839723, 0.09158236393365227, 0.06352421580505363, 0.07453331473012836]}, "mutation_prompt": null}
{"id": "917e1ef5-58db-4e05-be3e-25332686fcda", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "6744442c-1e32-4eab-a714-7730b461d2df", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "e533c459-19e5-497a-beac-4735658568b9", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "5ea0d7b7-8803-4e95-8c94-95a3520e798d", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "72884267-b432-4e6a-b78d-163d4eed98b0", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "4a26697c-9faa-4ce8-8622-a8b126c98a37", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "0a19c4c1-33bf-4f6e-9d5a-0818b28f084d", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "9675e769-8432-4359-9f30-03ba67b8aad2", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "8bb8c61a-0893-4bdb-8dd6-0ccd7d81a55f", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "8dae5263-b419-46e9-a0ea-5818624e1e3b", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "1aaff54a-51ba-4113-b3e4-c01f4c129204", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "575ab2c5-e323-4f5f-9974-c8cdc34c3611", "solution": "import numpy as np\n\nclass AMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10\n        self.scale_adjustment_factor = 0.85\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.2\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n\n            success_count = 0\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n            else:\n                scale *= self.scale_adjustment_factor\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AMSSA", "description": "Adaptive Multi-Scale Search Algorithm (AMSSA) combines exploration and exploitation by dynamically adjusting search scales based on success rates.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9733395082663269, 0.970023152257278, 0.9701920945303515, 0.9704324007375061, 0.9558179047816683, 0.9588981907898522, 0.968702573752316, 0.9713234807405943, 0.968446304892711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636029832384716, 0.013158159500243904, 0.013797222629537975, 0.07644893309066392, 0.013234267794007382, 0.04794129798237212, 0.07160736148577618, 0.012068259164409234, 0.0454738145484489, 0.07432569065418337, 0.004074618120606055, 0.010466102664934085, 0.07181976561473569, 9.999999999998899e-05, 0.03043720969183228, 0.09082106768740794, 9.999999999998899e-05, 0.014960064740641377, 0.09390128439605816, 0.05623164684120385, 0.07227021602748829, 0.0751338016492904, 0.05448836490310893, 0.08132892612678166, 0.07123765698057505, 0.06306702989459811, 0.1416759619377328, 0.38493987369111893, 0.06765304091795954, 0.040546270388700734, 0.20480888159175736, 0.18820695127745135, 0.0545014611193303, 0.08960160895365354, 0.06535079323228021, 0.08884344346881412, 0.14220286930438475, 0.09998978706144535, 0.04060955341502326, 0.285460611185984, 0.05275855175127331, 9.999999999998899e-05, 0.11908665153319631, 0.08018827474262047, 0.009160605372275477, 0.16043449155127876, 9.999999999998899e-05, 0.14199541839376617, 9.999999999998899e-05, 0.1471118513984384, 0.1376444807390388, 0.15008674697692315, 0.1541935492906208, 0.25175801758060534, 0.15369979555468705, 0.15712720421613702, 0.050849087171213614, 0.14117666077205882, 0.2703257792386352, 0.14857115640511898, 0.23729973625059542, 0.35659995417619816, 0.1464657865586667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10213492001191449, 0.052631555173630495, 0.1091707178803959, 0.06254858462521729, 0.01086439519901139, 0.011909807751467993, 0.1465107752673941, 0.023687479909634934, 0.0718534501204876, 0.23567007805003148, 0.04478380656323189, 0.24046454097801528, 0.14782089672952026, 0.08803725653455952, 0.09888227490555401, 0.15110775343768712, 0.1163709249886049, 0.09001158475107074, 0.10662624948565058, 0.1140762711040545, 0.07515861585123551, 0.07491179049807306, 0.12603161657696416, 0.05076151934447426, 0.18559292825361695, 0.1060261589062289, 0.11111330651902296, 0.48922464133096766, 0.4223855423156567, 0.49016559881609223, 0.5281729102904771, 0.4645097632614086, 0.18633800029766212, 0.46004256327863124, 0.45753051138492773, 0.43501606123809555, 0.07640506461645469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07900711114057135, 0.030949907315626635, 0.052133997926991804, 0.06364983292281612, 0.017556394603362113, 0.2485806579441363, 0.16548062517014606, 0.11777617822827802, 0.17766242309514113, 0.29199049981196434, 0.210338827041619, 0.14149094849002863, 0.3140790150472049, 0.28270497900516767, 0.12715298691907595, 0.10375380445183013, 0.10987839824749313, 0.13966278431232293, 0.08905675030571925, 0.1446753163989566, 0.16317183532267043, 0.0868700594197318, 0.09229167383878534, 0.06484913090464561, 0.04112253678525779, 0.037673535779329526, 0.15963217990809608, 0.03605394817591767, 0.10993550238144256, 0.09289853590439756, 0.033673984541708, 0.02524005869243573, 0.20516539179148763, 0.1379653773124523, 0.2578538646342008, 0.1815849080666253, 0.1800231829636657, 0.11770452534794162, 0.2361801616129524, 0.1151124819235878, 0.16912636520562918, 0.17440220747488078, 0.18105682386951027, 0.195745157423596, 0.19600101984465534, 0.26042744061295064, 0.17089838988027273, 0.1548964211427083, 0.1645118335607091, 0.16370974480530875, 0.18978584776220297, 0.1378402790144595, 0.08078885402920677, 0.17410970746660992, 0.1042894218423509, 0.06199926369949793, 0.10889597537853679, 0.11542392934483159, 0.1434136432509585, 0.4747788409886482, 0.11015928912744966, 0.08320866839310381, 0.1702249778481384, 0.20616104063989793, 0.02737450783674844, 0.1644393084078658, 0.05932485076895633, 0.16987411962185428, 0.16393685771031374, 0.1679702916796999, 0.21459953331474102, 0.2003641671798828, 0.16550826913062922, 0.2266954876774222, 0.25089442251173855, 0.24489483831310088, 0.24448489709140186, 0.11247474693075143, 0.04885191512143716, 0.023203234382130122, 0.07669004835352211, 0.005132394067799972, 0.05750187161159026, 0.11909630715415331, 0.05058446058330579, 0.040071929225616976]}, "mutation_prompt": null}
{"id": "a287b694-c705-43dd-96db-25df39d299d5", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 19, "fitness": 0.16350941357782312, "feedback": "The algorithm EAMSSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "662f726c-8a8f-4fd5-9962-245d9f4b45a0", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "0780bb85-81b8-4a94-a871-333960c3b17b", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "32965d01-d577-4bd0-a765-6213fac938fd", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "c9d9588b-8651-4dcb-b223-f9690baaced4", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "2c61050b-14b2-419e-ae97-c4a418e545cd", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "6bce7fcd-78e2-4dab-a090-bd3e31860ed6", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "78b878d8-ba2a-4238-aeee-7724d9032585", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "a6796bb9-0053-49b5-b5ab-6d8acb6d088b", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "d40b3913-2238-46be-8775-45ce9a718fe2", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "153a21e9-3ac6-4591-b181-d68f2921d2ed", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "2a9f8706-32c2-40a0-9861-ceed65250e80", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "8890d8e9-2eca-4e9b-b881-8269f115d762", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "96642852-82cf-474c-bf2f-69dff4954bb2", "solution": "import numpy as np\n\nclass EnhancedEAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 15  # Increased initial population size\n        self.scale_adjustment_factor = 0.85  # Slightly more aggressive scale adjustment\n        self.initial_scale = 0.10 * (self.upper_bound - self.lower_bound)  # Modified initial scale\n        self.success_threshold = 0.3  # Adjusted success threshold\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.2), self.budget - evaluations)  # More dynamic population size adjustment\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.8), 1)  # More dynamic population size adjustment\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EnhancedEAMSSA", "description": "Modified EAMSSA with enhanced adaptation of population and scale parameters for more efficient convergence.", "configspace": "", "generation": 31, "fitness": 0.14151797865020208, "feedback": "The algorithm EnhancedEAMSSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9747325491971762, 0.9397774317454914, 0.9758891344646918, 0.9587929844123634, 0.9697995500858937, 0.5990346033096369, 0.7780461979516371, 0.9858652728591021, 0.978387096022046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12178078877142506, 9.999999999998899e-05, 0.007313889887209601, 0.059463163766045324, 9.999999999998899e-05, 0.016338054636031885, 0.030183346888322582, 0.003443953670970612, 0.018244157322521604, 0.0992950968760391, 9.999999999998899e-05, 0.01311973532559263, 0.04688531436582122, 9.999999999998899e-05, 0.04740484024599845, 9.999999999998899e-05, 9.999999999998899e-05, 0.00026589546626487603, 0.07028958380973294, 0.03856037337580909, 0.04191095367290143, 0.04943911072911511, 0.03932816872830425, 0.06276535589539212, 0.05150838689727988, 0.05342618640481345, 0.054807974713666385, 0.08961043069162422, 0.026736452149896284, 9.999999999998899e-05, 0.20802889354435194, 0.11770292875440269, 0.01980943594838458, 0.25113853027639044, 0.021794482768133783, 0.10931587095367357, 0.14225215582575035, 0.07084603413624191, 0.04199976060267674, 0.18155790538191263, 0.05013472213768089, 0.051237180727397025, 0.09661013693059117, 0.03319316596415156, 0.011183318392289032, 0.13182656375145707, 0.006691348986428203, 0.11236380671981039, 9.999999999998899e-05, 0.1450240327806267, 0.15726110242226954, 0.13173026990902215, 0.16685133050652678, 0.13234900623192647, 0.18123850264215702, 0.13223629419559768, 0.13696168728619473, 0.5924943993051748, 0.2617655799207771, 0.14294571933708777, 0.15160337161550597, 0.25622574361161465, 0.13617780284039893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062001218492587995, 0.05834296367666125, 0.14134078735133093, 0.06713173373190151, 0.002686330653778213, 0.010328948350557754, 0.12467877879214084, 0.022953487707447318, 0.08785876123514569, 0.25377204442608814, 0.05666275017408118, 0.18852290711075892, 0.09769923655804413, 0.17572654436537027, 0.1074404119201785, 0.12997797227961005, 0.15522307524374956, 0.10285910332109527, 0.18472688172905716, 0.2477921362785116, 0.05271847162878418, 0.1148903691348161, 0.2701385148745534, 0.057286486178184326, 0.13322061797524298, 0.1892335739490274, 0.08592247715782142, 0.4218378244461496, 0.42802679624675033, 0.42959918273803066, 0.4141690207781764, 0.33043524488566123, 0.2679211043137695, 0.45961154947217364, 0.41648289671569416, 0.4217031401575958, 0.05055976360275838, 0.04352496684439777, 9.999999999998899e-05, 9.999999999998899e-05, 0.05362612858037863, 0.008349828095683187, 0.01311961873827805, 0.08776591680612655, 9.999999999998899e-05, 0.13881559961905476, 0.10230846775130553, 0.18865615028129923, 0.10638295833003375, 0.09419688229527001, 0.17236185532041037, 0.15059104649589994, 0.13924328735790914, 0.17370158944094327, 0.11707578851894362, 0.08347994039632445, 0.11376147253464786, 0.13912094235302197, 0.07178336775108363, 0.11163806406625676, 0.15614517623864432, 0.08278916618604415, 0.09296254161367268, 0.06509128317244506, 0.03222404962652803, 0.035258805917806946, 0.13608122588141902, 0.019793084903607427, 0.07869276795532953, 0.06980234600675761, 0.027072781414999025, 0.02990208383684989, 0.17261035022328253, 0.09768344729094536, 0.1268120869366599, 0.1650771134788116, 0.13341988748224354, 0.15300620420943212, 0.28271809856332986, 0.11742152184588173, 0.16241950083353163, 0.16819727858722067, 0.15948428251595437, 0.19227640915888744, 0.1564362233371236, 0.18902263340568815, 0.14112519608631247, 0.16348116767129084, 0.14901599626447692, 0.18694780408346146, 0.12359672184688131, 0.1374608087803737, 0.06939750242936482, 0.1738408547879411, 0.09754544990056024, 0.061912096744989875, 0.10876702062003951, 0.12088680132365426, 0.16486344118184493, 0.28119383395101405, 0.11220507292049786, 0.08326331098815265, 0.035515435771134585, 0.17290548386496374, 0.029133065468000097, 0.16450425782093347, 0.05925700100048048, 0.1545531080118231, 0.17445870325735835, 0.16638276378420158, 0.19298377359881558, 0.1643079247698166, 0.21795111909714848, 0.17568950737297273, 0.22982426653383636, 0.23284718572689667, 0.2516213409293716, 0.060069004769269796, 0.05337796472012046, 0.023556514650797555, 0.0430783218503058, 0.0020494986832869655, 0.03230776261283175, 0.05244686585439362, 0.03752883522409811, 0.04474615489086631]}, "mutation_prompt": null}
{"id": "8264b450-8466-400a-a934-16ccf07dc4e6", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "9b16acd7-c2d6-463c-9f16-d9ef9c651c3f", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "8738ae79-f98b-4c2c-8fc6-b3a5aee7cea7", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "d4f74571-297e-4679-9179-0b9a7b14b4ce", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "60733267-20ee-4b17-8181-dd778fda5d81", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "15a5e07a-6389-4d12-81d6-0a1516237525", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "f762bf45-fc72-4b05-b2b1-bd484207ac41", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "444df453-5e2d-4c83-85b4-a464f4f101d6", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "ffb58b91-b112-4920-940a-e9b20cb2160f", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "cc479507-2cb1-4e0a-8489-d3ccb0f6a8c4", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "6e70d001-61b1-4e70-9be6-13b14bdbcd0e", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "792785c1-590c-4e5b-8c33-e730c4e32066", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "d50bcf76-6cb7-4f06-8079-5598759052a2", "solution": "import numpy as np\n\nclass EAMSSADynamicInertia:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_factor = 0.85  # Adjusted scale factor for better exploration-exploitation balance\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.3  # Adjusted threshold for success rate adaptability\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = sum(values < best_value)\n            if success_count > 0:\n                best_value = np.min(values)\n                best_solution = population[np.argmin(values)]\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.1  # Increase scale more aggressively\n                population_size = min(int(population_size * 1.2), self.budget - evaluations)\n            else:\n                scale *= self.scale_factor\n                population_size = max(int(population_size * 0.8), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSADynamicInertia", "description": "Enhanced adaptive scaling with dynamic inertia and target-based adaptation for improved convergence efficiency.", "configspace": "", "generation": 44, "fitness": 0.13519280903217532, "feedback": "The algorithm EAMSSADynamicInertia got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.13.", "error": "", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.7332437035544983, 0.648199131019208, 0.8748699698920255, 0.28350560984935935, 0.5316162235714299, 0.8899535967305954, 0.43467581219268536, 0.5069497931485043, 0.2966424242819866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10433847436318133, 0.11260941582701012, 0.05006460841847438, 0.04485589947284985, 0.02874824839129453, 0.03323759153847605, 0.07383712075391191, 0.08263726334955135, 0.08910915486847171, 0.06038863696107166, 0.0775677494329784, 0.06455074836898345, 0.061700611882285705, 0.06683403211722339, 0.052988983152363445, 0.06851202513070076, 0.09801451321848309, 0.0867529051182826, 0.13785269916851817, 0.3467485920325325, 0.11438447968882048, 0.1715443094810185, 0.06350652099731946, 0.1030727595877231, 0.13244350351515, 0.07662056553248586, 0.13141904638715218, 0.21553280462567392, 0.19464803278414178, 9.999999999998899e-05, 0.1139295827995267, 0.06480670453690385, 0.10158815236839613, 0.1890270574444699, 0.14809923518473478, 0.03441221236683323, 0.10436707011733137, 0.08705101302851725, 0.0552463295888328, 0.2770225055789267, 0.1453666181295955, 0.08396626617657132, 0.09764076897226837, 0.07939404545468509, 0.236439312681207, 0.1201532753528669, 0.13300266516479953, 9.999999999998899e-05, 0.07356995958618351, 0.13318716794652463, 9.999999999998899e-05, 0.18082303203937422, 0.21093850012792648, 0.13213786157276242, 0.14706482175940294, 0.1377704943632212, 0.13650795892387646, 0.2358282875982154, 0.1715969818605656, 0.14449273121211537, 0.13040800037639544, 0.11958911013723428, 0.13294212034755182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045233951847705844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04796725752837028, 0.04615089205608014, 0.10938117599903852, 0.0670181441085066, 0.001369849799197409, 0.016211943926793593, 0.10474459204101205, 0.017452396864211406, 0.07949466642389669, 0.17072069293549974, 9.999999999998899e-05, 9.999999999998899e-05, 0.21156632898175032, 9.999999999998899e-05, 0.16495294886804235, 9.999999999998899e-05, 0.21283186884126282, 0.1057093592676801, 0.11477187348435214, 0.06419381173785932, 0.0021707734878098073, 0.05027952640773348, 0.03862232388965059, 0.13506139236950931, 0.07423995892844237, 0.14835089420907988, 0.03510045328466471, 0.40652068800594965, 0.40966580982044576, 0.3428822809918718, 0.4294047469651249, 0.3738542009087128, 0.3257878601289018, 0.4208528137975345, 0.3544338868390715, 0.35124892961063114, 0.07111372781345415, 0.10466691070067335, 0.0375940759790836, 0.061045604308991086, 0.08818652633554647, 0.10778135188543347, 0.10746616241092688, 0.05353853953435572, 0.07241177113669073, 0.14682025858356806, 0.12180637318575904, 0.13837676475259741, 0.10244542415418778, 0.14291106389196762, 0.1401259229380879, 0.174646812073042, 0.06953969771580559, 0.07060245079794836, 0.12207184071165045, 0.10625207467080877, 0.11417514326165878, 0.2193159902275379, 0.14833848230262103, 0.13571188875534101, 0.21059085214973305, 0.08576971286355561, 0.10785003497236334, 0.054878761123899666, 0.04586832237956229, 0.03498137169005422, 0.152612680067441, 0.14627055887215734, 0.09047313397471812, 0.09050057592815486, 0.008393109671965937, 0.02634692623229562, 0.17924888625084, 0.2558759135824126, 0.212521687097187, 0.16969486571124182, 0.1096124879688698, 0.19235961629847964, 0.13500896887079217, 0.16348595667670485, 0.20809832326401645, 0.16142858889727651, 0.15572304026940997, 0.176172494536313, 0.15945066108306727, 0.18311074450884046, 0.15551873260827542, 0.16043947230446554, 0.1822701762729957, 0.1903029324690777, 0.12225748874427977, 0.1315344683908154, 0.06957664088103788, 0.1737346467645331, 0.06597342916819637, 0.06568307875888879, 0.10831689918560039, 0.11494278325322338, 0.16119251636873866, 0.41367920147134785, 0.09102434078378552, 0.08175801939299276, 0.20645100692136686, 0.17324490016004634, 0.04413355716209644, 0.12118046813072703, 0.15371632423281678, 0.1161941363851191, 0.1877357467689047, 0.1705247756950823, 0.1785725663609563, 0.2033284075388847, 0.17988651094640173, 0.1771732949950201, 0.19665666121629743, 0.1865920994578193, 0.18400552689323324, 0.057944198226488886, 0.08376783578292946, 0.032507559010804155, 0.05051455859109777, 0.017650585197208635, 0.06238284121661186, 0.0597326668607866, 0.062265364784038546, 0.05081150096715514]}, "mutation_prompt": null}
{"id": "2d5ad3b6-0067-49c3-bbf5-9b2ff4c248bb", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "57a1db6b-5cd6-4b93-8881-a4d7a1426b9a", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "6c47719d-bf88-4cad-8647-59c2e5d5d519", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "834628d7-6b89-4681-a38a-dc66fdb69106", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "29f8670b-f8f0-4238-8a60-9ab3f186685d", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "22a01128-9bfc-44d4-a743-4b9094c8b3ad", "solution": "import numpy as np\n\nclass AGMSS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10  # Adjusted base population size\n        self.scale_adjustment_factor = 0.85  # Adjusted scale factor\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)  # Adjusted initial scale\n        self.success_threshold = 0.3  # Adjusted success threshold\n\n    def __call__(self, func):\n        def compute_gradient(solution, func_val):\n            gradient = np.zeros(self.dim)\n            epsilon = 1e-5\n            for j in range(self.dim):\n                perturb = np.zeros(self.dim)\n                perturb[j] = epsilon\n                gradient[j] = (func(solution + perturb) - func_val) / epsilon\n            return gradient\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (self.population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += self.population_size\n            success_count = 0\n\n            for i in range(self.population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            gradient = compute_gradient(best_solution, best_value)\n            best_solution -= 0.01 * gradient  # Learning rate for gradient\n\n            success_rate = success_count / self.population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                self.population_size = min(int(self.population_size * 1.2), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                self.population_size = max(int(self.population_size * 0.8), 1)\n\n            if evaluations + self.population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "AGMSS", "description": "Adaptive Gradient-Guided Multi-Scale Search (AGMSS) integrates gradient-based adjustments for efficient exploration and convergence.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: OverflowError('Range exceeds valid bounds').", "error": "OverflowError('Range exceeds valid bounds')", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {}, "mutation_prompt": null}
{"id": "4e3026e5-a1b3-4a8b-9a43-db9ade6aefc9", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "fa30fa27-289c-4b4a-8155-5f7be1970d77", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "b7aaa8ea-81e5-40db-b7d4-6fff12069291", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "f8f28627-d125-44ae-8952-f4f2cb41fda1", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "5c810cff-ddc1-4161-b0e0-ec6bbcdbebdd", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "63b2180e-cb81-4a18-9290-918c616e376e", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "467c9167-9413-426c-8260-24ab18d8f87d", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "3ea479ba-df54-473e-bef2-734ff3c3a8d3", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "556cbc6d-9165-4c51-9423-59fe23e2bb41", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "e6cae38e-a754-4d94-bf79-17c86857465d", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 10  # Adjusted population size\n        self.scale_adjustment_factor = 0.85  # Adjusted scale factor\n        self.initial_scale = 0.2 * (self.upper_bound - self.lower_bound)  # Increased initial scale\n        self.success_threshold = 0.3  # Adjusted success threshold\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = np.sum(values < best_value)  # Simplified success count\n            if success_count > 0:\n                best_value = np.min(values)\n                best_solution = population[np.argmin(values)]\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.2), self.budget - evaluations)  # Adjusted increase rate\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.8), 1)  # Adjusted decrease rate\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                min_value_idx = np.argmin(values)\n                if values[min_value_idx] < best_value:\n                    best_value = values[min_value_idx]\n                    best_solution = population[min_value_idx]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Modified EAMSSA with enhanced scale adaptation and population strategy to improve convergence efficiency.", "configspace": "", "generation": 60, "fitness": 0.15994924656414053, "feedback": "The algorithm EAMSSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9814969451636744, 0.4638742083099764, 0.5719096553716524, 0.9794790765494246, 0.9594946411164584, 0.9883261947452433, 0.972798189218228, 0.600771188829235, 0.9828289497611248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051878088336407946, 0.06638789606001538, 0.020222175301870426, 0.09085628253827127, 0.027673748317034508, 0.045709336322507954, 0.02939824483958997, 0.08502900671564384, 0.05690607849768581, 0.05186404189932836, 0.07807468172877574, 0.045585535711450964, 0.04049271289197731, 0.06552502783708147, 0.023708178789174417, 0.04489751101644179, 0.06655077127270637, 0.036568221355617436, 0.13222675953373997, 0.3173172283066812, 0.18536081421524842, 0.13225403990493922, 0.07695010216881815, 0.07917746853398677, 0.9915674543837733, 0.1139151002105222, 0.1368559284564912, 0.2041373800800239, 0.14233570453243227, 0.41528159650621266, 0.12117485296632935, 0.18420712965999742, 0.11605516506586877, 0.15010581743716034, 0.11524244164090247, 0.062151697312623266, 0.09003257636677031, 0.0950698389744582, 0.06174060932115555, 0.17197023975145853, 0.1443207264734827, 0.17577599426797408, 0.1182160155847165, 0.12552492614831046, 0.14552915514446907, 0.16006458432562598, 0.1316466814102779, 0.14358571426698186, 0.12942161034519017, 0.26749864013599245, 0.1379331727696601, 0.14139508034592618, 0.1597083399171415, 0.13174974198773193, 0.16787327808454067, 0.14279871781030928, 0.16940398774401566, 0.11955386108071031, 0.19079919153635705, 0.1310928591320868, 0.13948577630813574, 0.25757555840490776, 0.1546714644120457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05643852638354452, 0.02945103354217915, 0.08293548793993921, 0.06901564435149266, 0.018827763358964522, 0.004705439275149548, 0.08663953585407347, 0.03638251122887992, 0.0964170822069016, 0.21529214394838214, 0.09588713790640335, 0.08095175667595433, 0.031493859459511775, 0.09440342583246841, 0.2083889867495028, 0.23399449364597413, 0.18315126613903931, 0.09784807252280447, 0.025482170914304825, 0.10352076940271093, 0.1934574875755155, 0.02736780971108399, 0.15833723733903737, 0.11991749270928809, 0.10286548265513684, 0.09990981559289447, 0.09206100689113172, 0.44554397236379406, 0.441599642438153, 0.3773149859098254, 0.44297066080572534, 0.41658177650206885, 0.3892575503479284, 0.3476549507558555, 0.41422455528293634, 0.4119312436880055, 0.0395397065628158, 0.09481994208431699, 0.10793838022752533, 0.06933700918670438, 0.09667157078577837, 0.1041658961115487, 0.07103310835223275, 0.033161510976322806, 0.12152399703537065, 0.12548629307307457, 0.10044121211214752, 0.12728673451473738, 0.11582397144715029, 0.18796908242687882, 0.08976147051142602, 0.13537218468573375, 0.10661538791964886, 0.11003796870586247, 0.1331852450638955, 0.11263363213640354, 0.12267065670351385, 0.27011548653462536, 0.17691394848148156, 0.12430729658086626, 0.17906156382546856, 0.156065401349344, 0.11408241628920135, 0.0916142202182555, 0.12359523641381931, 0.10366278205586055, 0.07183840861138668, 0.13092525999013283, 0.06557307661661527, 0.1652870097076964, 0.08730359605368088, 0.021434440158273893, 0.18291323932898718, 0.16040216269161478, 0.2088092838479476, 0.14773753909516363, 0.20803635162176626, 0.1781825324318621, 0.1615460264081232, 0.1866192477081624, 0.18706735974721755, 0.1698449426850177, 0.20831178481161572, 0.16808663495650322, 0.19747601718281893, 0.17651642545384294, 0.19141120218683572, 0.17389698194222347, 0.15789980914057433, 0.17175922988400794, 0.18993418202894474, 0.12878628374401557, 0.07143439268424556, 0.1741085096950734, 0.10824361125184712, 0.14486737756395962, 0.10887889987827692, 0.12352242049580686, 0.16908452963766762, 0.4345421620639638, 0.11092992162912796, 0.08338281183297536, 0.17021230957967037, 0.19521615300247352, 0.1910230202030866, 0.1134562125073586, 0.059333542217606006, 0.15506380594553648, 0.1509165746374188, 0.2366355669343827, 0.1601018903603184, 0.17618908779794584, 0.18870498203368324, 0.19019173094635133, 0.1931843510177481, 0.15394905304797157, 0.1609489361238735, 0.06616518697100782, 0.06417664795057387, 0.01685818109034154, 0.04690572890654898, 0.07965267815758248, 0.015692254310967324, 0.06959361240491002, 0.03367940549241344, 0.04661497970524975]}, "mutation_prompt": null}
{"id": "e5abbddc-610e-4eae-80ef-ed10da28d12e", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "428ca412-0c98-4a2e-bba8-22e3e0d43bbf", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "a2fa5bce-14e6-469b-baae-aada8a6054de", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "a1fe1152-a892-49ae-8124-44cf3c84ca86", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "ffebddd5-528f-488f-940b-e14547de825f", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "f924cccf-b288-4771-9662-305333ed37c5", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "595d038c-f277-429b-b60f-b47f83423a55", "solution": "import numpy as np\n\nclass EAMSSA_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 15  # Increased initial population size\n        self.scale_adjustment_factor = 0.85  # Adjusted scale factor\n        self.initial_scale = 0.1 * (self.upper_bound - self.lower_bound)  # Refined initial scale\n        self.success_threshold = 0.3  # Adjusted success threshold\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            # Generate new population within adaptive scale boundaries\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            # Evaluate the population\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            # Adaptive exploration-exploitation adjustment\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.2), self.budget - evaluations)  # Slightly increase pop size\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.8), 1)  # Slightly decrease pop size\n\n            # Ensure evaluations do not exceed budget\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA_Refined", "description": "Refined version of EAMSSA with adaptive scale enhancement and dynamic exploration-exploitation balance for improved optimization efficiency.", "configspace": "", "generation": 67, "fitness": 0.14151797865020208, "feedback": "The algorithm EAMSSA_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9747325491971762, 0.9397774317454914, 0.9758891344646918, 0.9587929844123634, 0.9697995500858937, 0.5990346033096369, 0.7780461979516371, 0.9858652728591021, 0.978387096022046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12178078877142506, 9.999999999998899e-05, 0.007313889887209601, 0.059463163766045324, 9.999999999998899e-05, 0.016338054636031885, 0.030183346888322582, 0.003443953670970612, 0.018244157322521604, 0.0992950968760391, 9.999999999998899e-05, 0.01311973532559263, 0.04688531436582122, 9.999999999998899e-05, 0.04740484024599845, 9.999999999998899e-05, 9.999999999998899e-05, 0.00026589546626487603, 0.07028958380973294, 0.03856037337580909, 0.04191095367290143, 0.04943911072911511, 0.03932816872830425, 0.06276535589539212, 0.05150838689727988, 0.05342618640481345, 0.054807974713666385, 0.08961043069162422, 0.026736452149896284, 9.999999999998899e-05, 0.20802889354435194, 0.11770292875440269, 0.01980943594838458, 0.25113853027639044, 0.021794482768133783, 0.10931587095367357, 0.14225215582575035, 0.07084603413624191, 0.04199976060267674, 0.18155790538191263, 0.05013472213768089, 0.051237180727397025, 0.09661013693059117, 0.03319316596415156, 0.011183318392289032, 0.13182656375145707, 0.006691348986428203, 0.11236380671981039, 9.999999999998899e-05, 0.1450240327806267, 0.15726110242226954, 0.13173026990902215, 0.16685133050652678, 0.13234900623192647, 0.18123850264215702, 0.13223629419559768, 0.13696168728619473, 0.5924943993051748, 0.2617655799207771, 0.14294571933708777, 0.15160337161550597, 0.25622574361161465, 0.13617780284039893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062001218492587995, 0.05834296367666125, 0.14134078735133093, 0.06713173373190151, 0.002686330653778213, 0.010328948350557754, 0.12467877879214084, 0.022953487707447318, 0.08785876123514569, 0.25377204442608814, 0.05666275017408118, 0.18852290711075892, 0.09769923655804413, 0.17572654436537027, 0.1074404119201785, 0.12997797227961005, 0.15522307524374956, 0.10285910332109527, 0.18472688172905716, 0.2477921362785116, 0.05271847162878418, 0.1148903691348161, 0.2701385148745534, 0.057286486178184326, 0.13322061797524298, 0.1892335739490274, 0.08592247715782142, 0.4218378244461496, 0.42802679624675033, 0.42959918273803066, 0.4141690207781764, 0.33043524488566123, 0.2679211043137695, 0.45961154947217364, 0.41648289671569416, 0.4217031401575958, 0.05055976360275838, 0.04352496684439777, 9.999999999998899e-05, 9.999999999998899e-05, 0.05362612858037863, 0.008349828095683187, 0.01311961873827805, 0.08776591680612655, 9.999999999998899e-05, 0.13881559961905476, 0.10230846775130553, 0.18865615028129923, 0.10638295833003375, 0.09419688229527001, 0.17236185532041037, 0.15059104649589994, 0.13924328735790914, 0.17370158944094327, 0.11707578851894362, 0.08347994039632445, 0.11376147253464786, 0.13912094235302197, 0.07178336775108363, 0.11163806406625676, 0.15614517623864432, 0.08278916618604415, 0.09296254161367268, 0.06509128317244506, 0.03222404962652803, 0.035258805917806946, 0.13608122588141902, 0.019793084903607427, 0.07869276795532953, 0.06980234600675761, 0.027072781414999025, 0.02990208383684989, 0.17261035022328253, 0.09768344729094536, 0.1268120869366599, 0.1650771134788116, 0.13341988748224354, 0.15300620420943212, 0.28271809856332986, 0.11742152184588173, 0.16241950083353163, 0.16819727858722067, 0.15948428251595437, 0.19227640915888744, 0.1564362233371236, 0.18902263340568815, 0.14112519608631247, 0.16348116767129084, 0.14901599626447692, 0.18694780408346146, 0.12359672184688131, 0.1374608087803737, 0.06939750242936482, 0.1738408547879411, 0.09754544990056024, 0.061912096744989875, 0.10876702062003951, 0.12088680132365426, 0.16486344118184493, 0.28119383395101405, 0.11220507292049786, 0.08326331098815265, 0.035515435771134585, 0.17290548386496374, 0.029133065468000097, 0.16450425782093347, 0.05925700100048048, 0.1545531080118231, 0.17445870325735835, 0.16638276378420158, 0.19298377359881558, 0.1643079247698166, 0.21795111909714848, 0.17568950737297273, 0.22982426653383636, 0.23284718572689667, 0.2516213409293716, 0.060069004769269796, 0.05337796472012046, 0.023556514650797555, 0.0430783218503058, 0.0020494986832869655, 0.03230776261283175, 0.05244686585439362, 0.03752883522409811, 0.04474615489086631]}, "mutation_prompt": null}
{"id": "5f2af045-0538-4d6a-b469-7bf86f98e321", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "28cb956e-fc8b-4875-b73d-f18ff7f8f07b", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "cb5056fb-9940-4cac-98b4-fe926c5f4be4", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "9d6d1634-a005-4dcc-a6ec-21d161334e09", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "92279a77-089f-495a-994f-12893a9814c3", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "02321df5-cd14-459f-a819-65c4831b0fec", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "acf03fa9-04c3-4c6b-936d-af08b9a8a694", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "c380aa6a-f5ad-43cc-be60-1c73da149ce7", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "b2cf54ce-7da1-49e7-99b4-6ce396506b7f", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "d0e2f218-b7af-4f1a-8038-3f0b8766bf2f", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "b99f6aab-0bea-41f4-a958-374f79686a73", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "b7bb3ca7-32cd-40dd-91d9-81f8d8f131d4", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "6aa636cb-6f44-4773-8d10-06159a56b1f1", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "96ab5fed-b78e-4294-8b2d-d1f276e53303", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "05fe03f1-9235-42b6-958e-6c5f1fd818a5", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "c82b60a0-80f4-453d-82ed-28665667edcc", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "8fccc5e9-9a5e-426e-9209-244063a7711a", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "5310aaf4-4232-49ff-a182-bdc5383e6595", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "401a5a4b-8c44-4fea-80e6-a18621dd9234", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "97816933-47d2-49e4-be80-e6cf87d4f5ff", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "7f771af3-73b1-4b22-8394-7384e35b31c1", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "3f6d7ea2-4320-4c62-8585-0de5acccac19", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "d1e2654c-3ed9-49c5-8e2f-5b045924f6fd", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "177df6f3-eb2f-496e-bb70-965f9726ee22", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "70eb412c-1c96-4050-9625-ad109d236837", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "9a3dedad-64f2-4aeb-9693-0dbfebcbf1ba", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "19207bbb-96a6-422b-b450-e5b877069ba3", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "0284d414-f740-405b-8122-816ce0647362", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "fc7a3aa0-5c2a-445d-b88c-d82f71c6a00e", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "d8c37c78-9e79-4ffc-91fa-76953a177d04", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "8bd19fc2-d7dc-48bb-ad40-4e51f4b0d4b1", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
{"id": "cd67d105-009e-401f-bbe8-8c875b38e2c0", "solution": "import numpy as np\n\nclass EAMSSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.base_population_size = 12\n        self.scale_adjustment_factor = 0.9\n        self.initial_scale = 0.15 * (self.upper_bound - self.lower_bound)\n        self.success_threshold = 0.25\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_value = func(best_solution)\n        evaluations = 1\n        scale = self.initial_scale\n        population_size = self.base_population_size\n\n        while evaluations < self.budget:\n            population = np.random.uniform(\n                best_solution - scale, best_solution + scale, (population_size, self.dim)\n            )\n            population = np.clip(population, self.lower_bound, self.upper_bound)\n\n            values = np.apply_along_axis(func, 1, population)\n            evaluations += population_size\n\n            success_count = 0\n            for i in range(population_size):\n                if values[i] < best_value:\n                    best_value = values[i]\n                    best_solution = population[i]\n                    success_count += 1\n\n            success_rate = success_count / population_size\n            if success_rate > self.success_threshold:\n                scale *= 1.0 / self.scale_adjustment_factor\n                population_size = min(int(population_size * 1.1), self.budget - evaluations)\n            else:\n                scale *= self.scale_adjustment_factor\n                population_size = max(int(population_size * 0.9), 1)\n\n            if evaluations + population_size > self.budget:\n                remaining_evals = self.budget - evaluations\n                if remaining_evals <= 0:\n                    break\n                population = np.random.uniform(\n                    best_solution - scale, best_solution + scale, (remaining_evals, self.dim)\n                )\n                population = np.clip(population, self.lower_bound, self.upper_bound)\n                values = np.apply_along_axis(func, 1, population)\n                evaluations += remaining_evals\n                for i in range(remaining_evals):\n                    if values[i] < best_value:\n                        best_value = values[i]\n                        best_solution = population[i]\n\n        return best_solution, best_value", "name": "EAMSSA", "description": "Enhanced Adaptive Multi-Scale Search Algorithm (EAMSSA) with dynamic population size and adaptive scale modulation for improved convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a287b694-c705-43dd-96db-25df39d299d5", "metadata": {"aucs": [0.9789596189341992, 0.9858473428801156, 0.9846330799866188, 0.9691065741770107, 0.9838440194184911, 0.9846924512683243, 0.9666348415032134, 0.9841609056589484, 0.9834719210211624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05575233237933408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1389726221627956, 0.05502945919622215, 0.052203811528977906, 0.07371676283753115, 0.04198350796375816, 0.05681340686016301, 0.053403654489914465, 0.07410158483711493, 0.04314793392462524, 0.09914784041493063, 0.12021045824304788, 0.013173797738470605, 0.08520226409005194, 0.07174423567440513, 0.04552899116667941, 0.08163785301744864, 0.0740491334654555, 0.07204237236074618, 0.13955910606256583, 0.07059682138110634, 0.11390698823321888, 0.0968769588867201, 0.07181456976740008, 0.07340907137106023, 0.08452361341656056, 0.09981116283293434, 0.07140320603258787, 0.2796705830095667, 0.12494507837269087, 0.01531268223273674, 0.29818233376924785, 0.06887488276287002, 0.1342757053646173, 0.25253789861108367, 0.28602615191618797, 0.08813739861828529, 0.2113661748627893, 0.09412715056716703, 0.07848798496470899, 0.17510404758487197, 0.0669473018244775, 0.16177591390669077, 0.12224249552703148, 0.08021091308341843, 0.1409150482930248, 0.14094285789307637, 0.17221173447986127, 0.1316093166473189, 0.15428023557452797, 0.13400601696972447, 0.004582009646804552, 0.16437999860062302, 0.14150582304791282, 0.13337051214698947, 0.13530158646530288, 0.17233717090241096, 0.06074448210041572, 0.13301581037094257, 0.2019201275319591, 0.16667376911088738, 0.13874183959169695, 0.1364423452838628, 0.16773439535529455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16765492335384702, 0.04571486069641961, 0.11300591006405125, 0.06329046488768741, 9.999999999998899e-05, 0.01630392371596412, 0.12688244232874746, 0.01206787705653134, 0.0714862812423731, 0.2548834610626701, 0.04716312012310031, 0.2010433039233268, 0.13259018345981388, 0.18255491339635466, 0.09762125782464393, 0.21999297864802592, 0.11449137849289981, 0.10631546009584092, 0.12412136397984286, 0.13683054950008045, 0.06806934140048926, 0.05305357904357477, 0.20123638481868322, 0.07939069671584131, 0.08721244093275327, 0.23377162611470248, 0.12777880678124587, 0.453559341889727, 0.41886234596609684, 0.4500208353407599, 0.4232859761403227, 0.4491729809429874, 0.48704831632745504, 0.4266137568947651, 0.5666801613952044, 0.4800047059421084, 0.07192085344250321, 0.020752656796558022, 9.999999999998899e-05, 0.06360668417077375, 0.06295778399923513, 0.09538574792618781, 0.09884555797972094, 0.06764070923763787, 0.060080299581267926, 0.1530596176958412, 0.1139022528652206, 0.14936454733241067, 0.22881618904822232, 0.1283520861702775, 0.1625272698440613, 0.14541121266633017, 0.19672386374267103, 0.12310148794443854, 0.13122794834227858, 0.10240345120673777, 0.11401560296194779, 0.213206692047058, 0.15294453026904598, 0.12207927965536014, 0.17876687202685593, 0.12612318678151258, 0.11452729128368522, 0.0839868779217855, 0.047420185917748325, 0.03328239925550225, 0.16941758419101027, 0.04016431291140854, 0.11243349669114466, 0.13421078242145756, 0.06107749660920403, 0.02640659022482672, 0.1585012677592258, 0.15663687552490413, 0.12797169444778922, 0.15092393512935287, 0.1521858375838372, 0.19390573387664034, 0.24454366804014915, 0.181696681342, 0.20529291492473178, 0.17264592089902164, 0.1668958018148602, 0.15709357601424967, 0.17245515018360857, 0.1892869116346102, 0.16420138162624354, 0.17187072734983977, 0.14548614362824608, 0.16731048817546457, 0.18993347980827846, 0.1364276314804974, 0.07150015912918117, 0.17410230262917958, 0.0660493753896011, 0.08080309291642684, 0.1089100763459091, 0.11541298439064307, 0.16726728806439517, 0.2784230188149375, 0.1131869333122657, 0.08336675834374474, 0.21369640335706663, 0.21379725423058293, 0.029528257145962744, 0.1668969278600192, 0.16402422415152162, 0.16378405497465043, 0.23402953974382545, 0.23735835152453344, 0.1912389645343725, 0.21655779266292263, 0.22855633024509647, 0.18761245049095265, 0.21301385613323887, 0.22278789644215347, 0.16452401972194353, 0.05819802226370285, 0.12286020695211042, 0.029455636918486516, 0.04883255699295186, 0.047934668751240306, 0.04114297089121188, 0.09939223008285247, 0.06383215204603365, 0.026817350276663654]}, "mutation_prompt": null}
