{"id": "083a77c1-0998-4685-b556-5bae5b72323b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                else:\n                    # Adjust F and CR if no improvement\n                    self.F = max(0.1, self.F * 0.99)\n                    self.CR = min(0.9, self.CR * 1.01)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting crossover and mutation rate to efficiently explore and exploit the solution space.", "configspace": "", "generation": 0, "fitness": 0.17609284086049778, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.11.", "error": "", "parent_id": null, "metadata": {"aucs": [0.2695098658153171, 0.3660769734274555, 0.3154486914164266, 0.26771982550947004, 0.30748912178573906, 0.28361551865088985, 0.39138038577484024, 0.4394920548080965, 0.35526282403526555, 0.053330440600560136, 0.0354303969322598, 0.09944503659075377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050854740562563006, 0.04394433429811628, 9.999999999998899e-05, 0.12958384374450693, 0.18028174863520396, 0.33835628844333465, 0.11572786020615, 0.17642575735366006, 0.17506295128446347, 0.1761253531698661, 0.17922994116241064, 0.1743217265409659, 0.1573616766036714, 0.12067367156898767, 0.1131920228076162, 0.09117941182019407, 0.11393876557790261, 0.08928323631624446, 0.1734187690472183, 0.2532402317946788, 0.18149737327808657, 0.22246844581041647, 0.185248754666404, 0.13215495729818016, 0.5613362360420555, 0.15737737788746564, 0.26636181865207353, 0.2352950184010114, 0.1720810087062009, 0.20906236006178236, 0.2643957474992883, 0.12857383291945002, 0.06398168770447954, 0.07995259312182701, 0.05913095836062565, 0.06170421357432876, 0.05399347348293537, 0.1292539045813681, 0.06014888697297971, 0.12106188506151028, 0.1576631779242762, 0.1794170885957892, 0.22854941917058635, 0.24393000650329077, 0.2136147345615642, 0.2100713627775248, 0.1722853494152956, 0.21813620089914865, 0.16485156685985025, 0.09427976329810595, 0.21725336394219152, 0.11431675343240622, 0.13845770927498757, 0.054346767806149776, 0.10456659015121694, 0.15296069364932774, 0.2207217841293434, 0.07895148256031648, 0.25985783178980626, 0.18120363722487276, 0.12969561204103086, 0.05564282952267963, 0.04289500915487876, 0.19397684568326257, 0.1250493424933189, 0.1222481044864222, 0.1993038523081787, 9.999999999998899e-05, 9.999999999998899e-05, 0.002903892487217452, 0.047556218659133065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12755628555829313, 0.07940167099421724, 0.1795740053588719, 0.04621616397889616, 0.05624053282664232, 0.03913273622026647, 0.1414271728297819, 0.17698752500817172, 0.1176852770893283, 0.0804906586105455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061473808668130014, 0.19522224541624456, 0.012239657847443963, 0.03381351946096678, 0.23598604882446594, 0.10425635664446653, 0.01826912355413901, 0.11112749108327247, 0.0944228272202865, 0.11197766277378285, 0.22778351062698865, 0.03723914029561004, 0.15801428821713648, 0.09172481966230228, 0.30520508519073053, 0.41705677004525876, 0.4435125874571655, 0.2523019684671767, 0.3687228007622062, 0.3765894392389597, 0.31800117071535394, 0.384649156381657, 0.35985799243897476, 0.13529219362203915, 0.14146501415201196, 0.09871370804010404, 0.12322794173373641, 0.08863913636345899, 0.1781121668565836, 0.07330624188319312, 0.11861834331161047, 0.11289929429846268, 0.17911169378138225, 0.23330483565482196, 0.22093055041318244, 0.34821403268708206, 0.21944273610844, 0.19182468789465856, 0.20618986882141055, 0.2988814702327772, 0.2099040392062268, 0.2205207009190856, 0.25780845672368025, 0.3696775829821147, 0.36692201706853567, 0.3468475830724971, 0.3259051540629101, 0.2641697772120588, 0.2897426161370087, 0.23500121011487274, 0.24895734955021276, 0.18558124286986566, 0.19812230412808696, 0.18877599126104028, 0.19449468106770107, 0.1768959745501143, 0.204128126152046, 0.21818321960991616, 0.22910957883899297, 0.2675571159541551, 0.22954379306011163, 0.2724486252314873, 0.23249393660734963, 0.19835134658963738, 0.2305057268050128, 0.22615842254087504, 0.2679840106673711, 0.22958492830748123, 0.246937725313357, 0.21274658114213074, 0.18404415543796548, 0.18695941017463402, 0.224814442977891, 0.19546002456588885, 0.21023234972958693, 0.19837341153760712, 0.18892260125373672, 0.16992635304299475, 0.16229163548758319, 0.40234919362128174, 0.1694211615311879, 0.16701056001589643, 0.18145709104504226, 0.46363461525850613, 0.5313407523030534, 0.1687631973807947, 0.2988850625954429, 0.19869684308638302, 0.14346761986280476, 0.17981607665034938, 0.20545277630253533, 0.1873403750873205, 0.20306215274769512, 0.22804924278354877, 0.2727196602862627, 0.18297770594950835, 0.18031416408853984, 0.1769259069749145, 0.18565585221801018, 0.18405724142146185, 0.18833092452815703, 0.18287125635081292, 0.17719922946613353, 0.18995988035487588, 0.09821853167265526, 0.07393508103368607, 0.10297031301604542, 0.08045974956208413, 0.09478376122539645, 0.11908200399563995, 0.12812963878885353, 0.0989466611108819, 0.08386073510577807]}, "mutation_prompt": null}
{"id": "8f5b6e1b-cc32-443d-bb57-b69a70861c38", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                else:\n                    # Adjust F and CR if no improvement\n                    self.F = max(0.1, self.F * 0.99)\n                    self.CR = min(0.9, self.CR * 1.01)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting crossover and mutation rate to efficiently explore and exploit the solution space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "083a77c1-0998-4685-b556-5bae5b72323b", "metadata": {"aucs": [0.2695098658153171, 0.3660769734274555, 0.3154486914164266, 0.26771982550947004, 0.30748912178573906, 0.28361551865088985, 0.39138038577484024, 0.4394920548080965, 0.35526282403526555, 0.053330440600560136, 0.0354303969322598, 0.09944503659075377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050854740562563006, 0.04394433429811628, 9.999999999998899e-05, 0.12958384374450693, 0.18028174863520396, 0.33835628844333465, 0.11572786020615, 0.17642575735366006, 0.17506295128446347, 0.1761253531698661, 0.17922994116241064, 0.1743217265409659, 0.1573616766036714, 0.12067367156898767, 0.1131920228076162, 0.09117941182019407, 0.11393876557790261, 0.08928323631624446, 0.1734187690472183, 0.2532402317946788, 0.18149737327808657, 0.22246844581041647, 0.185248754666404, 0.13215495729818016, 0.5613362360420555, 0.15737737788746564, 0.26636181865207353, 0.2352950184010114, 0.1720810087062009, 0.20906236006178236, 0.2643957474992883, 0.12857383291945002, 0.06398168770447954, 0.07995259312182701, 0.05913095836062565, 0.06170421357432876, 0.05399347348293537, 0.1292539045813681, 0.06014888697297971, 0.12106188506151028, 0.1576631779242762, 0.1794170885957892, 0.22854941917058635, 0.24393000650329077, 0.2136147345615642, 0.2100713627775248, 0.1722853494152956, 0.21813620089914865, 0.16485156685985025, 0.09427976329810595, 0.21725336394219152, 0.11431675343240622, 0.13845770927498757, 0.054346767806149776, 0.10456659015121694, 0.15296069364932774, 0.2207217841293434, 0.07895148256031648, 0.25985783178980626, 0.18120363722487276, 0.12969561204103086, 0.05564282952267963, 0.04289500915487876, 0.19397684568326257, 0.1250493424933189, 0.1222481044864222, 0.1993038523081787, 9.999999999998899e-05, 9.999999999998899e-05, 0.002903892487217452, 0.047556218659133065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12755628555829313, 0.07940167099421724, 0.1795740053588719, 0.04621616397889616, 0.05624053282664232, 0.03913273622026647, 0.1414271728297819, 0.17698752500817172, 0.1176852770893283, 0.0804906586105455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061473808668130014, 0.19522224541624456, 0.012239657847443963, 0.03381351946096678, 0.23598604882446594, 0.10425635664446653, 0.01826912355413901, 0.11112749108327247, 0.0944228272202865, 0.11197766277378285, 0.22778351062698865, 0.03723914029561004, 0.15801428821713648, 0.09172481966230228, 0.30520508519073053, 0.41705677004525876, 0.4435125874571655, 0.2523019684671767, 0.3687228007622062, 0.3765894392389597, 0.31800117071535394, 0.384649156381657, 0.35985799243897476, 0.13529219362203915, 0.14146501415201196, 0.09871370804010404, 0.12322794173373641, 0.08863913636345899, 0.1781121668565836, 0.07330624188319312, 0.11861834331161047, 0.11289929429846268, 0.17911169378138225, 0.23330483565482196, 0.22093055041318244, 0.34821403268708206, 0.21944273610844, 0.19182468789465856, 0.20618986882141055, 0.2988814702327772, 0.2099040392062268, 0.2205207009190856, 0.25780845672368025, 0.3696775829821147, 0.36692201706853567, 0.3468475830724971, 0.3259051540629101, 0.2641697772120588, 0.2897426161370087, 0.23500121011487274, 0.24895734955021276, 0.18558124286986566, 0.19812230412808696, 0.18877599126104028, 0.19449468106770107, 0.1768959745501143, 0.204128126152046, 0.21818321960991616, 0.22910957883899297, 0.2675571159541551, 0.22954379306011163, 0.2724486252314873, 0.23249393660734963, 0.19835134658963738, 0.2305057268050128, 0.22615842254087504, 0.2679840106673711, 0.22958492830748123, 0.246937725313357, 0.21274658114213074, 0.18404415543796548, 0.18695941017463402, 0.224814442977891, 0.19546002456588885, 0.21023234972958693, 0.19837341153760712, 0.18892260125373672, 0.16992635304299475, 0.16229163548758319, 0.40234919362128174, 0.1694211615311879, 0.16701056001589643, 0.18145709104504226, 0.46363461525850613, 0.5313407523030534, 0.1687631973807947, 0.2988850625954429, 0.19869684308638302, 0.14346761986280476, 0.17981607665034938, 0.20545277630253533, 0.1873403750873205, 0.20306215274769512, 0.22804924278354877, 0.2727196602862627, 0.18297770594950835, 0.18031416408853984, 0.1769259069749145, 0.18565585221801018, 0.18405724142146185, 0.18833092452815703, 0.18287125635081292, 0.17719922946613353, 0.18995988035487588, 0.09821853167265526, 0.07393508103368607, 0.10297031301604542, 0.08045974956208413, 0.09478376122539645, 0.11908200399563995, 0.12812963878885353, 0.0989466611108819, 0.08386073510577807]}, "mutation_prompt": null}
{"id": "38ca8cf5-595d-4f2f-bf4a-b96ce3e873c7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                else:\n                    # Adjust F and CR if no improvement\n                    self.F = max(0.1, self.F * 0.99)\n                    self.CR = min(0.9, self.CR * 1.01)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting crossover and mutation rate to efficiently explore and exploit the solution space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "083a77c1-0998-4685-b556-5bae5b72323b", "metadata": {"aucs": [0.2695098658153171, 0.3660769734274555, 0.3154486914164266, 0.26771982550947004, 0.30748912178573906, 0.28361551865088985, 0.39138038577484024, 0.4394920548080965, 0.35526282403526555, 0.053330440600560136, 0.0354303969322598, 0.09944503659075377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050854740562563006, 0.04394433429811628, 9.999999999998899e-05, 0.12958384374450693, 0.18028174863520396, 0.33835628844333465, 0.11572786020615, 0.17642575735366006, 0.17506295128446347, 0.1761253531698661, 0.17922994116241064, 0.1743217265409659, 0.1573616766036714, 0.12067367156898767, 0.1131920228076162, 0.09117941182019407, 0.11393876557790261, 0.08928323631624446, 0.1734187690472183, 0.2532402317946788, 0.18149737327808657, 0.22246844581041647, 0.185248754666404, 0.13215495729818016, 0.5613362360420555, 0.15737737788746564, 0.26636181865207353, 0.2352950184010114, 0.1720810087062009, 0.20906236006178236, 0.2643957474992883, 0.12857383291945002, 0.06398168770447954, 0.07995259312182701, 0.05913095836062565, 0.06170421357432876, 0.05399347348293537, 0.1292539045813681, 0.06014888697297971, 0.12106188506151028, 0.1576631779242762, 0.1794170885957892, 0.22854941917058635, 0.24393000650329077, 0.2136147345615642, 0.2100713627775248, 0.1722853494152956, 0.21813620089914865, 0.16485156685985025, 0.09427976329810595, 0.21725336394219152, 0.11431675343240622, 0.13845770927498757, 0.054346767806149776, 0.10456659015121694, 0.15296069364932774, 0.2207217841293434, 0.07895148256031648, 0.25985783178980626, 0.18120363722487276, 0.12969561204103086, 0.05564282952267963, 0.04289500915487876, 0.19397684568326257, 0.1250493424933189, 0.1222481044864222, 0.1993038523081787, 9.999999999998899e-05, 9.999999999998899e-05, 0.002903892487217452, 0.047556218659133065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12755628555829313, 0.07940167099421724, 0.1795740053588719, 0.04621616397889616, 0.05624053282664232, 0.03913273622026647, 0.1414271728297819, 0.17698752500817172, 0.1176852770893283, 0.0804906586105455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061473808668130014, 0.19522224541624456, 0.012239657847443963, 0.03381351946096678, 0.23598604882446594, 0.10425635664446653, 0.01826912355413901, 0.11112749108327247, 0.0944228272202865, 0.11197766277378285, 0.22778351062698865, 0.03723914029561004, 0.15801428821713648, 0.09172481966230228, 0.30520508519073053, 0.41705677004525876, 0.4435125874571655, 0.2523019684671767, 0.3687228007622062, 0.3765894392389597, 0.31800117071535394, 0.384649156381657, 0.35985799243897476, 0.13529219362203915, 0.14146501415201196, 0.09871370804010404, 0.12322794173373641, 0.08863913636345899, 0.1781121668565836, 0.07330624188319312, 0.11861834331161047, 0.11289929429846268, 0.17911169378138225, 0.23330483565482196, 0.22093055041318244, 0.34821403268708206, 0.21944273610844, 0.19182468789465856, 0.20618986882141055, 0.2988814702327772, 0.2099040392062268, 0.2205207009190856, 0.25780845672368025, 0.3696775829821147, 0.36692201706853567, 0.3468475830724971, 0.3259051540629101, 0.2641697772120588, 0.2897426161370087, 0.23500121011487274, 0.24895734955021276, 0.18558124286986566, 0.19812230412808696, 0.18877599126104028, 0.19449468106770107, 0.1768959745501143, 0.204128126152046, 0.21818321960991616, 0.22910957883899297, 0.2675571159541551, 0.22954379306011163, 0.2724486252314873, 0.23249393660734963, 0.19835134658963738, 0.2305057268050128, 0.22615842254087504, 0.2679840106673711, 0.22958492830748123, 0.246937725313357, 0.21274658114213074, 0.18404415543796548, 0.18695941017463402, 0.224814442977891, 0.19546002456588885, 0.21023234972958693, 0.19837341153760712, 0.18892260125373672, 0.16992635304299475, 0.16229163548758319, 0.40234919362128174, 0.1694211615311879, 0.16701056001589643, 0.18145709104504226, 0.46363461525850613, 0.5313407523030534, 0.1687631973807947, 0.2988850625954429, 0.19869684308638302, 0.14346761986280476, 0.17981607665034938, 0.20545277630253533, 0.1873403750873205, 0.20306215274769512, 0.22804924278354877, 0.2727196602862627, 0.18297770594950835, 0.18031416408853984, 0.1769259069749145, 0.18565585221801018, 0.18405724142146185, 0.18833092452815703, 0.18287125635081292, 0.17719922946613353, 0.18995988035487588, 0.09821853167265526, 0.07393508103368607, 0.10297031301604542, 0.08045974956208413, 0.09478376122539645, 0.11908200399563995, 0.12812963878885353, 0.0989466611108819, 0.08386073510577807]}, "mutation_prompt": null}
{"id": "681fd279-128a-4479-9287-aed338840773", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                else:\n                    # Adjust F and CR if no improvement\n                    self.F = max(0.1, self.F * 0.99)\n                    self.CR = min(0.9, self.CR * 1.01)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting crossover and mutation rate to efficiently explore and exploit the solution space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "083a77c1-0998-4685-b556-5bae5b72323b", "metadata": {"aucs": [0.2695098658153171, 0.3660769734274555, 0.3154486914164266, 0.26771982550947004, 0.30748912178573906, 0.28361551865088985, 0.39138038577484024, 0.4394920548080965, 0.35526282403526555, 0.053330440600560136, 0.0354303969322598, 0.09944503659075377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050854740562563006, 0.04394433429811628, 9.999999999998899e-05, 0.12958384374450693, 0.18028174863520396, 0.33835628844333465, 0.11572786020615, 0.17642575735366006, 0.17506295128446347, 0.1761253531698661, 0.17922994116241064, 0.1743217265409659, 0.1573616766036714, 0.12067367156898767, 0.1131920228076162, 0.09117941182019407, 0.11393876557790261, 0.08928323631624446, 0.1734187690472183, 0.2532402317946788, 0.18149737327808657, 0.22246844581041647, 0.185248754666404, 0.13215495729818016, 0.5613362360420555, 0.15737737788746564, 0.26636181865207353, 0.2352950184010114, 0.1720810087062009, 0.20906236006178236, 0.2643957474992883, 0.12857383291945002, 0.06398168770447954, 0.07995259312182701, 0.05913095836062565, 0.06170421357432876, 0.05399347348293537, 0.1292539045813681, 0.06014888697297971, 0.12106188506151028, 0.1576631779242762, 0.1794170885957892, 0.22854941917058635, 0.24393000650329077, 0.2136147345615642, 0.2100713627775248, 0.1722853494152956, 0.21813620089914865, 0.16485156685985025, 0.09427976329810595, 0.21725336394219152, 0.11431675343240622, 0.13845770927498757, 0.054346767806149776, 0.10456659015121694, 0.15296069364932774, 0.2207217841293434, 0.07895148256031648, 0.25985783178980626, 0.18120363722487276, 0.12969561204103086, 0.05564282952267963, 0.04289500915487876, 0.19397684568326257, 0.1250493424933189, 0.1222481044864222, 0.1993038523081787, 9.999999999998899e-05, 9.999999999998899e-05, 0.002903892487217452, 0.047556218659133065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12755628555829313, 0.07940167099421724, 0.1795740053588719, 0.04621616397889616, 0.05624053282664232, 0.03913273622026647, 0.1414271728297819, 0.17698752500817172, 0.1176852770893283, 0.0804906586105455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061473808668130014, 0.19522224541624456, 0.012239657847443963, 0.03381351946096678, 0.23598604882446594, 0.10425635664446653, 0.01826912355413901, 0.11112749108327247, 0.0944228272202865, 0.11197766277378285, 0.22778351062698865, 0.03723914029561004, 0.15801428821713648, 0.09172481966230228, 0.30520508519073053, 0.41705677004525876, 0.4435125874571655, 0.2523019684671767, 0.3687228007622062, 0.3765894392389597, 0.31800117071535394, 0.384649156381657, 0.35985799243897476, 0.13529219362203915, 0.14146501415201196, 0.09871370804010404, 0.12322794173373641, 0.08863913636345899, 0.1781121668565836, 0.07330624188319312, 0.11861834331161047, 0.11289929429846268, 0.17911169378138225, 0.23330483565482196, 0.22093055041318244, 0.34821403268708206, 0.21944273610844, 0.19182468789465856, 0.20618986882141055, 0.2988814702327772, 0.2099040392062268, 0.2205207009190856, 0.25780845672368025, 0.3696775829821147, 0.36692201706853567, 0.3468475830724971, 0.3259051540629101, 0.2641697772120588, 0.2897426161370087, 0.23500121011487274, 0.24895734955021276, 0.18558124286986566, 0.19812230412808696, 0.18877599126104028, 0.19449468106770107, 0.1768959745501143, 0.204128126152046, 0.21818321960991616, 0.22910957883899297, 0.2675571159541551, 0.22954379306011163, 0.2724486252314873, 0.23249393660734963, 0.19835134658963738, 0.2305057268050128, 0.22615842254087504, 0.2679840106673711, 0.22958492830748123, 0.246937725313357, 0.21274658114213074, 0.18404415543796548, 0.18695941017463402, 0.224814442977891, 0.19546002456588885, 0.21023234972958693, 0.19837341153760712, 0.18892260125373672, 0.16992635304299475, 0.16229163548758319, 0.40234919362128174, 0.1694211615311879, 0.16701056001589643, 0.18145709104504226, 0.46363461525850613, 0.5313407523030534, 0.1687631973807947, 0.2988850625954429, 0.19869684308638302, 0.14346761986280476, 0.17981607665034938, 0.20545277630253533, 0.1873403750873205, 0.20306215274769512, 0.22804924278354877, 0.2727196602862627, 0.18297770594950835, 0.18031416408853984, 0.1769259069749145, 0.18565585221801018, 0.18405724142146185, 0.18833092452815703, 0.18287125635081292, 0.17719922946613353, 0.18995988035487588, 0.09821853167265526, 0.07393508103368607, 0.10297031301604542, 0.08045974956208413, 0.09478376122539645, 0.11908200399563995, 0.12812963878885353, 0.0989466611108819, 0.08386073510577807]}, "mutation_prompt": null}
{"id": "ff2a9885-e684-4785-ae81-703174e34121", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                else:\n                    # Adjust F and CR if no improvement\n                    self.F = max(0.1, self.F * 0.99)\n                    self.CR = min(0.9, self.CR * 1.01)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting crossover and mutation rate to efficiently explore and exploit the solution space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "083a77c1-0998-4685-b556-5bae5b72323b", "metadata": {"aucs": [0.2695098658153171, 0.3660769734274555, 0.3154486914164266, 0.26771982550947004, 0.30748912178573906, 0.28361551865088985, 0.39138038577484024, 0.4394920548080965, 0.35526282403526555, 0.053330440600560136, 0.0354303969322598, 0.09944503659075377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050854740562563006, 0.04394433429811628, 9.999999999998899e-05, 0.12958384374450693, 0.18028174863520396, 0.33835628844333465, 0.11572786020615, 0.17642575735366006, 0.17506295128446347, 0.1761253531698661, 0.17922994116241064, 0.1743217265409659, 0.1573616766036714, 0.12067367156898767, 0.1131920228076162, 0.09117941182019407, 0.11393876557790261, 0.08928323631624446, 0.1734187690472183, 0.2532402317946788, 0.18149737327808657, 0.22246844581041647, 0.185248754666404, 0.13215495729818016, 0.5613362360420555, 0.15737737788746564, 0.26636181865207353, 0.2352950184010114, 0.1720810087062009, 0.20906236006178236, 0.2643957474992883, 0.12857383291945002, 0.06398168770447954, 0.07995259312182701, 0.05913095836062565, 0.06170421357432876, 0.05399347348293537, 0.1292539045813681, 0.06014888697297971, 0.12106188506151028, 0.1576631779242762, 0.1794170885957892, 0.22854941917058635, 0.24393000650329077, 0.2136147345615642, 0.2100713627775248, 0.1722853494152956, 0.21813620089914865, 0.16485156685985025, 0.09427976329810595, 0.21725336394219152, 0.11431675343240622, 0.13845770927498757, 0.054346767806149776, 0.10456659015121694, 0.15296069364932774, 0.2207217841293434, 0.07895148256031648, 0.25985783178980626, 0.18120363722487276, 0.12969561204103086, 0.05564282952267963, 0.04289500915487876, 0.19397684568326257, 0.1250493424933189, 0.1222481044864222, 0.1993038523081787, 9.999999999998899e-05, 9.999999999998899e-05, 0.002903892487217452, 0.047556218659133065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12755628555829313, 0.07940167099421724, 0.1795740053588719, 0.04621616397889616, 0.05624053282664232, 0.03913273622026647, 0.1414271728297819, 0.17698752500817172, 0.1176852770893283, 0.0804906586105455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061473808668130014, 0.19522224541624456, 0.012239657847443963, 0.03381351946096678, 0.23598604882446594, 0.10425635664446653, 0.01826912355413901, 0.11112749108327247, 0.0944228272202865, 0.11197766277378285, 0.22778351062698865, 0.03723914029561004, 0.15801428821713648, 0.09172481966230228, 0.30520508519073053, 0.41705677004525876, 0.4435125874571655, 0.2523019684671767, 0.3687228007622062, 0.3765894392389597, 0.31800117071535394, 0.384649156381657, 0.35985799243897476, 0.13529219362203915, 0.14146501415201196, 0.09871370804010404, 0.12322794173373641, 0.08863913636345899, 0.1781121668565836, 0.07330624188319312, 0.11861834331161047, 0.11289929429846268, 0.17911169378138225, 0.23330483565482196, 0.22093055041318244, 0.34821403268708206, 0.21944273610844, 0.19182468789465856, 0.20618986882141055, 0.2988814702327772, 0.2099040392062268, 0.2205207009190856, 0.25780845672368025, 0.3696775829821147, 0.36692201706853567, 0.3468475830724971, 0.3259051540629101, 0.2641697772120588, 0.2897426161370087, 0.23500121011487274, 0.24895734955021276, 0.18558124286986566, 0.19812230412808696, 0.18877599126104028, 0.19449468106770107, 0.1768959745501143, 0.204128126152046, 0.21818321960991616, 0.22910957883899297, 0.2675571159541551, 0.22954379306011163, 0.2724486252314873, 0.23249393660734963, 0.19835134658963738, 0.2305057268050128, 0.22615842254087504, 0.2679840106673711, 0.22958492830748123, 0.246937725313357, 0.21274658114213074, 0.18404415543796548, 0.18695941017463402, 0.224814442977891, 0.19546002456588885, 0.21023234972958693, 0.19837341153760712, 0.18892260125373672, 0.16992635304299475, 0.16229163548758319, 0.40234919362128174, 0.1694211615311879, 0.16701056001589643, 0.18145709104504226, 0.46363461525850613, 0.5313407523030534, 0.1687631973807947, 0.2988850625954429, 0.19869684308638302, 0.14346761986280476, 0.17981607665034938, 0.20545277630253533, 0.1873403750873205, 0.20306215274769512, 0.22804924278354877, 0.2727196602862627, 0.18297770594950835, 0.18031416408853984, 0.1769259069749145, 0.18565585221801018, 0.18405724142146185, 0.18833092452815703, 0.18287125635081292, 0.17719922946613353, 0.18995988035487588, 0.09821853167265526, 0.07393508103368607, 0.10297031301604542, 0.08045974956208413, 0.09478376122539645, 0.11908200399563995, 0.12812963878885353, 0.0989466611108819, 0.08386073510577807]}, "mutation_prompt": null}
{"id": "fd6488e4-d7d2-4902-bad7-e2eeea937ffc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                else:\n                    # Adjust F and CR if no improvement\n                    self.F = max(0.1, self.F * 0.99)\n                    self.CR = min(0.9, self.CR * 1.01)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting crossover and mutation rate to efficiently explore and exploit the solution space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "083a77c1-0998-4685-b556-5bae5b72323b", "metadata": {"aucs": [0.2695098658153171, 0.3660769734274555, 0.3154486914164266, 0.26771982550947004, 0.30748912178573906, 0.28361551865088985, 0.39138038577484024, 0.4394920548080965, 0.35526282403526555, 0.053330440600560136, 0.0354303969322598, 0.09944503659075377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050854740562563006, 0.04394433429811628, 9.999999999998899e-05, 0.12958384374450693, 0.18028174863520396, 0.33835628844333465, 0.11572786020615, 0.17642575735366006, 0.17506295128446347, 0.1761253531698661, 0.17922994116241064, 0.1743217265409659, 0.1573616766036714, 0.12067367156898767, 0.1131920228076162, 0.09117941182019407, 0.11393876557790261, 0.08928323631624446, 0.1734187690472183, 0.2532402317946788, 0.18149737327808657, 0.22246844581041647, 0.185248754666404, 0.13215495729818016, 0.5613362360420555, 0.15737737788746564, 0.26636181865207353, 0.2352950184010114, 0.1720810087062009, 0.20906236006178236, 0.2643957474992883, 0.12857383291945002, 0.06398168770447954, 0.07995259312182701, 0.05913095836062565, 0.06170421357432876, 0.05399347348293537, 0.1292539045813681, 0.06014888697297971, 0.12106188506151028, 0.1576631779242762, 0.1794170885957892, 0.22854941917058635, 0.24393000650329077, 0.2136147345615642, 0.2100713627775248, 0.1722853494152956, 0.21813620089914865, 0.16485156685985025, 0.09427976329810595, 0.21725336394219152, 0.11431675343240622, 0.13845770927498757, 0.054346767806149776, 0.10456659015121694, 0.15296069364932774, 0.2207217841293434, 0.07895148256031648, 0.25985783178980626, 0.18120363722487276, 0.12969561204103086, 0.05564282952267963, 0.04289500915487876, 0.19397684568326257, 0.1250493424933189, 0.1222481044864222, 0.1993038523081787, 9.999999999998899e-05, 9.999999999998899e-05, 0.002903892487217452, 0.047556218659133065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12755628555829313, 0.07940167099421724, 0.1795740053588719, 0.04621616397889616, 0.05624053282664232, 0.03913273622026647, 0.1414271728297819, 0.17698752500817172, 0.1176852770893283, 0.0804906586105455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061473808668130014, 0.19522224541624456, 0.012239657847443963, 0.03381351946096678, 0.23598604882446594, 0.10425635664446653, 0.01826912355413901, 0.11112749108327247, 0.0944228272202865, 0.11197766277378285, 0.22778351062698865, 0.03723914029561004, 0.15801428821713648, 0.09172481966230228, 0.30520508519073053, 0.41705677004525876, 0.4435125874571655, 0.2523019684671767, 0.3687228007622062, 0.3765894392389597, 0.31800117071535394, 0.384649156381657, 0.35985799243897476, 0.13529219362203915, 0.14146501415201196, 0.09871370804010404, 0.12322794173373641, 0.08863913636345899, 0.1781121668565836, 0.07330624188319312, 0.11861834331161047, 0.11289929429846268, 0.17911169378138225, 0.23330483565482196, 0.22093055041318244, 0.34821403268708206, 0.21944273610844, 0.19182468789465856, 0.20618986882141055, 0.2988814702327772, 0.2099040392062268, 0.2205207009190856, 0.25780845672368025, 0.3696775829821147, 0.36692201706853567, 0.3468475830724971, 0.3259051540629101, 0.2641697772120588, 0.2897426161370087, 0.23500121011487274, 0.24895734955021276, 0.18558124286986566, 0.19812230412808696, 0.18877599126104028, 0.19449468106770107, 0.1768959745501143, 0.204128126152046, 0.21818321960991616, 0.22910957883899297, 0.2675571159541551, 0.22954379306011163, 0.2724486252314873, 0.23249393660734963, 0.19835134658963738, 0.2305057268050128, 0.22615842254087504, 0.2679840106673711, 0.22958492830748123, 0.246937725313357, 0.21274658114213074, 0.18404415543796548, 0.18695941017463402, 0.224814442977891, 0.19546002456588885, 0.21023234972958693, 0.19837341153760712, 0.18892260125373672, 0.16992635304299475, 0.16229163548758319, 0.40234919362128174, 0.1694211615311879, 0.16701056001589643, 0.18145709104504226, 0.46363461525850613, 0.5313407523030534, 0.1687631973807947, 0.2988850625954429, 0.19869684308638302, 0.14346761986280476, 0.17981607665034938, 0.20545277630253533, 0.1873403750873205, 0.20306215274769512, 0.22804924278354877, 0.2727196602862627, 0.18297770594950835, 0.18031416408853984, 0.1769259069749145, 0.18565585221801018, 0.18405724142146185, 0.18833092452815703, 0.18287125635081292, 0.17719922946613353, 0.18995988035487588, 0.09821853167265526, 0.07393508103368607, 0.10297031301604542, 0.08045974956208413, 0.09478376122539645, 0.11908200399563995, 0.12812963878885353, 0.0989466611108819, 0.08386073510577807]}, "mutation_prompt": null}
{"id": "a061f339-8074-4d9e-803d-28bf3652a40e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                else:\n                    # Adjust F and CR if no improvement\n                    self.F = max(0.1, self.F * 0.99)\n                    self.CR = min(0.9, self.CR * 1.01)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting crossover and mutation rate to efficiently explore and exploit the solution space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "083a77c1-0998-4685-b556-5bae5b72323b", "metadata": {"aucs": [0.2695098658153171, 0.3660769734274555, 0.3154486914164266, 0.26771982550947004, 0.30748912178573906, 0.28361551865088985, 0.39138038577484024, 0.4394920548080965, 0.35526282403526555, 0.053330440600560136, 0.0354303969322598, 0.09944503659075377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050854740562563006, 0.04394433429811628, 9.999999999998899e-05, 0.12958384374450693, 0.18028174863520396, 0.33835628844333465, 0.11572786020615, 0.17642575735366006, 0.17506295128446347, 0.1761253531698661, 0.17922994116241064, 0.1743217265409659, 0.1573616766036714, 0.12067367156898767, 0.1131920228076162, 0.09117941182019407, 0.11393876557790261, 0.08928323631624446, 0.1734187690472183, 0.2532402317946788, 0.18149737327808657, 0.22246844581041647, 0.185248754666404, 0.13215495729818016, 0.5613362360420555, 0.15737737788746564, 0.26636181865207353, 0.2352950184010114, 0.1720810087062009, 0.20906236006178236, 0.2643957474992883, 0.12857383291945002, 0.06398168770447954, 0.07995259312182701, 0.05913095836062565, 0.06170421357432876, 0.05399347348293537, 0.1292539045813681, 0.06014888697297971, 0.12106188506151028, 0.1576631779242762, 0.1794170885957892, 0.22854941917058635, 0.24393000650329077, 0.2136147345615642, 0.2100713627775248, 0.1722853494152956, 0.21813620089914865, 0.16485156685985025, 0.09427976329810595, 0.21725336394219152, 0.11431675343240622, 0.13845770927498757, 0.054346767806149776, 0.10456659015121694, 0.15296069364932774, 0.2207217841293434, 0.07895148256031648, 0.25985783178980626, 0.18120363722487276, 0.12969561204103086, 0.05564282952267963, 0.04289500915487876, 0.19397684568326257, 0.1250493424933189, 0.1222481044864222, 0.1993038523081787, 9.999999999998899e-05, 9.999999999998899e-05, 0.002903892487217452, 0.047556218659133065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12755628555829313, 0.07940167099421724, 0.1795740053588719, 0.04621616397889616, 0.05624053282664232, 0.03913273622026647, 0.1414271728297819, 0.17698752500817172, 0.1176852770893283, 0.0804906586105455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061473808668130014, 0.19522224541624456, 0.012239657847443963, 0.03381351946096678, 0.23598604882446594, 0.10425635664446653, 0.01826912355413901, 0.11112749108327247, 0.0944228272202865, 0.11197766277378285, 0.22778351062698865, 0.03723914029561004, 0.15801428821713648, 0.09172481966230228, 0.30520508519073053, 0.41705677004525876, 0.4435125874571655, 0.2523019684671767, 0.3687228007622062, 0.3765894392389597, 0.31800117071535394, 0.384649156381657, 0.35985799243897476, 0.13529219362203915, 0.14146501415201196, 0.09871370804010404, 0.12322794173373641, 0.08863913636345899, 0.1781121668565836, 0.07330624188319312, 0.11861834331161047, 0.11289929429846268, 0.17911169378138225, 0.23330483565482196, 0.22093055041318244, 0.34821403268708206, 0.21944273610844, 0.19182468789465856, 0.20618986882141055, 0.2988814702327772, 0.2099040392062268, 0.2205207009190856, 0.25780845672368025, 0.3696775829821147, 0.36692201706853567, 0.3468475830724971, 0.3259051540629101, 0.2641697772120588, 0.2897426161370087, 0.23500121011487274, 0.24895734955021276, 0.18558124286986566, 0.19812230412808696, 0.18877599126104028, 0.19449468106770107, 0.1768959745501143, 0.204128126152046, 0.21818321960991616, 0.22910957883899297, 0.2675571159541551, 0.22954379306011163, 0.2724486252314873, 0.23249393660734963, 0.19835134658963738, 0.2305057268050128, 0.22615842254087504, 0.2679840106673711, 0.22958492830748123, 0.246937725313357, 0.21274658114213074, 0.18404415543796548, 0.18695941017463402, 0.224814442977891, 0.19546002456588885, 0.21023234972958693, 0.19837341153760712, 0.18892260125373672, 0.16992635304299475, 0.16229163548758319, 0.40234919362128174, 0.1694211615311879, 0.16701056001589643, 0.18145709104504226, 0.46363461525850613, 0.5313407523030534, 0.1687631973807947, 0.2988850625954429, 0.19869684308638302, 0.14346761986280476, 0.17981607665034938, 0.20545277630253533, 0.1873403750873205, 0.20306215274769512, 0.22804924278354877, 0.2727196602862627, 0.18297770594950835, 0.18031416408853984, 0.1769259069749145, 0.18565585221801018, 0.18405724142146185, 0.18833092452815703, 0.18287125635081292, 0.17719922946613353, 0.18995988035487588, 0.09821853167265526, 0.07393508103368607, 0.10297031301604542, 0.08045974956208413, 0.09478376122539645, 0.11908200399563995, 0.12812963878885353, 0.0989466611108819, 0.08386073510577807]}, "mutation_prompt": null}
{"id": "3d837a8b-48d8-4e7f-8ced-b8414c6a527e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                else:\n                    # Adjust F and CR if no improvement\n                    self.F = max(0.1, self.F * 0.99)\n                    self.CR = min(0.9, self.CR * 1.01)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting crossover and mutation rate to efficiently explore and exploit the solution space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "083a77c1-0998-4685-b556-5bae5b72323b", "metadata": {"aucs": [0.2695098658153171, 0.3660769734274555, 0.3154486914164266, 0.26771982550947004, 0.30748912178573906, 0.28361551865088985, 0.39138038577484024, 0.4394920548080965, 0.35526282403526555, 0.053330440600560136, 0.0354303969322598, 0.09944503659075377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050854740562563006, 0.04394433429811628, 9.999999999998899e-05, 0.12958384374450693, 0.18028174863520396, 0.33835628844333465, 0.11572786020615, 0.17642575735366006, 0.17506295128446347, 0.1761253531698661, 0.17922994116241064, 0.1743217265409659, 0.1573616766036714, 0.12067367156898767, 0.1131920228076162, 0.09117941182019407, 0.11393876557790261, 0.08928323631624446, 0.1734187690472183, 0.2532402317946788, 0.18149737327808657, 0.22246844581041647, 0.185248754666404, 0.13215495729818016, 0.5613362360420555, 0.15737737788746564, 0.26636181865207353, 0.2352950184010114, 0.1720810087062009, 0.20906236006178236, 0.2643957474992883, 0.12857383291945002, 0.06398168770447954, 0.07995259312182701, 0.05913095836062565, 0.06170421357432876, 0.05399347348293537, 0.1292539045813681, 0.06014888697297971, 0.12106188506151028, 0.1576631779242762, 0.1794170885957892, 0.22854941917058635, 0.24393000650329077, 0.2136147345615642, 0.2100713627775248, 0.1722853494152956, 0.21813620089914865, 0.16485156685985025, 0.09427976329810595, 0.21725336394219152, 0.11431675343240622, 0.13845770927498757, 0.054346767806149776, 0.10456659015121694, 0.15296069364932774, 0.2207217841293434, 0.07895148256031648, 0.25985783178980626, 0.18120363722487276, 0.12969561204103086, 0.05564282952267963, 0.04289500915487876, 0.19397684568326257, 0.1250493424933189, 0.1222481044864222, 0.1993038523081787, 9.999999999998899e-05, 9.999999999998899e-05, 0.002903892487217452, 0.047556218659133065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12755628555829313, 0.07940167099421724, 0.1795740053588719, 0.04621616397889616, 0.05624053282664232, 0.03913273622026647, 0.1414271728297819, 0.17698752500817172, 0.1176852770893283, 0.0804906586105455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061473808668130014, 0.19522224541624456, 0.012239657847443963, 0.03381351946096678, 0.23598604882446594, 0.10425635664446653, 0.01826912355413901, 0.11112749108327247, 0.0944228272202865, 0.11197766277378285, 0.22778351062698865, 0.03723914029561004, 0.15801428821713648, 0.09172481966230228, 0.30520508519073053, 0.41705677004525876, 0.4435125874571655, 0.2523019684671767, 0.3687228007622062, 0.3765894392389597, 0.31800117071535394, 0.384649156381657, 0.35985799243897476, 0.13529219362203915, 0.14146501415201196, 0.09871370804010404, 0.12322794173373641, 0.08863913636345899, 0.1781121668565836, 0.07330624188319312, 0.11861834331161047, 0.11289929429846268, 0.17911169378138225, 0.23330483565482196, 0.22093055041318244, 0.34821403268708206, 0.21944273610844, 0.19182468789465856, 0.20618986882141055, 0.2988814702327772, 0.2099040392062268, 0.2205207009190856, 0.25780845672368025, 0.3696775829821147, 0.36692201706853567, 0.3468475830724971, 0.3259051540629101, 0.2641697772120588, 0.2897426161370087, 0.23500121011487274, 0.24895734955021276, 0.18558124286986566, 0.19812230412808696, 0.18877599126104028, 0.19449468106770107, 0.1768959745501143, 0.204128126152046, 0.21818321960991616, 0.22910957883899297, 0.2675571159541551, 0.22954379306011163, 0.2724486252314873, 0.23249393660734963, 0.19835134658963738, 0.2305057268050128, 0.22615842254087504, 0.2679840106673711, 0.22958492830748123, 0.246937725313357, 0.21274658114213074, 0.18404415543796548, 0.18695941017463402, 0.224814442977891, 0.19546002456588885, 0.21023234972958693, 0.19837341153760712, 0.18892260125373672, 0.16992635304299475, 0.16229163548758319, 0.40234919362128174, 0.1694211615311879, 0.16701056001589643, 0.18145709104504226, 0.46363461525850613, 0.5313407523030534, 0.1687631973807947, 0.2988850625954429, 0.19869684308638302, 0.14346761986280476, 0.17981607665034938, 0.20545277630253533, 0.1873403750873205, 0.20306215274769512, 0.22804924278354877, 0.2727196602862627, 0.18297770594950835, 0.18031416408853984, 0.1769259069749145, 0.18565585221801018, 0.18405724142146185, 0.18833092452815703, 0.18287125635081292, 0.17719922946613353, 0.18995988035487588, 0.09821853167265526, 0.07393508103368607, 0.10297031301604542, 0.08045974956208413, 0.09478376122539645, 0.11908200399563995, 0.12812963878885353, 0.0989466611108819, 0.08386073510577807]}, "mutation_prompt": null}
{"id": "30d33786-d4db-4aef-9291-a1ef834adbe7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                else:\n                    # Adjust F and CR if no improvement\n                    self.F = max(0.1, self.F * 0.99)\n                    self.CR = min(0.9, self.CR * 1.01)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with self-adjusting crossover and mutation rate to efficiently explore and exploit the solution space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "083a77c1-0998-4685-b556-5bae5b72323b", "metadata": {"aucs": [0.2695098658153171, 0.3660769734274555, 0.3154486914164266, 0.26771982550947004, 0.30748912178573906, 0.28361551865088985, 0.39138038577484024, 0.4394920548080965, 0.35526282403526555, 0.053330440600560136, 0.0354303969322598, 0.09944503659075377, 9.999999999998899e-05, 9.999999999998899e-05, 0.050854740562563006, 0.04394433429811628, 9.999999999998899e-05, 0.12958384374450693, 0.18028174863520396, 0.33835628844333465, 0.11572786020615, 0.17642575735366006, 0.17506295128446347, 0.1761253531698661, 0.17922994116241064, 0.1743217265409659, 0.1573616766036714, 0.12067367156898767, 0.1131920228076162, 0.09117941182019407, 0.11393876557790261, 0.08928323631624446, 0.1734187690472183, 0.2532402317946788, 0.18149737327808657, 0.22246844581041647, 0.185248754666404, 0.13215495729818016, 0.5613362360420555, 0.15737737788746564, 0.26636181865207353, 0.2352950184010114, 0.1720810087062009, 0.20906236006178236, 0.2643957474992883, 0.12857383291945002, 0.06398168770447954, 0.07995259312182701, 0.05913095836062565, 0.06170421357432876, 0.05399347348293537, 0.1292539045813681, 0.06014888697297971, 0.12106188506151028, 0.1576631779242762, 0.1794170885957892, 0.22854941917058635, 0.24393000650329077, 0.2136147345615642, 0.2100713627775248, 0.1722853494152956, 0.21813620089914865, 0.16485156685985025, 0.09427976329810595, 0.21725336394219152, 0.11431675343240622, 0.13845770927498757, 0.054346767806149776, 0.10456659015121694, 0.15296069364932774, 0.2207217841293434, 0.07895148256031648, 0.25985783178980626, 0.18120363722487276, 0.12969561204103086, 0.05564282952267963, 0.04289500915487876, 0.19397684568326257, 0.1250493424933189, 0.1222481044864222, 0.1993038523081787, 9.999999999998899e-05, 9.999999999998899e-05, 0.002903892487217452, 0.047556218659133065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12755628555829313, 0.07940167099421724, 0.1795740053588719, 0.04621616397889616, 0.05624053282664232, 0.03913273622026647, 0.1414271728297819, 0.17698752500817172, 0.1176852770893283, 0.0804906586105455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061473808668130014, 0.19522224541624456, 0.012239657847443963, 0.03381351946096678, 0.23598604882446594, 0.10425635664446653, 0.01826912355413901, 0.11112749108327247, 0.0944228272202865, 0.11197766277378285, 0.22778351062698865, 0.03723914029561004, 0.15801428821713648, 0.09172481966230228, 0.30520508519073053, 0.41705677004525876, 0.4435125874571655, 0.2523019684671767, 0.3687228007622062, 0.3765894392389597, 0.31800117071535394, 0.384649156381657, 0.35985799243897476, 0.13529219362203915, 0.14146501415201196, 0.09871370804010404, 0.12322794173373641, 0.08863913636345899, 0.1781121668565836, 0.07330624188319312, 0.11861834331161047, 0.11289929429846268, 0.17911169378138225, 0.23330483565482196, 0.22093055041318244, 0.34821403268708206, 0.21944273610844, 0.19182468789465856, 0.20618986882141055, 0.2988814702327772, 0.2099040392062268, 0.2205207009190856, 0.25780845672368025, 0.3696775829821147, 0.36692201706853567, 0.3468475830724971, 0.3259051540629101, 0.2641697772120588, 0.2897426161370087, 0.23500121011487274, 0.24895734955021276, 0.18558124286986566, 0.19812230412808696, 0.18877599126104028, 0.19449468106770107, 0.1768959745501143, 0.204128126152046, 0.21818321960991616, 0.22910957883899297, 0.2675571159541551, 0.22954379306011163, 0.2724486252314873, 0.23249393660734963, 0.19835134658963738, 0.2305057268050128, 0.22615842254087504, 0.2679840106673711, 0.22958492830748123, 0.246937725313357, 0.21274658114213074, 0.18404415543796548, 0.18695941017463402, 0.224814442977891, 0.19546002456588885, 0.21023234972958693, 0.19837341153760712, 0.18892260125373672, 0.16992635304299475, 0.16229163548758319, 0.40234919362128174, 0.1694211615311879, 0.16701056001589643, 0.18145709104504226, 0.46363461525850613, 0.5313407523030534, 0.1687631973807947, 0.2988850625954429, 0.19869684308638302, 0.14346761986280476, 0.17981607665034938, 0.20545277630253533, 0.1873403750873205, 0.20306215274769512, 0.22804924278354877, 0.2727196602862627, 0.18297770594950835, 0.18031416408853984, 0.1769259069749145, 0.18565585221801018, 0.18405724142146185, 0.18833092452815703, 0.18287125635081292, 0.17719922946613353, 0.18995988035487588, 0.09821853167265526, 0.07393508103368607, 0.10297031301604542, 0.08045974956208413, 0.09478376122539645, 0.11908200399563995, 0.12812963878885353, 0.0989466611108819, 0.08386073510577807]}, "mutation_prompt": null}
{"id": "35c7ebe1-20aa-402e-90be-53a537bcecb9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolutionEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.7  # Adjusted differential weight\n        self.CR = 0.8  # Adjusted crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                else:\n                    # Adjust F and CR if no improvement, with dynamic adjustments\n                    self.F = max(0.1, self.F * 0.98)\n                    self.CR = min(0.9, self.CR * 1.02)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolutionEnhanced", "description": "An enhanced adaptive differential evolution algorithm with refined parameter tuning and dynamic population adjustment for better performance and efficiency.", "configspace": "", "generation": 9, "fitness": 0.1685878199933202, "feedback": "The algorithm AdaptiveDifferentialEvolutionEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.10.", "error": "", "parent_id": "083a77c1-0998-4685-b556-5bae5b72323b", "metadata": {"aucs": [0.25519914930623244, 0.25789658029560836, 0.2678276168135363, 0.3353825283225256, 0.2595176746915765, 0.25300829489579624, 0.37285006180667635, 0.1990447669964306, 0.35837573159372227, 0.06458619479454264, 9.999999999998899e-05, 0.09707560336861931, 0.0830583756565424, 0.08490545519151615, 9.999999999998899e-05, 0.05580358560657661, 0.17885058663568254, 9.999999999998899e-05, 0.1271975303677616, 0.17412616656333868, 0.152948341868283, 0.13994047280628763, 0.2691799888919074, 0.29362471635184895, 0.15516477733424727, 0.2686542377741774, 0.1778786995548104, 0.1107046531638376, 0.1720982502550401, 0.11466130394520646, 0.10726350500416448, 0.17354556473824034, 0.10673271032982934, 0.13383019908493676, 0.15355900686934287, 0.10209375394484121, 0.17294739279240023, 0.2188167486138629, 0.39899994477559975, 0.2135884668002861, 0.4768510613567202, 0.2776102746684883, 0.15867266811980718, 0.3965645940386263, 0.19927892676527414, 0.09440837173251015, 0.06499738395872612, 0.10972920823333165, 0.10847138278228907, 0.06082062114429232, 0.11962327418100249, 0.08772937765724509, 0.12634825105767744, 0.1284612658552765, 0.35225771415955465, 0.2058573506623017, 0.13369177412862276, 0.25549709153280176, 0.3029841568203018, 0.2691669407564896, 0.16112001150377397, 0.2277398088576753, 0.23050236715586492, 0.1230113807505997, 0.12727167623673108, 0.19234981234696535, 0.02565135567863075, 0.14205036414141958, 0.08581127492423457, 0.06479330120238314, 0.18777138187059916, 0.16784169946471006, 0.13358994934113744, 0.0984353368600499, 0.08439477561323872, 0.05201583847956193, 0.137281359163842, 0.149427561484634, 0.1433124047687646, 0.020438534441209022, 0.056476762476054154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08093274217037927, 0.03454843791628792, 9.999999999998899e-05, 0.11888683697660307, 0.05875150679491048, 0.15476769344636687, 0.07542602810139121, 0.14082013450333997, 0.10761318759068417, 0.10758973851325715, 0.1454395246110909, 0.08733155966925166, 0.09178307635967575, 0.05931969492297107, 9.999999999998899e-05, 0.04855288690427029, 0.08181359339484517, 0.1643768220400843, 0.054065278435015185, 9.999999999998899e-05, 9.999999999998899e-05, 0.2580122961495547, 0.008084830674713883, 0.05616429722821836, 0.10786344854940233, 0.026549181735247784, 0.1123429618582521, 0.0595869714434859, 0.05820799555891498, 0.06943251950051621, 0.40135478695987725, 0.4700941653091891, 0.2626051524625237, 0.33686820305831744, 0.19959128524425906, 0.30578691841506545, 0.2986684764835489, 0.2499760106630461, 0.32762304823405675, 0.09962565465560014, 0.07878894136253534, 0.1297659362943414, 0.1218888423471075, 0.12432608241531418, 0.11705142931335555, 0.09619365106803712, 0.12445782333969369, 0.12553322294083313, 0.3008907969474097, 0.15706221347791416, 0.2107971059783248, 0.2243047417088072, 0.24431746027998902, 0.2689623425931309, 0.23112016820702652, 0.2850656308118811, 0.25612717923474637, 0.23248009259820568, 0.2079506249576364, 0.2718362792974165, 0.21794039754395667, 0.2507425626098845, 0.3232397367858836, 0.341775420814902, 0.32782860323024543, 0.2391820917503642, 0.16367837038048916, 0.18785538683803593, 0.19994437253826836, 0.2175219857350379, 0.1773171569433485, 0.19798498664016528, 0.21990474357019207, 0.18887177462512128, 0.1688926071973854, 0.21037387990546463, 0.20802364772907367, 0.20004276932319298, 0.25896011222194104, 0.22806061949714618, 0.21425052898265717, 0.21721936440684342, 0.21243228202901965, 0.2173055737032502, 0.20930712097426263, 0.23647049944221532, 0.21806964303402487, 0.2490031694724123, 0.2257544627608571, 0.20707466142830222, 0.23697781748265312, 0.18778966890852689, 0.20170940546796368, 0.31774092536591025, 0.16544704793452603, 0.18641123826338746, 0.17180381103192444, 0.19546272640459061, 0.1928933149751222, 0.27975618486852205, 0.1684996773385281, 0.1644764317203089, 0.20393554229586974, 0.20026161298687317, 0.2049745232715141, 0.16745721628669785, 0.162971740882503, 0.20290898057215367, 0.1752443618559406, 0.37089641160420594, 0.2711986220547046, 0.19219486176801504, 0.1827285899820068, 0.1804491698560483, 0.19300827992573955, 0.17743291606439104, 0.18856464504965775, 0.1926552086764557, 0.18547569427601096, 0.18001611982600751, 0.10561265698853606, 0.08446379306940177, 0.09008414932553077, 0.0967426031966937, 0.08009478809126958, 0.08628111875396949, 0.09214374673653347, 0.08488399637740318, 0.1263661910199516]}, "mutation_prompt": null}
{"id": "67d84890-7a10-4ed8-856f-0fe2e08b41e0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic adaptation of differential weight\n                if np.random.rand() < 0.1:\n                    self.F = np.random.uniform(0.5, 1.0)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with dynamic population resizing and selective differential weight adaptation.", "configspace": "", "generation": 10, "fitness": 0.26522724880033155, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.20.", "error": "", "parent_id": "083a77c1-0998-4685-b556-5bae5b72323b", "metadata": {"aucs": [0.6364012720836838, 0.6374009672496708, 0.6029324855574576, 0.7283602263685756, 0.6525986295732222, 0.7282473588572798, 0.6347232903883586, 0.6557738964026187, 0.6697262165930085, 0.35732092296802664, 0.4104192426630894, 0.3743095708146662, 0.34496041531654065, 0.4059470593024195, 0.45294609203734715, 0.3729064386640988, 0.30190183578116103, 0.3586831111409984, 0.09924597136389313, 0.09465520860499221, 0.08971795373084246, 0.12035421577112082, 0.0907705642937583, 0.11930234311688726, 0.11072321828925946, 0.10602123808874275, 0.10978129257649538, 0.09194205643070086, 0.1088807209049737, 0.09432760117128347, 0.09541500053760243, 0.09440430484248752, 0.09962251014033341, 0.10078799201683797, 0.08495402325578671, 0.0872208167820796, 0.9710827614171399, 0.9333794439787526, 0.9071740838416604, 0.8863265103678165, 0.9124695467521324, 0.9544286482665755, 0.9668455046443661, 0.9243550180859308, 0.9115944444753905, 0.24473641665827472, 0.2397531131164038, 0.2475393139366443, 0.26843504271199703, 0.31270312709463255, 0.24832580668882454, 0.2967134871681085, 0.30331634440519106, 0.37057639824151334, 0.3326269128648306, 0.591734775390516, 0.3450646912214588, 0.34190159107019313, 0.6436363144792085, 0.6917599104691792, 0.6174805916498585, 0.6368446448290482, 0.31774809307559704, 0.16462813877010318, 0.1612417343499386, 0.18385939306226817, 0.19880237744682372, 0.14212121185065008, 0.1473912587283931, 0.18677911296180716, 0.19032794234723682, 0.15089654154611687, 0.1463198347417055, 0.1478578638569621, 0.11164768017109383, 0.18281493709543506, 0.14442897605795968, 0.14172784163304297, 0.15767541453552691, 0.18021481074212875, 0.1466896444367103, 0.1063692336058728, 0.1398693278580968, 0.12800119808307697, 0.1299913429412347, 0.11744725379015275, 0.12473454354123226, 0.12794365136536512, 0.13352723583171122, 0.08444343097960538, 0.26737157755119745, 0.34750484011106453, 0.26373005891669776, 0.2510061629536465, 0.2921020561209956, 0.2656550472125093, 0.2684689373726352, 0.29957593942623584, 0.2692510226772683, 0.05715201617094312, 0.10796070488697351, 0.0722558121621032, 9.999999999998899e-05, 0.13723927502693511, 0.13086573324901096, 0.1324763304816201, 0.12110261931930377, 0.04540402776654939, 0.1572351742749415, 0.17714866875043356, 0.18801883177397916, 0.20200852051602136, 0.22225331390955383, 0.1831119863515196, 0.2432917143469956, 0.17088919703062055, 0.19248622715756514, 0.48327408629612834, 0.4807222266793315, 0.46776266143409406, 0.5025217888112414, 0.49227241574158065, 0.5325579313034527, 0.530772711255443, 0.4653829735335445, 0.49334102303003713, 0.09117028338149136, 0.1172655921599085, 0.08908323736494206, 0.0968631046932038, 0.09316295859171697, 0.08384664394433727, 0.07696560441353284, 0.08906016421385343, 0.09275833075047035, 0.1614898609119778, 0.29967162362882893, 0.1549902152828737, 0.15698805244988312, 0.13727926833334114, 0.14263693475535533, 0.15452347855241932, 0.12433477053505393, 0.1962935227762711, 0.2684739746867575, 0.28830383111908076, 0.30528505432999353, 0.2574283426142735, 0.27263098795239316, 0.2969257554394128, 0.3009850619884644, 0.3151057077838242, 0.3026469331851356, 0.22863176833993626, 0.22362205404040947, 0.22092639930073021, 0.21397107337702337, 0.22036673539817042, 0.2399351480921179, 0.23899308633961247, 0.2568838077951415, 0.22794296565338512, 0.19284572529419952, 0.16842249958825395, 0.19913968862936815, 0.18003827311263554, 0.17788471651529159, 0.21429156063336452, 0.19475767793734344, 0.1889971368980694, 0.2116398532817949, 0.17826421941719361, 0.18330493648760826, 0.20310518513354314, 0.1729026480980641, 0.1887836089316357, 0.18361764953383808, 0.18782817828270792, 0.18845728430088904, 0.1772866600645686, 0.33954514118481416, 0.41604309926662997, 0.14912226990172162, 0.294965475722367, 0.18951459998354325, 0.23267446004928138, 0.4933168680669281, 0.17818740512700693, 0.31926047953100967, 0.1477663329559411, 0.1980624116071441, 0.1988057771698586, 0.2590940443301796, 0.19431533146150437, 0.2651158848424612, 0.2059384181173446, 0.20148645951872013, 0.20859203155640726, 0.19753981806734877, 0.17502051637338878, 0.18322328037034408, 0.17652971780297355, 0.18306301569166306, 0.1766960101938344, 0.187014012759255, 0.18548405780202204, 0.18359310239097648, 0.07221766117413986, 0.07177218145697661, 0.0764696057359231, 0.07182610450504612, 0.08226053340396267, 0.07527760561417762, 0.08011593650392346, 0.07560308369026392, 0.08029902411287781]}, "mutation_prompt": null}
{"id": "b13d97ea-23e4-44bb-a251-316a63cfc142", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic adaptation of differential weight\n                if np.random.rand() < 0.1:\n                    self.F = np.random.uniform(0.5, 1.0)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with dynamic population resizing and selective differential weight adaptation.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67d84890-7a10-4ed8-856f-0fe2e08b41e0", "metadata": {"aucs": [0.6364012720836838, 0.6374009672496708, 0.6029324855574576, 0.7283602263685756, 0.6525986295732222, 0.7282473588572798, 0.6347232903883586, 0.6557738964026187, 0.6697262165930085, 0.35732092296802664, 0.4104192426630894, 0.3743095708146662, 0.34496041531654065, 0.4059470593024195, 0.45294609203734715, 0.3729064386640988, 0.30190183578116103, 0.3586831111409984, 0.09924597136389313, 0.09465520860499221, 0.08971795373084246, 0.12035421577112082, 0.0907705642937583, 0.11930234311688726, 0.11072321828925946, 0.10602123808874275, 0.10978129257649538, 0.09194205643070086, 0.1088807209049737, 0.09432760117128347, 0.09541500053760243, 0.09440430484248752, 0.09962251014033341, 0.10078799201683797, 0.08495402325578671, 0.0872208167820796, 0.9710827614171399, 0.9333794439787526, 0.9071740838416604, 0.8863265103678165, 0.9124695467521324, 0.9544286482665755, 0.9668455046443661, 0.9243550180859308, 0.9115944444753905, 0.24473641665827472, 0.2397531131164038, 0.2475393139366443, 0.26843504271199703, 0.31270312709463255, 0.24832580668882454, 0.2967134871681085, 0.30331634440519106, 0.37057639824151334, 0.3326269128648306, 0.591734775390516, 0.3450646912214588, 0.34190159107019313, 0.6436363144792085, 0.6917599104691792, 0.6174805916498585, 0.6368446448290482, 0.31774809307559704, 0.16462813877010318, 0.1612417343499386, 0.18385939306226817, 0.19880237744682372, 0.14212121185065008, 0.1473912587283931, 0.18677911296180716, 0.19032794234723682, 0.15089654154611687, 0.1463198347417055, 0.1478578638569621, 0.11164768017109383, 0.18281493709543506, 0.14442897605795968, 0.14172784163304297, 0.15767541453552691, 0.18021481074212875, 0.1466896444367103, 0.1063692336058728, 0.1398693278580968, 0.12800119808307697, 0.1299913429412347, 0.11744725379015275, 0.12473454354123226, 0.12794365136536512, 0.13352723583171122, 0.08444343097960538, 0.26737157755119745, 0.34750484011106453, 0.26373005891669776, 0.2510061629536465, 0.2921020561209956, 0.2656550472125093, 0.2684689373726352, 0.29957593942623584, 0.2692510226772683, 0.05715201617094312, 0.10796070488697351, 0.0722558121621032, 9.999999999998899e-05, 0.13723927502693511, 0.13086573324901096, 0.1324763304816201, 0.12110261931930377, 0.04540402776654939, 0.1572351742749415, 0.17714866875043356, 0.18801883177397916, 0.20200852051602136, 0.22225331390955383, 0.1831119863515196, 0.2432917143469956, 0.17088919703062055, 0.19248622715756514, 0.48327408629612834, 0.4807222266793315, 0.46776266143409406, 0.5025217888112414, 0.49227241574158065, 0.5325579313034527, 0.530772711255443, 0.4653829735335445, 0.49334102303003713, 0.09117028338149136, 0.1172655921599085, 0.08908323736494206, 0.0968631046932038, 0.09316295859171697, 0.08384664394433727, 0.07696560441353284, 0.08906016421385343, 0.09275833075047035, 0.1614898609119778, 0.29967162362882893, 0.1549902152828737, 0.15698805244988312, 0.13727926833334114, 0.14263693475535533, 0.15452347855241932, 0.12433477053505393, 0.1962935227762711, 0.2684739746867575, 0.28830383111908076, 0.30528505432999353, 0.2574283426142735, 0.27263098795239316, 0.2969257554394128, 0.3009850619884644, 0.3151057077838242, 0.3026469331851356, 0.22863176833993626, 0.22362205404040947, 0.22092639930073021, 0.21397107337702337, 0.22036673539817042, 0.2399351480921179, 0.23899308633961247, 0.2568838077951415, 0.22794296565338512, 0.19284572529419952, 0.16842249958825395, 0.19913968862936815, 0.18003827311263554, 0.17788471651529159, 0.21429156063336452, 0.19475767793734344, 0.1889971368980694, 0.2116398532817949, 0.17826421941719361, 0.18330493648760826, 0.20310518513354314, 0.1729026480980641, 0.1887836089316357, 0.18361764953383808, 0.18782817828270792, 0.18845728430088904, 0.1772866600645686, 0.33954514118481416, 0.41604309926662997, 0.14912226990172162, 0.294965475722367, 0.18951459998354325, 0.23267446004928138, 0.4933168680669281, 0.17818740512700693, 0.31926047953100967, 0.1477663329559411, 0.1980624116071441, 0.1988057771698586, 0.2590940443301796, 0.19431533146150437, 0.2651158848424612, 0.2059384181173446, 0.20148645951872013, 0.20859203155640726, 0.19753981806734877, 0.17502051637338878, 0.18322328037034408, 0.17652971780297355, 0.18306301569166306, 0.1766960101938344, 0.187014012759255, 0.18548405780202204, 0.18359310239097648, 0.07221766117413986, 0.07177218145697661, 0.0764696057359231, 0.07182610450504612, 0.08226053340396267, 0.07527760561417762, 0.08011593650392346, 0.07560308369026392, 0.08029902411287781]}, "mutation_prompt": null}
{"id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 12, "fitness": 0.27778662234155316, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "67d84890-7a10-4ed8-856f-0fe2e08b41e0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "7cc55ac9-a7eb-455b-b9b4-e5c303184965", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "6a1103e9-767d-49f5-b5da-c67d42b974b2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 12 * dim  # Increased initial population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.9  # Adjusted differential weight\n        self.CR = 0.8  # Adjusted initial crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            fitness_std = np.std(self.fitness)  # Calculate fitness diversity\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive mutation scaling\n                adaptive_F = 0.5 + (0.5 * fitness_std / (np.abs(np.mean(self.fitness)) + 1e-8))\n                self.F = np.clip(adaptive_F, 0.4, 1.0)\n\n                # Adaptive crossover probability\n                self.CR = 0.8 - (0.3 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Dynamic population control\n            if self.evaluations > self.budget * 0.6 and population_size > 5:\n                population_size = max(5, int(population_size * 0.9))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by incorporating dynamic population control and adaptive mutation scaling based on fitness diversity.", "configspace": "", "generation": 14, "fitness": 0.25251318147892055, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.7645210703083118, 0.742235247764244, 0.76174078998326, 0.7708398650891991, 0.76613958558318, 0.7699617541750705, 0.7574565178519924, 0.7694117192425839, 0.7620655942735134, 0.4650121131354261, 0.39579360142339315, 0.38507388228770634, 0.3826099636325484, 0.3728528978114105, 0.3793600063788769, 0.3457543585567079, 0.43547819045379854, 0.4112093046595354, 0.1461674075403787, 0.17720025554660712, 0.12115739917775115, 0.13883285111823684, 0.12305449780537181, 0.14114486449614883, 0.13040036408294875, 0.1238709522779653, 0.1687979796775717, 0.12055720253698177, 0.13091393653766603, 0.12022459778877381, 0.19983822874086576, 0.12052448043863628, 0.11604576291484447, 0.11092870728220483, 0.12385583683535073, 0.11531245996237705, 0.945048098097681, 0.9510808711567714, 0.9511797559585918, 0.9419276954076186, 0.9160126233614552, 0.8705850496950021, 0.9615720187091301, 0.9583253747544068, 0.9181325585743728, 0.3345503028716672, 0.28889779123382264, 0.2769749385456738, 0.3105708568279262, 0.2875162753215018, 0.2930151079408544, 0.3018848276112045, 0.25317048487744953, 0.2907129890540583, 0.3165978773437961, 0.3027183429706978, 0.48098860365958984, 0.32070142722959727, 0.5617817912873397, 0.3080225864931061, 0.3087399522907375, 0.5230998462848875, 0.48693306596010644, 0.1444911366727234, 0.1257545834122591, 0.10783358625589967, 0.1258112317534249, 0.12342515832254541, 0.12778782333670624, 0.14931126270223416, 0.15543627050043762, 0.1242998822577911, 0.08292513762488884, 0.019126611339294164, 0.028031846481600953, 0.11571919816091925, 0.13519439764457908, 0.10253128769571662, 0.12973302008899024, 0.10294638290933067, 0.11020197230319173, 9.999999999998899e-05, 0.016669291640304396, 9.999999999998899e-05, 9.999999999998899e-05, 0.01514880414035269, 0.02248192898442425, 9.999999999998899e-05, 0.002362818027537239, 0.036839704393288764, 0.043178063787729815, 0.0796804593493251, 0.06251248117098507, 0.09399187647291096, 0.034427717986228346, 0.07031977174940529, 0.09599580125617235, 0.08175647039196898, 0.11540636100650115, 0.027584880598992667, 0.023458216133167675, 0.030077693529384164, 0.08420136951556889, 0.06955234573181601, 0.044033257607758225, 9.999999999998899e-05, 0.042564305757931686, 0.06236588909579077, 0.11899038643841064, 0.16260300430273456, 0.16400229152039925, 0.13472280107363854, 0.097388648714267, 0.11128011444924957, 0.13478656383423326, 0.1283166323436119, 0.18843186353922592, 0.49861482949199265, 0.5008077971180435, 0.5243168344962097, 0.49388000400763565, 0.5270827383005714, 0.5168013255294142, 0.5410735297131107, 0.5266656015140865, 0.5061123628824336, 0.1006402257751019, 0.0944983364508154, 0.09911604662848494, 0.09948556575902401, 0.11018586936507002, 0.11616333541768686, 0.08250651053403324, 0.0921931621648755, 0.0957418223966977, 0.14769688806967374, 0.1435039024628061, 0.13533206472041515, 0.14101556065683762, 0.20018157635832523, 0.1774405514548012, 0.14416528050238409, 0.1572663150703424, 0.14382765274223586, 0.35023746600669925, 0.3030249780121096, 0.2959091014947455, 0.3623436568491881, 0.32886227929869716, 0.32476727263345107, 0.4139711223665631, 0.3800461345878965, 0.33631057055253644, 0.21814137702645853, 0.19379279020601803, 0.20911776464250975, 0.19890817770577218, 0.24461038352981668, 0.22702064372460318, 0.28481427441889184, 0.2783878078584814, 0.29244560288572374, 0.2064743346554061, 0.18678647757953426, 0.21685370270756343, 0.18679509312293852, 0.1849154836746445, 0.2015094141320184, 0.19918213565166865, 0.2043884614781969, 0.20634389185858792, 0.2525618414836531, 0.19771772849525993, 0.18346463246279232, 0.19196557544241832, 0.22686445218204532, 0.19820205032919114, 0.1927847109681302, 0.18740328595580913, 0.21848731173206437, 0.28675757465182916, 0.17331840039496016, 0.2532704047255713, 0.3763393046965289, 0.23790869448082497, 0.2006916146532618, 0.22031208010307035, 0.23172032704299295, 0.5543419179010645, 0.19128712340154463, 0.20538048617057958, 0.16473523790147881, 0.19653567815939688, 0.31980023544669656, 0.16295069036787135, 0.20482409113961952, 0.20157378354112798, 0.2062520260555487, 0.1967233948500483, 0.18301973030612295, 0.18606839194760627, 0.18403817928063315, 0.1835667800113291, 0.1782408803054948, 0.18612225121475878, 0.18565419458605226, 0.20230473598381493, 0.08308714031036657, 0.08694638010707445, 0.08213511731124978, 0.08555730045984233, 0.08952998711694016, 0.07094614562069623, 0.07810847830060463, 0.0759904043218741, 0.08180239438683579]}, "mutation_prompt": null}
{"id": "213d71ef-6142-4124-9386-3fb7c3643dd6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "4d312567-23d1-4948-bcab-df9e3028ef89", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "5562875e-592a-4819-a4db-879d67634e82", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "fb9e0fad-0c88-41e0-9809-0edc613d2d17", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "1124af0e-efd5-4070-a018-fe5de7faa682", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "c8ecd86d-57d8-4b06-820a-4b403a7f8b02", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8\n        self.CR = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic adjustment of F based on iteration progress\n                self.F = 0.6 + 0.3 * np.sin(np.pi * self.evaluations / self.budget)\n\n                # Refined adaptive crossover probability\n                self.CR = 0.8 - (0.4 * (self.evaluations / self.budget))\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Gradual reduction of population size\n            if self.evaluations > self.budget * 0.6 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by introducing dynamic mutation scaling and selective crossover refinement for improved convergence.", "configspace": "", "generation": 20, "fitness": 0.26414451494463287, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.6933827677463615, 0.7104070681129772, 0.6780570948509341, 0.70781639334349, 0.7219772448817662, 0.6982367791190147, 0.6972421543394993, 0.6798486635749494, 0.7072227946917347, 0.38871940273737715, 0.5111208825816984, 0.5115745047597424, 0.5099717214469586, 0.5245809519093054, 0.5139210735240132, 0.4660966512883269, 0.5233850792134911, 0.5126429875352332, 0.1290369551844659, 0.13093217753106035, 0.4048319099854655, 0.3479199424607804, 0.41891155863963936, 0.14178525210741955, 0.4053376055120933, 0.1379734052467273, 0.3589829028677335, 0.13193608641550525, 0.13829539793609236, 0.12195754562316885, 0.38487552857842455, 0.1374173899166008, 0.1390904349591492, 0.1365824396212142, 0.13531401097915952, 0.33505560962535275, 0.9188037181199282, 0.9554676154673202, 0.9403995932225013, 0.948464111453694, 0.9451985808510664, 0.9600165065053989, 0.9388243269485246, 0.9399829126277433, 0.9524999786631689, 0.3035286917287482, 0.3133623594568299, 0.419057565854438, 0.3010025897096399, 0.28183287235787724, 0.3557123226906026, 0.28843077204537726, 0.3211078201420081, 0.333566287489532, 0.28405578412777277, 0.2790153361479113, 0.2626153403317347, 0.44941749025574196, 0.3054665189385303, 0.51493741864757, 0.2759992311962055, 0.2914028081741874, 0.5002138216353502, 0.16244382012288916, 0.1287946299633188, 0.16170314850786593, 0.1730517325183326, 0.16518907355981538, 0.17207492442051187, 0.1517251354087299, 0.15509421216858954, 0.14411329967981712, 0.12567860325705948, 0.08889408351525785, 0.11175778353392107, 0.15645241593524584, 0.14364291714080724, 0.14117873063928488, 0.16780258642424484, 0.12851999749277565, 0.16248637381435693, 9.999999999998899e-05, 0.00016078992481838306, 9.999999999998899e-05, 0.02250313215057087, 9.999999999998899e-05, 0.012970507849968116, 0.0202890071608699, 0.007865247340291037, 0.04292114250015855, 0.09965213164857722, 0.08464328903532803, 0.11472248861969381, 0.07292840765928055, 0.08101513714194386, 0.09512827253243084, 0.13926559023641671, 0.14767792537697244, 0.12966483840944287, 0.04756839682610903, 0.016528188660086207, 0.05004262277661764, 0.19052549534824648, 0.10464379648628241, 0.03045349289599375, 0.04925775547260969, 0.07178568956541509, 0.04011312369123132, 0.11682858133903906, 0.11217923613571945, 0.11158457341140382, 0.12272327253803672, 0.1542315641543731, 0.16621330130886958, 0.0894587050139708, 0.12312993432499586, 0.09671454940353286, 0.43665928247750996, 0.4700579661815689, 0.4788538413980683, 0.47871662049613317, 0.4791305723822209, 0.45230050398047605, 0.46960882283042304, 0.46718433081635846, 0.463188186104726, 0.08659521777401002, 0.11908409494337957, 0.10800175407861334, 0.09912386375759596, 0.0935060081957847, 0.09565118217174118, 0.08589138645242711, 0.10277840952914208, 0.09420674910483284, 0.14435124079344042, 0.1346837286758148, 0.15460251208078113, 0.13470616442900318, 0.16328428715366805, 0.13628897730093648, 0.13015917823425427, 0.13464176163271147, 0.15862220871667865, 0.26628705699744115, 0.2652284691375445, 0.3383749336733851, 0.3169367504676437, 0.27355537885661374, 0.34785092747995405, 0.31983600783979405, 0.30778275870420624, 0.36225375286152095, 0.19368811768211125, 0.21823137900905654, 0.20099872581077893, 0.17955924492785014, 0.201863111518095, 0.19384984132414407, 0.21775231836575126, 0.20459800776985482, 0.2205047126720333, 0.18410461831938263, 0.1907915752229411, 0.19670671584755706, 0.19044699006337107, 0.2102000751832518, 0.1697071137376157, 0.19347204850339683, 0.18612798374130202, 0.18968806696131957, 0.20348595274922998, 0.19376122691216835, 0.4316428129267347, 0.20679564415717966, 0.22737855048243594, 0.20527241361456827, 0.2044318209557724, 0.18915940735929604, 0.22589400195216247, 0.1621938864839323, 0.1717070891741661, 0.5188938989447078, 0.34089471733438437, 0.37263005535399074, 0.45835489518081873, 0.190502458564607, 0.27108413037592916, 0.17285266346216377, 0.186298640428197, 0.19786640263237842, 0.19482760897111606, 0.3378122855576273, 0.18756554015041682, 0.4146648835960276, 0.20322104307552258, 0.4384133028939948, 0.20873541302658527, 0.19097722862892608, 0.18424852436167716, 0.18347049605602583, 0.19078142096035366, 0.17688909617420068, 0.17536398622557137, 0.205312004263698, 0.1942647358678533, 0.18105571344090554, 0.07132885987269455, 0.07041896036595086, 0.07371121788371748, 0.07232695963748415, 0.07828560917646266, 0.07944024179850562, 0.07479418566840212, 0.0699156741505329, 0.07489763414295414]}, "mutation_prompt": null}
{"id": "0177261e-cdfb-4503-ab6a-3e29b37aa4a2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "d8fdb742-37bf-4c45-abf2-d5dc0db3a5ee", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "1955f942-c0f1-4873-845a-21a1924de492", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "e1ea6590-2909-4e32-9558-5fcd277dc0dd", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "7d66d910-551d-43b2-ae17-b4cc82cbb78d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "9c447dd3-87ec-472f-8254-418fa5c498ec", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "64e50b8d-c755-4968-bd26-cc6f449b2862", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "dc5eddd0-d756-4123-92e2-1eff3b131ab1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "3a7ce6ec-bf60-4e6c-b4c9-f50ffdd0571f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "c00fbc36-5a4d-435a-9123-b5f92a9aa072", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "93683171-7b20-4435-a4e0-d2ca79024a37", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8\n        self.CR = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.initial_population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(len(self.population)):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = np.random.choice([idx for idx in range(self.initial_population_size) if idx != i], 3, replace=False)\n                a, b, c = self.population[idxs]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.5 + 0.3 * np.random.randn()  # Adjusted stochastic factor\n                self.CR = 0.9 * (1.0 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.5:\n                self.population = self.population[:len(self.population) // 2]\n                self.fitness = self.fitness[:len(self.fitness) // 2]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with dynamic randomization and efficiency improvements.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 34 is out of bounds for axis 0 with size 25').", "error": "IndexError('index 34 is out of bounds for axis 0 with size 25')", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {}, "mutation_prompt": null}
{"id": "b9ebab47-ccf7-441b-a0b2-be10a8672987", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "9e02aa66-f325-4d08-bfe9-758f27e0ee35", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "ded8c41c-c7c7-4c35-b317-fb17889c651b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "ce64df29-fae8-4949-b474-438cf2f7e137", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 12 * dim  # Increased initial population for exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8\n        self.CR = 0.7  # Adjusted initial crossover probability for improved diversity\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.6 * np.random.rand()  # Modified range for F to balance exploration and exploitation\n                self.CR = 0.8 - (0.4 * (self.evaluations / self.budget))  # Slightly adjusted CR adaptation\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.4 and population_size > 6:  # Earlier reduction of population\n                population_size = max(6, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with dynamic parameter tuning and strategic population management.", "configspace": "", "generation": 35, "fitness": 0.27038412547139834, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.73079548767173, 0.7501433344319963, 0.7361477149531654, 0.7360609485278328, 0.5776554189268919, 0.744521749415022, 0.725766874215215, 0.7447114430173758, 0.5882915999851868, 0.5225138857828371, 0.4823350545688734, 0.6102456647550816, 0.4325871468998075, 0.6205929787087914, 0.2700274063378121, 0.5712370363809085, 0.6058151922196455, 0.3653697706938811, 0.15144323680319016, 0.15321783248682097, 0.12404935948316054, 0.15001348655515356, 0.14465308237718932, 0.14756494589053926, 0.2445220855904906, 0.1481625472253878, 0.26497333169136394, 0.14435034959394855, 0.12290740773048325, 0.12066395415154652, 0.1298038557966651, 0.13776043200341448, 0.1434359063402002, 0.11894194766905608, 0.28542074764054337, 0.1177544675456158, 0.9482323600180436, 0.9131666123827106, 0.9439113461352162, 0.9482398887985632, 0.9546919197163541, 0.9608319558878307, 0.9355213313607144, 0.9417623088695907, 0.9651656403133445, 0.2749544046712151, 0.2313488954534204, 0.22243160695748276, 0.2728689366008137, 0.30093307361343236, 0.3275486584024244, 0.2495030967309153, 0.1970514572850296, 0.2046402274055028, 0.27346922733587653, 0.20555346393179585, 0.6184571660385194, 0.6043494825005022, 0.6142497743947477, 0.5861288798012665, 0.31481449562217545, 0.6489255611672291, 0.2968332254125574, 0.12138317338567217, 0.1349698913038272, 0.12946060547973526, 0.1332182129354993, 0.13357804750420565, 0.13406122832509482, 0.13589166305563227, 0.130245849450366, 0.15743472461465657, 0.10667999487257473, 0.09998905064466002, 0.111593968460725, 0.16375481065543118, 0.13930974635610693, 0.1540966450576965, 0.13712148997202367, 0.15833567805906856, 0.1431639706190152, 0.05274837763865958, 0.04531609030077621, 0.1729240165697371, 0.07273199947270292, 0.0986760300473628, 0.025398114299353458, 0.036168063879649215, 0.10228904125234117, 0.02962479818389563, 0.09247017517238054, 0.08746471299932634, 0.09488969451054485, 0.0982214128724741, 0.09790701092018494, 0.07844904029303035, 0.17169977231381184, 0.15285344524154187, 0.11541232544493085, 0.11559474617622167, 0.06211396374422673, 0.05218943930449982, 0.06445472235409999, 0.16833624128635094, 0.11377194685675718, 0.12879440049058188, 0.09143582196046551, 0.1263775115876048, 0.1480246792503851, 0.1370259548277758, 0.15799645758625958, 0.16635680077868242, 0.13369321151098612, 0.20790229169362506, 0.1789317676740224, 0.10309876653836358, 0.19028234003462563, 0.4558334098197767, 0.4732048802819958, 0.4291918054661049, 0.49091333440827367, 0.47342832680018754, 0.48591930806975325, 0.4202196445331473, 0.4399393098738462, 0.499140283752867, 0.10811591165851564, 0.10136883945281339, 0.08957371454595908, 0.09027379749597075, 0.09512651903851288, 0.11316342136028457, 0.09305708630378884, 0.1165437649023453, 0.10956150643800644, 0.15216286333040974, 0.15638600407304426, 0.14526375500010746, 0.15998964672397886, 0.12349042733660665, 0.16792097932515848, 0.17460189307793483, 0.14235673125153603, 0.16915548676551317, 0.32951481818530937, 0.3446592411410543, 0.2870600127691786, 0.3407291138596217, 0.3284820593965694, 0.3222657544343117, 0.4225598562138827, 0.32488678023457873, 0.35772854746681515, 0.2911441582088613, 0.21001660112134135, 0.2369015850994357, 0.1890223635191005, 0.23536458715418584, 0.26232393138221466, 0.23937759731789443, 0.29469883850156087, 0.22576819529815717, 0.19297669819274144, 0.2038449964223673, 0.18381491465019295, 0.18812615625715456, 0.18640372535222438, 0.18661841394987522, 0.18746637700979496, 0.20178400351989334, 0.18293646862749124, 0.3925506933026284, 0.3252637577114511, 0.20148404718287793, 0.19970261138356904, 0.19113372342142898, 0.26113848062690137, 0.4882470308254352, 0.3493146489568636, 0.20160795149092214, 0.45139535920257434, 0.4536583562511505, 0.16823094017138407, 0.37249465633507706, 0.18020225921906563, 0.4585674265300773, 0.20924474492909217, 0.3850491632221811, 0.20105563415955874, 0.16371602108784022, 0.39455210043753697, 0.18617134367560684, 0.15745356336681593, 0.22748814835106268, 0.2533487345879073, 0.20214117859043135, 0.3291898405995338, 0.20693796623770766, 0.18632184621021175, 0.17975732019151291, 0.1791339909229801, 0.1898371363193857, 0.1808972705141335, 0.18597115420345411, 0.18890690536030685, 0.19059359263994835, 0.17868154823847615, 0.0748604918364939, 0.07850047275919825, 0.06917105932140022, 0.08116271871265546, 0.07677101988374813, 0.07133769695787595, 0.07160688793865266, 0.07626661426778336, 0.08351793062056201]}, "mutation_prompt": null}
{"id": "9ff05f49-feb9-485e-be56-a032e3fb90a2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "7ac606b4-71b2-4427-bdfc-f730a0e11ec8", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "c7f5c4e8-dc45-4e65-a97c-a3c3e35492a8", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "fecf772e-e288-4bac-8137-faf9a88fb233", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "4e9cf980-801a-40be-9286-bda6e60428ac", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "414788c5-d0aa-4b18-9c3b-61207274e7da", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial Crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.5 + 0.5 * np.random.rand()\n\n                # Adaptive crossover probability\n                self.CR = 0.9 - (0.5 * (self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Reduce population size over time\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, population_size // 2)\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by integrating adaptive crossover probability and enhanced dynamic mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.728014969483257, 0.7201979568574643, 0.7312357862188691, 0.7352355806703268, 0.7167700312323044, 0.7331872560597775, 0.7144788223392885, 0.7131390721260514, 0.7343341598599913, 0.4314751867975035, 0.4685680376480733, 0.4767120366152108, 0.3830979172579183, 0.5861736146684319, 0.5687932283600874, 0.41248204891183704, 0.39835009091058204, 0.5641308586410927, 0.1755154211606489, 0.28889088434748933, 0.2768624270954656, 0.1342142550348855, 0.13356204865560017, 0.2299549338140393, 0.4919729688749981, 0.14432403965178997, 0.22602819917036632, 0.12079290330379155, 0.12024383175673015, 0.13420466167015055, 0.12152498100102982, 0.10740184764703065, 0.11908294012096798, 0.12819189006762244, 0.12788891017917559, 0.13457446198177092, 0.9478182466008273, 0.9707531340002755, 0.9395506281327879, 0.9468410818187377, 0.9374072098576528, 0.9392909127239629, 0.9287604501383507, 0.9623171522648915, 0.9521567328438614, 0.2746489479915787, 0.29632937990642705, 0.2862108728988757, 0.2589638562540324, 0.26320330061017816, 0.24886856840087157, 0.264936509497411, 0.315254884330853, 0.35846340915474806, 0.30869398170948037, 0.5516798671086769, 0.29753942095713615, 0.2939613866425177, 0.573519592958956, 0.5849804092083624, 0.3238152456004123, 0.5962723839131614, 0.3158871870745631, 0.17377380290734257, 0.1481472460365827, 0.16795559248808944, 0.3587124015304858, 0.14472457144863715, 0.14365954021803373, 0.14177291403173364, 0.17589619893850117, 0.14568318939368397, 0.15024741923061535, 0.13682187372303212, 0.12659242256304393, 0.1510941048680099, 0.14005362657946951, 0.13744686481552104, 0.13275336687140227, 0.14501401163074112, 0.16202502894975745, 0.028643999242181195, 0.05650334274604207, 0.06508302460812032, 0.03304827355160256, 0.08028396458964016, 0.04264782157068603, 0.028459910902350227, 0.0645900732760345, 0.031974551137779805, 0.17898617523776483, 0.10996764690601901, 0.1114172449730686, 0.17032487732741997, 0.14391940485820176, 0.17214108923394555, 0.1562243497727881, 0.173966258248204, 0.14018841949921512, 0.1197780559867202, 0.03375638068621034, 0.04224945505627298, 0.11071098356396292, 0.142392339664963, 0.11841724071836435, 0.10969337229498599, 0.1532185790111107, 0.06701545913264961, 0.13463440638884328, 0.1481114759640444, 0.20423306197439683, 0.17404787728158533, 0.16958295671893375, 0.12529458495175116, 0.19745456589526444, 0.19728015911212538, 0.17801248650776547, 0.5071066164130915, 0.46381601113935866, 0.5051229860127275, 0.515774280592013, 0.476116477180459, 0.46379105718120517, 0.4745636223189047, 0.4783896849385544, 0.49823093033350474, 0.09023420511375757, 0.09710277879995632, 0.12556438954801574, 0.09950278454130934, 0.09921236002870226, 0.08783898695745063, 0.10120574066965382, 0.0896925967730966, 0.092673038479414, 0.149631820150826, 0.13856183005555645, 0.17204324891168488, 0.14263637975944587, 0.16539429577256137, 0.1739881401835479, 0.15176566430376515, 0.14424398570549035, 0.13381066075851, 0.29395147759067286, 0.27818917008763233, 0.3482435169287127, 0.3049561695029407, 0.32562059447890634, 0.3118747713143718, 0.3794087595461296, 0.3878053404775429, 0.4114156204963839, 0.21730202862539894, 0.2531273161423446, 0.21767800517504998, 0.18376399505413088, 0.25833790648078947, 0.235946324279945, 0.24355609544629753, 0.2663918307465072, 0.24339552127332842, 0.18397838213866902, 0.19345939183546468, 0.17940989471524826, 0.1900000053949561, 0.1653362455384515, 0.17484861630279502, 0.19213929756424686, 0.17232481115154552, 0.20113852168812996, 0.19906834194707945, 0.49701103248348855, 0.29539750629471473, 0.242665393301021, 0.27459276742262095, 0.21060070606127024, 0.2166631554827423, 0.4790487666599669, 0.2038910902947373, 0.23412789236397213, 0.6081151102932175, 0.6467958389346081, 0.5001384395611378, 0.2782087195502011, 0.32815139858502884, 0.21954588427358002, 0.2762136035536987, 0.4942519816592996, 0.17439121155003323, 0.19675949345245858, 0.1634474979779259, 0.14099126647249616, 0.1856784688232911, 0.16661462923414383, 0.5123454275947354, 0.20354428317240714, 0.2068935105159675, 0.18521155361083297, 0.17646779470898533, 0.18776242105494634, 0.1760326820009701, 0.18858718161910482, 0.1812093908820549, 0.19122624403293043, 0.17716541883362535, 0.17948016309499504, 0.06674052961500188, 0.07563491477061979, 0.07910611548313795, 0.0814857052096688, 0.07268822279715881, 0.07922902366360662, 0.07425875577222518, 0.07635648270899897, 0.08013916819471179]}, "mutation_prompt": null}
{"id": "f1aea73e-b907-4438-b5b6-aff9f43f987d", "solution": "# Description: Refined Adaptive Differential Evolution by dynamically adjusting differential weight and adapting population size more effectively.\n# Code: \nimport numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim  # Adjusted initial population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7  # Adjusted differential weight for initial exploration\n        self.CR = 0.8  # Adjusted initial crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced dynamic adaptation of differential weight\n                self.F = 0.4 + 0.3 * np.random.rand() + (0.3 * (1 - self.evaluations / self.budget))\n\n                # Adaptive crossover probability\n                self.CR = 0.7 + (0.2 * (1 - self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # More gradual reduction in population size\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, int(population_size * 0.75))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Refined Adaptive Differential Evolution by dynamically adjusting differential weight and adapting population size more effectively.", "configspace": "", "generation": 42, "fitness": 0.2831728695880818, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "a7a69ed0-9885-45b7-8c11-c58c6233dce0", "metadata": {"aucs": [0.7255931264024945, 0.6858939874616155, 0.7030474873248949, 0.7415347192726737, 0.7179944320833873, 0.7292434987399922, 0.733873214644921, 0.7352823204078762, 0.7292798265690772, 0.47515196498470336, 0.5143478159828578, 0.4536583978434584, 0.5095596601593742, 0.4591991024843266, 0.5242179414736893, 0.5013684145090531, 0.5457922754608487, 0.48346333938078734, 0.13041565344031747, 0.15301854343431442, 0.12594868783755953, 0.10168244210017985, 0.12363573177134135, 0.1796430706043085, 0.13035933658222731, 0.12186615141633605, 0.17236702612032495, 0.11276519369579507, 0.11014050828441724, 0.10760791905271039, 0.128763098527355, 0.10680826930525034, 0.10936514554974763, 0.11577382029878225, 0.1159645166947264, 0.10219684782513683, 0.9435033088105903, 0.888184973677686, 0.9628863580023079, 0.9790061835145876, 0.9707606232428518, 0.9441371954059897, 0.9476208777510206, 0.9688048463477984, 0.98941879421147, 0.3294851188439185, 0.29324940228875795, 0.30284623653183373, 0.3353191519606121, 0.31882388581498533, 0.3137943357659906, 0.3279010226478536, 0.3003871288948041, 0.2776295212817109, 0.6111216330941754, 0.6121125297153753, 0.327415507407561, 0.3331290274944133, 0.6552489615958584, 0.6146117936382616, 0.6154971437238792, 0.6075081069507462, 0.6268190895440591, 0.1747610749372328, 0.2087756448412238, 0.18937921933945645, 0.16296930791885533, 0.19014621454671976, 0.18541638947950279, 0.18265289217126224, 0.19120136136773025, 0.15376182081414247, 0.1641616140876473, 0.1889377136832221, 0.2919952261528672, 0.17733841705233555, 0.15298503999739965, 0.1740263625973878, 0.1888649436872072, 0.18934978727339402, 0.18404186900289166, 0.08946462197046745, 0.10241624253085324, 0.10022670908887066, 0.11240384752277133, 0.05678633805975675, 0.06595656748645562, 0.1412962660914192, 0.10400891657891898, 0.07305252922948369, 0.24421748326124815, 0.20862409742740973, 0.1902131413495518, 0.23571305052703062, 0.1993198607300274, 0.1648285142757281, 0.29973936318075656, 0.2909762075273026, 0.2767361609890895, 0.12294366772252174, 0.04832876768685512, 0.02055674389608375, 0.12515412135473236, 0.04853402187706013, 0.11493030973527074, 0.0601433987155211, 0.05137395548439694, 0.05400377443312576, 0.1514573476318516, 0.19427212931103166, 0.23379263359837177, 0.23370267931781274, 0.1845924672955318, 0.17245262672867756, 0.22576649551491268, 0.16850301473232698, 0.20479744511631892, 0.49588340229834826, 0.5007831874938113, 0.5150069109477979, 0.5066149166800656, 0.4757722547775227, 0.48077867989676915, 0.5000233736128262, 0.4975214793306537, 0.5165458353016879, 0.10763684868027046, 0.08085162167967153, 0.10161881227878455, 0.0933120457795723, 0.10639979730717108, 0.10216097323604323, 0.09098496679912682, 0.08208761841057444, 0.09848637993479659, 0.14165882330611856, 0.17677100527285272, 0.13840438683560352, 0.14316519984329223, 0.23100850490076308, 0.20424982465953767, 0.15154811226450693, 0.1644911822334738, 0.14476139415587808, 0.313671776521104, 0.30402087710217207, 0.30577725035307257, 0.30742099365189957, 0.31181901933376277, 0.30042291786511566, 0.3993330564598161, 0.3386429418079281, 0.34175226927842994, 0.24658393345204122, 0.2665470044741888, 0.20981556509282184, 0.2570256814751267, 0.21481142185768953, 0.2034203605481788, 0.26478543243692887, 0.25565820352466306, 0.2337560457669049, 0.19322113747475844, 0.1729766832125309, 0.19079189950673126, 0.19130401347956683, 0.20705811885455327, 0.20143409253282984, 0.17692405610135242, 0.1944296751901895, 0.20527422590312017, 0.2090569049499168, 0.22896117200253752, 0.19058555718187298, 0.1946854198799023, 0.1889393127484713, 0.18634720323885479, 0.29708404809097677, 0.21013429417689788, 0.19900353376668423, 0.666175236970949, 0.1864686441994683, 0.16558857042773523, 0.6832788077577183, 0.3547778524465037, 0.2754833227849496, 0.23142793328510003, 0.22674703943665742, 0.17261135735988642, 0.19666181798134452, 0.1663163339934779, 0.19023316003894875, 0.46106287715146355, 0.1751515246915969, 0.1854266799102261, 0.2068695428784113, 0.20716586473755516, 0.14860407896786676, 0.18277776183420935, 0.18436272613247906, 0.1895844475865751, 0.18654094918271158, 0.19216067928554703, 0.19942931243389173, 0.18415093579099673, 0.19362081741389192, 0.16984486896160722, 0.07286045563492916, 0.08093857805022475, 0.0813540378560148, 0.0681629091586834, 0.07776312623557091, 0.078966629261363, 0.06988814600037563, 0.0783548389692531, 0.07642766619039632]}, "mutation_prompt": null}
{"id": "b2ecd01d-0f9d-4335-b06d-657e6de75b85", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 8 * dim  # Initial population size remains the same\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.6  # Revised initial differential weight for balanced exploration\n        self.CR = 0.9  # Increased crossover probability for enhanced variability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Dynamic adaptation of differential weight\n                self.F = 0.5 + 0.2 * np.random.rand() + (0.3 * (1 - self.evaluations / self.budget))\n\n                # Adaptive crossover probability\n                self.CR = 0.8 + (0.1 * (1 - self.evaluations / self.budget))\n                \n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Gradual reduction in population size\n            if self.evaluations > self.budget * 0.5 and self.population_size > 5:\n                self.population_size = max(5, int(self.population_size * 0.8))\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with refined exploration-exploitation balance and dynamic parameter tuning.", "configspace": "", "generation": 43, "fitness": 0.2675220173854718, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "f1aea73e-b907-4438-b5b6-aff9f43f987d", "metadata": {"aucs": [0.6881649404494776, 0.6253837571068556, 0.6245380691911351, 0.6879078428662233, 0.7057174853505264, 0.7087034752851451, 0.6595400569627728, 0.683971225715182, 0.6712710562729123, 0.5079427876421985, 0.46453608777949107, 0.37554953179084427, 0.3980292647833238, 0.4408157623772414, 0.42384433359904117, 0.4249027421844458, 0.33567823275229725, 0.48224143733502756, 0.11604781719678536, 0.14080781106875007, 0.09592353750287586, 0.10847790221597953, 0.0989678290503403, 0.12178334401915292, 0.10094187836594115, 0.11211028740826001, 0.11241055321521343, 0.1227314912508084, 0.11283643660365672, 0.09806929968684885, 0.11134311102590122, 0.10128807534966422, 0.10052083079266882, 0.10455558471121063, 0.08324668783023104, 0.12430707930236362, 0.9460169908574405, 0.9372152747504767, 0.9438458210326773, 0.9744985074187272, 0.9681981802019036, 0.9493248504936078, 0.983166455771662, 0.9532086042877643, 0.989445197199588, 0.3099827909295383, 0.23273744702529586, 0.2629778456157583, 0.277248395682136, 0.2894499226085121, 0.2750430741991836, 0.2634786525516285, 0.2989735091856148, 0.3067984556658834, 0.3108984290975524, 0.3198517992542339, 0.3132767664126148, 0.6141368954516462, 0.617067887758003, 0.5948311438103882, 0.5840686007143318, 0.33490597243285525, 0.32253662621833346, 0.16273159949220628, 0.1748415372818921, 0.16610516325415792, 0.1654733126844974, 0.14351816704712161, 0.15221234217200397, 0.15732156238949024, 0.16516585288587116, 0.15740891850276129, 0.21232237657725306, 0.24142871956239775, 0.1663299610270087, 0.12781807235206033, 0.14215381558342666, 0.1599108243639652, 0.1697235611168233, 0.14775534224371567, 0.16736894098365096, 0.13825201332163528, 0.10734194078504333, 0.1086688665029878, 0.13846471598344656, 0.08228675629259252, 0.0898448629023555, 0.11040136196278383, 0.06991870246842757, 0.06357986116202374, 0.2527641278566105, 0.20403269149519254, 0.18688844637147972, 0.20574726541116695, 0.20562236310498128, 0.2094976927864487, 0.2516327367622645, 0.3077679395661086, 0.23876269196745648, 0.07761752853965176, 0.04196224101691148, 0.06581601292557515, 0.15767315806527005, 0.061418149285064505, 0.05136105706896288, 0.08869869210332493, 0.16803584339387967, 0.12755236986891194, 0.171890415414911, 0.21515134509991063, 0.17078650087312364, 0.1641520328956383, 0.1656289549220401, 0.14667263732442515, 0.18713487103273796, 0.19381733874321827, 0.18033740446407032, 0.48731540788613437, 0.5242575153422064, 0.512427654429342, 0.5217685126854146, 0.45388895044363375, 0.4566189810582597, 0.4972048077650115, 0.5124655023120732, 0.4578340625993632, 0.1024903495339351, 0.09587407895427802, 0.10235692611130931, 0.09245853887057853, 0.1034374998526244, 0.09882781674683616, 0.07469334816596296, 0.08766976240624391, 0.07276955817578024, 0.23482263818152116, 0.15377722961638396, 0.18093740904878164, 0.1576225624359131, 0.19636121058067413, 0.1518684449050376, 0.1385883229422794, 0.17203884088991905, 0.13745643373218863, 0.3191956632777606, 0.2986247844622152, 0.33089960737082424, 0.27960734462320835, 0.2731745882678628, 0.28048276034812203, 0.33562740700182037, 0.32262792851023103, 0.29966092928527555, 0.2737028115331316, 0.24975323431009577, 0.26411023020719626, 0.20266421887852248, 0.18846988858906188, 0.19788523582313644, 0.26154008699996, 0.26043291762493037, 0.23670510649577314, 0.19481223617667154, 0.18428699191380804, 0.1980637963687839, 0.20079793258239598, 0.1857431690437641, 0.19643031921237175, 0.20110342568089035, 0.2025214544236994, 0.18818318092192887, 0.17780110297964025, 0.26605283971644245, 0.2150838614678855, 0.18219807622601958, 0.17650595075227626, 0.17744628723084954, 0.242240609200008, 0.20706168301059225, 0.17868270474447867, 0.19734860587547642, 0.6358836396258041, 0.18248797024551922, 0.4372737115056782, 0.17937804280141367, 0.17032992717686046, 0.17424649904047362, 0.2354467407752905, 0.3030768020130892, 0.5561659175403125, 0.19481506341799626, 0.30324504244706996, 0.3327641594104068, 0.1885779254029123, 0.1589696426103916, 0.1992641976436812, 0.20552511294409026, 0.14680649242826205, 0.18177234836822131, 0.18287563015899133, 0.19702647319749012, 0.15717856075548808, 0.17675228159301093, 0.19659157663787297, 0.19365943700129096, 0.18213823579591326, 0.19651323134091703, 0.06916117600303207, 0.07717251669781744, 0.06957553456900112, 0.08130082511021774, 0.07877010205810697, 0.0650427768590065, 0.07648401925448522, 0.0683395014414957, 0.06971990265242223]}, "mutation_prompt": null}
{"id": "f51bce4c-bd7a-43ca-9236-a464277de051", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim + 1  # Adjusted population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Increased differential weight for better exploration\n        self.CR = 0.9  # Increased crossover probability to enhance combination\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.5 + 0.3 * np.random.rand() + (0.2 * (1 - self.evaluations / self.budget))\n                self.CR = 0.6 + (0.3 * (1 - self.evaluations / self.budget))\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, int(population_size * 0.75))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with refined mutation strategy and adaptive exploration-exploitation balance.", "configspace": "", "generation": 44, "fitness": 0.2755967413023801, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "f1aea73e-b907-4438-b5b6-aff9f43f987d", "metadata": {"aucs": [0.7084030149926541, 0.7247892268677376, 0.6815358558158015, 0.7365994959622857, 0.7342296977820174, 0.7421014637145003, 0.6621257609429541, 0.7235580250288229, 0.6328301053937565, 0.5988523574848021, 0.582914310820378, 0.48208631709615846, 0.4072666321804199, 0.4057813647379911, 0.4842533613020138, 0.47120102333963665, 0.600070867053875, 0.4702427391000321, 0.1402043246939607, 0.13712767494515132, 0.13700718872724338, 0.20614422573269464, 0.13859945000294827, 0.12750469485703764, 0.11481220092918942, 0.13146231557712285, 0.13679592347830638, 0.10801547448418947, 0.11094307759467414, 0.10230202574351699, 0.11523409095113568, 0.10710514482391631, 0.13132718705534097, 0.11444228030981407, 0.13327678829668987, 0.10323093921198712, 0.952667010780033, 0.9481034678420066, 0.9386935285521961, 0.9546469101212848, 0.9464892566766748, 0.9554754787494272, 0.9502809203113544, 0.9749546712877708, 0.9476316418329275, 0.28336633260797495, 0.2567109899014881, 0.2913058820681067, 0.302046936866179, 0.29541980000097734, 0.2735319043748222, 0.31748522373804544, 0.2597604048415729, 0.27718329721223744, 0.3297440396316845, 0.594765310464584, 0.5978633021246422, 0.3171225404113387, 0.5876041704235793, 0.6206516815795975, 0.6116505404776981, 0.61673527845075, 0.3064613755852299, 0.17407317804250688, 0.16327969182914726, 0.1398146354943075, 0.1706582253300778, 0.2077759562882172, 0.1651824697239972, 0.17251554820835935, 0.15405469211221656, 0.15422525093262707, 0.14925601832572688, 0.15321291192779696, 0.11211226604166591, 0.1384607829932364, 0.16333660729226862, 0.15123457335577917, 0.17624139214594925, 0.18106472289740372, 0.16718245086976335, 0.04047338567827774, 0.013462350013747293, 0.05690043770256503, 0.10946114058895018, 0.0657006905308195, 0.04908468968815505, 0.09432469261602783, 0.08312635815084946, 0.0647277807862432, 0.12576112878237233, 0.2105756080433454, 0.23813581593149047, 0.13449580411442752, 0.18843749580028113, 0.2000171725849632, 0.24586450382292446, 0.2078224444875032, 0.20437133572739574, 0.028700795203665086, 0.09187551424297946, 0.09316180501796278, 0.14993328485752155, 0.0856024014016471, 0.10340006584173589, 0.11257497894265112, 0.06627555086951509, 0.1265929867678831, 0.1964053976618073, 0.13803276967075873, 0.18019154832439277, 0.19733216605061854, 0.21891585719858897, 0.13035904722448977, 0.15699431850873902, 0.15655386070975996, 0.21981924009558784, 0.47978904283118395, 0.5027564006694292, 0.5228931154820937, 0.4805873043596923, 0.4676221466381747, 0.5034902506669987, 0.4780935764687694, 0.48541557408785685, 0.4858799558066247, 0.0781672926424366, 0.09640837197513397, 0.09699111027660323, 0.11318922229449813, 0.09619883128514362, 0.09781934631330025, 0.09767628252635119, 0.10444385186571958, 0.11108300352588851, 0.14224170337291908, 0.17443875302176215, 0.1504234610783951, 0.13450336451323996, 0.20740915054590814, 0.12706769316987465, 0.15046097581233042, 0.15235625948406628, 0.14279146266256115, 0.2829365234478436, 0.29061976201006834, 0.32641501297299835, 0.2847741972594253, 0.25102484889301757, 0.37047113854983105, 0.34230575508059846, 0.30491632141333935, 0.4071383066520763, 0.23398071766764317, 0.26560022867971833, 0.24953374236528703, 0.2958897393364214, 0.2606380004795239, 0.2340770065851442, 0.2600170404792437, 0.26981147002699235, 0.2880195532322728, 0.16930370940024164, 0.17573484172614517, 0.18035683676304193, 0.18927599377601234, 0.20049013837705465, 0.1837991897878931, 0.1891376403963032, 0.18290310562352485, 0.19019714364654283, 0.2018115318086081, 0.17534034119836484, 0.1881440859736404, 0.19344810095393128, 0.18771136801601407, 0.18920258619351105, 0.19184174296079648, 0.2925812630439416, 0.22931118840815978, 0.6476317104853735, 0.16947334908168865, 0.6287432559041104, 0.18087453489323513, 0.17959396676717465, 0.24543622880723692, 0.6498371261663971, 0.34554901855307596, 0.4279772059354263, 0.2605713094140877, 0.16565992824218279, 0.1893870420073328, 0.15497502996214663, 0.1922878992783441, 0.1914517764268151, 0.20723968385169955, 0.2060330271979055, 0.20990217322562676, 0.17980603212524526, 0.18875641099873697, 0.19163349674433316, 0.1908672463517439, 0.18535276150451951, 0.1798126235169848, 0.18610705512153536, 0.1640423348724227, 0.1822622797781902, 0.08009517626394991, 0.07658973908539846, 0.07625388316520876, 0.07123119019412893, 0.07928082815511406, 0.0716383842708661, 0.07156028575465712, 0.0802170731559998, 0.0799330560964403]}, "mutation_prompt": null}
{"id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 45, "fitness": 0.2971526580458328, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "f1aea73e-b907-4438-b5b6-aff9f43f987d", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "b3f114d8-d703-4e0e-9035-b0e0b5106cd7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "b40ec175-e194-43d2-915b-dd88562ce579", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.45 + 0.35 * np.random.rand() + 0.2 * (1 - self.evaluations / self.budget)\n                self.CR = 0.65 + 0.25 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.75))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Dynamic Differential Evolution with Adaptive Feedback Mechanism for Improved Exploration and Exploitation Balance.", "configspace": "", "generation": 47, "fitness": 0.2945725265619608, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7407894382173911, 0.7031336713481816, 0.7444114444088956, 0.7673246216286296, 0.747285657069354, 0.7312746258100853, 0.738655021736502, 0.7393238622886913, 0.7321345670104606, 0.5808503793996332, 0.5816356167495567, 0.5823700746833878, 0.5351350029118626, 0.5651455322935248, 0.533622194320388, 0.5089885506133878, 0.5355462718409852, 0.5700697985974147, 0.14727357393175589, 0.12177747607436451, 0.1403297935179857, 0.1069986219728073, 0.11460609693972423, 0.12067455079154932, 0.11471833625022076, 0.0983408659912478, 0.1299007111576238, 0.12833998233898514, 0.0995920671205145, 0.1051413970370817, 0.10971756336129623, 0.11419205531110677, 0.10965499098124365, 0.11035056833263168, 0.11106664886744644, 0.11438127866670433, 0.9358162177448559, 0.926704839730937, 0.9385995660791946, 0.9716604747995741, 0.9719668911707344, 0.9625670389917454, 0.9464124227047774, 0.9586306162902747, 0.9893967772366188, 0.34943211790062, 0.3294165097870997, 0.332206680680041, 0.30732192352349164, 0.3050527723600841, 0.3348570779910246, 0.3289264785899425, 0.2982308776531155, 0.33861974487528457, 0.644429779884278, 0.5708758093291477, 0.5342131881823551, 0.6697097914932806, 0.6835292290704273, 0.608233742894291, 0.6898909400561647, 0.5935131836560188, 0.6322393643525246, 0.18586609418194788, 0.20147235537314667, 0.15891834795238136, 0.2134726841716974, 0.23804679739732926, 0.1877111905494222, 0.21638534571231716, 0.156959006610765, 0.19317606396522813, 0.11504151113041494, 0.15891197910209431, 0.14967580339110187, 0.16605604376960326, 0.1651893791636032, 0.21733563274772416, 0.16512238192823625, 0.1486261568379179, 0.18598864325478082, 0.09993388553586624, 0.11426079657941723, 0.08576016547087129, 0.13201898764893083, 0.05655735715572774, 0.1082508717823677, 0.09152045555079602, 0.15872760074478098, 0.11830828558528794, 0.2280014701078399, 0.22527142738996364, 0.2952141558237449, 0.20129408572691154, 0.21957091648521243, 0.22520071763366345, 0.2459824594666964, 0.24820563604584445, 0.2833465182960466, 0.06491175794470361, 0.011680633224493198, 0.03371779416356313, 0.07922486916737037, 0.0712339066131763, 0.09028049334800747, 0.0736964921215767, 0.1193016321944309, 0.10553269253535003, 0.17344871294729602, 0.17757801606591062, 0.24104933179133792, 0.1677440645894156, 0.1822600272498881, 0.1806780183347102, 0.19632967182269745, 0.19570356662208366, 0.19740146783217782, 0.542254897705019, 0.5130972510498061, 0.49822235140962023, 0.5533104879065232, 0.5222316315966544, 0.5156978976909347, 0.5369881267079126, 0.4796533963255858, 0.4613650777589139, 0.07963860058412686, 0.09008670403118557, 0.10128542388218797, 0.08777435914195009, 0.09274317299314716, 0.10805481610696732, 0.0921528359498901, 0.09319736203857742, 0.0928561280077358, 0.19387165668616735, 0.12685619141469084, 0.1726730173641492, 0.13446098245165827, 0.16913886764052843, 0.15477489240168174, 0.15866910420532876, 0.14178886355385512, 0.13783888612772333, 0.3670011654778882, 0.34107284513982516, 0.30918280495146877, 0.35024006708037503, 0.29304178236141065, 0.36324773077405004, 0.3201190878987352, 0.32072974745747607, 0.34931690895864653, 0.23690386738706792, 0.23719601865123263, 0.2606865757079594, 0.2089888160946488, 0.19922864307769372, 0.21235554871518503, 0.20303635856366764, 0.273814837437634, 0.24552884145103537, 0.18114141345894652, 0.21282199293604775, 0.19085306587582884, 0.1881992060667126, 0.1723219180456288, 0.1797698969855186, 0.18236868459693623, 0.18507461660787805, 0.19153753713071286, 0.1852691963345494, 0.19245030736987712, 0.18771202025429057, 0.17912404083383549, 0.23221071626985856, 0.18950719708274533, 0.19165123779103377, 0.18644962301436563, 0.19421163788145546, 0.6546826491931833, 0.17830904173454165, 0.6261010044121753, 0.6714186287532158, 0.19517639265059983, 0.16881226916836, 0.6929864445454388, 0.1591483918995118, 0.17458545891616772, 0.3114744992533699, 0.19817799306542128, 0.1958044740043453, 0.1900918346321906, 0.1996735779781278, 0.2159087151861342, 0.20722002236871095, 0.6790804637197561, 0.5887954495043688, 0.18917415071858534, 0.18869531581195054, 0.18468290339788196, 0.1779611528204318, 0.2083804157208825, 0.17657130174463642, 0.18242485936134212, 0.1816691115500405, 0.1820197901759365, 0.07750064930254996, 0.06748630764736607, 0.08124721069579233, 0.07228103906061656, 0.0639443761976981, 0.08205510366983904, 0.08185069423740299, 0.07201496794629692, 0.07484881244552721]}, "mutation_prompt": null}
{"id": "33801e24-6095-4562-a838-a0083c8441a9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "51ceee98-8648-4956-9e5a-82dcc91fb53c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "c20c4302-114f-46eb-b797-bc74571d3890", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "bb78eb7f-61f8-4667-84fc-ae52de20432b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "3bbc6832-fee6-4691-bd75-e8051708f853", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "44b8b9a5-06f2-4cb4-bd12-9dfed616ebb3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "6d5fb8e8-7818-46c2-86a9-e9cfa6c57869", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "edb1b580-ece4-4f6b-98c6-539f3da93875", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "79862f67-573f-4287-b7b6-b3fd0ee2cd31", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "6fa18ef0-8175-4c32-b202-56d269f4a861", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6\n        self.CR = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        for i in range(self.pop_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.5 + 0.35 * np.random.rand() + 0.2 * (1 - self.evaluations / self.budget)\n                self.CR = 0.7 + 0.2 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.7 and self.pop_size > 5:\n                self.pop_size = max(5, int(self.pop_size * 0.75))\n                self.population = self.population[:self.pop_size]\n                self.fitness = self.fitness[:self.pop_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "An optimized Adaptive Differential Evolution algorithm with dynamic scaling factors for enhanced convergence efficiency.", "configspace": "", "generation": 57, "fitness": 0.27778437983752124, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7016368966878674, 0.7197485508128111, 0.6985200924011441, 0.7259068551245054, 0.706095610814672, 0.7101561145067642, 0.7123224047645564, 0.7018963717421229, 0.6996144652019924, 0.5336127902499143, 0.49514853225661815, 0.504229982466909, 0.5294110874866069, 0.5564356829412744, 0.5339555461230627, 0.5104678440924406, 0.5377573324742815, 0.5381929806828452, 0.10488157583906721, 0.11189060941376716, 0.12479171364671582, 0.11200813086079564, 0.11860495380026204, 0.12624817760004792, 0.1495210359878273, 0.11394772544989973, 0.1275087779527717, 0.10776335111902557, 0.10803068497997592, 0.10259909091478492, 0.11525188675385578, 0.09622315716140473, 0.10582014918393434, 0.13611116840820792, 0.1065759069212463, 0.11305405956395775, 0.9583073940464976, 0.9473740007907713, 0.9571578894672933, 0.9791029592902981, 0.9716450573738061, 0.9568801299396777, 0.9830845917352037, 0.9648280918869637, 0.9894204412939823, 0.32380712141177515, 0.3161118010900297, 0.2966682504426926, 0.3121498799523378, 0.3354706448079835, 0.35395375379408334, 0.35867653318496007, 0.3119083238932975, 0.34737273055989903, 0.5975301831754551, 0.467715539741574, 0.5222069093843125, 0.5327530182678493, 0.5245011895192778, 0.5293910364467801, 0.5657513619860808, 0.5251945105461004, 0.6279851639885694, 0.21549265646780036, 0.17436444540056784, 0.1961048621576198, 0.2881849043491507, 0.19853650884697172, 0.1623994194848647, 0.20572748332934088, 0.1842289396749548, 0.2026732978348984, 0.1872929161565442, 0.1846574370845131, 0.1963529086749799, 0.20943892845879986, 0.14364109367288314, 0.20143387948805402, 0.17601296744802386, 0.174179326007176, 0.2171254013017313, 0.08783021621077369, 0.06448982020089278, 0.09227930195336775, 0.11780114115422236, 0.07137904421810959, 0.09458942707091045, 0.13481350354570754, 0.10947300155000339, 0.13317586511948043, 0.2117557436640436, 0.2079259259082722, 0.21475368150221763, 0.19105300668315361, 0.23192676524461298, 0.2195294304778046, 0.2375110945118153, 0.25510293737310663, 0.24164106198097712, 0.047209447320825326, 0.060725656699011976, 0.0746044693298702, 0.03287375003310422, 0.053975883856269724, 0.038074751769976656, 0.03726187524902891, 0.043799756087895214, 0.046203845302756785, 0.1774460593976459, 0.17350224074388065, 0.16050082999317983, 0.1891471377982511, 0.19091116742717917, 0.18066598745575935, 0.16616004212311164, 0.18012083930189404, 0.18395823066816097, 0.4958912117407932, 0.5176525548885988, 0.49293742306697563, 0.5086458689675752, 0.532159444433159, 0.46826434424252417, 0.5255940711898047, 0.49803551950395664, 0.46944891727627924, 0.0999202091786281, 0.09250244844333755, 0.11815906634428996, 0.08643174175416879, 0.08932416397513299, 0.08230558796839194, 0.08647405051226542, 0.087461401377953, 0.0901630406778946, 0.1863687944848038, 0.14265447754907512, 0.14741814588927193, 0.1369276566592441, 0.1837300695201225, 0.17977416617174746, 0.15258275050193437, 0.153782753107652, 0.17506495113580256, 0.28940842228698327, 0.3049579948273292, 0.29751042935606864, 0.268004929462918, 0.30081762049471594, 0.271553957000097, 0.2949381937782176, 0.31437438080304414, 0.364039196469115, 0.22644487199183738, 0.20490044280789266, 0.20351546722255687, 0.21915704162611882, 0.23077603402209368, 0.25285574509532294, 0.22392274397555134, 0.23057109329784553, 0.25826259891706416, 0.16672660399653128, 0.1874541860577844, 0.17321622243680979, 0.17302545408832015, 0.1853978521456663, 0.1814861800185832, 0.17578953232722483, 0.19324751719778743, 0.17487049174839664, 0.21370097120409715, 0.20604499380011898, 0.20008193481863212, 0.20342556800209832, 0.21157903067013428, 0.1928822812805131, 0.2272835278720139, 0.19132049955545105, 0.23654031101970618, 0.18761988187199197, 0.16773386298856052, 0.17803385367581392, 0.17380014757828632, 0.18034702514236145, 0.17601532384638063, 0.528382509941471, 0.17701776790360613, 0.6984438362341906, 0.1597705723081042, 0.2009748866749902, 0.18877462391942756, 0.3873925080466253, 0.23909607731088023, 0.16359919976404913, 0.20190455470139623, 0.20700725855659885, 0.2038044836691446, 0.17088765429624786, 0.1799242670397605, 0.18236414140418578, 0.18210903079165386, 0.19603102316249765, 0.18605520250786545, 0.1871937515885943, 0.17956744158743354, 0.19260208141909185, 0.07937718380954706, 0.07502812365742562, 0.07556849121844333, 0.07517218839203466, 0.07024066718821287, 0.06435849891449985, 0.07559496387377473, 0.07108643491398903, 0.06387725359778629]}, "mutation_prompt": null}
{"id": "19ab28d8-aa27-4325-90ee-cc69ea0a956f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "9ef99ad8-0318-4d9d-ab4f-e3b8250b8b8a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "9b5edb29-9183-4515-96dc-8ec9bf5406f6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "4d625674-1ca3-4bbe-81c2-ad2911bd3102", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim  # Increased initial pop. size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.8  # Adjusted mutation factor\n        self.CR = 0.9  # Adjusted crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.5 + 0.3 * np.random.rand() + 0.2 * (1 - self.evaluations / self.budget)\n                self.CR = 0.7 + 0.2 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.5 and population_size > 6:  # Earlier adjustment\n                population_size = max(6, int(population_size * 0.6))  # More significant reduction\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "ImprovedAdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with dynamic population size adjustment and enhanced mutation strategies.", "configspace": "", "generation": 61, "fitness": 0.2624624185002659, "feedback": "The algorithm ImprovedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.6563932692241827, 0.6758357319971708, 0.5686745109281293, 0.6863945806147558, 0.6906485015103163, 0.6951398941552485, 0.6823805462088971, 0.7001101431408303, 0.667085587341592, 0.5269858216248698, 0.5581813626963619, 0.49773871634507927, 0.375016379629763, 0.4776153386602633, 0.3900947365937729, 0.390036375887268, 0.3260388755377206, 0.4408890202296306, 0.1368045442411987, 0.13415139734519, 0.12139733292897636, 0.12252578581323492, 0.10491872829499604, 0.1378484889161833, 0.13955885738286555, 0.33591335803931743, 0.13675711305649096, 0.091846781642279, 0.12716874244965803, 0.11315370152382098, 0.11525611077188458, 0.09879508066902232, 0.10844382158545107, 0.09514704078154301, 0.09403630483773884, 0.11008664218750563, 0.9501562138368812, 0.9128156266695908, 0.9457917372460863, 0.9799924956585898, 0.934154652215489, 0.9182478303618395, 0.9495950103166255, 0.9443091582430588, 0.9597340239397362, 0.22250854268159626, 0.2487506010823558, 0.3644851050192328, 0.2278559364681958, 0.24355165388641775, 0.2802459493387407, 0.33800173147025914, 0.23757572134250915, 0.3075635186232507, 0.2905599558748527, 0.5812379774431422, 0.5854117842939208, 0.5731219095615065, 0.5918754622117341, 0.5980356675654924, 0.327626477615937, 0.31685758432870814, 0.611079081771578, 0.1529681462620327, 0.19271437697382576, 0.1466376521018048, 0.16810627028623115, 0.13013675118151602, 0.11468686888358548, 0.15763445264576492, 0.1794331711310453, 0.1508099828591114, 0.1683541656945854, 0.14775162810198694, 0.09763266830359063, 0.16947469968988083, 0.1594321697213289, 0.1336155518430724, 0.11929957204046837, 0.14084335066725595, 0.13266284305324538, 0.07459168056017262, 0.06891750557707832, 0.03210541002386691, 0.07940948783644253, 0.055678722034607775, 0.04769421266845131, 0.0439878480079271, 0.054424508768735724, 0.03923925199139755, 0.13406515470482483, 0.16880043131042244, 0.14075382502244482, 0.17369845127374506, 0.1681054217559751, 0.18249043635612772, 0.22807302730340284, 0.17821769311123137, 0.17675324509618184, 0.019913221155037908, 0.12111776433571719, 0.006624165551621597, 0.055905016214028214, 0.1029243103028199, 0.12873073170070715, 0.02397029487792557, 0.1329528168031444, 0.04669099456424808, 0.1443281904260304, 0.15624141621848797, 0.22863754312324047, 0.17712406522379898, 0.1780851462434857, 0.21368572105260497, 0.14229413973968508, 0.2277852731214306, 0.1390005726803083, 0.4685487634793688, 0.4694035165119246, 0.522075770655759, 0.44708697375398154, 0.4460697734155622, 0.474171781061444, 0.545837873941604, 0.4831921006370674, 0.4396826195394037, 0.08015127708581749, 0.09451749300005663, 0.08893617159386524, 0.08978952355278669, 0.09874007329128454, 0.09981901201854437, 0.09039151417427693, 0.09286472483127495, 0.12008571632139797, 0.17923317874277833, 0.12784416840178658, 0.1651975856520319, 0.14467601418613263, 0.1448894741601816, 0.17116531202157514, 0.13087075395016257, 0.143498658218285, 0.12587299595106394, 0.2941599132260674, 0.34610423331529705, 0.35205923252480464, 0.28718605566139044, 0.33159561168485363, 0.2668086521156472, 0.27764178312559107, 0.3787244768460397, 0.3047712307006857, 0.24517766875480185, 0.24680973418986119, 0.2297986127535817, 0.23295984726722563, 0.20767079970371327, 0.33292554894850424, 0.22214902136031733, 0.2459143045780806, 0.2712310860992636, 0.18064392296777865, 0.18175244604111418, 0.19584050844592926, 0.1772110954174193, 0.17667546099128906, 0.1894151215957499, 0.20232751799442394, 0.20096164437450248, 0.18034070646726885, 0.19705790933532663, 0.20033169382583516, 0.17586485500807958, 0.20444286885459473, 0.1752920561751513, 0.18105619597620437, 0.18630025762682167, 0.24719448767740249, 0.20398233462006454, 0.6280190838684706, 0.21351114893301915, 0.47576204667292954, 0.19868076154240133, 0.1789959866811328, 0.20811041105837846, 0.3930323443774094, 0.1787458166084318, 0.16925065251424243, 0.1924183277581496, 0.2033693376514787, 0.1597108889848372, 0.1805644454552261, 0.17749560146652454, 0.1755334210993944, 0.20589141539138556, 0.47997302215995763, 0.2078787653332298, 0.1774333230236772, 0.18652390325373136, 0.19676028864193673, 0.1809863291646816, 0.19427988833105825, 0.16855132710532073, 0.19044396422974608, 0.18015167477569316, 0.19335912686049317, 0.0760795087974262, 0.07261901690007688, 0.07114392024565153, 0.07194511679473092, 0.06607468348127365, 0.0764702378340768, 0.08321473502972476, 0.06837071916703685, 0.0701167864261788]}, "mutation_prompt": null}
{"id": "4a192bea-80aa-46c4-9aa6-95f4fe3bc186", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "675b00fb-9419-4bcd-b631-c1f50991062d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "c5cc78c5-10af-4d75-a5e4-54c205ff91af", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "e52fb561-d8aa-4b4c-ae3e-5047cd55a89a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "35b53799-7928-4cfa-b658-a026e5410799", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "c6382791-ee41-4bf7-99ef-08174dacc1a9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "9029667a-8f62-4ca3-8e13-419e779e3c96", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "a975f4bc-4e7e-456d-b43c-eae3b75ab628", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "9ec6dc2f-6269-463b-b9e8-4ddc9c0bd020", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "bb89a126-7c8f-408d-a158-318259ffe7a7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "fa5698e0-6c93-4795-ab90-5f91c0c3326e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "0f668d92-f425-4806-b8ef-8d49caca2f6c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "4e06da2e-c0be-4978-8df8-7bd730f9c710", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "bcacc418-6124-4503-9230-4a621ace0210", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "a7b38736-e3a4-4473-bfbd-454bd959aa42", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "b184d349-4a69-4c8f-a209-c19063668426", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "6e5abb76-ed24-40ac-871a-cf007c9c43f4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "2e7eedb3-a029-4ed7-9e8a-613a52b10d2b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "5b5b8e53-5da3-45fb-b6e5-0a9d81d7356b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.6  # Adjusted initial mutation factor\n        self.CR = 0.9  # Adjusted initial crossover probability\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.5 + 0.3 * np.random.rand() + 0.2 * (1 - self.evaluations / self.budget)  # Dynamically adjust F\n                self.CR = 0.7 + 0.2 * (1 - self.evaluations / self.budget)  # Dynamically adjust CR\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with dynamic scaling of mutation factors and crossover probability to improve exploration-exploitation balance.", "configspace": "", "generation": 80, "fitness": 0.29033289235184573, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7147608985721914, 0.7303508212132109, 0.7252454117710672, 0.719183632446039, 0.7119078650168481, 0.7329069619570339, 0.7014815075487411, 0.7046391656685418, 0.7110366051323561, 0.5440828707763405, 0.5071114367751506, 0.5230264089022855, 0.5479635708673063, 0.5606194086761533, 0.5302522097428737, 0.5429984893918363, 0.4824197189560433, 0.5363529397279785, 0.11174971729998506, 0.10104986396071602, 0.11543007178763653, 0.1137186511470547, 0.10820416571863956, 0.12302908528722312, 0.12002750523425043, 0.12805482192872075, 0.11878528777449515, 0.10095978322097776, 0.10920570868880786, 0.11283010809642058, 0.09941636054631797, 0.09941942363145229, 0.10456531744008735, 0.10830275250959454, 0.0954080361115448, 0.10094620273306498, 0.9435010629926884, 0.9300831728727907, 0.9629126451979494, 0.9682832724652416, 0.9708096715165856, 0.9401145477823397, 0.9511677250358691, 0.9688075318583491, 0.9894189539961861, 0.2983297547422088, 0.35074902988962486, 0.3162757412492355, 0.33669113857771304, 0.2618958072699734, 0.3318919345173672, 0.3235186930593994, 0.34956489694525605, 0.37925220833418605, 0.5589381291703577, 0.5358009074111307, 0.4908071018632221, 0.582556022064664, 0.6236508210903282, 0.6293255127074404, 0.6181068319913257, 0.5868779822506591, 0.5523959046253272, 0.19184016232393353, 0.1692495903260226, 0.19459493788889526, 0.19372233233177694, 0.1954572339279853, 0.16407010486860873, 0.17683171942359244, 0.18745232821617397, 0.18174847946729367, 0.17395321052038648, 0.209924044271536, 0.19338375855078216, 0.17190671080320097, 0.13589802747290214, 0.1640221039715941, 0.14837455947955625, 0.15268513849003407, 0.17689756363260623, 0.07136476264028024, 0.12412556531791197, 0.08143394388489267, 0.09953145566226829, 0.11065184257512173, 0.10145322190020123, 0.12286362535271111, 0.07706587486384664, 0.10361254319342228, 0.2017835182534553, 0.2193721344601035, 0.24339203637224027, 0.24723914034616812, 0.18101153212355037, 0.18536918340299302, 0.2828172241398321, 0.21785017541010898, 0.2620037111704735, 0.06399318712193347, 0.1069848201247321, 0.020324933403195078, 0.0608124608406615, 0.09823679180271139, 0.05079269727332103, 0.045384610924945834, 0.11197836794861582, 0.04718069755824761, 0.14371741611830768, 0.1689378343385015, 0.17296265446167458, 0.15810163625220708, 0.2101410236897545, 0.14879562581931838, 0.1805004195354415, 0.19693529791013265, 0.22570205862977089, 0.5051803292688077, 0.512623603423553, 0.49990056034626307, 0.5098196571623488, 0.4756296898350876, 0.5363089369263171, 0.5057443030389125, 0.46429787736446304, 0.5451715702382431, 0.11094887016608268, 0.10720833187480361, 0.08919657150567806, 0.09229325292402102, 0.08446849007197521, 0.1017586255238293, 0.09230981837764463, 0.09331008042158995, 0.0827406651461926, 0.18223447353662903, 0.15763078549647325, 0.14327264218502755, 0.12893920330602726, 0.12976592658474329, 0.16943762382279215, 0.15507084295045692, 0.15830533797871993, 0.1478685159045533, 0.34167100053257704, 0.3083798306683735, 0.338254680952796, 0.31589740302858715, 0.3939506401571773, 0.3145924597751688, 0.33180099577549627, 0.38167863387754364, 0.3105796237834706, 0.23835361473576344, 0.2178927861961285, 0.21029813101016326, 0.20706636966538616, 0.23296868954277894, 0.21384301645007564, 0.2362967813783875, 0.2453219539061351, 0.258410659842668, 0.17603502235075008, 0.206739632509234, 0.1934650366717675, 0.18623239544687364, 0.18024991645360477, 0.18479558699254073, 0.2110577213084761, 0.22874865884301643, 0.1831394515796545, 0.21761449242080977, 0.1867511110018103, 0.24669721033287106, 0.183807025381291, 0.19526609504843961, 0.18185152699902762, 0.18148870613727963, 0.18061389356850555, 0.17921639713860182, 0.6379219382403097, 0.6445052383559319, 0.33414616676809716, 0.6951327060742479, 0.23717019532539851, 0.40040615337356333, 0.47795505257994997, 0.24303596907028557, 0.5246380394271078, 0.19109300905138038, 0.2014250624452122, 0.19175940708426753, 0.4928308792259709, 0.1905106378821374, 0.30900633763388985, 0.20713721559761977, 0.20639921933056626, 0.564122331226647, 0.17238315492912826, 0.18639396471997083, 0.18710306222820172, 0.1840601736280275, 0.17120087949768803, 0.20232994027872142, 0.20240050042681823, 0.1819045960007527, 0.18407478591785298, 0.06924055704931598, 0.0686086800628144, 0.06944810540092772, 0.07460704240555771, 0.0684033076451962, 0.07370031938845767, 0.061991258958118856, 0.07365056382265045, 0.07313874157507305]}, "mutation_prompt": null}
{"id": "4e30ffe3-2796-422f-9bef-88b1e63164ed", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Introduce dynamic adaptation for F and CR\n                self.F = 0.5 + 0.2 * np.random.rand() + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n                self.CR = 0.7 + 0.1 * np.cos(2 * np.pi * (self.evaluations / self.budget))\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            # Adjust population size based on convergence progress\n            if self.evaluations > self.budget * 0.5 and population_size > 5:\n                population_size = max(5, int(population_size * 0.75))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Introduce dynamic adaptive control of mutation factor and crossover rate to enhance convergence efficiency.", "configspace": "", "generation": 81, "fitness": 0.289566988679375, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7981019041165234, 0.8045515670276051, 0.7844558189696886, 0.7894810605764631, 0.795202581734473, 0.8185850990615876, 0.7852196824282054, 0.8029704433021332, 0.785069753839668, 0.6008176971482815, 0.6603393301726873, 0.6586945993773955, 0.5870919299989552, 0.6227335502147375, 0.6371317031059052, 0.6617156120687833, 0.6663259605279279, 0.6611359140848816, 0.1382387432659321, 0.14464421323802545, 0.21170009742085283, 0.20415954082321108, 0.13219927462154013, 0.15747016501461897, 0.21789844549595716, 0.19256994266595828, 0.13741809566924368, 0.12771460960752978, 0.13515749313772663, 0.14734982116421957, 0.14449104803581703, 0.12994725401788876, 0.18194622029499175, 0.14937138173227626, 0.12803925345555112, 0.1365611083475653, 0.9684192883207572, 0.9535400532431777, 0.9508774479104442, 0.9564266489696063, 0.9559580759752284, 0.9560389410302114, 0.9608740150537908, 0.9299096626880431, 0.9675569174046239, 0.3690650604299214, 0.30553574148579155, 0.29129969006049417, 0.30922312781708894, 0.3666547671059851, 0.34184279449544697, 0.3411670890272763, 0.3199184048327127, 0.29600765862401635, 0.5911565900184148, 0.5988316525258734, 0.30467185945272957, 0.32702516610675125, 0.5892450688883628, 0.327458113327163, 0.32620680762440035, 0.61547319275655, 0.6018113490611463, 0.18660038446378735, 0.1473781111481225, 0.17141872011293158, 0.16776460419450634, 0.17122338428553152, 0.16118036731307606, 0.1860573867644123, 0.17182812576101592, 0.19462399066263392, 0.13150170624403834, 0.050149512882095015, 0.019232060070342616, 0.1657195598105924, 0.1891451045399244, 0.18527639588617717, 0.15654689121570264, 0.12899763251311192, 0.15583735895262907, 0.06546151999941963, 0.0041997804791662485, 0.09128674597336395, 0.06359983153411286, 0.050654540239904566, 0.038163908140089964, 0.04147068026860301, 0.034485433493980366, 0.05162098733698295, 0.17775573371727182, 0.12068100095577705, 0.1620185424280628, 0.1271993444457632, 0.12303285267311714, 0.14953114328540562, 0.11667896186947224, 0.18433435025254252, 0.15491653368298852, 0.054542118274880313, 0.12482846077578236, 0.032407615194010586, 0.13410884878631113, 0.1129851798082192, 0.06353244472507869, 0.12698086851958545, 9.999999999998899e-05, 0.08519920522326707, 0.2093616814969369, 0.18641962193855777, 0.21004918240252046, 0.17121129200683172, 0.25810194869113035, 0.22460987846979252, 0.2013202273750494, 0.1694164688177472, 0.21920845545509715, 0.5776622103098313, 0.5148566896877937, 0.5310489004731744, 0.4880942624038316, 0.5270121436021673, 0.5437901535068137, 0.5357512190193919, 0.5297446131873127, 0.48461898421832184, 0.09559480819711919, 0.11234612388503307, 0.09615837928860527, 0.10967342664719892, 0.09812981546431765, 0.08724100294693637, 0.1075394383597581, 0.09333780296579552, 0.11088765717808369, 0.17119039758298316, 0.15699909842388893, 0.1490336683597745, 0.13153072265420707, 0.15054089280958027, 0.18606504704056537, 0.1686742435136901, 0.15189195855791293, 0.14652130397428298, 0.30813752870951017, 0.3905189249959562, 0.30665656774479544, 0.3241516375215602, 0.32860455073740324, 0.3621669567394461, 0.33134072623632405, 0.36055094313090263, 0.33279961691216764, 0.2658474692573093, 0.24309859324169303, 0.24003590406605813, 0.22939932135268837, 0.2185587147185727, 0.24280117489356912, 0.3208306104970887, 0.25725363603352824, 0.2726783778185924, 0.18287140640070887, 0.19140651949069976, 0.20212272855300129, 0.20559533138734054, 0.18734501707872409, 0.18745322387358887, 0.21211493920400404, 0.19126753072029412, 0.19697252854245695, 0.2901905321786269, 0.18795228922040574, 0.19044801931167799, 0.255135342485989, 0.21785237444979388, 0.2669273359623262, 0.2358907747643041, 0.19137034330675973, 0.23052001821366153, 0.1850767872994038, 0.6336902033568568, 0.31863767940587684, 0.17772317165709028, 0.31528237483931576, 0.3884393673277653, 0.21290084869109538, 0.5360924794859165, 0.5526572821579323, 0.20178526375278472, 0.20060707418451884, 0.16050774268076606, 0.3910166885314571, 0.1952688842785194, 0.19350622896666247, 0.20650525560666244, 0.20894714752943833, 0.20174713524884957, 0.19538250618910502, 0.19526983087040228, 0.19864690517090522, 0.19290090522957648, 0.18591971273405739, 0.16767869862689644, 0.1838399253705405, 0.18312845821716106, 0.18193708336576475, 0.07492522360550391, 0.07463503146430372, 0.07583112969613415, 0.08046101930813787, 0.09360205889239237, 0.06761800164590115, 0.0868214649187099, 0.08745865650523987, 0.0845660683651902]}, "mutation_prompt": null}
{"id": "f0e2abd4-098d-4805-9d1d-1210eaf9a297", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "8e778c37-3459-4b0f-9bb9-7a6cc69e6237", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "e37aef93-0ca3-4919-bcbf-d91741cc6b6e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "5095c210-9c68-45b1-8d30-9e23a595d11e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "7f90a2a2-916e-48df-9fd6-605c849282f7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "0d17c40e-f631-4ef0-8f2b-12b923b1988b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "1134deb7-6918-4961-bd7f-c7510f3febd1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "8d685884-b8fc-4c64-b6c0-e9756f331ed5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "d337034d-3ffc-4be5-b4a9-1acd56c49c66", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "52f26f27-6497-4b34-bcda-accaef17f21a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "2aa062e9-9cac-4c66-9c33-f729e0e594de", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "23a677f4-c3d1-446c-ba9e-880e906f89e6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "52c577fe-1912-4a8d-ac30-ffebc743d991", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "696f2f06-d081-4f6c-8026-10871f6e0b0b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "47f74f5f-446d-4182-b7b0-c1fb6e4fab90", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "435d54d4-3184-4814-9ce3-8240b6fc248c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "1397268b-856a-4901-842d-d9be3dfde6f9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
{"id": "c1708a0b-38f5-4cc3-88f9-4eaff115d69b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 8 * dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.F = 0.7\n        self.CR = 0.8\n        self.evaluations = 0\n\n    def __call__(self, func):\n        population_size = self.initial_population_size\n        for i in range(population_size):\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n        while self.evaluations < self.budget:\n            for i in range(population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.F = 0.4 + 0.3 * np.random.rand() + 0.25 * (1 - self.evaluations / self.budget)\n                self.CR = 0.6 + 0.3 * (1 - self.evaluations / self.budget)\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.evaluations += 1\n\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n\n            if self.evaluations > self.budget * 0.6 and population_size > 4:\n                population_size = max(4, int(population_size * 0.7))\n                self.population = self.population[:population_size]\n                self.fitness = self.fitness[:population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with finer control over mutation and crossover dynamics for improved optimization performance.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c2d685b-08c4-4b33-b73c-6cb1537ae602", "metadata": {"aucs": [0.7591968761830613, 0.730226711654735, 0.7526154695818479, 0.7823808631775476, 0.7767953555350168, 0.7545346845170039, 0.7469139036807919, 0.7414126346905532, 0.7594250638034576, 0.6008112623129296, 0.5784321458465016, 0.5959931156963847, 0.5913875590331129, 0.6119018073957886, 0.5613007278553601, 0.6082555367235796, 0.6144126399103573, 0.6222281606015712, 0.11015401306055772, 0.1061782409984997, 0.12786275019879323, 0.12989419581389772, 0.13709478959305765, 0.11421626313033462, 0.12661816261937275, 0.12968705612483356, 0.12239672459805828, 0.09862989064602756, 0.111546641503245, 0.10581187342796328, 0.11247609518411716, 0.11663615850295339, 0.1345894133841089, 0.11210614979642708, 0.1110072141148356, 0.10923461706585136, 0.9239111772050149, 0.920133471817669, 0.9027297752922572, 0.9132395728573653, 0.9640328729442359, 0.9720670348828118, 0.9494496497638056, 0.9695985271539119, 0.9893880466313947, 0.38133984559383116, 0.32543966765187715, 0.30717954738698283, 0.32980371767657357, 0.33304738991062055, 0.33699757919756435, 0.31176623481717647, 0.3387901849610975, 0.3249709930069057, 0.5393254082450578, 0.5439949722251785, 0.621200351007914, 0.6286303497817496, 0.6712992594178784, 0.6064489107167319, 0.6151857237493368, 0.6130361883962057, 0.6110563804498134, 0.15859420422893256, 0.16655687185042412, 0.1793424582589963, 0.17237885611781967, 0.18517662235283638, 0.16838063012299898, 0.21467811950242421, 0.22875256042741277, 0.20199776686273851, 0.18978622658402078, 0.2692434269625136, 0.13572984852523096, 0.1727821291663979, 0.20328780245513178, 0.1760216528887698, 0.21102919915111673, 0.1763661523590998, 0.16008327001720934, 0.10381277842639591, 0.11792568130397996, 0.10778351613186132, 0.07587966933292756, 0.12416049682971553, 0.07627646968833901, 0.10707946073098396, 0.08214686879778821, 0.07410376927562645, 0.22558246510007007, 0.20336731678119546, 0.22178670421987756, 0.2037941476188786, 0.21890617849266225, 0.18518897771447562, 0.2938471581490333, 0.2527656449015594, 0.2844874899219978, 0.06245526993073325, 0.024845295919411203, 0.04760688723443762, 0.08542862972051612, 0.07382972813393152, 0.05563079976967, 0.08535304064994675, 0.09504044270109169, 0.07770675427590323, 0.21871738163187715, 0.19258479674951734, 0.20195237852922143, 0.22698753208692923, 0.19036957581490654, 0.18362157103467813, 0.1829016412779838, 0.2523961730992602, 0.1998462858764508, 0.5139503492877776, 0.5353918006600047, 0.5338865140236354, 0.5277476669458747, 0.4957085737175001, 0.5403139148449184, 0.5480232095278779, 0.5066878039669196, 0.5719845210948014, 0.09592879318806224, 0.09032409459560609, 0.08909843765842829, 0.10035136512224929, 0.10315290259519372, 0.09429395321849932, 0.10300627088637193, 0.0918087717216709, 0.08874116197258186, 0.13681762044697676, 0.1879282853509594, 0.1335332897855609, 0.142724363067115, 0.16638729842762223, 0.13131007046787946, 0.14699313596575392, 0.1366688987519159, 0.1667280609552756, 0.3727266837631078, 0.3551175276902847, 0.32458931483990405, 0.31321107049751074, 0.30322249621491026, 0.31303182318660805, 0.3677665122354655, 0.3219687153545655, 0.35522351432030186, 0.24063687817372625, 0.24821369153847395, 0.24534919847760206, 0.28120492409710074, 0.2587312116133921, 0.2456129945719817, 0.2349855439008165, 0.2794856177588898, 0.2341481450775842, 0.19596859369958552, 0.19838574893739735, 0.1893703081448399, 0.18509941774812488, 0.18698211924360708, 0.20859294885732993, 0.1896689676561446, 0.1778339187885356, 0.20000178647329847, 0.2461110775855836, 0.19002719862377226, 0.19582675739440447, 0.19251372711089376, 0.19481243512990154, 0.18796481066865567, 0.18855773952158206, 0.1918796879195913, 0.19143078950015047, 0.5785367139508069, 0.5700319983971703, 0.14976321863964281, 0.6233003119993512, 0.18459734352408697, 0.20349915050871703, 0.5621532074430589, 0.17253920943177692, 0.4861941832546287, 0.5937101130533686, 0.20419454119507963, 0.3391786649463615, 0.2287474774421503, 0.18992438274050527, 0.3905345608122499, 0.20515338900202895, 0.1265364124086189, 0.2025946646214425, 0.20057040438635032, 0.18081996130236389, 0.18815527350356032, 0.1805510057058335, 0.1819526402777506, 0.17838173006526614, 0.19603927841586732, 0.18647254158361792, 0.17480432419181868, 0.07426106115243003, 0.07413047435491427, 0.07884842474212095, 0.0714127966181839, 0.07904121321813651, 0.08259127536129929, 0.07828449209592003, 0.07590973551645386, 0.07102856108289302]}, "mutation_prompt": null}
