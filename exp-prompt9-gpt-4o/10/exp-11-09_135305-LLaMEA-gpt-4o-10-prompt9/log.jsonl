{"id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 0, "fitness": 0.38975824745645804, "feedback": "The algorithm AdaptiveDEPS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "01f90032-9520-402f-a319-4f94804e47e7", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "ec306247-4d66-4459-97df-1fd5cff40f2e", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "1f518886-de90-4c2e-9eee-497614d0b8e8", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "20c6938b-2e8a-4268-a364-56b8c8bdc20e", "solution": "import numpy as np\n\nclass HybridAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.w_max = 0.9  # Maximum inertia weight\n        self.w_min = 0.4  # Minimum inertia weight\n        self.c1 = 2.0  # Cognitive acceleration coefficient\n        self.c2 = 2.0  # Social acceleration coefficient\n    \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocity = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        \n        while evals < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (evals / self.budget)  # Dynamic inertia weight\n            \n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n                    \n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n                \n                # Particle Swarm Dynamics\n                r1, r2 = np.random.rand(), np.random.rand()\n                velocity[i] = w * velocity[i] + self.c1 * r1 * (population[i] - trial) + self.c2 * r2 * (self.global_best - trial)\n                population[i] = np.clip(population[i] + velocity[i], self.lower_bound, self.upper_bound)\n                \n                if evals >= self.budget:\n                    break\n        \n        return self.global_best", "name": "HybridAdaptiveDEPS", "description": "Hybrid Adaptive Differential Evolution with Dynamic Particle Swarm Acceleration incorporates adaptive inertia weights and dynamic acceleration factors to improve convergence speed and exploration.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {}, "mutation_prompt": null}
{"id": "dd35bbca-89fb-4e0a-8d6b-27fb80a97a3a", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "18a5233d-1f76-4ff7-af11-c9db90e8b3ea", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "37607a09-68b3-4508-8b2b-39466a9bc876", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "34fe68be-43e0-4f17-bc72-e4840a47a784", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.chaotic_mapping = np.random.rand()  # Initial chaotic mapping value\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Update chaotic mapping to vary search dynamics\n                self.chaotic_mapping = 4.0 * self.chaotic_mapping * (1.0 - self.chaotic_mapping)\n                adapted_F = self.F * self.chaotic_mapping\n                adapted_CR = self.CR * self.chaotic_mapping\n\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + adapted_F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < adapted_CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Dynamic population behavior: shrink population overtime\n            if self.budget - evals < self.population_size:\n                self.population_size = max(4, self.population_size - 1)\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with chaotic mapping and dynamic population behavior for improved exploration and convergence.", "configspace": "", "generation": 8, "fitness": 0.3856497175966656, "feedback": "The algorithm EnhancedAdaptiveDEPS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.27.", "error": "", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.8740884298011999, 0.8822287714731825, 0.8671649039179808, 0.8809859586758012, 0.8811354776563088, 0.874463271081658, 0.8752639350338743, 0.8883648108068605, 0.8662157976262628, 0.7698222879706231, 0.767220722344113, 0.7713236580046468, 0.7931841499307724, 0.7650044429604823, 0.7812790781082739, 0.7778136266393849, 0.7976267665418482, 0.7821374526838171, 0.18922172973758422, 0.7402316068924073, 0.7514771003650063, 0.710816232954737, 0.8000570585222556, 0.7656756848899229, 0.1839966450710987, 0.6835226241518556, 0.7487706320175166, 0.6684556787940503, 0.17496792640974634, 0.17932137151532657, 0.6965610913384765, 0.17900235863881375, 0.6890200898886061, 0.18073266299058577, 0.7284725729125934, 0.7112023033801012, 0.9725482772013103, 0.9704326030393168, 0.9464377860757953, 0.9698316135934447, 0.9610704496228962, 0.9608306076505555, 0.9615423711598903, 0.9725510294631617, 0.9711599664760557, 0.5284878188150108, 0.508490960634516, 0.4708740482579158, 0.5366184358101238, 0.5034681166708523, 0.5011750514023059, 0.45126199842003867, 0.4541083402809233, 0.5187445254872771, 0.7143626799080949, 0.5791630717611713, 0.5794482283372053, 0.6820558312850574, 0.6523734246624855, 0.6962920219795825, 0.7232741122779522, 0.7236622456731135, 0.7357326577416654, 0.42984549129290617, 0.26624025107372973, 0.30072810539624806, 0.29884835635272133, 0.15378566738119503, 0.23313215584392832, 0.20927244470790884, 0.21291916708748382, 0.27795288836114174, 0.21316322605060323, 0.17419150756382462, 0.21845802160204075, 0.2763644055909005, 0.2567925381376276, 0.1907099888616124, 0.2132016235679003, 0.23219192545157785, 0.1723585618125344, 0.09056560643169542, 0.07818751178167493, 0.07723428373841035, 0.0780773544729173, 0.05770499498510395, 0.051705507225386804, 0.10325997369033935, 0.05442204834152509, 0.09868261194661376, 0.222105627824273, 0.18931562164807925, 0.20089882119275304, 0.1797728030559339, 0.1746678900325176, 0.1722172350379113, 0.27276848698532463, 0.23216233110803064, 0.271376845086412, 0.014177212511362836, 0.04259426177990222, 0.04203322519114594, 0.10282288596603006, 0.06321962778058454, 0.08086633464122917, 0.08256424731622969, 0.10370644323947165, 0.06337808668093459, 0.1742195330109937, 0.16223620141155248, 0.19873087290294666, 0.24100067988596918, 0.24835910472008038, 0.23178136678629324, 0.19145326106153937, 0.18907041766023436, 0.1876648704205255, 0.5997821651419344, 0.5992820087075637, 0.5851557117187778, 0.5901469561178108, 0.5680646998421472, 0.595179088017139, 0.6185171450291091, 0.5926117222569811, 0.6208857622142541, 0.1153719414112413, 0.1365418187393923, 0.12142036282257196, 0.10630634196205957, 0.1049101628216711, 0.102838223632295, 0.11781094099564038, 0.13429561834773163, 0.11543291209475426, 0.15311371748886105, 0.159682752971132, 0.18056613319092518, 0.15059357829280084, 0.1420211371964537, 0.16741592481250078, 0.16826065111993316, 0.15149265941911305, 0.19328459992254887, 0.38494653973253734, 0.33200607345655475, 0.36729069799507386, 0.3698848457115731, 0.3493024833112749, 0.3581934022883896, 0.4349972566311321, 0.46701210460370723, 0.45816669348173267, 0.24700448176213707, 0.2229260706429329, 0.27469366016140473, 0.2809792794395204, 0.2461204070263887, 0.2515465698825432, 0.2502278380782109, 0.30608493090359923, 0.3199177438273244, 0.19298176079472618, 0.1909354235441587, 0.1971329641619638, 0.18688132278618308, 0.19500547686137293, 0.1852476760312537, 0.194576293474926, 0.22829395875256675, 0.20214048341144863, 0.6050712337824768, 0.5866913986420497, 0.5368413772594327, 0.23020049324607494, 0.6079958292467469, 0.6466508079270485, 0.5617834943021855, 0.4390899915605271, 0.5293610474494208, 0.6639969650895774, 0.688699565286335, 0.7347346013151013, 0.1651217148063584, 0.18185900999169358, 0.47902137354551266, 0.6534142066391067, 0.16693302319635772, 0.7611532756558347, 0.4487130533034277, 0.20734751499607063, 0.16586428842956824, 0.5325690547715594, 0.5314275260974803, 0.20001573354298918, 0.20175321866602713, 0.2081375052586768, 0.21051797973039843, 0.18873733932328673, 0.1854930617322864, 0.2016708317030118, 0.1911321559752155, 0.19522890648637936, 0.18994921837220657, 0.19356687425069097, 0.19106033828955105, 0.19180611177894558, 0.09322545399633853, 0.08839525213241306, 0.07513100945793472, 0.08452681028332887, 0.09457287128812897, 0.07854058276639664, 0.081048051116961, 0.07530634685740223, 0.09251362718597045]}, "mutation_prompt": null}
{"id": "11e7a7a5-7dfe-402b-a8a8-89da3bea6857", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "aaf09ab6-17c3-4491-a902-d1f19cc826e3", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "aaad17b8-a6e2-45c5-bd9b-4487b6d7b9d4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.dynamic_factor = 0.1  # Introduce a factor for population resizing\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        # Adaptive population resizing\n        while evals < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Hybrid exploration: introduce a slight random perturbation\n                if np.random.rand() < self.dynamic_factor:\n                    trial += np.random.normal(0, 0.1, self.dim)\n\n                trial_cost = func(trial)\n                evals += 1\n\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Dynamically adjust population size during the run\n            if evals < self.budget * 0.5:  # Reduce population size in early stages\n                self.population_size = max(5, int(self.population_size * (1.0 - self.dynamic_factor)))\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with dynamic population resizing and hybrid exploration mechanism to accelerate convergence.", "configspace": "", "generation": 11, "fitness": 0.21942316341010365, "feedback": "The algorithm EnhancedAdaptiveDEPS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.534235644324824, 0.5676986117541696, 0.6070397663823036, 0.4608928344708364, 0.4944814822770035, 0.49374687859643307, 0.444865659054102, 0.4638197922684554, 0.5335635402680743, 0.012561596783781215, 9.999999999998899e-05, 9.999999999998899e-05, 0.032507885962403615, 0.04736270124343178, 0.0041224268821969945, 0.10876475439695843, 0.0024188812395766757, 9.999999999998899e-05, 0.12527991651349946, 0.11322708036380713, 0.12666418889783815, 0.12637298334479474, 0.07194682192999202, 0.15681836583726272, 0.111312724342293, 0.11471231183681463, 0.10537570054931256, 0.06171524193999833, 0.02598926408565616, 0.09084072742408078, 0.11672530840316053, 0.062973316591028, 0.1238469605604654, 0.09078817149019758, 0.049974200553173254, 0.06641409728080339, 0.9632067051764575, 0.9747241770739352, 0.9432563775652504, 0.8946046859865213, 0.9769150624792585, 0.9682442030394074, 0.981401805241523, 0.9670356312932796, 0.9847271536385095, 0.32493965415918424, 0.35126920266622674, 0.2953866856584153, 0.31389609724563694, 0.32072539642321074, 0.30160484407222066, 0.36552988493621485, 0.279824718048001, 0.3846597396528584, 0.17187261091126949, 0.24203848152792218, 0.08474743617712632, 0.9508726317154748, 0.15876376213882848, 0.21336820514958488, 0.1754105851195451, 0.3555247775436311, 0.33607752233291743, 0.17556368525341182, 0.1222221918243458, 0.13457495537212472, 0.22222588085673922, 0.12232900888262488, 0.17360244050799067, 0.1283853878449407, 0.12915788171078235, 0.17946218748343978, 0.14280691707130466, 0.11727930304060064, 0.19529194335677236, 0.1154929061537967, 0.17727938005607335, 0.13361339806487305, 0.13137536798185834, 0.134915660348215, 0.14970324169338234, 0.04383390756985739, 0.003103720971764923, 9.999999999998899e-05, 0.016070681048406033, 0.01642532874929914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038476174859266576, 0.07723843009725062, 0.06625216822946789, 0.05652741794681937, 0.17970885710903495, 0.045620776592461, 0.16420892479556093, 0.055349298062922436, 0.0646028293175579, 0.08475860310743932, 0.06694568795674583, 0.0035658371632610875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04052777252318229, 9.999999999998899e-05, 0.11030383511478525, 0.09218037581725091, 0.12036747835967998, 0.1374804479148687, 0.11574861655706248, 0.04585892019715143, 0.06542565813145229, 0.12535793376232995, 0.13346228977033714, 0.14400853807979785, 0.09292779443450216, 0.4890982868310847, 0.4868097074092439, 0.5164968373788464, 0.4271903295475419, 0.4099677046577459, 0.43740834912263393, 0.41811265277412013, 0.5145180178774069, 0.3977266270311861, 0.27405670742185084, 0.10621097349814024, 0.09223816601514212, 0.06694798430401772, 0.11104310225479308, 0.1076530962179224, 0.08343883046829326, 0.09371731504136749, 0.1279012002686315, 0.19290136396299618, 0.16780526987501876, 0.18784021220466762, 0.16846209063299866, 0.10961626040891148, 0.26773396202746236, 0.15696966352062047, 0.18700446333807774, 0.28916173579133164, 0.2785539823879507, 0.2368356175383317, 0.14352810184653642, 0.3261933301059694, 0.3111197096692495, 0.22943323346451905, 0.22109285508721976, 0.24269331480009737, 0.20970655562112617, 0.14820385396102354, 0.2088257249222002, 0.0994974742321667, 0.2221241662240927, 0.08932598596812347, 0.12478732480497112, 0.19234757020466275, 0.18974603531764522, 0.20067829055015973, 0.16832371170368587, 0.19422420803038676, 0.19002780680980658, 0.16090746001335898, 0.17006798794568767, 0.20320533866483892, 0.1833528144100457, 0.1759845291004727, 0.16934389007390405, 0.17977595332554297, 0.1879718580712868, 0.17293954256558008, 0.1910147974033961, 0.18865370105597712, 0.22589096176229717, 0.17040443793368465, 0.16580365242205353, 0.19149683739636525, 0.18666678268710835, 0.18746700135059113, 0.7349018676713317, 0.16702676008488893, 0.19965342660562857, 0.7166351917096954, 0.8118952551917654, 0.16202697510990416, 0.16548875957258602, 0.1690248218201783, 0.16739513143626006, 0.16850032212849186, 0.21069032791848763, 0.37123450102454014, 0.20986854748325445, 0.21328683033281126, 0.21279322866170924, 0.4814052100545261, 0.1643315015070017, 0.17383929961291178, 0.16954348801176367, 0.16591518850858977, 0.1584503164768184, 0.24210533435498804, 0.2013873654572509, 0.18147719340379553, 0.19179416696317186, 0.0689561943264918, 0.0778827081277077, 0.058467364636916486, 0.07899166042333805, 0.07477444039696146, 0.06885956407788851, 0.07606711413288836, 0.09045080276700024, 0.07625576808607581]}, "mutation_prompt": null}
{"id": "963ddc5e-fa7e-4ad9-bd18-30900a6bdd21", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "c4ca0068-bdf4-412a-997c-f3b55abfcbf0", "solution": "import numpy as np\n\nclass AdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.global_best = None\n        self.best_cost = float('inf')\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n        return self.global_best", "name": "AdaptiveDEPS", "description": "Adaptive Differential Evolution with Particle Swarm Influence combines differential evolution with adaptive parameters and particle swarm exploration to efficiently search diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.7940011404784701, 0.8089735382929317, 0.798779545962075, 0.8234779993167873, 0.7890906824176168, 0.8190720977987748, 0.8151997017712458, 0.8117786273311092, 0.7950026732677129, 0.6759962067538204, 0.725707814838622, 0.7001342249797329, 0.7022614928992499, 0.6775276029834801, 0.6815240945804294, 0.7227787941687952, 0.6968817454710369, 0.7007844251310709, 0.10098345763335925, 0.09833164972724584, 0.24284066835564222, 0.21343238640402473, 0.1140978842694712, 0.10920140218569252, 0.10625819896630295, 0.11821503363253105, 0.12567041655354627, 0.12456388302230648, 0.12549430968816555, 0.11183255798298342, 0.1322121571219781, 0.12149767330642569, 0.11146236362517015, 0.11019903743505743, 0.13630941042846412, 0.1193263868329284, 0.9493903620486595, 0.9763590471191594, 0.97448672154764, 0.9688427243438756, 0.9554958706776675, 0.964442614116837, 0.9702191314405738, 0.9847662650891528, 0.9575142414044486, 0.5327586329691844, 0.48637091589046455, 0.4939261584230561, 0.5350056382282844, 0.5164633400475869, 0.5251003115766385, 0.5108900194583954, 0.5079894153811502, 0.6104663262023249, 0.7582376633764317, 0.7206559195032267, 0.7205862234730779, 0.7845687668720988, 0.7584896551772744, 0.7010527176039301, 0.7737314407862643, 0.7605087682015567, 0.7695785260838564, 0.46347066660762515, 0.47219367448795313, 0.46661369812697473, 0.5183968325156941, 0.4821643812717632, 0.4146782761290023, 0.4576779334656833, 0.485657449996551, 0.44625622027778045, 0.031367777217067294, 0.5061796393800564, 0.3663122991318224, 0.5154802821528741, 0.3898071008537983, 0.49822081702540777, 0.4246112110011716, 0.4296008735004754, 0.48554082256985953, 0.4570230366552258, 0.41087988142572884, 0.06320496918675289, 0.48215035286421914, 0.40674170241734087, 0.35691709464753063, 0.4407033470436157, 0.3381129091079128, 0.3925522618436964, 0.4897096378155156, 0.5800233490659674, 0.5229007287841896, 0.5651770278525281, 0.49034251299282294, 0.5361697119193014, 0.5756682664479358, 0.5852484950578777, 0.599122515472541, 0.08282644734018685, 0.15821775891440193, 0.15351173126799167, 0.26766819049780266, 0.33416309454398874, 0.15767044286207343, 0.12735270134745658, 0.17987529346959852, 0.22093962361548192, 0.35306253879916927, 0.298062742206197, 0.3266563149688624, 0.3500388954841358, 0.36875322021520596, 0.372802620658396, 0.3288827301301631, 0.3150947097404059, 0.3583928584352055, 0.7000770250700543, 0.7185364438069926, 0.7158668340470142, 0.6898652955590603, 0.738220061262141, 0.7006554563538179, 0.7055536231332411, 0.6631946778077218, 0.7202085668133589, 0.10700545064307476, 0.08094179346193053, 0.18392963248437577, 0.10216070364102647, 0.11403780349405934, 0.1134274447420126, 0.08380432360614376, 0.0886552260122404, 0.11032062663847997, 0.18335321701138452, 0.13343901798839275, 0.1858765874358964, 0.23751526454323924, 0.16166243595915897, 0.18638880019320814, 0.18385119225860524, 0.22071899800603945, 0.1369367733026149, 0.3774635962338604, 0.35679814684433686, 0.3365835809567267, 0.36670381676836883, 0.3749517988441122, 0.3690628612478789, 0.3721566638510856, 0.4209085749253152, 0.4201077342979773, 0.2710254112947533, 0.29471836479487445, 0.28932770017915665, 0.2888495655132429, 0.2598978332623405, 0.27220148848931824, 0.3196330567902226, 0.33614822235031994, 0.3148277421789498, 0.18369995979070264, 0.17652596981280055, 0.18550112311932265, 0.1979286351549755, 0.2003703282074618, 0.18079678853987957, 0.1985948317336449, 0.17157560256491966, 0.1903249657688919, 0.27329896667796805, 0.2784262748787003, 0.411614639129813, 0.25696370056010953, 0.17773432662338706, 0.19640899459171857, 0.3665676333840262, 0.2053726151271945, 0.1918320895714235, 0.7527159201325945, 0.16343060017292188, 0.20420750873563198, 0.1743956597470313, 0.8214398947819966, 0.18917965394582714, 0.8142150521980234, 0.18999192956277677, 0.7110442461618793, 0.20482691382311458, 0.2088591848527912, 0.20412985607625067, 0.20658419007041606, 0.19771678843081264, 0.16235002798693077, 0.20422586963068612, 0.21211096697394283, 0.20731539803832832, 0.2361069951812561, 0.18815567580819548, 0.18983668856929903, 0.18965453293376355, 0.16318883982228582, 0.19019657275033786, 0.154485455427817, 0.19845397224960715, 0.17514158973411353, 0.07249742110128976, 0.06936278972537113, 0.07984241178266527, 0.06878288963331813, 0.08377957891492571, 0.08921974001855038, 0.08313527038406787, 0.07472680313033997, 0.07171930930464909]}, "mutation_prompt": null}
{"id": "f1b36fc8-ff25-4683-9831-afc496d61576", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 14, "fitness": 0.45616556920422996, "feedback": "The algorithm EnhancedAdaptiveDEPS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "89020787-5014-4aca-82c2-8a5d276d4aa5", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "61231e7f-2503-47c4-9022-060c64641d11", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "08ff29da-4606-4cab-ac2f-afdea8707473", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "d6495080-f088-4a6e-b42c-5f89298cf334", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "96fc074a-e54f-440c-ad3e-882ea3f714d6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "488675cd-0b70-4bfb-9e40-4bb21202f8e8", "solution": "import numpy as np\n\nclass ModifiedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n        self.memory = []\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.5 + 0.3 * np.random.rand()\n        CR = 0.8 + 0.1 * np.random.rand()\n\n        while evals < self.budget:\n            self.population_size = max(5, self.init_population_size - int(evals / self.budget * (self.init_population_size - 5)))\n            new_memory = []\n            \n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                trial_cost = func(trial)\n                evals += 1\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n                    new_memory.append((F, CR))\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n                if evals >= self.budget:\n                    break\n\n            if new_memory:\n                F = np.mean([mem[0] for mem in new_memory])\n                CR = np.mean([mem[1] for mem in new_memory])\n            self.memory.extend(new_memory)\n            if len(self.memory) > 10:\n                self.memory = self.memory[-10:]\n\n        return self.global_best", "name": "ModifiedAdaptiveDEPS", "description": "Modified AdaptiveDEPS with Self-adaptive F/CR mechanisms and Dynamic Memory, enhancing convergence by learning from past successful trials.", "configspace": "", "generation": 19, "fitness": 0.44534084043161226, "feedback": "The algorithm ModifiedAdaptiveDEPS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8769345008432946, 0.8600332482227462, 0.9066369335430978, 0.8767816765660755, 0.8788795919123836, 0.9085026455607741, 0.8781483579670984, 0.8767724700737801, 0.8927877130761487, 0.782663275993828, 0.7826068209583731, 0.8291535951824693, 0.7677847659856976, 0.7725937613115582, 0.8306921919978729, 0.7711915993346323, 0.7790483150855798, 0.837460032584857, 0.15555093434903955, 0.5148173339789226, 0.470583014557583, 0.14962565413901885, 0.4704118170998157, 0.5375484153573024, 0.15735907937620797, 0.1334282907790968, 0.1549192183333311, 0.12739641290767467, 0.11843467546575226, 0.5129601672027112, 0.1385739858815428, 0.1298431314768833, 0.1504578469424831, 0.14331390132173638, 0.12856990254192302, 0.14079975818970192, 0.9597457479013329, 0.9510560909270922, 0.9205172176238104, 0.9382211835276787, 0.9572130734328612, 0.9354002180828089, 0.9334497256036559, 0.9760508665169922, 0.9508122356795303, 0.670725262868365, 0.7113215939704294, 0.5928416628985371, 0.6583837576360935, 0.6795135880731067, 0.7399321311210234, 0.7172328667635772, 0.7124168270185132, 0.5827519583417512, 0.8187965067996629, 0.842210060836375, 0.22469593360515283, 0.7853909815181483, 0.8829586100949303, 0.8556288609835796, 0.7980737135230669, 0.8400221429143029, 0.8613559677667048, 0.5418545233373764, 0.5987568285958069, 0.2493546044066266, 0.5838794442863711, 0.5734490741238301, 0.20053371424048005, 0.2755209949591929, 0.6255914512248744, 0.19159253167346268, 0.01663608905704228, 0.6298569608765624, 0.19067595462996956, 0.2462799636821511, 0.2829771212931689, 0.22121823565167098, 0.3960407351169519, 0.38838590166684683, 0.17546500506468732, 0.41995710076862847, 0.6067109895531513, 0.20792488050801283, 0.4113350199072845, 0.48642348702305127, 0.4036378640142959, 0.5212374906150674, 0.6016749095714862, 0.3129707022416819, 0.5619767979249438, 0.597655082825101, 0.2428054321729527, 0.5593531056939662, 0.28403275143784545, 0.12622509686071626, 0.5526768179243423, 0.7356020561258327, 0.5055545799754432, 0.171284711422086, 0.20651235467617035, 0.1693325274232529, 0.30721824342623794, 0.4594949595838017, 0.2045263823488227, 0.16103943419804467, 0.15497428296337146, 0.26375460912218696, 0.4765197547676244, 0.3722154141509546, 0.3559027098296069, 0.4271363718426986, 0.47254629890922484, 0.5627432424472357, 0.4299005166285661, 0.4727157057936251, 0.3308769874786335, 0.7497981837336384, 0.8254661003057758, 0.8473873786493227, 0.7255106804373377, 0.8134149741517118, 0.6666161512405975, 0.7797022343836171, 0.7908469779578611, 0.7918292716466402, 0.12142985470878631, 0.11378024876320925, 0.11992672014563377, 0.11332230954532918, 0.11764148858156298, 0.13064129506946176, 0.10095596425311193, 0.12638342156182825, 0.1003273881520641, 0.1516400336633036, 0.15740864393934773, 0.22413333279868697, 0.17259891788271908, 0.1402213003298235, 0.2145680239849974, 0.25976847398874126, 0.23982737547481614, 0.30076771528860735, 0.5345274667410957, 0.6419655702227278, 0.5627869902124676, 0.5207890920881662, 0.5899944040156335, 0.6635698928224176, 0.6147488948826516, 0.5544934542381921, 0.5522595907897672, 0.4192733563231943, 0.36496477170309816, 0.4837313165146778, 0.4135277653965269, 0.3708901567316225, 0.4657146539172834, 0.42656446561573036, 0.45739035422909924, 0.4638686694210874, 0.19327028632311527, 0.18759586637918568, 0.21375597862620221, 0.2118220341601298, 0.20019085903521416, 0.19497890945389273, 0.17481352243289527, 0.18425228678715533, 0.2277356828587196, 0.19129440696432787, 0.20283423692012714, 0.24195418624383835, 0.5759604191326118, 0.6135070339961441, 0.23509450361183792, 0.5872776227036951, 0.1931158890921323, 0.23903406070639754, 0.7859975870956213, 0.16365111393766674, 0.18330170929674938, 0.17319994604073052, 0.1760026079166035, 0.8178561440942425, 0.7722842162472727, 0.14584833494545624, 0.82378035932912, 0.208316225096548, 0.828391824604517, 0.8099064478868125, 0.7834177553741528, 0.15759991139581342, 0.33862075130313574, 0.2077907703553472, 0.8350833997940191, 0.21065239631756472, 0.19681436502632088, 0.20345389247957169, 0.1857361112156416, 0.19981572939196268, 0.1708834780480495, 0.1948528927665849, 0.1899643402282306, 0.17923881323468882, 0.17979590676446, 0.08257516431223755, 0.07490268597094907, 0.08834494616958222, 0.08928887863985324, 0.08238062959515424, 0.0872966973337519, 0.0824940494208205, 0.07928536982975998, 0.07483134166457661]}, "mutation_prompt": null}
{"id": "dada0a53-590c-4eb1-889e-a05277568bb3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "70a3356a-1ace-4fae-af43-124831ed3ca3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "2086219e-8cb7-483d-90ea-adf75e977116", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "b4b4462e-ef88-459a-81b9-80758512ec2a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "e99fee9f-f124-4202-930b-64c415ea8f92", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "6365390a-e42e-4ddb-9bcc-9e7721703bf3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "61bc3423-d10f-4b62-bd58-d18a058f9a39", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "e57d516f-95de-4483-a24d-11787caa782e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "be586cb3-9bf4-4583-98bd-990db6ae5f78", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "4e7b8f24-610d-4d04-8d0d-556cfcaaf4b7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "0f381214-d498-417f-a794-f3121378099f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "fdb70074-20b7-4f00-8277-3e5b7011b833", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "072217db-8eb5-4626-bc98-ea24ea8855ee", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "4f85f636-ecda-4360-ab45-85203f628063", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "97afe3fd-a432-436b-9dcd-e14969132e8f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "efe789ca-7f84-4318-b256-b6d57e421018", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "ed81cfe7-ebd7-4a73-bda1-65ac31791d92", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "21e9792d-de36-4711-b89f-a9763688dad1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "5943a062-c779-43f9-9f55-0bd69955ffd8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "14e904ac-da14-4af0-b15b-e6b9d49563cf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "113ebae1-9be4-4e6c-a2ac-4bd0cb67ec87", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "0c09c0d8-ddb0-478c-b58a-52846a9ef307", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "90aef3db-7324-4574-a775-29f33a902b50", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "4de8171f-3237-4cd0-a6bf-ae401e31ce30", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "422cf6e6-a6f6-4f26-82cf-ff82b49388a2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "8812ef0b-3420-4187-a6da-08ea55e830cd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "199d4703-0e28-4d08-8434-855df8beabac", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "fe186ef8-13e5-48fb-b9e5-b5a4880e8009", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "cc060347-f1c1-4363-ba38-d520301a04ac", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "27a39f72-eb7f-4344-b125-ab3572002f23", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "f7b973cb-07aa-45f2-a872-9a588afe1ee1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "823ea807-b523-4f0d-8333-77cfa2aec2b7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "467a7910-3daa-4eb1-b16d-c08108cb37f9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "ab62b001-8d02-46a6-9605-cf2efa3e01d3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "383b9d11-e9e4-409f-a351-4abe27b88985", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "7db40dbe-ed6c-48a5-a9f2-0384ba75da07", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "ce4b5be7-9974-4828-bed4-66a98a0003c8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "b23253c5-18a3-46b8-b4f2-188c6e4ab238", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "0792db3f-1dce-4d5f-9257-96f2619a5b10", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "02ea2d7a-7df7-48af-a7ab-3e10789102b4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                if np.random.rand() < 0.5:\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                else:\n                    mutant = np.clip(self.global_best + F * (b - c), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR + 0.1 * np.random.rand()\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_cost = func(trial)\n                evals += 1\n\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "EnhancedAdaptiveDEPS with Dual Strategy Optimization, incorporating a hybrid mutation scheme and dynamic crossover for improved diversity and convergence.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for +: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for +: 'NoneType' and 'float'\")", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {}, "mutation_prompt": null}
{"id": "0b236f62-2e25-4345-9819-0ed8bbc24904", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "8d0e4517-5d64-4b0d-8a89-ef66fa2e989d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "56548f45-3105-42af-bbff-f86d9a8e44b6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "e6f264c7-6fe7-435f-96a6-665f4feca4f0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "d76d66e5-ef26-47fa-aa95-a32f1da26c5d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "7cfe0ba7-0ca2-4fd7-b533-c6d545198fd7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "7fcfa5fe-ad25-4574-96a4-d8a40be5e8bb", "solution": "import numpy as np\n\nclass EnhancedDynamicDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Perform stochastic tournament selection\n                idxs = np.random.choice(range(self.population_size), 5, replace=False)\n                ranked = sorted(idxs, key=lambda idx: fitness[idx])\n                a, b, c = population[ranked[:3]]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Self-adaptive F and CR\n            F = 0.5 + 0.5 * np.random.rand()\n            CR = 0.7 + 0.2 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedDynamicDEPS", "description": "Enhanced DynamicDEPS with Stochastic Tournament Selection and Self-Adaptive F/CR, utilizing stochastic selection and adaptive control parameters for accelerated convergence.", "configspace": "", "generation": 66, "fitness": 0.45031282292122077, "feedback": "The algorithm EnhancedDynamicDEPS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.32.", "error": "", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.930390198529073, 0.9293059213431097, 0.9288503306631013, 0.9316901049952384, 0.19054838556607379, 0.9330872857388958, 0.9270108843737124, 0.9366020250460466, 0.93851011055083, 0.8742323973330386, 0.8950259460130235, 9.999999999998899e-05, 0.8831937700110557, 0.8874692305278944, 0.8957011140392441, 0.8758049406469773, 0.8950111321730633, 0.8914813959248291, 0.7879291572827041, 0.6343414229463178, 0.1761747551362428, 0.6876702751820274, 0.7915238461612033, 0.7244097271433148, 0.1674850553633218, 0.1793057791802829, 0.1328851927279333, 0.7400202647945131, 0.16739917380816205, 0.165722657117503, 0.18114434026964288, 0.17010960003346232, 0.1407925335558744, 0.1748778346777663, 0.13698228694074932, 0.14919726856647098, 0.9856558745485872, 0.9952959044302846, 0.9924997643936052, 0.9901166543777745, 0.9830991883669723, 0.9894793272378133, 0.9944496619487642, 0.983986034638046, 0.9846491084208205, 0.8197778580673405, 0.8062671123229266, 0.06176653302180779, 0.8229888990118079, 0.8010452396482325, 0.8259718244097661, 0.8391302941191132, 0.8186507288501466, 0.0890063555591909, 0.3939524832271968, 0.899251351351669, 0.9227863300905025, 0.899889757607153, 0.8896419373837228, 0.9200358475808902, 0.8975844207768126, 0.9148892944519638, 0.9067843432032301, 0.7505945611763942, 0.7770669281841938, 0.6570591498380072, 0.6725129732305851, 0.759231295363785, 0.7572219455204476, 0.7462734159190769, 0.6128331058186482, 0.7904049849564843, 0.697475516196872, 0.022378817788570426, 0.6816067429658987, 0.7577147629773001, 0.7463861271469201, 0.7708948936064743, 0.7980434000943352, 0.1283281763966041, 0.8317060449361601, 0.08264803326505732, 0.4900034449838596, 0.523897104582274, 0.0007450647320275117, 0.19898013091287592, 0.24171183762211013, 0.1128546352753026, 0.25201987783642, 0.3421465437034332, 0.621247209211257, 0.25406804811941974, 0.2522655248024527, 0.23762383080840443, 0.22751155843892046, 0.12416757921981447, 0.3945911795208552, 0.6140964963345595, 0.369141721902736, 0.2132025933598639, 0.482287664732603, 0.1258485312628571, 0.42693742889590414, 0.38611788408491843, 0.2292598574453827, 0.29996579620964103, 0.10660829139779249, 0.3180594042794168, 0.30947887051849443, 0.47660881461025095, 0.3226467778800983, 0.36542371386965466, 0.49084561551584294, 0.465751429086825, 0.3591125214832469, 0.4261013495725119, 0.0859788663557498, 0.7071430213199055, 0.8487314942425814, 0.7730430543609474, 0.8031928975852823, 0.7242503513405907, 0.783171591670226, 0.6911737755178917, 0.7648711757567582, 0.7623323520465389, 0.10433418502630265, 0.14973806115216282, 0.5510552486150693, 0.12622866005494393, 0.11895278359649397, 0.11131397444997515, 0.13525628924833455, 0.13046145233496687, 0.10806809717862231, 0.12757498485086416, 0.27344586704160767, 0.1084561668155597, 0.1298288708364509, 0.24181086914193217, 0.12238464152575212, 0.14349945716200851, 0.1544622521935991, 0.2274322384666254, 0.7832904387128721, 0.5768316716701739, 0.7727057409828688, 0.7504615617452387, 0.7264742677482763, 0.74992543241516, 0.5842364609501813, 0.618925776567063, 0.5926013664036137, 0.268922250684703, 0.41201934229753523, 0.4627742714384073, 0.5029679662091278, 0.2119992644611024, 0.4145109061205914, 0.4744830053219091, 0.25235923714066777, 0.6737849639308136, 0.2258291333088035, 0.1845587044592717, 0.18978570655978155, 0.19574616160227987, 0.1873567210563477, 0.20740281576177744, 0.20902990866616833, 0.20902817318497968, 0.19458203340231672, 0.21856723192857497, 0.2122362100893781, 0.22201330979042944, 0.24815181932124508, 0.7933053545086344, 0.2501103978369976, 0.20402674007579036, 0.8046944993339014, 0.7730739814232637, 0.16838584296574555, 0.18466829914505967, 0.15451562474537717, 0.17695533978311961, 0.1882901060428761, 0.19836398771689767, 0.17207610845865862, 0.16863146633895576, 0.16550769888789563, 0.0829555276862276, 0.15516035371913217, 0.1547754324681544, 0.16743526587609503, 0.16833240344876854, 0.21078509253910516, 0.18972415328387082, 0.2135758177211906, 0.10844957032167823, 0.1719452888362386, 0.1738185793000836, 0.17065402059740586, 0.1706409405588578, 0.17878730594878411, 0.15954258628179374, 0.20647753049523543, 0.1658584938186094, 0.1613142923229498, 0.07529330039356441, 0.0665472595475356, 0.0841152293592875, 0.09133634970072668, 0.08135723523987981, 0.07709635216413457, 0.09048477743021777, 0.08235891898348802, 0.08204001085540402]}, "mutation_prompt": null}
{"id": "f77e6c30-e005-4a77-8d97-34bc82bebb9b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n        self.p_weight = 0.5  # Probability weight for strategy adjustment\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover with probability weight\n                cross_points = np.random.rand(self.dim) < (CR * self.p_weight)\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR with dynamic adjustment\n            F = 0.5 + 0.3 * (1 - np.random.rand() * self.p_weight)\n            CR = 0.8 + 0.1 * (1 - np.random.rand() * self.p_weight)\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Dynamic F and CR with Probability Weighted Mutation and Crossover, enhancing convergence by dynamically adjusting strategy parameters with a probability-weighted approach.", "configspace": "", "generation": 67, "fitness": 0.33388422158178516, "feedback": "The algorithm EnhancedAdaptiveDEPS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8529506345616349, 0.8400593297827065, 0.8561494483513343, 0.8578812165723734, 0.8624785504483419, 0.8554471880047145, 0.8573724274967175, 0.8641661814997663, 0.8594699984572206, 0.7580589475967466, 0.7578693484515308, 0.7639051284435842, 0.7492887132030742, 0.7560224578369241, 0.7620139188887215, 0.7444108211728789, 0.749499777299766, 0.7599755643077865, 0.6180607060276125, 0.6468525741821594, 0.6423094451809565, 0.606755556135569, 0.6954874458531273, 0.6903428428702296, 0.6047811659241522, 0.6560007449547058, 0.630616137093053, 0.6136276421177912, 0.5938435156192408, 0.6057329783096094, 0.6117151495832535, 0.5869261097944869, 0.609311733692848, 0.6112833191909056, 0.5573269714979285, 0.17259049582872543, 0.9692460988506135, 0.9678826964222494, 0.9731589595380296, 0.9795978144189268, 0.9807550836480794, 0.9667585144129582, 0.9784082543418634, 0.9726738126458974, 0.9663222532829252, 0.47577967639291996, 0.4718747989592914, 0.5038695766387963, 0.5169255927882748, 0.5063637024228202, 0.5123233316932545, 0.40604798806283526, 0.4129479233807932, 0.46776609154038673, 0.27171280452702595, 0.26769322471416257, 0.35521507585711876, 0.4890407441775083, 0.4527979723110621, 0.3547992903598831, 0.5310272270915557, 0.4582685855689086, 0.39486815340692094, 0.21161571491840903, 0.19241001188078533, 0.18005767205187895, 0.19571962869693438, 0.20042170255485803, 0.15958587531416757, 0.18181399991755376, 0.18715148440868257, 0.21465580666174666, 0.1634539160946562, 0.18490676714318788, 0.16623166723175398, 0.18801825995826638, 0.1838288242854459, 0.17742526643094092, 0.15798029193854124, 0.19239967525079704, 0.16494586245008336, 0.006013183870868133, 0.0056505101258320645, 0.0016370821917648382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00350261547246411, 9.999999999998899e-05, 0.0010971638764268876, 0.0879306438174553, 0.0966122777143199, 0.07940579294006367, 0.06690959766597337, 0.06335236736605399, 0.04606396008017455, 0.12729585931837606, 0.06161585794228963, 0.08663168080065786, 0.0004674543187757063, 0.012727315231031544, 0.005016298470215008, 0.0040765737761259135, 0.020177257566636353, 0.008472155886212418, 0.008025477634739375, 0.01127497590093296, 0.014522347126122104, 0.11823034440069968, 0.11660568517566294, 0.12978093281660386, 0.15102138205246374, 0.1683298018153795, 0.1585221594091758, 0.14100711440866964, 0.14947600189988575, 0.13222930014719791, 0.5336564630489204, 0.5142755063194189, 0.5173151995330871, 0.49473537666971645, 0.4997775885611119, 0.5293593478533265, 0.5222070798422996, 0.5265024984712082, 0.5325167531053034, 0.09407269894966264, 0.11141125809439778, 0.11625374254580456, 0.09650919273068337, 0.09583901320282273, 0.11578859578350897, 0.11001608300610877, 0.10379182092690953, 0.08762276176751915, 0.15188002412003188, 0.1447632082078809, 0.14523029203890492, 0.13982430710467564, 0.1459035887167096, 0.17670002312931588, 0.15990392854179203, 0.14365164088979732, 0.15691731758759475, 0.30511050340712775, 0.3108093161868988, 0.3364661488927858, 0.33280129326717733, 0.33491582020540367, 0.3293627382792479, 0.37030011966916976, 0.4075725385046828, 0.3522195446452836, 0.2077595636097198, 0.20892239423391223, 0.20919794092359567, 0.1845395172814216, 0.17764567979309454, 0.2102076927324742, 0.22139118345024722, 0.22630248410400378, 0.20455591422641795, 0.19485427768856922, 0.19412449043071456, 0.19565784425309707, 0.2084827251928718, 0.2139303501976818, 0.18745709508825026, 0.20496674206114474, 0.23469403538709466, 0.2063831865544129, 0.3485272889647477, 0.5666499436275635, 0.44135950619701825, 0.3812049555117979, 0.3799965431807685, 0.25261493971957916, 0.44508995786119765, 0.46987598190119584, 0.4892248864326517, 0.4020820273801746, 0.3197028704742676, 0.2200423452922372, 0.2929309475733952, 0.17707983918507675, 0.5190750088452517, 0.16477636159510234, 0.2565610468987958, 0.16460967148403483, 0.2816864669174247, 0.2665495059001671, 0.29545180773651003, 0.22318218442233884, 0.17328245692433553, 0.3024561795294872, 0.4554129349701874, 0.20515518073911676, 0.20331570601228777, 0.18599268803935387, 0.1958380123186827, 0.18650776711044137, 0.18193860427794095, 0.21376912627583855, 0.18937894601278948, 0.172101375416836, 0.19274587429202383, 0.20928995386751847, 0.07868051449046709, 0.07983552398144422, 0.07059758617879908, 0.08479835993152829, 0.08171687028592511, 0.07830299122810613, 0.07898330900540385, 0.07662151431494002, 0.07552681625064428]}, "mutation_prompt": null}
{"id": "681df867-f7b2-4d35-9ec6-2a0c8b57c250", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "9d9becbf-d81d-40d1-873a-32c89b1d5548", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "09a72444-860a-4ee7-b1e9-90db479ae5e4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "97b8ab7a-4b52-4547-aa12-e8d2236965bd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "13c87674-f297-4027-9fee-3456bdcfedc3", "solution": "import numpy as np\n\nclass HybridEvolutionaryStrategy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.7\n        CR = 0.85\n\n        while evals < self.budget:\n            # Dynamic adjustment based on evaluation progress\n            self.population_size = max(5, self.init_population_size - int(evals / self.budget * (self.init_population_size - 5)))\n\n            for i in range(self.population_size):\n                # Ensuring diversity through improved selection\n                indices = np.random.permutation(self.population_size)\n                indices = indices[indices != i]\n                a, b, c = population[indices[:3]]\n\n                # Mutation with scaling factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Crossover with a modified probability\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluation of the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection process with fitness check\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update the global best solution\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                # Stop if budget is exhausted\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR to enhance exploration\n            F = 0.6 + 0.2 * np.random.rand()\n            CR = 0.75 + 0.15 * np.random.rand()\n\n        return self.global_best", "name": "HybridEvolutionaryStrategy", "description": "Hybridized Evolutionary Strategy with Adaptive Constraints and Dynamic Parameters for Improved Convergence.", "configspace": "", "generation": 72, "fitness": 0.430662437801189, "feedback": "The algorithm HybridEvolutionaryStrategy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8565314002723788, 0.8564182390191915, 0.8657459329331847, 0.868893074782353, 0.8636310907667781, 0.8659228485944319, 0.8671631484724802, 0.8664754223604411, 0.8655507097573052, 0.7853000328433977, 0.779006658942892, 0.7751616735881212, 0.7689819534519925, 0.7821120955425, 0.7773916611694067, 0.7655720301777256, 0.7762517502186234, 0.7829990938169632, 0.4959448680588002, 0.35094142401825845, 0.16563260449099093, 0.28555795425648367, 0.13183499633161588, 0.49676393207746095, 0.45564000797265003, 0.4451866739243421, 0.14203471722482586, 0.14796820123617693, 0.12749984945768844, 0.13213588580975488, 0.156552607579171, 0.1526911961703914, 0.1488225424223263, 0.1422134027551858, 0.13451060000418003, 0.14215419565038323, 0.9731744425385186, 0.944635354572728, 0.9583156015324867, 0.9780482906602872, 0.9745664826153093, 0.9820420510700141, 0.9711635222295061, 0.9875254473884828, 0.9797460953384916, 0.6702253131461353, 0.6465023913674715, 0.6556897655511117, 0.6921752522222003, 0.6496156904052398, 0.6640954366774143, 0.6864909228076027, 0.6642964544958792, 0.08814566017682501, 0.7319027050154208, 0.7320708255763912, 0.794698876805976, 0.8375921651123877, 0.8391465622217958, 0.8214918426534779, 0.8120339066513995, 0.7813628418048836, 0.7966391931838782, 0.22213261556047414, 0.5754125045315717, 0.46385782276163634, 0.41625321268274074, 0.28976946308982776, 0.30489980950158724, 0.4498734899383371, 0.6135873030567729, 0.5550617900366243, 0.044324240397611736, 0.021350060862316833, 0.04080382176279418, 0.22222912158769448, 0.4973560445224129, 0.28432471998250775, 0.429031071807935, 0.4863348243508855, 0.3367681351231405, 0.43114633520761814, 0.4420162730849172, 0.5484577116646603, 0.18350179833038305, 0.3920725974588106, 0.4337699225688181, 0.3993026972721414, 0.4676093363303042, 0.4162275870966222, 0.526130799627295, 0.5893926002343477, 0.5216292053802102, 0.4401051828866126, 0.3583906756372278, 0.5212465764805283, 0.5946149564175123, 0.6250765321067858, 0.5054047830537849, 0.10368258732949742, 0.22803017081759713, 0.05765730803542923, 0.25934304138650954, 0.19015033672932624, 0.16086236397763676, 0.21065883558872767, 0.14149765293917493, 0.14878062230503253, 0.30470076784201305, 0.37520657905533217, 0.34674234509774127, 0.43235243374015253, 0.3917991676734055, 0.3918549313926978, 0.3690978157146485, 0.3859173906478601, 0.41634338785372416, 0.7913436033865571, 0.7735830778176823, 0.7787126406062133, 0.7579603713302092, 0.6499349414361133, 0.7472000540191246, 0.7726325134467873, 0.7634260079146662, 0.7186698778450634, 0.09964782544456374, 0.09172098579364796, 0.11529798631209909, 0.09928170938960612, 0.11672497265418114, 0.09599461690204758, 0.12628191431577596, 0.0876040729560138, 0.10497744209779813, 0.1850152149874953, 0.13541510750588692, 0.13520154743334445, 0.13844093539269364, 0.19621576411021102, 0.16094078144888502, 0.16225681872183473, 0.135340868038772, 0.14521267172041186, 0.5674938794230029, 0.555863789493868, 0.5931642543574895, 0.535925567547437, 0.524739917864572, 0.507825931001793, 0.5856815977966119, 0.5944478274796788, 0.5547216568931728, 0.38030346090423595, 0.39888899163593095, 0.3498746344888727, 0.3724031708460428, 0.3829221082581209, 0.3867739965385284, 0.46870222248936944, 0.4064330722400429, 0.3789267345520384, 0.21014521449731394, 0.21718936701796943, 0.19815633774675445, 0.19808370117520513, 0.18527943128094104, 0.1991891571123744, 0.19882834853480968, 0.19574115558804916, 0.18700064387206783, 0.6221737891079091, 0.6462321404089713, 0.2135464562322964, 0.19913269942797096, 0.2197080987629484, 0.46479466595656926, 0.49394517734042565, 0.521385803617631, 0.5652347322905023, 0.7726922484577768, 0.16394300620922253, 0.152835147979425, 0.16973441159559965, 0.18591559068264418, 0.8130387535429078, 0.821020311732136, 0.7913718655222721, 0.7967978499494714, 0.16360209162127848, 0.1669042468773454, 0.7455329349505905, 0.2000710868336143, 0.20019853445174207, 0.6697837911393146, 0.16562033150822186, 0.21249849404672827, 0.2111139943485738, 0.18697197987668424, 0.1763015409110914, 0.18897710918836008, 0.17844594392637647, 0.1709851559320592, 0.18330412729698198, 0.19403615062950574, 0.17840531874991628, 0.17585256233734692, 0.08548403138605953, 0.07893740820115835, 0.0820509058617287, 0.07699031957640945, 0.07964148678372074, 0.07898028383652911, 0.08851052093833045, 0.08116442337586627, 0.06874761749651115]}, "mutation_prompt": null}
{"id": "6eee2b99-484d-4abd-a9cb-03ce84563762", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "237af876-f89a-4932-be68-1a68c11269b4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "ab37b998-e6ab-4f46-b177-52e02c72c9b3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "d8562357-52c5-4ae7-bc7c-01abc2022ae6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F_min, F_max = 0.5, 0.9\n        CR_min, CR_max = 0.7, 0.95\n\n        while evals < self.budget:\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n            successful_f, successful_cr = [], []\n\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                F = F_min + np.random.rand() * (F_max - F_min)\n                CR = CR_min + np.random.rand() * (CR_max - CR_min)\n\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n                trial_cost = func(trial)\n                evals += 1\n\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n                    successful_f.append(F)\n                    successful_cr.append(CR)\n\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            if successful_f:\n                F_min, F_max = max(0.4, np.mean(successful_f) - 0.1), min(1.0, np.mean(successful_f) + 0.1)\n            if successful_cr:\n                CR_min, CR_max = max(0.6, np.mean(successful_cr) - 0.05), min(1.0, np.mean(successful_cr) + 0.05)\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Utilize adaptive dynamic scaling and crossover strategies with a feedback-driven approach to enhance convergence efficiency.", "configspace": "", "generation": 76, "fitness": 0.45468195584887966, "feedback": "The algorithm EnhancedAdaptiveDEPS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8945951288096281, 0.8843537879672956, 0.9014507840753841, 0.8918758295258, 0.8542427068729508, 0.8998457659920331, 0.892177852287888, 0.8942921877339999, 0.8802298420540074, 0.8302708177621883, 0.8102107855778107, 0.8246822928060711, 0.8288181344487875, 0.7669593272530595, 0.8439480621117974, 0.8204048659852847, 0.827616818007427, 0.8151405486864889, 0.5476585676245759, 0.5205878474116933, 0.5753519017640487, 0.5918720800413599, 0.6229812093469238, 0.5445532623367104, 0.5758979035726719, 0.47776290224661633, 0.5202162625713834, 0.16659396816093852, 0.5702615879237274, 0.49404633040324053, 0.13345139636590853, 0.15507076391141927, 0.15816432886863419, 0.17064730238046322, 0.16668282037592486, 0.4744452854097294, 0.9688255961929846, 0.9352330654353243, 0.9712826574617021, 0.9591642222503984, 0.9535020884813497, 0.9466128341500373, 0.9394110009996881, 0.9582006623200968, 0.9715164706850018, 0.36952689305172504, 0.5358942586784282, 0.46224725346282547, 0.5021576996227125, 0.4304029895785939, 0.5614126167801172, 0.4077562541587356, 0.4150621940843243, 0.28486475773041076, 0.8654280250008595, 0.8680658214608765, 0.8851476173593065, 0.8760528129566723, 0.8970852913648395, 0.8651870134039036, 0.8538158941506078, 0.8541599819338239, 0.8525250992643687, 0.1745895371710643, 0.16634671919336252, 0.19525083019315703, 0.16360813096220428, 0.20124462346025607, 0.1323699872669709, 0.19059066048992057, 0.14488350980340836, 0.21740711822437342, 0.12976911731025242, 0.6029305677064563, 0.16529940650527042, 0.2017544175653203, 0.18777753023470045, 0.1813270516676223, 0.1974522372858143, 0.17698794945842533, 0.14675275804310495, 0.4774851240971161, 0.12861351530812348, 0.5359952899292053, 0.057442589674293276, 0.6051049817254796, 0.452787144006667, 0.4440833010353852, 0.42694183350073756, 0.3816354287975243, 0.5854533583367283, 0.569277173654864, 0.8462117418633889, 0.7718672232477672, 0.6931044521115057, 0.12146485082608893, 0.5425440042592986, 0.3138060526331067, 0.6772322101610937, 0.17071669723812843, 0.17974674807092328, 0.10459230528159402, 0.3015964396019333, 0.31313224530772255, 0.1892868318916061, 0.17143223555210807, 0.2845893988963336, 0.16692826036841868, 0.400501896676948, 0.5243912376170977, 0.45777231991932144, 0.3482210388060565, 0.46193569162474724, 0.28814275862608896, 0.32207724114397673, 0.4859393660223439, 0.40789485483902477, 0.8427702851391395, 0.8132589371381123, 0.7481798583568776, 0.8396749557228229, 0.6567904152354949, 0.5672870465265538, 0.8521632202334105, 0.615671216748108, 0.5951076532709147, 0.5404053898971944, 0.13439259186636987, 0.11785256538627842, 0.11117355296552889, 0.13432199721141258, 0.1301297164337466, 0.1205231426791683, 0.13999332637359985, 0.14938773032929875, 0.5124030741200207, 0.18886858247019778, 0.15466724574009771, 0.4965055979649803, 0.21553299406430626, 0.21826283711257788, 0.27633272892086636, 0.14106525126187175, 0.20691353178777694, 0.5323807465660089, 0.5602044884857376, 0.5319379922465581, 0.5358439488185933, 0.6076592790190368, 0.6913530931263088, 0.5868759847708354, 0.6640563248118576, 0.6101011867372051, 0.3793746696836592, 0.410523669969169, 0.33966059517705993, 0.3883281666738887, 0.34746866095214957, 0.3800301943015717, 0.6537842927390287, 0.4003221981139501, 0.4608692280214056, 0.20938527197606394, 0.180448430489887, 0.1966704759632617, 0.20627148143426333, 0.18918506498654797, 0.2023014698812472, 0.204095692304877, 0.195218967993939, 0.2110983572415226, 0.48212678826275945, 0.2221593924914228, 0.5875015958234493, 0.3886292173100723, 0.40663976073085695, 0.578349617611959, 0.6341166416224392, 0.6544050244790158, 0.21889277623215675, 0.15318904677933987, 0.8747113156298219, 0.9146129318628852, 0.19303203981628614, 0.8000822517326815, 0.7797963981036117, 0.82106536535682, 0.20273880986983417, 0.19477816645077417, 0.6543674678714475, 0.8083721715751463, 0.7810291326360833, 0.19699467914612323, 0.4937503992184834, 0.20249256684694028, 0.20866277400472222, 0.7079409196996687, 0.20887940520531467, 0.2033847170926798, 0.18478413199346888, 0.19070414779543265, 0.19949760385304005, 0.2029248151470764, 0.18402516030054317, 0.1705867674250814, 0.17180387388915586, 0.18736671035123564, 0.08798197167521071, 0.08257204839256316, 0.08322388238170753, 0.07536023326372254, 0.09636230919646738, 0.07789638515303199, 0.07958242211711242, 0.08294180364429138, 0.08170911998567698]}, "mutation_prompt": null}
{"id": "82efdba8-12e9-470c-adcc-8d1a40e10c21", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "7e062889-7200-450c-b885-ad63fcce63e1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "12e54463-291a-4aa5-9400-9b40b7d62166", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "0f9fe9d6-a8a0-4892-93b5-734f4eaaef8d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "30fe6f3f-0a7b-4dfa-a18d-65ffbe595fbf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "155dd275-e645-4ec8-bb7c-565e43cf7312", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "15b3b7b5-abee-4018-891d-f34140aac3e2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "8efd1f34-aece-4283-aa9b-e5328b3ad088", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = np.random.uniform(0.5, 0.9)  # Stochastic F\n        CR = np.random.uniform(0.8, 1.0)  # Stochastic CR\n\n        while evals < self.budget:\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Enhanced mutation using weighted average of best and random\n                mutant = np.clip(a + F * (b - c) + 0.5 * F * (self.global_best - a), self.lower_bound, self.upper_bound)\n\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                trial_cost = func(trial)\n                evals += 1\n\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            F = np.random.uniform(0.5, 0.9)  # Stochastic F update\n            CR = np.random.uniform(0.8, 1.0)  # Stochastic CR update\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Improved EnhancedAdaptiveDEPS with Stochastic F/CR Adaptation and Enhanced Mutation Strategy for better exploration and exploitation balance.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {}, "mutation_prompt": null}
{"id": "cec2ba8f-012c-42e8-afc0-b653ccd3b730", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "25872d5d-b423-4ed8-ac8e-f894a4959faf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "964bd9f2-41f4-4ba0-a9e1-735d364e5e93", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "2b392d5b-0274-413e-9a6d-d5d98508e36a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "90fe9b22-9f7c-4d13-890c-ea807abef2c4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "70916d35-fa71-4f0c-8d7a-f1740df3037d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "e653ca8f-33dc-41db-a0ba-dd5aa1e3fc1c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "f5612c4c-95dd-4178-a42a-eda04f82bad3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "c0b444f6-ad7f-42f5-9528-b631044d7513", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n        self.velocities = np.zeros((self.population_size, self.dim))  # Initialize velocities for PSO component\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n        c1 = 1.5  # Cognitive component\n        c2 = 1.5  # Social component\n        inertia_weight = 0.5 + 0.4 * np.random.rand()\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                # PSO component: update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocities[i] = (inertia_weight * self.velocities[i] +\n                                      c1 * r1 * (population[i] - trial) +\n                                      c2 * r2 * (self.global_best - population[i]))\n                population[i] = np.clip(population[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F, CR, and inertia weight\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n            inertia_weight = 0.5 + 0.4 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Novel Hybrid DE-PSO with Adaptive Step Size Control for Enhanced Exploration and Exploitation Balance.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {}, "mutation_prompt": null}
{"id": "10944177-c8b7-4526-8b09-567c6d746976", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "c21d6620-8cbf-4127-aca2-f2ddd977a9e8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "6a68ae8a-4f5b-4169-bbe1-1e4a83d092c3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "4a5af25c-ff5d-49bb-bf15-bb62820f2b72", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "f1ce2c36-1b19-4975-9dd9-81dcfc7c9033", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
{"id": "314ddf83-e6da-4f53-a886-c70df6a9ef93", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDEPS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20 + int(3.0 * np.sqrt(self.dim))\n        self.global_best = None\n        self.best_cost = float('inf')\n        self.init_population_size = self.population_size\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.population_size\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            # Adjust population size dynamically\n            self.population_size = self.init_population_size - int(evals / self.budget * (self.init_population_size - 5))\n\n            for i in range(self.population_size):\n                # Select three random indices different from i\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n\n                # Perform mutation (differential vector)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Perform crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n\n                trial = np.where(cross_points, mutant, population[i])\n\n                # Evaluate the trial solution\n                trial_cost = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_cost < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_cost\n\n                    # Update global best\n                    if trial_cost < self.best_cost:\n                        self.global_best = trial\n                        self.best_cost = trial_cost\n\n                if evals >= self.budget:\n                    break\n\n            # Adaptive F and CR\n            F = 0.5 + 0.3 * np.random.rand()\n            CR = 0.8 + 0.1 * np.random.rand()\n\n        return self.global_best", "name": "EnhancedAdaptiveDEPS", "description": "Enhanced AdaptiveDEPS with Dynamic Population and Adaptive F/CR, combining differential evolution with adaptive particle swarm parameters and dynamic population size for improved convergence.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f1b36fc8-ff25-4683-9831-afc496d61576", "metadata": {"aucs": [0.8719490416935266, 0.8891494711263003, 0.8800558016198993, 0.8727120130578865, 0.888987007495496, 0.8787198929429789, 0.876122144170313, 0.8658507598009443, 0.8712730175480887, 0.7921682731163416, 0.8133367819866224, 0.7901428319964384, 0.7771558688471547, 0.7748656205992794, 0.7968296146015034, 0.7985498381314126, 0.8160823369478946, 0.7967919180723352, 0.5453010505045475, 0.13551612880183406, 0.14736352390049468, 0.2825971015514249, 0.4971935504417324, 0.5119296433220596, 0.1619125742866938, 0.48287614338926865, 0.5367381330185732, 0.15444973095294956, 0.12514457574866322, 0.13512508641555232, 0.47637933041843183, 0.37664578525117554, 0.1366259157927565, 0.13452821953452798, 0.13957298210888147, 0.15264153430700844, 0.9859418918212289, 0.9811068277149074, 0.9646632858615181, 0.9520045321522801, 0.9643388424557817, 0.9863786082742894, 0.9784736159071683, 0.9888194086483212, 0.9776332214178389, 0.6993042576604255, 0.6843290535474794, 0.7093939488028214, 0.686161439879384, 0.7411484095825598, 0.7148344637350025, 0.7309739481782704, 0.6636330042907221, 0.7133361210218618, 0.8234333721046434, 0.8443750812859094, 0.8449866923990148, 0.8285629051401817, 0.814615705197501, 0.8650166236430288, 0.8212232228075612, 0.8318858598533887, 0.8579977726107741, 0.21945494278740985, 0.2578177499831672, 0.3405202625251137, 0.24118733906774426, 0.20743385747440934, 0.592977779003658, 0.21682363155571371, 0.3680251125904328, 0.665971842673707, 0.022066578875151066, 0.5039520889682445, 0.25907932457062066, 0.556879982889929, 0.318223434962978, 0.6569262410679122, 0.38654976924229945, 0.4444202404979293, 0.2330138337815183, 0.5963566515401147, 0.3495905541730342, 0.5685128458566184, 0.3857768244026454, 0.138483491754969, 0.3800434286901262, 0.4953522998693577, 0.5687583630821809, 0.6172791439471732, 0.7026944126335957, 0.4340406835816152, 0.6386605110746038, 0.6227843433194231, 0.5406656779203987, 0.6688965272774354, 0.6716484853224893, 0.5787794877209201, 0.6996588879182153, 0.11938171446310242, 0.25649965426330523, 0.13748600579795345, 0.3655127621904286, 0.20731124524233369, 0.3796384201767633, 0.12692605925042977, 0.1447265689844116, 0.19055941000789467, 0.4681890249458843, 0.3938714564213601, 0.29054799679193455, 0.4685692469792472, 0.45698336678878937, 0.43992334714897374, 0.36240856141166067, 0.3879110740280175, 0.28184851496360064, 0.7935829529181659, 0.7750078001151048, 0.7594527472656589, 0.6660165443382132, 0.7791382891769275, 0.8043841398616834, 0.8022949309432894, 0.8089437269416835, 0.6390839405743458, 0.08946980943967286, 0.10860811552968497, 0.10252338124792659, 0.12168387770676292, 0.10334449342162699, 0.11878534767323123, 0.10993507117398327, 0.11994340268265513, 0.10976568856752533, 0.14666319436928044, 0.14386522721464712, 0.1687134098071822, 0.13323843351190934, 0.14384477508104832, 0.16960866643848893, 0.17070527832334192, 0.296929399811912, 0.17331396225553852, 0.5257260764141347, 0.559232457469236, 0.5509990350556886, 0.6548708832522661, 0.5189582246285416, 0.5932117148131709, 0.6514711060027296, 0.6224101108505777, 0.5542157202969573, 0.4679713376944826, 0.42520238553662826, 0.41836383804074717, 0.43776289580005445, 0.3425311410057166, 0.45432792145035106, 0.4848597013399156, 0.569647824620939, 0.45980103474344947, 0.1997639040039486, 0.2328484163658905, 0.20454631853505634, 0.20210068803464087, 0.18559581194768637, 0.20852247201800234, 0.17689691974351263, 0.20254272916466354, 0.1737823895168451, 0.5878855367156302, 0.2194695381269216, 0.5761349783329583, 0.5483644886586878, 0.6172958164311505, 0.3281024487662624, 0.49025682228502443, 0.21020464527876115, 0.4935529253348212, 0.19032898015340638, 0.16258661104129601, 0.1814436513981652, 0.17510820021579088, 0.1758320156510137, 0.18816261952076319, 0.7818563393244028, 0.7477130353805999, 0.6882181197308967, 0.7351650763387223, 0.20655497795690836, 0.126022166039637, 0.7212488996994372, 0.7492029513233984, 0.16144412895504356, 0.7559110401903241, 0.21204577628346777, 0.20726315556488584, 0.1895144124613264, 0.1735422803325415, 0.18212348436685188, 0.18383238975210903, 0.1847591257640212, 0.1891294452235457, 0.18705648059640867, 0.19255728944293782, 0.18600078638712048, 0.07802776381666632, 0.07659594055223429, 0.07092843217273093, 0.08498326809771228, 0.08069110678727887, 0.08678395105392156, 0.08465629469255531, 0.08051591944848202, 0.08022354577572455]}, "mutation_prompt": null}
