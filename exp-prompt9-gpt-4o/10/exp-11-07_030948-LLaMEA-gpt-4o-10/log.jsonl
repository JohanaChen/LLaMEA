{"id": "1cb125a0-2240-45fc-9e2b-9ad54238474b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(10 + 2 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.7   # inertia weight\n        self.CR = 0.9  # crossover probability\n        self.F = 0.5   # differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "HybridPSO_DE", "description": "A hybridized Particle Swarm Optimization with Adaptive Differential Evolution for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.225964599333577, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5508211249557973, 0.5140710232469232, 0.5811234233112552, 0.4480920143454977, 0.6794408646118758, 0.5076293702029444, 0.4742347039311028, 0.5132703168469339, 0.582103388482134, 0.09837333170490348, 0.06976699884818338, 0.13401053299965515, 0.09828627275442237, 0.14937239377980982, 0.032469444671536785, 0.13232953385432555, 0.1274458817569879, 0.10311089470305923, 0.14158441951973277, 0.11102942770135704, 0.13141883269603383, 0.1214093213204116, 0.12697811815514648, 0.10938843394709097, 0.12125290550713708, 0.1293179127229097, 0.1197084329917385, 0.10278860758020092, 0.1053906210732346, 0.07804526585566951, 0.13139195014418292, 0.07451368055655039, 0.07790436431398806, 0.12903849926254496, 0.09156137342876913, 0.12012819568236188, 0.9698318975605479, 0.991239272709858, 0.9943990230262111, 0.969769657566896, 0.984808403898385, 0.9877209128557116, 0.9693467391048821, 0.9916117988868984, 0.9881684636465967, 0.23356927602194588, 0.20534345143681587, 0.24016239514559623, 0.3163223857455316, 0.27071101671956044, 0.30134687345316724, 0.28613976582409084, 0.2852712902804304, 0.21017273492239197, 0.2185341564197696, 0.21332421483212716, 0.3425756068832203, 0.7668399754103953, 0.22694909695262955, 0.1742866677807946, 0.16405609123109166, 0.2038148537206277, 0.18729311774082613, 0.09162079365901243, 0.1888405997710152, 0.19059544598602463, 0.15922581992804385, 0.13979262338713738, 0.11021835188278806, 0.21406680085991203, 0.2777832247715175, 0.182771778076538, 0.1336248797868559, 0.05102062608938318, 0.15931473506091953, 0.16404426667748773, 0.18747421729440195, 0.11861438457109763, 0.12780033972857108, 0.18455491145824832, 0.13983031140581204, 9.999999999998899e-05, 0.051164241921537124, 0.011664593277407431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013955451432468013, 9.999999999998899e-05, 0.08416461276187437, 0.11581082145406252, 0.05318057528076192, 0.07235718320617324, 0.14961797957926815, 0.06738220176153686, 0.09039390483162502, 0.1522363857716289, 0.10010815080948265, 0.052220053574138725, 9.999999999998899e-05, 0.02472117504201965, 0.022399406039108172, 0.041067755272857887, 0.05370387909745988, 0.09405260624288225, 0.04534927297498015, 0.03967926847026426, 0.028457545561028197, 0.032717456184255034, 0.115928711549384, 0.14916047025641055, 0.1567704284035466, 0.033792115281226276, 0.08714651536331242, 0.06996488281676627, 0.07512380152834885, 0.21441175674300972, 0.4955157724633108, 0.41707494337196194, 0.41307248711158007, 0.47464546535808094, 0.40739127660139607, 0.4860493771544585, 0.4768011840397772, 0.3990332221347437, 0.480061007782003, 0.1096252263028269, 0.09856687575413203, 0.12270289094885789, 0.104736863944481, 0.10953917191313944, 0.12026998421759894, 0.16059309126848897, 0.14046445705946353, 0.06334506698016051, 0.19819642176069985, 0.1385217115596824, 0.15619722724173957, 0.20980464934705656, 0.15077159765006853, 0.22456865307935836, 0.20942656612379618, 0.2814362891935428, 0.16629573270656295, 0.27893930930991373, 0.2699477357887987, 0.32380033284512133, 0.27222482335137743, 0.32055710256076053, 0.2612532727658873, 0.269471156014329, 0.29391083729472245, 0.19408834107929607, 0.26755380870360124, 0.26724369399575976, 0.1691524534902239, 0.18228781256841298, 0.18317443342023487, 0.20909432089548485, 0.18007955965746314, 0.20479737301396106, 0.18152253517118655, 0.20297134326213873, 0.18224908030115416, 0.1862376098121853, 0.23269160159647762, 0.21167221362031452, 0.2088288627378948, 0.1849933183790814, 0.20080809304799185, 0.195704399119906, 0.18929499668020477, 0.1883985228833086, 0.21001402880441444, 0.19965780774188402, 0.1774757513484354, 0.18700582483913264, 0.1847509853710192, 0.18860441821593887, 0.1755177261953781, 0.17074785876225795, 0.16336476939961142, 0.15198301545973847, 0.6718006780703416, 0.19666855854654575, 0.19588704839647786, 0.1521744928351232, 0.1466275757608595, 0.18209851386325915, 0.6323625822198227, 0.21089942077545276, 0.48756037106578964, 0.20477899232634922, 0.1656951857551503, 0.3889369644092907, 0.2853155583841164, 0.14739914407393295, 0.3992768361248985, 0.18653324072935662, 0.22533732128093953, 0.19056424344271838, 0.22753798145935233, 0.18727964742799508, 0.20551123742301713, 0.1964968457676961, 0.19021243472952554, 0.18417739743310535, 0.09531243399078726, 0.07459702056751771, 0.08687543077638804, 0.11242168747893133, 0.07957333531379096, 0.09837073285612496, 0.07240782932947509, 0.0921580952282135, 0.07963384242746274]}, "mutation_prompt": null}
{"id": "8747b7c3-cdd8-4b6e-bfe8-26479e923e40", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(10 + 2 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.7   # inertia weight\n        self.CR = 0.9  # crossover probability\n        self.F = 0.5   # differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "HybridPSO_DE", "description": "A hybridized Particle Swarm Optimization with Adaptive Differential Evolution for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cb125a0-2240-45fc-9e2b-9ad54238474b", "metadata": {"aucs": [0.5508211249557973, 0.5140710232469232, 0.5811234233112552, 0.4480920143454977, 0.6794408646118758, 0.5076293702029444, 0.4742347039311028, 0.5132703168469339, 0.582103388482134, 0.09837333170490348, 0.06976699884818338, 0.13401053299965515, 0.09828627275442237, 0.14937239377980982, 0.032469444671536785, 0.13232953385432555, 0.1274458817569879, 0.10311089470305923, 0.14158441951973277, 0.11102942770135704, 0.13141883269603383, 0.1214093213204116, 0.12697811815514648, 0.10938843394709097, 0.12125290550713708, 0.1293179127229097, 0.1197084329917385, 0.10278860758020092, 0.1053906210732346, 0.07804526585566951, 0.13139195014418292, 0.07451368055655039, 0.07790436431398806, 0.12903849926254496, 0.09156137342876913, 0.12012819568236188, 0.9698318975605479, 0.991239272709858, 0.9943990230262111, 0.969769657566896, 0.984808403898385, 0.9877209128557116, 0.9693467391048821, 0.9916117988868984, 0.9881684636465967, 0.23356927602194588, 0.20534345143681587, 0.24016239514559623, 0.3163223857455316, 0.27071101671956044, 0.30134687345316724, 0.28613976582409084, 0.2852712902804304, 0.21017273492239197, 0.2185341564197696, 0.21332421483212716, 0.3425756068832203, 0.7668399754103953, 0.22694909695262955, 0.1742866677807946, 0.16405609123109166, 0.2038148537206277, 0.18729311774082613, 0.09162079365901243, 0.1888405997710152, 0.19059544598602463, 0.15922581992804385, 0.13979262338713738, 0.11021835188278806, 0.21406680085991203, 0.2777832247715175, 0.182771778076538, 0.1336248797868559, 0.05102062608938318, 0.15931473506091953, 0.16404426667748773, 0.18747421729440195, 0.11861438457109763, 0.12780033972857108, 0.18455491145824832, 0.13983031140581204, 9.999999999998899e-05, 0.051164241921537124, 0.011664593277407431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013955451432468013, 9.999999999998899e-05, 0.08416461276187437, 0.11581082145406252, 0.05318057528076192, 0.07235718320617324, 0.14961797957926815, 0.06738220176153686, 0.09039390483162502, 0.1522363857716289, 0.10010815080948265, 0.052220053574138725, 9.999999999998899e-05, 0.02472117504201965, 0.022399406039108172, 0.041067755272857887, 0.05370387909745988, 0.09405260624288225, 0.04534927297498015, 0.03967926847026426, 0.028457545561028197, 0.032717456184255034, 0.115928711549384, 0.14916047025641055, 0.1567704284035466, 0.033792115281226276, 0.08714651536331242, 0.06996488281676627, 0.07512380152834885, 0.21441175674300972, 0.4955157724633108, 0.41707494337196194, 0.41307248711158007, 0.47464546535808094, 0.40739127660139607, 0.4860493771544585, 0.4768011840397772, 0.3990332221347437, 0.480061007782003, 0.1096252263028269, 0.09856687575413203, 0.12270289094885789, 0.104736863944481, 0.10953917191313944, 0.12026998421759894, 0.16059309126848897, 0.14046445705946353, 0.06334506698016051, 0.19819642176069985, 0.1385217115596824, 0.15619722724173957, 0.20980464934705656, 0.15077159765006853, 0.22456865307935836, 0.20942656612379618, 0.2814362891935428, 0.16629573270656295, 0.27893930930991373, 0.2699477357887987, 0.32380033284512133, 0.27222482335137743, 0.32055710256076053, 0.2612532727658873, 0.269471156014329, 0.29391083729472245, 0.19408834107929607, 0.26755380870360124, 0.26724369399575976, 0.1691524534902239, 0.18228781256841298, 0.18317443342023487, 0.20909432089548485, 0.18007955965746314, 0.20479737301396106, 0.18152253517118655, 0.20297134326213873, 0.18224908030115416, 0.1862376098121853, 0.23269160159647762, 0.21167221362031452, 0.2088288627378948, 0.1849933183790814, 0.20080809304799185, 0.195704399119906, 0.18929499668020477, 0.1883985228833086, 0.21001402880441444, 0.19965780774188402, 0.1774757513484354, 0.18700582483913264, 0.1847509853710192, 0.18860441821593887, 0.1755177261953781, 0.17074785876225795, 0.16336476939961142, 0.15198301545973847, 0.6718006780703416, 0.19666855854654575, 0.19588704839647786, 0.1521744928351232, 0.1466275757608595, 0.18209851386325915, 0.6323625822198227, 0.21089942077545276, 0.48756037106578964, 0.20477899232634922, 0.1656951857551503, 0.3889369644092907, 0.2853155583841164, 0.14739914407393295, 0.3992768361248985, 0.18653324072935662, 0.22533732128093953, 0.19056424344271838, 0.22753798145935233, 0.18727964742799508, 0.20551123742301713, 0.1964968457676961, 0.19021243472952554, 0.18417739743310535, 0.09531243399078726, 0.07459702056751771, 0.08687543077638804, 0.11242168747893133, 0.07957333531379096, 0.09837073285612496, 0.07240782932947509, 0.0921580952282135, 0.07963384242746274]}, "mutation_prompt": null}
{"id": "d156515e-b162-4a1c-a003-09415ecd3294", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(10 + 2 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.7   # inertia weight\n        self.CR = 0.9  # crossover probability\n        self.F = 0.5   # differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "HybridPSO_DE", "description": "A hybridized Particle Swarm Optimization with Adaptive Differential Evolution for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cb125a0-2240-45fc-9e2b-9ad54238474b", "metadata": {"aucs": [0.5508211249557973, 0.5140710232469232, 0.5811234233112552, 0.4480920143454977, 0.6794408646118758, 0.5076293702029444, 0.4742347039311028, 0.5132703168469339, 0.582103388482134, 0.09837333170490348, 0.06976699884818338, 0.13401053299965515, 0.09828627275442237, 0.14937239377980982, 0.032469444671536785, 0.13232953385432555, 0.1274458817569879, 0.10311089470305923, 0.14158441951973277, 0.11102942770135704, 0.13141883269603383, 0.1214093213204116, 0.12697811815514648, 0.10938843394709097, 0.12125290550713708, 0.1293179127229097, 0.1197084329917385, 0.10278860758020092, 0.1053906210732346, 0.07804526585566951, 0.13139195014418292, 0.07451368055655039, 0.07790436431398806, 0.12903849926254496, 0.09156137342876913, 0.12012819568236188, 0.9698318975605479, 0.991239272709858, 0.9943990230262111, 0.969769657566896, 0.984808403898385, 0.9877209128557116, 0.9693467391048821, 0.9916117988868984, 0.9881684636465967, 0.23356927602194588, 0.20534345143681587, 0.24016239514559623, 0.3163223857455316, 0.27071101671956044, 0.30134687345316724, 0.28613976582409084, 0.2852712902804304, 0.21017273492239197, 0.2185341564197696, 0.21332421483212716, 0.3425756068832203, 0.7668399754103953, 0.22694909695262955, 0.1742866677807946, 0.16405609123109166, 0.2038148537206277, 0.18729311774082613, 0.09162079365901243, 0.1888405997710152, 0.19059544598602463, 0.15922581992804385, 0.13979262338713738, 0.11021835188278806, 0.21406680085991203, 0.2777832247715175, 0.182771778076538, 0.1336248797868559, 0.05102062608938318, 0.15931473506091953, 0.16404426667748773, 0.18747421729440195, 0.11861438457109763, 0.12780033972857108, 0.18455491145824832, 0.13983031140581204, 9.999999999998899e-05, 0.051164241921537124, 0.011664593277407431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013955451432468013, 9.999999999998899e-05, 0.08416461276187437, 0.11581082145406252, 0.05318057528076192, 0.07235718320617324, 0.14961797957926815, 0.06738220176153686, 0.09039390483162502, 0.1522363857716289, 0.10010815080948265, 0.052220053574138725, 9.999999999998899e-05, 0.02472117504201965, 0.022399406039108172, 0.041067755272857887, 0.05370387909745988, 0.09405260624288225, 0.04534927297498015, 0.03967926847026426, 0.028457545561028197, 0.032717456184255034, 0.115928711549384, 0.14916047025641055, 0.1567704284035466, 0.033792115281226276, 0.08714651536331242, 0.06996488281676627, 0.07512380152834885, 0.21441175674300972, 0.4955157724633108, 0.41707494337196194, 0.41307248711158007, 0.47464546535808094, 0.40739127660139607, 0.4860493771544585, 0.4768011840397772, 0.3990332221347437, 0.480061007782003, 0.1096252263028269, 0.09856687575413203, 0.12270289094885789, 0.104736863944481, 0.10953917191313944, 0.12026998421759894, 0.16059309126848897, 0.14046445705946353, 0.06334506698016051, 0.19819642176069985, 0.1385217115596824, 0.15619722724173957, 0.20980464934705656, 0.15077159765006853, 0.22456865307935836, 0.20942656612379618, 0.2814362891935428, 0.16629573270656295, 0.27893930930991373, 0.2699477357887987, 0.32380033284512133, 0.27222482335137743, 0.32055710256076053, 0.2612532727658873, 0.269471156014329, 0.29391083729472245, 0.19408834107929607, 0.26755380870360124, 0.26724369399575976, 0.1691524534902239, 0.18228781256841298, 0.18317443342023487, 0.20909432089548485, 0.18007955965746314, 0.20479737301396106, 0.18152253517118655, 0.20297134326213873, 0.18224908030115416, 0.1862376098121853, 0.23269160159647762, 0.21167221362031452, 0.2088288627378948, 0.1849933183790814, 0.20080809304799185, 0.195704399119906, 0.18929499668020477, 0.1883985228833086, 0.21001402880441444, 0.19965780774188402, 0.1774757513484354, 0.18700582483913264, 0.1847509853710192, 0.18860441821593887, 0.1755177261953781, 0.17074785876225795, 0.16336476939961142, 0.15198301545973847, 0.6718006780703416, 0.19666855854654575, 0.19588704839647786, 0.1521744928351232, 0.1466275757608595, 0.18209851386325915, 0.6323625822198227, 0.21089942077545276, 0.48756037106578964, 0.20477899232634922, 0.1656951857551503, 0.3889369644092907, 0.2853155583841164, 0.14739914407393295, 0.3992768361248985, 0.18653324072935662, 0.22533732128093953, 0.19056424344271838, 0.22753798145935233, 0.18727964742799508, 0.20551123742301713, 0.1964968457676961, 0.19021243472952554, 0.18417739743310535, 0.09531243399078726, 0.07459702056751771, 0.08687543077638804, 0.11242168747893133, 0.07957333531379096, 0.09837073285612496, 0.07240782932947509, 0.0921580952282135, 0.07963384242746274]}, "mutation_prompt": null}
{"id": "73f8f430-cf0c-4c0f-8a47-2c484f629a31", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(10 + 2 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.7   # inertia weight\n        self.CR = 0.9  # crossover probability\n        self.F = 0.5   # differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "HybridPSO_DE", "description": "A hybridized Particle Swarm Optimization with Adaptive Differential Evolution for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cb125a0-2240-45fc-9e2b-9ad54238474b", "metadata": {"aucs": [0.5508211249557973, 0.5140710232469232, 0.5811234233112552, 0.4480920143454977, 0.6794408646118758, 0.5076293702029444, 0.4742347039311028, 0.5132703168469339, 0.582103388482134, 0.09837333170490348, 0.06976699884818338, 0.13401053299965515, 0.09828627275442237, 0.14937239377980982, 0.032469444671536785, 0.13232953385432555, 0.1274458817569879, 0.10311089470305923, 0.14158441951973277, 0.11102942770135704, 0.13141883269603383, 0.1214093213204116, 0.12697811815514648, 0.10938843394709097, 0.12125290550713708, 0.1293179127229097, 0.1197084329917385, 0.10278860758020092, 0.1053906210732346, 0.07804526585566951, 0.13139195014418292, 0.07451368055655039, 0.07790436431398806, 0.12903849926254496, 0.09156137342876913, 0.12012819568236188, 0.9698318975605479, 0.991239272709858, 0.9943990230262111, 0.969769657566896, 0.984808403898385, 0.9877209128557116, 0.9693467391048821, 0.9916117988868984, 0.9881684636465967, 0.23356927602194588, 0.20534345143681587, 0.24016239514559623, 0.3163223857455316, 0.27071101671956044, 0.30134687345316724, 0.28613976582409084, 0.2852712902804304, 0.21017273492239197, 0.2185341564197696, 0.21332421483212716, 0.3425756068832203, 0.7668399754103953, 0.22694909695262955, 0.1742866677807946, 0.16405609123109166, 0.2038148537206277, 0.18729311774082613, 0.09162079365901243, 0.1888405997710152, 0.19059544598602463, 0.15922581992804385, 0.13979262338713738, 0.11021835188278806, 0.21406680085991203, 0.2777832247715175, 0.182771778076538, 0.1336248797868559, 0.05102062608938318, 0.15931473506091953, 0.16404426667748773, 0.18747421729440195, 0.11861438457109763, 0.12780033972857108, 0.18455491145824832, 0.13983031140581204, 9.999999999998899e-05, 0.051164241921537124, 0.011664593277407431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013955451432468013, 9.999999999998899e-05, 0.08416461276187437, 0.11581082145406252, 0.05318057528076192, 0.07235718320617324, 0.14961797957926815, 0.06738220176153686, 0.09039390483162502, 0.1522363857716289, 0.10010815080948265, 0.052220053574138725, 9.999999999998899e-05, 0.02472117504201965, 0.022399406039108172, 0.041067755272857887, 0.05370387909745988, 0.09405260624288225, 0.04534927297498015, 0.03967926847026426, 0.028457545561028197, 0.032717456184255034, 0.115928711549384, 0.14916047025641055, 0.1567704284035466, 0.033792115281226276, 0.08714651536331242, 0.06996488281676627, 0.07512380152834885, 0.21441175674300972, 0.4955157724633108, 0.41707494337196194, 0.41307248711158007, 0.47464546535808094, 0.40739127660139607, 0.4860493771544585, 0.4768011840397772, 0.3990332221347437, 0.480061007782003, 0.1096252263028269, 0.09856687575413203, 0.12270289094885789, 0.104736863944481, 0.10953917191313944, 0.12026998421759894, 0.16059309126848897, 0.14046445705946353, 0.06334506698016051, 0.19819642176069985, 0.1385217115596824, 0.15619722724173957, 0.20980464934705656, 0.15077159765006853, 0.22456865307935836, 0.20942656612379618, 0.2814362891935428, 0.16629573270656295, 0.27893930930991373, 0.2699477357887987, 0.32380033284512133, 0.27222482335137743, 0.32055710256076053, 0.2612532727658873, 0.269471156014329, 0.29391083729472245, 0.19408834107929607, 0.26755380870360124, 0.26724369399575976, 0.1691524534902239, 0.18228781256841298, 0.18317443342023487, 0.20909432089548485, 0.18007955965746314, 0.20479737301396106, 0.18152253517118655, 0.20297134326213873, 0.18224908030115416, 0.1862376098121853, 0.23269160159647762, 0.21167221362031452, 0.2088288627378948, 0.1849933183790814, 0.20080809304799185, 0.195704399119906, 0.18929499668020477, 0.1883985228833086, 0.21001402880441444, 0.19965780774188402, 0.1774757513484354, 0.18700582483913264, 0.1847509853710192, 0.18860441821593887, 0.1755177261953781, 0.17074785876225795, 0.16336476939961142, 0.15198301545973847, 0.6718006780703416, 0.19666855854654575, 0.19588704839647786, 0.1521744928351232, 0.1466275757608595, 0.18209851386325915, 0.6323625822198227, 0.21089942077545276, 0.48756037106578964, 0.20477899232634922, 0.1656951857551503, 0.3889369644092907, 0.2853155583841164, 0.14739914407393295, 0.3992768361248985, 0.18653324072935662, 0.22533732128093953, 0.19056424344271838, 0.22753798145935233, 0.18727964742799508, 0.20551123742301713, 0.1964968457676961, 0.19021243472952554, 0.18417739743310535, 0.09531243399078726, 0.07459702056751771, 0.08687543077638804, 0.11242168747893133, 0.07957333531379096, 0.09837073285612496, 0.07240782932947509, 0.0921580952282135, 0.07963384242746274]}, "mutation_prompt": null}
{"id": "bdb7717e-949f-4fa4-a357-3c1ee646624d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(10 + 2 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.7   # inertia weight\n        self.CR = 0.9  # crossover probability\n        self.F = 0.5   # differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "HybridPSO_DE", "description": "A hybridized Particle Swarm Optimization with Adaptive Differential Evolution for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cb125a0-2240-45fc-9e2b-9ad54238474b", "metadata": {"aucs": [0.5508211249557973, 0.5140710232469232, 0.5811234233112552, 0.4480920143454977, 0.6794408646118758, 0.5076293702029444, 0.4742347039311028, 0.5132703168469339, 0.582103388482134, 0.09837333170490348, 0.06976699884818338, 0.13401053299965515, 0.09828627275442237, 0.14937239377980982, 0.032469444671536785, 0.13232953385432555, 0.1274458817569879, 0.10311089470305923, 0.14158441951973277, 0.11102942770135704, 0.13141883269603383, 0.1214093213204116, 0.12697811815514648, 0.10938843394709097, 0.12125290550713708, 0.1293179127229097, 0.1197084329917385, 0.10278860758020092, 0.1053906210732346, 0.07804526585566951, 0.13139195014418292, 0.07451368055655039, 0.07790436431398806, 0.12903849926254496, 0.09156137342876913, 0.12012819568236188, 0.9698318975605479, 0.991239272709858, 0.9943990230262111, 0.969769657566896, 0.984808403898385, 0.9877209128557116, 0.9693467391048821, 0.9916117988868984, 0.9881684636465967, 0.23356927602194588, 0.20534345143681587, 0.24016239514559623, 0.3163223857455316, 0.27071101671956044, 0.30134687345316724, 0.28613976582409084, 0.2852712902804304, 0.21017273492239197, 0.2185341564197696, 0.21332421483212716, 0.3425756068832203, 0.7668399754103953, 0.22694909695262955, 0.1742866677807946, 0.16405609123109166, 0.2038148537206277, 0.18729311774082613, 0.09162079365901243, 0.1888405997710152, 0.19059544598602463, 0.15922581992804385, 0.13979262338713738, 0.11021835188278806, 0.21406680085991203, 0.2777832247715175, 0.182771778076538, 0.1336248797868559, 0.05102062608938318, 0.15931473506091953, 0.16404426667748773, 0.18747421729440195, 0.11861438457109763, 0.12780033972857108, 0.18455491145824832, 0.13983031140581204, 9.999999999998899e-05, 0.051164241921537124, 0.011664593277407431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013955451432468013, 9.999999999998899e-05, 0.08416461276187437, 0.11581082145406252, 0.05318057528076192, 0.07235718320617324, 0.14961797957926815, 0.06738220176153686, 0.09039390483162502, 0.1522363857716289, 0.10010815080948265, 0.052220053574138725, 9.999999999998899e-05, 0.02472117504201965, 0.022399406039108172, 0.041067755272857887, 0.05370387909745988, 0.09405260624288225, 0.04534927297498015, 0.03967926847026426, 0.028457545561028197, 0.032717456184255034, 0.115928711549384, 0.14916047025641055, 0.1567704284035466, 0.033792115281226276, 0.08714651536331242, 0.06996488281676627, 0.07512380152834885, 0.21441175674300972, 0.4955157724633108, 0.41707494337196194, 0.41307248711158007, 0.47464546535808094, 0.40739127660139607, 0.4860493771544585, 0.4768011840397772, 0.3990332221347437, 0.480061007782003, 0.1096252263028269, 0.09856687575413203, 0.12270289094885789, 0.104736863944481, 0.10953917191313944, 0.12026998421759894, 0.16059309126848897, 0.14046445705946353, 0.06334506698016051, 0.19819642176069985, 0.1385217115596824, 0.15619722724173957, 0.20980464934705656, 0.15077159765006853, 0.22456865307935836, 0.20942656612379618, 0.2814362891935428, 0.16629573270656295, 0.27893930930991373, 0.2699477357887987, 0.32380033284512133, 0.27222482335137743, 0.32055710256076053, 0.2612532727658873, 0.269471156014329, 0.29391083729472245, 0.19408834107929607, 0.26755380870360124, 0.26724369399575976, 0.1691524534902239, 0.18228781256841298, 0.18317443342023487, 0.20909432089548485, 0.18007955965746314, 0.20479737301396106, 0.18152253517118655, 0.20297134326213873, 0.18224908030115416, 0.1862376098121853, 0.23269160159647762, 0.21167221362031452, 0.2088288627378948, 0.1849933183790814, 0.20080809304799185, 0.195704399119906, 0.18929499668020477, 0.1883985228833086, 0.21001402880441444, 0.19965780774188402, 0.1774757513484354, 0.18700582483913264, 0.1847509853710192, 0.18860441821593887, 0.1755177261953781, 0.17074785876225795, 0.16336476939961142, 0.15198301545973847, 0.6718006780703416, 0.19666855854654575, 0.19588704839647786, 0.1521744928351232, 0.1466275757608595, 0.18209851386325915, 0.6323625822198227, 0.21089942077545276, 0.48756037106578964, 0.20477899232634922, 0.1656951857551503, 0.3889369644092907, 0.2853155583841164, 0.14739914407393295, 0.3992768361248985, 0.18653324072935662, 0.22533732128093953, 0.19056424344271838, 0.22753798145935233, 0.18727964742799508, 0.20551123742301713, 0.1964968457676961, 0.19021243472952554, 0.18417739743310535, 0.09531243399078726, 0.07459702056751771, 0.08687543077638804, 0.11242168747893133, 0.07957333531379096, 0.09837073285612496, 0.07240782932947509, 0.0921580952282135, 0.07963384242746274]}, "mutation_prompt": null}
{"id": "68ea5086-6dd7-49bf-a848-386b1808620e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(10 + 2 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.7   # inertia weight\n        self.CR = 0.9  # crossover probability\n        self.F = 0.5   # differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "HybridPSO_DE", "description": "A hybridized Particle Swarm Optimization with Adaptive Differential Evolution for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cb125a0-2240-45fc-9e2b-9ad54238474b", "metadata": {"aucs": [0.5508211249557973, 0.5140710232469232, 0.5811234233112552, 0.4480920143454977, 0.6794408646118758, 0.5076293702029444, 0.4742347039311028, 0.5132703168469339, 0.582103388482134, 0.09837333170490348, 0.06976699884818338, 0.13401053299965515, 0.09828627275442237, 0.14937239377980982, 0.032469444671536785, 0.13232953385432555, 0.1274458817569879, 0.10311089470305923, 0.14158441951973277, 0.11102942770135704, 0.13141883269603383, 0.1214093213204116, 0.12697811815514648, 0.10938843394709097, 0.12125290550713708, 0.1293179127229097, 0.1197084329917385, 0.10278860758020092, 0.1053906210732346, 0.07804526585566951, 0.13139195014418292, 0.07451368055655039, 0.07790436431398806, 0.12903849926254496, 0.09156137342876913, 0.12012819568236188, 0.9698318975605479, 0.991239272709858, 0.9943990230262111, 0.969769657566896, 0.984808403898385, 0.9877209128557116, 0.9693467391048821, 0.9916117988868984, 0.9881684636465967, 0.23356927602194588, 0.20534345143681587, 0.24016239514559623, 0.3163223857455316, 0.27071101671956044, 0.30134687345316724, 0.28613976582409084, 0.2852712902804304, 0.21017273492239197, 0.2185341564197696, 0.21332421483212716, 0.3425756068832203, 0.7668399754103953, 0.22694909695262955, 0.1742866677807946, 0.16405609123109166, 0.2038148537206277, 0.18729311774082613, 0.09162079365901243, 0.1888405997710152, 0.19059544598602463, 0.15922581992804385, 0.13979262338713738, 0.11021835188278806, 0.21406680085991203, 0.2777832247715175, 0.182771778076538, 0.1336248797868559, 0.05102062608938318, 0.15931473506091953, 0.16404426667748773, 0.18747421729440195, 0.11861438457109763, 0.12780033972857108, 0.18455491145824832, 0.13983031140581204, 9.999999999998899e-05, 0.051164241921537124, 0.011664593277407431, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013955451432468013, 9.999999999998899e-05, 0.08416461276187437, 0.11581082145406252, 0.05318057528076192, 0.07235718320617324, 0.14961797957926815, 0.06738220176153686, 0.09039390483162502, 0.1522363857716289, 0.10010815080948265, 0.052220053574138725, 9.999999999998899e-05, 0.02472117504201965, 0.022399406039108172, 0.041067755272857887, 0.05370387909745988, 0.09405260624288225, 0.04534927297498015, 0.03967926847026426, 0.028457545561028197, 0.032717456184255034, 0.115928711549384, 0.14916047025641055, 0.1567704284035466, 0.033792115281226276, 0.08714651536331242, 0.06996488281676627, 0.07512380152834885, 0.21441175674300972, 0.4955157724633108, 0.41707494337196194, 0.41307248711158007, 0.47464546535808094, 0.40739127660139607, 0.4860493771544585, 0.4768011840397772, 0.3990332221347437, 0.480061007782003, 0.1096252263028269, 0.09856687575413203, 0.12270289094885789, 0.104736863944481, 0.10953917191313944, 0.12026998421759894, 0.16059309126848897, 0.14046445705946353, 0.06334506698016051, 0.19819642176069985, 0.1385217115596824, 0.15619722724173957, 0.20980464934705656, 0.15077159765006853, 0.22456865307935836, 0.20942656612379618, 0.2814362891935428, 0.16629573270656295, 0.27893930930991373, 0.2699477357887987, 0.32380033284512133, 0.27222482335137743, 0.32055710256076053, 0.2612532727658873, 0.269471156014329, 0.29391083729472245, 0.19408834107929607, 0.26755380870360124, 0.26724369399575976, 0.1691524534902239, 0.18228781256841298, 0.18317443342023487, 0.20909432089548485, 0.18007955965746314, 0.20479737301396106, 0.18152253517118655, 0.20297134326213873, 0.18224908030115416, 0.1862376098121853, 0.23269160159647762, 0.21167221362031452, 0.2088288627378948, 0.1849933183790814, 0.20080809304799185, 0.195704399119906, 0.18929499668020477, 0.1883985228833086, 0.21001402880441444, 0.19965780774188402, 0.1774757513484354, 0.18700582483913264, 0.1847509853710192, 0.18860441821593887, 0.1755177261953781, 0.17074785876225795, 0.16336476939961142, 0.15198301545973847, 0.6718006780703416, 0.19666855854654575, 0.19588704839647786, 0.1521744928351232, 0.1466275757608595, 0.18209851386325915, 0.6323625822198227, 0.21089942077545276, 0.48756037106578964, 0.20477899232634922, 0.1656951857551503, 0.3889369644092907, 0.2853155583841164, 0.14739914407393295, 0.3992768361248985, 0.18653324072935662, 0.22533732128093953, 0.19056424344271838, 0.22753798145935233, 0.18727964742799508, 0.20551123742301713, 0.1964968457676961, 0.19021243472952554, 0.18417739743310535, 0.09531243399078726, 0.07459702056751771, 0.08687543077638804, 0.11242168747893133, 0.07957333531379096, 0.09837073285612496, 0.07240782932947509, 0.0921580952282135, 0.07963384242746274]}, "mutation_prompt": null}
{"id": "3fc22814-4271-4047-b0a8-9994b935f68f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 6, "fitness": 0.32623482702701057, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "1cb125a0-2240-45fc-9e2b-9ad54238474b", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "ee7515bd-16ab-4690-adf7-cbc209abeb73", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "447a21ff-b23d-4dfb-b507-9e45955ed24a", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "e92ee694-9f66-48ab-8198-bd383ba509aa", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "8418488f-a0a1-47e3-b2b5-5d6fcfcf7ed9", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "c78c6550-cf3e-4bf4-8fe0-8ecec4d2a6d4", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "02935808-5e45-41e9-999d-2226f5f538bb", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "2cbc17a8-767c-4d7b-aa0e-0d15eb27dfd6", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "fceecd83-826d-4409-88ef-7bd7180c693a", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "cb2bf80c-49a9-405a-8d36-6cb56b1718f4", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "6fc80cb1-41f4-495a-a533-52bcec5a6d14", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "8320196d-3ec9-4e6c-b38e-073d0ad65f97", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # reduced cognitive component\n        self.c2 = 1.5  # reduced social component\n        self.w = 0.6   # slightly reduced inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.6   # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n                        \n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced Hybrid PSO with DE for improved convergence through refined parameter adjustments and adaptive components.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8564236047773974, 0.8814992120626439, 0.8657963843429315, 0.8447304988341555, 0.8683248282142588, 0.8747365452247281, 0.8707522408971955, 0.8647762062877477, 0.8529682087924874, 0.6640151181577529, 0.677682050034624, 0.5354682294596258, 0.6324669967780967, 0.6392673431710789, 0.7260676979332584, 0.6303655420611889, 0.6921226486965382, 0.7590176728737046, 0.10506084120160686, 0.13303736113502507, 0.16528695242874492, 0.1449749376717422, 0.14139375247282737, 0.13186632733290649, 0.1272177775093709, 0.0959437900684883, 0.1908534323252783, 0.11499583400692104, 0.09430024909989931, 0.10571568013427135, 0.11927962705692696, 0.03704704416958171, 0.09489757521119369, 0.14138457713856645, 0.02091873592653115, 0.10222524850242731, 0.9850958256490304, 0.9898591040214294, 0.9933486260175893, 0.9720051848702158, 0.9939774760539153, 0.9845912877931754, 0.9829126721021636, 0.9939564842968278, 0.972690485855949, 0.7207627032388462, 0.6472406596824822, 0.48751759724735433, 0.6736450389480702, 0.6736896639623029, 0.14981977564398608, 0.6843385576747512, 0.624418614995383, 0.605628004670876, 0.22886461436742, 0.23974112037555595, 0.17831114044339103, 0.1942165754226638, 0.32628728235463145, 0.21536357475898749, 0.24417146566664327, 0.13082202214042915, 0.23078554938195495, 0.5259583762669431, 0.5909651144624541, 0.6240363939602942, 0.1341554551721591, 0.5545613974441337, 0.4692139369433401, 0.4508657721664052, 0.5506705489547794, 0.4939517463556694, 0.6088557977845197, 0.11872271535224077, 0.601874297850737, 0.6737138315626747, 0.5211253686132876, 0.13254740869611092, 0.5744877882729561, 0.1317208581515773, 0.2585141687635484, 9.999999999998899e-05, 0.04134819077410412, 0.06353693404846894, 0.06451546644483608, 0.14648384982407192, 0.0633649115519076, 0.2131443402427411, 0.03567058918460175, 0.44574500035458287, 0.12972002374270908, 0.07652512001950673, 0.3045545900248341, 0.2270151046689204, 9.999999999998899e-05, 0.17243903041072395, 0.16581587369068007, 0.15929678742485354, 0.14080363004190144, 0.0514381612243493, 0.09262745088557245, 0.12962816712711356, 0.12851684113037753, 0.1617981057746667, 0.07592683531840283, 0.06940448270652155, 0.09033782142218094, 0.09529638089864279, 0.301472211776033, 0.17660606082130548, 0.14818919455110702, 0.2364483455669223, 0.3286718765074502, 0.3626294084438164, 0.17220812677091057, 0.061217315545908924, 0.08132646497868923, 0.7996153056179931, 0.5190686088286414, 0.6071586855559445, 0.6585150549181351, 0.5962781793595343, 0.6589859744308046, 0.6102002013647578, 0.671077087760778, 0.650144745947286, 0.053818365939582335, 0.09481282933548285, 0.1580936531055126, 0.09236379611703704, 0.08076429061831569, 0.11078109331242758, 0.08022046389098836, 0.13197168224386513, 0.07580399223761036, 0.28389860003654377, 0.16945003725111218, 0.30113314344438835, 0.38851902737205624, 0.19425778739445576, 0.14266009513681788, 0.15408598839689347, 0.14569234736791292, 0.23827347684751754, 0.35917997968010795, 0.319197496213819, 0.20005229784990386, 0.3057077749057231, 0.1973208123614586, 0.35444583230797966, 0.1579070038444692, 0.17302718767062342, 0.3137167027296759, 0.1492985341253632, 0.16961217001930762, 0.12333634794801696, 0.2601072541594768, 0.2237010352743567, 0.2854391270027311, 0.21996431088165103, 0.23066199031288526, 0.27026182697172585, 0.24404017897415176, 0.2533552582806964, 0.1911959551015031, 0.25764039984272047, 0.22751487231942524, 0.2128097848443289, 0.25556452535376883, 0.16861551704102662, 0.31207661019670474, 0.19226331364007265, 0.1858493435142139, 0.18231864053402824, 0.2075716343027154, 0.19814929052958663, 0.20787815397085085, 0.1754105650261043, 0.17861013826858885, 0.1854924386224468, 0.927281095785497, 0.13643364178999273, 0.15399517022541098, 0.1877616519597507, 0.20002184894218167, 0.16222091603312472, 0.1580546081371329, 0.11490080323102225, 0.11479617392748498, 0.8569538914519171, 0.20987471736624208, 0.8599880171531892, 0.21280947274931328, 0.1934906969849277, 0.20984742569505332, 0.10499737642186624, 0.16645693144676244, 0.8660618288377299, 0.2095554946549738, 0.2065270776573327, 0.237433924865049, 0.21492387035628557, 0.18736147105268397, 0.20023573601850453, 0.2110883437961799, 0.21589352296467368, 0.19302718146931352, 0.0918346744471602, 0.08546870314881527, 0.07956332100390939, 0.09426617412138638, 0.08568703137923184, 0.08340266030176446, 0.0856918799821671, 0.09589587842461167, 0.07917505529604318]}, "mutation_prompt": null}
{"id": "a98a3f34-c310-440a-94be-92bf5c036c9d", "solution": "import numpy as np\n\nclass ImprovedAdaptivePSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = np.zeros(self.dim)\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.7  # adjusted cognitive component for better exploration\n        self.c2 = 1.3  # adjusted social component for better exploitation\n        self.w = 0.5   # adjusted inertia weight for stability\n        self.CR = 0.9  # adjusted crossover probability for increased diversity\n        self.F = 0.5   # adjusted differential weight to balance diversity\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n                \n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = self.positions[i]\n                \n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = self.positions[i]\n            \n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                # Adaptive DE Mutation and Crossover with slight modifications\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "ImprovedAdaptivePSO_DE", "description": "Improved Adaptive PSO-DE with fine-tuned adaptive components and balance between exploration and exploitation for enhanced convergence.", "configspace": "", "generation": 18, "fitness": 0.31029832573781707, "feedback": "The algorithm ImprovedAdaptivePSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.9119760529974674, 0.9082482383172229, 0.8958442077554203, 0.9153046232359741, 0.9039773348249697, 0.8529260357604291, 0.8880669781302104, 0.902009732310583, 0.8996131466142494, 0.6784288239958871, 0.6105229201920239, 0.7143068001656063, 0.6781824016644555, 0.6905230013060205, 0.44383241242353966, 0.6134594348687458, 0.6069536031048868, 0.6265710211886188, 0.12005219660469835, 0.14315291128698104, 0.1269464203414904, 0.1758792905818396, 0.14771485768240522, 0.13502491946180595, 0.1317430078227202, 0.12427696643744945, 0.10787131315940335, 0.1024248108683734, 0.12712461715076329, 0.08086273724107029, 0.10442052884827935, 0.10720729499693571, 0.1240382676768621, 0.11450841197927186, 0.09052942827429977, 0.0921047316015613, 0.9802381072294313, 0.9891251932557975, 0.9877834919483456, 0.975545070035168, 0.9851269043410281, 0.9762577848195014, 0.9816630102456979, 0.9890881421923661, 0.9845067045737316, 0.3808092140704772, 0.5818017698763561, 0.40263339033724543, 0.49967437473279364, 0.5507079230633152, 0.47021387893294475, 0.4889416327787528, 0.4461595218413478, 0.5920903472473436, 0.22571153179141823, 0.10880292898084021, 0.2363951138617103, 0.911266856922892, 0.1427590209138645, 0.21125151474056114, 0.15247527258864868, 0.23658212644117194, 0.14071504310324012, 0.13207911549917695, 0.6143961730248652, 0.49489801118166765, 0.5925747952770413, 0.4291925301910904, 0.4640188105739278, 0.19968261381779562, 0.6061647277712328, 0.2579206847584472, 0.5925028230552907, 0.3266361846494451, 0.4740416158214078, 0.17201318428660584, 0.13482532205922215, 0.133448133136573, 0.5696662022417256, 0.4857319265476724, 0.5420223886288916, 0.057483409600124324, 0.05945322733130509, 0.003817631728603166, 0.056536311315690924, 0.08773356644968922, 0.03677693727204656, 0.08465614002991784, 0.19535472343850024, 0.004152181773592223, 0.22483540608939034, 0.041187872341755805, 0.07138252275439028, 0.06903252463761911, 0.043579672014822934, 0.09647358462172129, 0.18064348921250362, 0.06553989560866225, 0.1308833719422844, 0.05240956059198265, 0.10813178427934567, 0.20915209562378667, 0.16511702886320145, 0.07604540126243742, 0.19508195614752255, 0.41031916767765264, 0.16416939086573534, 0.10426402050977035, 0.04384392724392072, 0.04328304518971693, 0.2603366298426518, 0.1494768450716345, 0.01515600885371382, 0.3468532663859697, 0.13639192913650144, 0.058841394631983346, 0.13363028466017945, 0.5811098341349358, 0.6757866076572333, 0.561056357022963, 0.6340232399866133, 0.5117780641486711, 0.680092171988868, 0.5406181601665825, 0.5555379592713727, 0.4969786642988563, 0.1321517222161207, 0.10569088281804229, 0.12220048731974764, 0.12722727093029174, 0.09456353376816518, 0.10558938918937422, 0.10033520390637318, 0.07831952710460155, 0.08697278675783959, 0.26863659232675574, 0.26027688649528924, 0.2915145650494273, 0.27883153136871053, 0.18127179109877833, 0.20172660911304452, 0.19979826870961748, 0.29078626054040224, 0.13145600949409675, 0.21358410525944915, 0.21612397862981547, 0.20319765709072846, 0.3550216220120961, 0.26606659066434835, 0.26663002888159537, 0.214161549505958, 0.16861771510489654, 0.27097167363931607, 0.1591305888502036, 0.2370801083677142, 0.11517046018483412, 0.24786789894145855, 0.15856201591590247, 0.14280451460782295, 0.17823400174530268, 0.2636030157808318, 0.2726192255709391, 0.2331917306477499, 0.19562232408919977, 0.22513773635406498, 0.24392890327865313, 0.15933980157208594, 0.21283655112967304, 0.25718965808625227, 0.23849195770827902, 0.23595380468101024, 0.18628409315193428, 0.19264481489143515, 0.18192634989366907, 0.21411803865189494, 0.2096577974773881, 0.20873496697672567, 0.17608059028865175, 0.2561848498126099, 0.17452571934917338, 0.16668212930034843, 0.19978925362521627, 0.17691561826792335, 0.17336065865215988, 0.20129786200599709, 0.2014757556767972, 0.8968047023086402, 0.11524600015506148, 0.11554061308440655, 0.1277595369944906, 0.21270608108363176, 0.7335342006968018, 0.21166557945905518, 0.2123317161016891, 0.20752113587841536, 0.5489415915756293, 0.1566801847999688, 0.7559794564036161, 0.21473380352976612, 0.19092705142111044, 0.19875938266468118, 0.18454967121194454, 0.2159998598150541, 0.1865749885558916, 0.2572015623030308, 0.18918880615215106, 0.1969426331054437, 0.10263764268397713, 0.08929453283613109, 0.08299796961611172, 0.07976631105661802, 0.05810012350492344, 0.07805462014907805, 0.1279018036502002, 0.08708282818603474, 0.0950690779191411]}, "mutation_prompt": null}
{"id": "15bc078c-31af-421d-842d-05d0502575b8", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 19, "fitness": 0.3358056028058005, "feedback": "The algorithm OptimizedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "3fc22814-4271-4047-b0a8-9994b935f68f", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "befc30df-d761-44e3-8cf0-fadff096af3b", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "25bba020-fd3d-41f2-ba5c-a1639bd0488b", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "b088e65a-2c87-4945-9c02-07b7fd8eafb0", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "68ecf005-d3c0-4bc4-9e3d-38b475cbde90", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "10d411ff-2347-485b-9a58-f944bf20c796", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "7f37abdc-0a31-465e-8b11-f7a69913a261", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "35745231-a1c7-4e8d-91ef-ac1ddd25e8be", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "efb37320-aabb-44ab-a1a7-6fcaf644277b", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "23eec297-ca63-4598-ba71-45c87f19392c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "44e8ca7f-4749-4fe2-b102-d7d387f059eb", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "bddadea5-056b-4b3f-b557-73fe55f371f8", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "f64205c5-20a7-4a83-a2f8-ca99cd38a730", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "e957980d-6880-4046-b6bf-95bfc1d17bed", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "3ce06c61-afa1-46c0-8c65-51059487d36e", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "a7f807c2-b547-41c1-8449-542ddda191c9", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "5e984596-9e35-4623-b77c-7aae477ea03a", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "4bcd58c6-3255-4ed4-94c5-54f1fc233eba", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "43dbb7da-af2c-46cb-b7fd-65ff2277d0fd", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "c6a4cda6-cbea-4827-aa25-0a00f1620a79", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "7c7dfe68-df43-4c7d-bf05-fe9fbf7be4e9", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "08ed747c-2b56-422d-ae31-6e6ed1b65f30", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # refined cognitive component\n        self.c2 = 1.5  # refined social component\n        self.w = 0.6   # dynamic inertia weight\n        self.CR = 0.85  # refined crossover probability\n        self.F = 0.6   # refined differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            self.w = 0.4 + (0.5 - 0.4) * (self.eval_count / self.budget)\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2) + 0.001 * np.random.randn(self.dim)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Enhanced Adaptive Hybrid PSO-DE by incorporating dynamic parameter tuning and improved mutation strategies for better convergence.", "configspace": "", "generation": 40, "fitness": 0.2993808953502071, "feedback": "The algorithm OptimizedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.9256339321738125, 0.8529636328905768, 0.8707826708021534, 0.8911615828368558, 0.8438582276465324, 0.9150942816033099, 0.8894135645059917, 0.876064457303021, 0.8500895726876274, 0.3747811391745529, 0.39972402097427195, 0.5115659693327016, 0.44353327961727895, 0.4682503798048745, 0.4514245313526076, 0.26879694249671227, 0.31549474616768935, 0.36792765906628777, 0.1064827280312125, 0.15654153882949062, 0.1455643668158031, 0.12079570056571387, 0.1620577523364637, 0.13733621771765614, 0.1401606901937914, 0.12342455840418776, 0.10725675813981339, 0.09338662476008686, 0.08828699261369599, 0.11825402967617882, 0.10417543781078131, 0.1111975288661442, 0.21391263343471567, 0.09643346235940664, 0.06068962682842416, 0.06853464987840885, 0.9857517216607531, 0.9820435116199612, 0.9848039167439235, 0.9820051985044997, 0.9868400034183594, 0.9723750045395928, 0.9749359087611638, 0.9911965639708079, 0.9830292094338797, 0.5915001767989103, 0.6179976814947263, 0.6206443792665274, 0.38776314039724735, 0.41155675966480043, 0.44701421515454376, 0.5412513806237907, 0.6583435191975551, 0.5395339091255232, 0.17293411739939912, 0.15061887930924334, 0.15618060307492343, 0.21103897229383783, 0.21527458105284014, 0.15269257930221625, 0.11887737633724504, 0.21840768267237087, 0.20877310595236231, 0.15506663242298402, 0.1370724075684846, 0.3843318693418294, 0.4268973233012595, 0.5154242898372212, 0.46295903420417495, 0.2608603728632428, 0.1361438796623221, 0.43989501397728437, 0.5154687300696044, 0.11744360288464306, 0.5790126821320045, 0.536550386964813, 0.40521934209498445, 0.39013608417182477, 0.45463984694742043, 0.24150011576273256, 0.4148614156496213, 0.04418496308461273, 0.07423128145682023, 0.17602045794574495, 0.016510968145838745, 0.1453869935106834, 0.10826986083409573, 0.012240016351189098, 0.17210478482212088, 0.07109978678330464, 0.04696372139349225, 0.03982183942518802, 0.16205807826100516, 0.11597695117749429, 0.04960581852080992, 0.05897131342722495, 0.09727561978665578, 0.1593994736429618, 0.08027119175445274, 0.037261551738828946, 0.04308307975167258, 0.15110680425756395, 0.11607511988918884, 0.15639790637126882, 0.08583290999148774, 0.07683112753684329, 0.13549997465668617, 0.09378548594602254, 0.24090952712804614, 0.044195140188807325, 0.19491090599416006, 0.05642615936204365, 0.2308018833277412, 0.06445057156927758, 0.0658642664991288, 0.058758634971151746, 0.08473167768365075, 0.6337442361006627, 0.5536136083327345, 0.6206737521563868, 0.5878999935271697, 0.5188870920889024, 0.6357049958709553, 0.5554542253967589, 0.572740395523869, 0.6025121537135738, 0.09240345163482, 0.12495719663425187, 0.07040879008216994, 0.13260818349929793, 0.06290672309663992, 0.11484221104717729, 0.19127819254652434, 0.11176726379101509, 0.07798762602871845, 0.27986445690645845, 0.2381888679457883, 0.20566445756557494, 0.15106684814283666, 0.2547558101799049, 0.15982844680522468, 0.22664861586068596, 0.17559278368468278, 0.18099453875602178, 0.31305670677803266, 0.31352895544054016, 0.26348799071645845, 0.21436705673666867, 0.2520400440476336, 0.24813417681114747, 0.28540251422081353, 0.24358936105202644, 0.26840304065379594, 0.07760615159277917, 0.26224641952778815, 0.09226335240475403, 0.19390107567116321, 0.23354013785494399, 0.150871223242529, 0.20143227188485346, 0.19210698410761295, 0.25611450436399563, 0.23506932481683074, 0.19238440758101227, 0.28603678928888054, 0.23925639579120994, 0.23180121620562522, 0.28082874086258724, 0.23143209190301794, 0.2901193032671887, 0.2405199716368428, 0.17628885715431275, 0.17571563100382415, 0.20128570381500321, 0.19566222499613417, 0.19777200324368638, 0.18961624100155627, 0.19150341993221787, 0.19523094366409177, 0.19984420369640366, 0.928157689778639, 0.1663474976372571, 0.1786715300996915, 0.931984624790878, 0.20187494737699285, 0.20174264452257862, 0.18814615022544368, 0.16693502278133643, 0.1776418969501572, 0.08312440183633585, 0.21055978517134122, 0.8681423110107613, 0.2118580382327646, 0.6703942652710181, 0.7823067816430214, 0.10502226016998228, 0.08278398133488862, 0.6936566183561133, 0.192256066891353, 0.2102998746320922, 0.18468332930560705, 0.2090062491083401, 0.23922130696530308, 0.21158903224508518, 0.1843454267325485, 0.20660419065943825, 0.21563053949320887, 0.05947529206724844, 0.10205423942186465, 0.05800179268485606, 0.06665124564610214, 0.10924228802069369, 0.09856110364803372, 0.08760430446165679, 0.09582125605955849, 0.06518619401222936]}, "mutation_prompt": null}
{"id": "3675015d-8613-4da3-95cb-4eb1f595da7f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # adjusted cognitive component\n        self.c2 = 1.5  # adjusted social component\n        self.w_start = 0.7  # adaptive inertia start\n        self.w_end = 0.3    # adaptive inertia end\n        self.CR = 0.85  # adjusted crossover probability\n        self.F = 0.6   # adjusted differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            # Adapt inertia over the budget\n            self.w = self.w_start - (self.w_start - self.w_end) * (self.eval_count / self.budget)\n            \n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedHybridPSO_DE", "description": "Enhanced hybrid PSO-DE with improved inertia adaptation and mutation strategy for efficient convergence.", "configspace": "", "generation": 41, "fitness": 0.3302861623308065, "feedback": "The algorithm EnhancedHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8746577910612068, 0.87227658741522, 0.8817860742708534, 0.8864753593576962, 0.878657125884135, 0.884980161282016, 0.884311158001206, 0.8946018219350574, 0.8734971546887244, 0.7412472581167003, 0.6757525233205097, 0.7165041943963942, 0.724393316412504, 0.7262586207102211, 0.7060458770562585, 0.6473339487073051, 0.7351606009623357, 0.7451281589354084, 0.08834960062959141, 0.13898584737950592, 0.11096469123404773, 0.12244473332041361, 0.1326598134629634, 0.11517845313105313, 0.13964203546322496, 0.09567913218489832, 0.1672568402926936, 0.1164038805415637, 0.08699300699745216, 0.1084085967694185, 0.09852053374948322, 0.06482499454058144, 0.10486100272629606, 0.10746734185244056, 0.08668682473911848, 0.13977702072811204, 0.980499326716864, 0.989912906176361, 0.9937513771300392, 0.9830214399097332, 0.9942069716756992, 0.9844237034155977, 0.9817973347082781, 0.9940115629048119, 0.9844315101995883, 0.7230732065821346, 0.6975584297769825, 0.7171929829309326, 0.7715156624674431, 0.3900698166192762, 0.725243801600478, 0.7397877949255214, 0.08791184426015464, 0.5986162628444909, 0.8943176033107677, 0.20418298605693985, 0.22811207145448376, 0.19288969312975623, 0.19224656347369296, 0.21656295828876093, 0.16423590304939717, 0.11604316546372029, 0.35993337364104083, 0.07487841545186691, 0.6792352964067985, 0.1657002205008874, 0.2934153269439339, 0.45597273200689903, 0.12422310896356625, 0.6372476689735966, 0.6080233253378977, 0.15881238940785858, 0.5291880775303999, 0.1214591379094454, 0.6747180621441957, 0.6735564582152227, 0.13376321637017574, 0.4564862135479121, 0.6425560258369705, 0.13356337593284628, 0.13319108195011575, 0.05100524865233125, 0.06474675829131538, 9.999999999998899e-05, 0.08441948876207062, 0.04501525120128769, 0.027211485121219958, 0.22534906866040105, 0.0024129734942609504, 0.027774267760735327, 0.38208938574046014, 0.10763078489308264, 0.13802062244492885, 0.21853981824376822, 9.999999999998899e-05, 0.08448355056050916, 0.5255158357310743, 0.18639835195801624, 0.13688471806323832, 0.048261175516206234, 0.059701183836800564, 0.15257727921592157, 0.13733072982405226, 0.1483756157835967, 0.23571238288889074, 0.09695240181062925, 0.0742119020927896, 0.0725687079248295, 0.0630454546128505, 0.1606547389486963, 0.1447259372777122, 0.15516097025668474, 0.26511913266349774, 0.2067355098137884, 0.19544630426402887, 0.056432700296918825, 0.08155853464751472, 0.692879616181596, 0.6465624462755847, 0.6693664222952984, 0.6663467694405081, 0.6073201846478902, 0.6432339273841291, 0.6079651172951792, 0.6428621088578323, 0.5660505092027814, 0.12792509550877984, 0.08868315330383847, 0.1548247120081827, 0.1311873758927663, 0.08914464705805802, 0.15591265552087952, 0.07715174936013569, 0.14316188312496325, 0.08540829857237386, 0.2579366290511458, 0.19043907026837148, 0.2650722486584677, 0.17823770081450896, 0.23692151124027894, 0.17283931751276982, 0.17190099685760452, 0.3374989012957167, 0.2698095955982188, 0.19237343507043314, 0.305513506416462, 0.2666449842891391, 0.20701981188170004, 0.32360179787898824, 0.32956311234324653, 0.40000236384896615, 0.3080757551879546, 0.25761937401271084, 0.15034258186536953, 0.11845573702748202, 0.11488817767075254, 0.4117969017443668, 0.24212332643699508, 0.2879354349322404, 0.1677920016065837, 0.3035658152146722, 0.31006406699467315, 0.24528057711394835, 0.24300571539735816, 0.21111415893863295, 0.2556133951598869, 0.1710156174462969, 0.1922520044559245, 0.23866099641750815, 0.20310356039877053, 0.20748124999561368, 0.1980857689378136, 0.6057433564006593, 0.2009696370452454, 0.20275350683695048, 0.23506168490251333, 0.2111944915641797, 0.19581203037779082, 0.19657280106190378, 0.19547823396573472, 0.6298718013148982, 0.195989044369425, 0.15394472817518057, 0.5533999914539569, 0.20023625398305722, 0.19871461519069844, 0.15242057354440808, 0.20967120262540107, 0.11461862428595448, 0.14976376004567915, 0.20222402393139416, 0.9389107074997454, 0.21158177107663412, 0.8513842196735031, 0.21014602701662388, 0.10503905201847896, 0.16869414271512684, 0.8972060519397713, 0.2099189414894308, 0.19081028402415157, 0.2686181525610275, 0.20717344242853042, 0.1923645824809731, 0.20387511634527056, 0.21073768366208467, 0.1942107585627566, 0.2145936087041066, 0.10744872488269486, 0.09027563752267032, 0.10096662752556418, 0.0903571262978361, 0.08875073374249931, 0.08304892168363709, 0.09661436916995592, 0.09301107924677776, 0.13401832854272377]}, "mutation_prompt": null}
{"id": "368e886e-6499-444f-9a02-10e97a0906c4", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "e173c51b-8297-4943-a8ac-dbd02b2a4dfe", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "6457b685-ccec-43ea-b789-9fbc6d514a9b", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "30dab5cb-29c1-4d26-868a-1b7a67b17412", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "fe6c3a0f-ae87-4ec9-b904-1ee71a89d7af", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "517ac14d-c39d-4e81-8e29-9cddd58bde47", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "effde5f8-d602-45e7-8aec-e64809ef7b68", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "9181fe2f-6e49-4c31-bd02-a3f5a03db2f0", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # dynamic cognitive component\n        self.c2 = 1.7  # dynamic social component\n        self.w = 0.6   # dynamic inertia weight\n        self.CR = 0.85 # adjusted crossover probability\n        self.F = 0.55  # tweaked differential weight\n        self.eval_count = 0\n        self.alpha = 0.98 # decay factor for inertia weight\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            self.w *= self.alpha  # adapt inertia weight over time\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n\n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE_Enhanced", "description": "Enhanced PSO-DE with dynamic parameter tuning and adaptive exploration for improved optimization efficiency.", "configspace": "", "generation": 49, "fitness": 0.28960051911287493, "feedback": "The algorithm OptimizedHybridPSO_DE_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.9164060590936459, 0.8649831062138582, 0.905921659733906, 0.9255963790011265, 0.7794716894320619, 0.9269915534294187, 0.5385801522867046, 0.9189146407461449, 0.91811569136492, 0.8249319210911461, 0.49368646294502516, 0.5491083175830602, 0.7426374701190572, 0.5062268095013753, 0.6856272326154722, 0.44746093461017256, 0.2559308307476227, 0.31700081881787345, 0.09976940943071733, 0.09593800772361105, 0.14593044903017194, 0.16016049761109186, 0.09639303055402959, 0.09867328995249258, 0.14608731569180633, 0.11826162105226978, 0.12291094338846198, 0.10083395084706848, 0.1103285076559356, 0.08542234901442913, 0.11231884210811371, 0.040316859724849, 0.09884484589673648, 0.14371061514078587, 0.10955413225058963, 0.08506667664519296, 0.9819791738584985, 0.9892734402044207, 0.9937038907541184, 0.9677722432156707, 0.9937795083581249, 0.9849833443446018, 0.9839876811806914, 0.993394560963405, 0.976650098481799, 0.6144261159193591, 0.3967873881956985, 0.5192197169514386, 0.22325352911994856, 0.5331562518958852, 0.2705321111261342, 0.5046366156544136, 0.38669168811004717, 0.3517734290214992, 0.1972098447300995, 0.13699755686563697, 0.24475302958935252, 0.2814512983697537, 0.20948590233758635, 0.2755376935034547, 0.17544747057943655, 0.14681343862919216, 0.2506515526886982, 0.3787356836480613, 0.3588731813304451, 0.19369435998381113, 0.23079858102146988, 0.22296292696878373, 0.1030716076074839, 0.18911922518750512, 0.2444807556192623, 0.33124091197577055, 0.1333011028574036, 0.12345647026529294, 0.4967334150660082, 0.2904789554311351, 0.3216111187138425, 0.16878211032176937, 0.2712536484385978, 0.45204996672928033, 0.13060941826096073, 0.00244999062819784, 0.07395464639747173, 9.999999999998899e-05, 0.06431393884564074, 0.004183487617384518, 0.000426471189078792, 0.20150017117708785, 9.999999999998899e-05, 9.999999999998899e-05, 0.0578234533599431, 0.05016744795075778, 0.0694152989118253, 0.0989559054138659, 0.00837355782420346, 0.09297442353580698, 0.20668074463327735, 0.12246993480196766, 0.07737046413454551, 0.13648426040663852, 0.33219366647572857, 0.10585089472905351, 0.3260479474614181, 0.12943585021248616, 0.30863313633149536, 0.1769518555648235, 0.24644150657808028, 0.0795816826364778, 0.030527556055621297, 0.15221283666848828, 0.06444194939596781, 0.15092739680957545, 0.25229233056246614, 0.06899566411567049, 0.17663818927012886, 0.06326282117254245, 0.08398696585631138, 0.60805491904975, 0.4892326709571373, 0.5938642832508532, 0.6119155350506456, 0.47484737663136933, 0.6156250670609213, 0.5877759926085417, 0.4518259521286333, 0.4611783598912079, 0.04323787065442919, 0.10157800406540884, 0.13422892401046305, 0.1141682429343045, 0.06509848943339713, 0.1131891193935759, 0.14613864702042179, 0.11205629107053394, 0.097502661378847, 0.24098923889640622, 0.24489597172526023, 0.17007743290268695, 0.1835548905284936, 0.3488615278090468, 0.14710228767644873, 0.1583697251178091, 0.25321980526550747, 0.22072706256610886, 0.27277959836107046, 0.2994307019477924, 0.2346082438066489, 0.26663107453534096, 0.22394292143836092, 0.24960071203090184, 0.21222546234171147, 0.37878637244137203, 0.41666601604956555, 0.20888555642170148, 0.2522956735743409, 0.1649314696296087, 0.3019590581545806, 0.18286591205678793, 0.19803400017220774, 0.1804640965963179, 0.1842580627468785, 0.3051226722462358, 0.274893527161556, 0.26820918400910865, 0.22685012380368064, 0.2823123403298262, 0.16257986014470005, 0.23354161077123403, 0.22867734964046116, 0.18870351995842227, 0.23236211331117407, 0.18327314863056454, 0.19058083451745889, 0.375349134568182, 0.196118483307817, 0.20386036866164847, 0.19927117906565828, 0.20143601981674752, 0.2053827148532239, 0.17556698707652163, 0.9319806377665918, 0.1872170225084525, 0.1535710720228799, 0.9212511275829529, 0.20143014610767196, 0.1999231179909603, 0.16366347748097854, 0.1593714334786257, 0.1649223167131375, 0.5807287672949641, 0.21338832127362894, 0.5606290482749452, 0.2117195590944757, 0.06394867963492012, 0.27312849547321894, 0.10513230496615666, 0.16675103226068733, 0.7105523857910152, 0.18247210657401491, 0.21136771213821182, 0.19629211484160225, 0.18458318697480514, 0.19752798192221466, 0.21309623437818714, 0.18112342419288807, 0.18498105065711112, 0.2217789596763341, 0.07608209585192616, 0.07417235246643927, 0.0686554481383097, 0.08327651696072935, 0.07313480243200443, 0.09317374869159523, 0.1086421421186069, 0.0783892747346272, 0.07390004280666851]}, "mutation_prompt": null}
{"id": "a7fb2c11-b3cf-4a87-ac2b-d6a2aaa9d3c8", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "8583b06b-18a2-4f4b-b2e9-edf8f5ee369d", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "8a99007d-8d11-4c9b-bb17-3bda6c7c7d6c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "34fd37d9-3d5b-4808-a8d7-088cd7fc80c4", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "b5fe0edc-0d45-4e2b-873b-8d0945c0324e", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "345d3a5e-efeb-44d5-be39-515f104e5e58", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "f89a3675-bdfa-4e04-b811-63c5dedb5fc8", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "a18d2615-dc4b-4fcd-a7e9-32bd9eaa9d73", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "0441884c-e9a4-4d63-bd54-edc08b2bece2", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "c8597a48-58a4-4b6a-9aae-7d608323ff60", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "9bc32e3e-dad2-438a-b9f1-5d1b1ac7a48c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "66734e4e-a5f0-4827-a390-64b4b0082c87", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "252d5a48-2052-4578-9d1c-e7d296d3fbac", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "769214ea-dc49-4e09-9da2-03524a910000", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "9955090c-1a68-4ac8-9ddc-6dca6731b3e4", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "c4a22fbe-d4cc-4f56-aa88-ddd837d7f21c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "4710690f-7676-439e-9388-7a11cae98e83", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "8015c759-9e54-43ca-ba5a-edbf41d1f0ce", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "d80ef45d-6764-4a64-9d64-06af178d8a74", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "9bdfe30b-1bae-468a-86c4-ca1dd251f8ba", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "e09210aa-a95a-45b3-b15a-41009b109206", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "b4e9f5d9-d57a-4792-a314-f25289402f59", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "404eec66-daff-4815-9422-e01b62a1584b", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "d01eaaf1-8bba-4a32-9e06-2e4b83e7a59f", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "ff0ffdaa-dc89-4ad6-9208-bcff8c55bb1a", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "9f7ed7c2-ef5f-4753-9cdf-44c8738809fb", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "d2f010b4-3d29-4bba-b4fd-7c456a2c85f2", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "c469572d-479b-4634-9162-18f79113d544", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "306195da-99b0-4a47-807d-f949ddd9f7bf", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "50785228-5410-4b38-8866-30c5db51efa7", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "f3fe4dd9-91c2-4100-9de5-31191fd427fa", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "79113f5c-e427-4424-9605-50784d532f76", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "5bd1a406-802c-421c-acd4-46585d31daed", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "465826f5-2b02-4c92-a507-15bf7d51ab94", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "d8326a24-70af-49cd-8572-b49a9edc6d8c", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "5501e61b-fa15-4ee8-98c4-c811e8094381", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "cd976b79-56c7-43f0-b86a-f0b893215ae4", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "a5cc1431-fa48-4653-9ba2-d1222d1458ba", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.5  # adjusted cognitive component\n        self.c2 = 1.5  # adjusted social component\n        self.w = 0.6  # adjusted inertia weight\n        self.CR = 0.85  # adjusted crossover probability\n        self.F = 0.6   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                velocity_update = (self.w * self.velocities[i] +\n                                   self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                   self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.velocities[i] = np.clip(velocity_update, -0.1, 0.1)\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "EnhancedAdaptiveHybridPSO_DE", "description": "Enhanced Adaptive Hybrid PSO-DE for improved convergence using dynamic parameter adjustment and hierarchical velocity update strategies.", "configspace": "", "generation": 87, "fitness": 0.30436579448981216, "feedback": "The algorithm EnhancedAdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.930226527966132, 0.8987611449977592, 0.9313811838702124, 0.8883193048338002, 0.8991577910839509, 0.9187305170425311, 0.9155161156954637, 0.9044426325334314, 0.8828636444593828, 0.3158723476104699, 0.6425603651088898, 0.6867444191959349, 0.18174226618472022, 0.7558362256039168, 0.5902092694912051, 0.6169483366353816, 0.5966686468431441, 0.35272853375675006, 0.12556391299621195, 0.14521453173393406, 0.11472541710836304, 0.1245693583055667, 0.12155442282448292, 0.1241239396756535, 0.1607522498938937, 0.15799911455534132, 0.09424520525315927, 0.0764737281599086, 0.14644845478323076, 0.09377694109080292, 0.09342416039402446, 0.0913225853568238, 0.050277846861934594, 0.035031625051201276, 0.07398730230897599, 0.05310456896297988, 0.942288783021164, 0.9601659396742747, 0.9625302446559357, 0.9065774017851528, 0.937927117405959, 0.8029399236235248, 0.9294662869243421, 0.942134280448204, 0.9402519574970202, 0.429015631971676, 0.4464468381721365, 0.5787444754938366, 0.3138977005185527, 0.6365643783505568, 0.49809417723244487, 0.7142861043392765, 0.4854678022799843, 0.7134066554334777, 0.8692655023365425, 0.16016895982682433, 0.46120899628553147, 0.19231129672739333, 0.3519090598302913, 0.2788949304680378, 0.22938197346358769, 0.16967520614919163, 0.1751190883552537, 0.5429563718543449, 0.3684561102890772, 0.4137565949140336, 0.6657796548149324, 0.3899334739627912, 0.1265674263664207, 0.8256686438653145, 0.13129798483240318, 0.41390002637552914, 0.43132921778080613, 0.3486033337780111, 0.5310639747272294, 0.5109594713125672, 0.4268418861893075, 0.13268709626394626, 0.40659317070633005, 0.16807504418658736, 0.34036186116782996, 0.028972730938919278, 0.20696191455154833, 0.04292613862784678, 0.037855111453643286, 0.05570974377467974, 0.00013153428739354212, 9.999999999998899e-05, 0.08604513765778377, 0.123475814272476, 0.0730454919124961, 0.09989452840006019, 0.1376248158704486, 0.03841101698515503, 0.04546544503555927, 0.04142730125573302, 0.1049154839439721, 0.07021179059586757, 0.144139145911496, 0.12445240508393018, 0.289817401278469, 0.12310779155349683, 0.13800105131227924, 0.19088258921712165, 0.24088975211323582, 0.14693620358179815, 0.17692759505128286, 0.09837824459609879, 0.1610138590168646, 0.1020148242416955, 0.09368769895280293, 0.24716614239305013, 0.16016984242461008, 0.23371015960279196, 0.1620285058417208, 0.15172253059017604, 0.17389887545333205, 0.5228798828109511, 0.5293435436686592, 0.6058348594445393, 0.6603554925369826, 0.5889685553253252, 0.5856879985035983, 0.5393459788687535, 0.6160602115530109, 0.6290788262315319, 0.10530913134309572, 0.11990331719800817, 0.13782732578983503, 0.18661983433949692, 0.10968875145122436, 0.1064443201521954, 0.1180314951735818, 0.12431619065163546, 0.11517886906362473, 0.19411100535521764, 0.13079470442155594, 0.16830458953247218, 0.15923282188371923, 0.159814278424124, 0.232358344481841, 0.23630356498042304, 0.23145050813513457, 0.16989478442300388, 0.2879192687421964, 0.4201570969486932, 0.1693546285206179, 0.32620252013448947, 0.259290233961475, 0.17280988883147785, 0.20028408343129644, 0.30512644304226755, 0.32633020142504754, 0.25611387254104423, 0.31148134303621433, 0.13058067451389543, 0.2579343882057017, 0.17818181618932505, 0.19539286701806724, 0.20043542751134458, 0.25877627380334933, 0.22010294798135388, 0.24860377638012754, 0.21565890867435134, 0.2515205146040307, 0.2224769041272363, 0.20563819997425703, 0.22376439340324128, 0.2321422787835189, 0.2564789204386402, 0.22866902105040576, 0.20599086579519843, 0.18736697866441276, 0.18728005453913132, 0.1794691318426036, 0.1866601689976769, 0.18447851069118004, 0.18201000037341852, 0.19498947914776776, 0.17303638076715033, 0.9214058899324935, 0.14740317789570212, 0.15370685183191002, 0.17284560681280914, 0.19968378379035445, 0.19947347666677806, 0.16133388611569788, 0.15962115895698203, 0.1562791964291591, 0.16723959163818292, 0.11278892007019026, 0.6630626174106838, 0.210357393980659, 0.2093140376875866, 0.2063851184198754, 0.1546791835268181, 0.12732980892075307, 0.40284915271973154, 0.2046653161919174, 0.1937081613193744, 0.18539854035068426, 0.18531325889908212, 0.19867639632978085, 0.1827844107475285, 0.17600386415490066, 0.19509974407581698, 0.18791761818881747, 0.09569882165651833, 0.091052849758262, 0.09192920270662619, 0.10370030123048035, 0.10998962912548671, 0.08315531753247019, 0.09584820338542499, 0.08132570997462463, 0.08274244986249502]}, "mutation_prompt": null}
{"id": "cc28cca1-73ce-49f4-8972-635debb95cef", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "b73a6198-7d9f-4166-9f74-240a5fe96e8f", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "7571ea4c-960c-4567-a830-bd1c113e01cc", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "dafbb71e-6a19-48d1-82ee-bf9f0c9e0233", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "b92e6d88-2014-44bf-a229-61fb3a874f80", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "b0137089-a4f2-4db9-95e2-40fe1f92e953", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "ee4ab4d0-7875-47c0-a8dc-9f1637315302", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "3fa0f671-8b4c-4251-901a-fdbcce7ca0c5", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "e3857571-c4f2-48d8-9c49-908c81d529f5", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "772cb856-2240-445d-98bd-d6d5426d9f72", "solution": "import numpy as np\n\nclass OptimizedHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.4  # tweaked cognitive component\n        self.c2 = 1.6  # tweaked social component\n        self.w = 0.55  # adjusted inertia weight\n        self.CR = 0.9  # adjusted crossover probability\n        self.F = 0.5   # tweaked differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "OptimizedHybridPSO_DE", "description": "Optimized Hybrid PSO and DE with adaptive parameter tuning and improved memory management for enhanced exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8722335090106104, 0.9131498171834793, 0.8721146005212359, 0.884547526906527, 0.8795188135160616, 0.9026358938751586, 0.9178500922458863, 0.9116473778356616, 0.8802890498686761, 0.4132033796126944, 0.6070396800572503, 0.6088619170515361, 0.7119150982793879, 0.5816299538817332, 0.5059808224234328, 0.808158702230967, 0.7450401761849326, 0.6960106809173003, 0.0833635553316302, 0.36794311648235845, 0.14052646800795376, 0.11797264006389252, 0.2047095933741191, 0.13272583101172986, 0.09314400089191455, 0.13681440753256902, 0.1278459431890464, 0.10822273805818439, 0.10388469257528066, 0.15354176684965481, 0.09010386741297116, 0.060434111211708164, 0.15394172000558026, 0.15108726697498898, 0.061330757295919636, 0.09615420939768082, 0.98580765404336, 0.9873431098348149, 0.9943747892036772, 0.9880870529954923, 0.9932412893586595, 0.9844223078100017, 0.9813675128262878, 0.9911898223121666, 0.9731027813796287, 0.6560661732649433, 0.5613021272986723, 0.535750939122166, 0.7604617252519987, 0.552870452050954, 0.6137763648104135, 0.43413404700354563, 0.7576987586010467, 0.3801940609071298, 0.7272114784080046, 0.3898510720580416, 0.3212459704250401, 0.19432329974560247, 0.18912922278214406, 0.2811936037383932, 0.23409150816329904, 0.23525713202429044, 0.16474905715653676, 0.12379347552898412, 0.5916112386910037, 0.701582803010807, 0.6293714253939682, 0.759035031232101, 0.4575908017501015, 0.1341315655155607, 0.7222844126524604, 0.6541350549720673, 0.4957506422125836, 0.2860852306826267, 0.5410034029081514, 0.6070253633613327, 0.7058885607597152, 0.3271172896192559, 0.6395905969755384, 0.13467765809956433, 0.6405111699918382, 0.09905887644165845, 0.35418885981029025, 0.027406123247903258, 0.05770394479670782, 0.09843176130548459, 0.023181077889692592, 0.026848898278926003, 0.008015446981548102, 0.06192956373013081, 0.1377558535676373, 0.08786264921192066, 0.20575062791523147, 0.18885207548328442, 0.05502119558989593, 0.08020565599027218, 0.20614341009978787, 0.24208174767577995, 0.1677594740534758, 0.05110883504908126, 0.08035984850100775, 0.17540622395253236, 0.26374150797882656, 0.08290919797844931, 0.08252040349575851, 0.17250863198997812, 0.33782083947751307, 0.07581237076362701, 0.11039064741684634, 0.26037495029116464, 0.20714800013202284, 0.2519289283872854, 0.4054138869044992, 0.2976104815097742, 0.1254416396592989, 0.050047273556007355, 0.1275843895882588, 0.5844519650524035, 0.5911086848608496, 0.5788188496683464, 0.5779024498002157, 0.5912547469404357, 0.5902723720654619, 0.6214526187177705, 0.719993705056039, 0.6333916119145528, 0.10493796300075842, 0.11016948041851993, 0.1598225701603878, 0.06052457886836604, 0.13129185092388362, 0.13222790506213167, 0.10656859101254756, 0.1434424998661893, 0.07708663897662882, 0.22907709710806912, 0.23935221129299156, 0.1608275189236401, 0.19473156620133303, 0.2118485128586527, 0.1996017796001074, 0.1787816448717312, 0.18900948511387594, 0.20796685569598083, 0.2670778018158021, 0.24925727733777625, 0.18440296602134387, 0.238929883032324, 0.26518978514751346, 0.14467000396594087, 0.22298056570404146, 0.27235431545437405, 0.30792561017731257, 0.2413913868318287, 0.20169734823439733, 0.22075748440217036, 0.3104273163095944, 0.28062160458259455, 0.2878945255930474, 0.184222976638993, 0.21157401964136124, 0.3191746344810399, 0.23118766063244078, 0.2556418860096229, 0.18310935844015497, 0.2596152524178972, 0.15689230711203817, 0.21318121774192988, 0.2405884691385941, 0.2288547863008673, 0.26383913826486916, 0.2008665252495616, 0.19577869166373785, 0.17224008899855858, 0.18096609350512494, 0.23179328203942573, 0.19982637182638663, 0.17519781082531682, 0.1925406402498282, 0.20031711595250834, 0.16641870995908248, 0.20009949236152724, 0.15385618929988, 0.9291053745397333, 0.20125192914437895, 0.19970017225988368, 0.16329157178285147, 0.11517777203652768, 0.15861959299968587, 0.8542851355735466, 0.21213373580701678, 0.8589621377774177, 0.8139741249381554, 0.2110831591147716, 0.2100077659381958, 0.17007275545154155, 0.1668076885896651, 0.16812052062720795, 0.2245898881372027, 0.22731415809932842, 0.2503137945429683, 0.2153742849480722, 0.1986747777350325, 0.2012790709076232, 0.1985710132476176, 0.1875647520037761, 0.1975018542038175, 0.0971492424772199, 0.06541731444145693, 0.08140852660600884, 0.09152024397838665, 0.08250228871166199, 0.09804550887432739, 0.08353718175248925, 0.05849119541326342, 0.10155721409415697]}, "mutation_prompt": null}
{"id": "b46bda9a-bcce-46b5-ac2a-403fc997b9d6", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.3  # adjusted cognitive component\n        self.c2 = 1.7  # adjusted social component\n        self.w = 0.6   # increased inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.55  # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveHybridPSO_DE", "description": "Enhanced Adaptive Hybrid PSO-DE with dynamic parameter tuning and improved diversity-control mechanisms for better convergence.", "configspace": "", "generation": 98, "fitness": 0.3646728067878557, "feedback": "The algorithm AdaptiveHybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "15bc078c-31af-421d-842d-05d0502575b8", "metadata": {"aucs": [0.8733245423052783, 0.9058085640701399, 0.897258823587293, 0.8852231506360096, 0.911789108472663, 0.8870138245795441, 0.9151187965998563, 0.9113421740471492, 0.8861813118038137, 0.7851882507478141, 0.7160388959506443, 0.6928359222207144, 0.7050791764364188, 0.6029183689901092, 0.7663772421926649, 0.7747890604601929, 0.7132402654295711, 0.8021756890319646, 0.18119777387930602, 0.1606094656129209, 0.14445456189165706, 0.11629369926935562, 0.16911181209819137, 0.12368164288085592, 0.13959863772514514, 0.1473787801923605, 0.134639920332015, 0.10200798767001162, 0.08444640710426865, 0.09499362696764779, 0.12227215307553874, 0.4718878401653043, 0.0938700328892843, 0.15248023674560607, 0.09864554384461555, 0.08288614289374086, 0.9841212686143601, 0.9892482435593769, 0.9937494964567472, 0.9762278432521705, 0.9950629007024581, 0.9852824179726591, 0.9848030823357762, 0.9939393726512968, 0.9709243711237467, 0.6986680386205697, 0.5986716207404528, 0.5369850395624083, 0.777678586957978, 0.15290380798011516, 0.4206110583721355, 0.6281718202272535, 0.6936330305024547, 0.7005032286015758, 0.3689558329946664, 0.22652823200739047, 0.2291052963426572, 0.35983719954507287, 0.2137341993673907, 0.8687314927619799, 0.18583006491456755, 0.23598376404102328, 0.21703536972145487, 0.46807251927778637, 0.7090028078784075, 0.13450581289269248, 0.6539878524449092, 0.13484431766577676, 0.37245368627939046, 0.6463658234023879, 0.6924757531127734, 0.5563136250209878, 0.6214825026789341, 0.5556896764495518, 0.8006203506707983, 0.47475971113588133, 0.4519474925840363, 0.694657276827953, 0.6489064457905893, 0.7229768196230765, 0.6159994359340929, 0.056206519163510715, 9.999999999998899e-05, 0.06823983053766991, 0.0860940100256059, 0.05690897926960936, 0.04969298024450641, 0.051459027262251045, 0.050888698400526344, 9.999999999998899e-05, 0.12101304840452232, 0.08705739582713523, 0.2816099911972193, 0.11182921377911081, 0.32180593521660406, 0.08526587458161361, 0.15177790632725685, 0.2578591484567574, 0.09658673860895872, 0.05118683217667408, 0.035832164143121514, 0.10270233884998647, 0.14443266247153586, 0.19861758063206159, 0.22095583895893567, 0.09082240367588434, 0.29764177557171567, 0.0763891415286938, 0.32787506890006246, 0.3430778587657727, 0.09736492552321774, 0.32914082897691155, 0.04480482142868425, 0.2502785375832768, 0.2587498682009356, 0.11402219369316413, 0.3157521019349502, 0.5999758630750869, 0.5860135407774528, 0.6060220952902438, 0.6088131480866568, 0.6272904402448618, 0.6887540913658299, 0.7933712141099145, 0.6640294258054096, 0.6384633293526282, 0.1315049965704227, 0.06533276650077169, 0.08834287832553489, 0.09313709725644714, 0.06245373022927292, 0.10450912282932046, 0.10515505895361044, 0.1625511418757929, 0.07759611598842786, 0.23371998120723347, 0.28131458560304534, 0.18062251578207522, 0.18117449271602937, 0.2762622330077217, 0.28895321142979224, 0.22141947422070896, 0.18536310923717259, 0.17371740672216618, 0.29883995933809715, 0.4506688869142006, 0.25954327752398154, 0.20758201324647552, 0.27621033910760595, 0.2604448723271343, 0.23808166273226428, 0.5130535931205036, 0.27502595437875976, 0.296075702663367, 0.26060680355180166, 0.1491602385156039, 0.21465643139049007, 0.20941141163455657, 0.22414901144262855, 0.31917272770939675, 0.24588782454237912, 0.25564659875347695, 0.2108195815758157, 0.196751697657931, 0.2721451177412527, 0.23690467724439457, 0.1851920490934168, 0.2050996152213561, 0.181747558597126, 0.20486137231718982, 0.22161453161418043, 0.5462376024795985, 0.22284157827156537, 0.1919949698379354, 0.2509244469507681, 0.24456883188527756, 0.20004038641898003, 0.17629431183512156, 0.18118805952059613, 0.20306108368020326, 0.9200179536714187, 0.8494954087870902, 0.15367745747504835, 0.9255224055125884, 0.20133986490618672, 0.20068818145918055, 0.1777457280672755, 0.7829799976484236, 0.16364702779413332, 0.0829717214445509, 0.21010704361347787, 0.8710000797879835, 0.926266371146461, 0.20774118020601684, 0.2106518294796198, 0.872007476787807, 0.16416284050854335, 0.8369507593989589, 0.22105422190384327, 0.21803915507278193, 0.18756061465387175, 0.20290446206282076, 0.20684089457311816, 0.21545539355965082, 0.22035590138740535, 0.20915072289146186, 0.23193595982669324, 0.08803116179953452, 0.08099922625369471, 0.09251162206181252, 0.09663208173333282, 0.07267039722253066, 0.15009873001916607, 0.1058673648249513, 0.08968743566615689, 0.08189948285231474]}, "mutation_prompt": null}
{"id": "9a40f175-66f0-4c42-87df-c79b4c1ae8b8", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = int(np.ceil(8 + 2.1 * np.sqrt(self.dim)))\n        self.positions = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.05, 0.05, (self.pop_size, self.dim))\n        self.pbest_positions = np.copy(self.positions)\n        self.gbest_position = self.positions[np.argmin([np.inf]*self.pop_size)]\n        self.pbest_scores = np.full(self.pop_size, np.inf)\n        self.gbest_score = np.inf\n        self.c1 = 1.3  # adjusted cognitive component\n        self.c2 = 1.7  # adjusted social component\n        self.w = 0.6   # increased inertia weight\n        self.CR = 0.85 # slightly reduced crossover probability\n        self.F = 0.55  # increased differential weight\n        self.eval_count = 0\n\n    def __call__(self, func):\n        while self.eval_count < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                self.eval_count += 1\n\n                if fitness < self.pbest_scores[i]:\n                    self.pbest_scores[i] = fitness\n                    self.pbest_positions[i] = np.copy(self.positions[i])\n\n                if fitness < self.gbest_score:\n                    self.gbest_score = fitness\n                    self.gbest_position = np.copy(self.positions[i])\n\n            if self.eval_count >= self.budget:\n                break\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.velocities[i] = (self.w * self.velocities[i] +\n                                      self.c1 * r1 * (self.pbest_positions[i] - self.positions[i]) +\n                                      self.c2 * r2 * (self.gbest_position - self.positions[i]))\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], -5.0, 5.0)\n\n                if np.random.rand() < self.CR:\n                    idxs = np.random.choice(self.pop_size, 3, replace=False)\n                    x0, x1, x2 = self.positions[idxs]\n                    mutant_vector = x0 + self.F * (x1 - x2)\n                    mutant_vector = np.clip(mutant_vector, -5.0, 5.0)\n                    trial_vector = np.where(np.random.rand(self.dim) < self.CR, mutant_vector, self.positions[i])\n                    \n                    trial_fitness = func(trial_vector)\n                    self.eval_count += 1\n                    if trial_fitness < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_fitness\n                        self.positions[i] = trial_vector\n                        if trial_fitness < self.gbest_score:\n                            self.gbest_score = trial_fitness\n                            self.gbest_position = trial_vector\n\n                    if self.eval_count >= self.budget:\n                        break\n\n        return self.gbest_position, self.gbest_score", "name": "AdaptiveHybridPSO_DE", "description": "Enhanced Adaptive Hybrid PSO-DE with dynamic parameter tuning and improved diversity-control mechanisms for better convergence.", "configspace": "", "generation": 99, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b46bda9a-bcce-46b5-ac2a-403fc997b9d6", "metadata": {"aucs": [0.8733245423052783, 0.9058085640701399, 0.897258823587293, 0.8852231506360096, 0.911789108472663, 0.8870138245795441, 0.9151187965998563, 0.9113421740471492, 0.8861813118038137, 0.7851882507478141, 0.7160388959506443, 0.6928359222207144, 0.7050791764364188, 0.6029183689901092, 0.7663772421926649, 0.7747890604601929, 0.7132402654295711, 0.8021756890319646, 0.18119777387930602, 0.1606094656129209, 0.14445456189165706, 0.11629369926935562, 0.16911181209819137, 0.12368164288085592, 0.13959863772514514, 0.1473787801923605, 0.134639920332015, 0.10200798767001162, 0.08444640710426865, 0.09499362696764779, 0.12227215307553874, 0.4718878401653043, 0.0938700328892843, 0.15248023674560607, 0.09864554384461555, 0.08288614289374086, 0.9841212686143601, 0.9892482435593769, 0.9937494964567472, 0.9762278432521705, 0.9950629007024581, 0.9852824179726591, 0.9848030823357762, 0.9939393726512968, 0.9709243711237467, 0.6986680386205697, 0.5986716207404528, 0.5369850395624083, 0.777678586957978, 0.15290380798011516, 0.4206110583721355, 0.6281718202272535, 0.6936330305024547, 0.7005032286015758, 0.3689558329946664, 0.22652823200739047, 0.2291052963426572, 0.35983719954507287, 0.2137341993673907, 0.8687314927619799, 0.18583006491456755, 0.23598376404102328, 0.21703536972145487, 0.46807251927778637, 0.7090028078784075, 0.13450581289269248, 0.6539878524449092, 0.13484431766577676, 0.37245368627939046, 0.6463658234023879, 0.6924757531127734, 0.5563136250209878, 0.6214825026789341, 0.5556896764495518, 0.8006203506707983, 0.47475971113588133, 0.4519474925840363, 0.694657276827953, 0.6489064457905893, 0.7229768196230765, 0.6159994359340929, 0.056206519163510715, 9.999999999998899e-05, 0.06823983053766991, 0.0860940100256059, 0.05690897926960936, 0.04969298024450641, 0.051459027262251045, 0.050888698400526344, 9.999999999998899e-05, 0.12101304840452232, 0.08705739582713523, 0.2816099911972193, 0.11182921377911081, 0.32180593521660406, 0.08526587458161361, 0.15177790632725685, 0.2578591484567574, 0.09658673860895872, 0.05118683217667408, 0.035832164143121514, 0.10270233884998647, 0.14443266247153586, 0.19861758063206159, 0.22095583895893567, 0.09082240367588434, 0.29764177557171567, 0.0763891415286938, 0.32787506890006246, 0.3430778587657727, 0.09736492552321774, 0.32914082897691155, 0.04480482142868425, 0.2502785375832768, 0.2587498682009356, 0.11402219369316413, 0.3157521019349502, 0.5999758630750869, 0.5860135407774528, 0.6060220952902438, 0.6088131480866568, 0.6272904402448618, 0.6887540913658299, 0.7933712141099145, 0.6640294258054096, 0.6384633293526282, 0.1315049965704227, 0.06533276650077169, 0.08834287832553489, 0.09313709725644714, 0.06245373022927292, 0.10450912282932046, 0.10515505895361044, 0.1625511418757929, 0.07759611598842786, 0.23371998120723347, 0.28131458560304534, 0.18062251578207522, 0.18117449271602937, 0.2762622330077217, 0.28895321142979224, 0.22141947422070896, 0.18536310923717259, 0.17371740672216618, 0.29883995933809715, 0.4506688869142006, 0.25954327752398154, 0.20758201324647552, 0.27621033910760595, 0.2604448723271343, 0.23808166273226428, 0.5130535931205036, 0.27502595437875976, 0.296075702663367, 0.26060680355180166, 0.1491602385156039, 0.21465643139049007, 0.20941141163455657, 0.22414901144262855, 0.31917272770939675, 0.24588782454237912, 0.25564659875347695, 0.2108195815758157, 0.196751697657931, 0.2721451177412527, 0.23690467724439457, 0.1851920490934168, 0.2050996152213561, 0.181747558597126, 0.20486137231718982, 0.22161453161418043, 0.5462376024795985, 0.22284157827156537, 0.1919949698379354, 0.2509244469507681, 0.24456883188527756, 0.20004038641898003, 0.17629431183512156, 0.18118805952059613, 0.20306108368020326, 0.9200179536714187, 0.8494954087870902, 0.15367745747504835, 0.9255224055125884, 0.20133986490618672, 0.20068818145918055, 0.1777457280672755, 0.7829799976484236, 0.16364702779413332, 0.0829717214445509, 0.21010704361347787, 0.8710000797879835, 0.926266371146461, 0.20774118020601684, 0.2106518294796198, 0.872007476787807, 0.16416284050854335, 0.8369507593989589, 0.22105422190384327, 0.21803915507278193, 0.18756061465387175, 0.20290446206282076, 0.20684089457311816, 0.21545539355965082, 0.22035590138740535, 0.20915072289146186, 0.23193595982669324, 0.08803116179953452, 0.08099922625369471, 0.09251162206181252, 0.09663208173333282, 0.07267039722253066, 0.15009873001916607, 0.1058673648249513, 0.08968743566615689, 0.08189948285231474]}, "mutation_prompt": null}
