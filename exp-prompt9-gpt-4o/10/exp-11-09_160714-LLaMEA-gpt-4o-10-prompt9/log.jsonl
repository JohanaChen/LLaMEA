{"id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 0, "fitness": 0.30936216588212917, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "3cff148b-0a14-43cc-8b1f-34cdf5501117", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "d8c17bb1-ba60-46ed-8fdf-8f2ec2295bd1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "91bdd088-e0be-4ccd-89df-b54d5782e994", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "59f15982-4b0c-40d4-ab5a-409e8852ce16", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "c2a9ed23-26b5-4961-97e8-a7f844115db0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "84f86269-1b29-4062-ba8f-b89a8128fb47", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "527f2353-2f42-4e91-8208-149f2cae3197", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "f0322f45-308f-4c08-8738-bc1a10112b98", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "0f1d1348-e2dc-44f8-95a5-f2321ac5a551", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "04effb4c-8353-406d-a29b-bd8e4f590b57", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "56d6f497-c462-4d85-a057-75710230261c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "6bfaff7a-d8f4-4b28-95eb-629980a279fa", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "39bccb4d-d2ad-45ad-be12-d6471b00fb6a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "ea53198c-0a0d-443f-b7cb-3147533c00e1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "83c0c949-e397-4f03-957c-e5e4cca5d47e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "03f91398-b0d1-4416-91e3-99e6ea5d9001", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "f7498f50-69f5-4f0b-b6e2-914ff553ec4f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "84d33797-b714-4ee6-91cf-62785a6765be", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "d53fc351-9b41-45a7-a502-915d02a3d4e8", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "c0c41361-6742-4be1-b3d1-1f88760a9065", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "b43daa89-2014-49cd-bb90-98b65a61f0f1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "c81ffa1a-3dff-4b5c-8b37-ee1c434d0af6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "037b2205-a49f-47ca-992a-806238ef4d70", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "cd0cd9fb-34b7-4a40-9246-c0288531be8a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "98274331-fc40-4b96-9437-66e28e5a91af", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "b31e541d-0242-4ef7-a597-6a4abd488635", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "adfc1798-cb3c-4b0e-9ef7-1c43e57d98fa", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "958876ea-61e0-4ec6-be29-de10dfd665cc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "3d67acad-d48d-4cbf-b939-8606b0c386b9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "708c53bb-aded-4a19-afa7-105ba85907e7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "f60e575f-4f94-4dc8-ad94-75d60cf4e8d1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "4ef32fd5-1aa0-495b-a33c-79b010f575f3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "91fded5c-ecc9-4a65-ad74-c6336a92ebf2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "a78dc877-caad-42df-8437-2c0431ffa500", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "b685fc50-c3a8-49fe-af18-f0b662c7742a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "f65fb88f-d8f8-4629-822d-79645fba9844", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "fa9b823e-79c9-4983-9281-c5161ee2e096", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "a0360761-e0f8-4396-87ee-48a86a436d0c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "3dbee150-222f-4c8e-8348-d3725450c613", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "f597cf37-b6ed-4288-9c0f-5c87c9687b21", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "5d6b3904-e892-4a51-abbf-8f4576bf017b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "f2cdfd02-814c-44de-b462-af28b30c0d6b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "e23e2260-68cf-4fd0-b67b-8e7a55456335", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "eee51700-323e-4e2f-a06a-4e0bc61fe9ee", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "9d2b5722-64fe-4c4f-8e18-dfa7e58a45b6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "cc761399-c8d8-4143-8e27-9162f0bfbe3d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "e6d30335-bbdf-45cd-a6c7-1c3f24e35cf2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "eb10be7c-ba40-4bc5-b76f-8a09943e727c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "cb3fe1f8-7c47-4fd9-9d32-019adaa3dde0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population_size = max(4, int(10 * dim / 2))  # Dynamic population size\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Enhanced Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update and population resizing\n            self.F = 0.5 + (0.3 * np.random.rand())\n            # Resizing population dynamically based on performance\n            best_idx = np.argmin(self.fitness)\n            if self.used_budget < 0.5 * self.budget and i == best_idx:  # early success\n                self.population_size = min(int(1.5 * self.population_size), 2 * self.dim)\n                new_individuals = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size - len(self.population), self.dim))\n                self.population = np.vstack((self.population, new_individuals))\n                new_fitness = np.array([func(ind) for ind in new_individuals])\n                self.fitness = np.concatenate((self.fitness, new_fitness))\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Resizing and Enhanced Crossover for Improved Convergence Speed.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {}, "mutation_prompt": null}
{"id": "ebbf96eb-0611-41bb-85d8-93854e4a4b33", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "1ee93bac-699b-4196-b33c-e9223933b89e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "86144f4f-e37e-4c3a-9cdf-944f439710a6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "8fc94b64-bb07-4d40-9224-876462f53129", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "472e58f3-1612-4bc9-a0ae-d75eb0778d13", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "bf599b91-2ff4-4503-917f-4387c0ee23cc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "5521e5bc-cfea-4333-b21b-63a145529573", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "21b8361a-0133-4330-a810-41fca563d97d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "699726f0-59c7-4782-9245-d4cd1764db2a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "f8e237a6-08ce-48a9-8fce-f1248177e68e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "2c3923bc-dc00-462a-952a-9af554757a3c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.adaptive_population = True  # Adaptive population size\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            if self.adaptive_population:\n                self.population_size = max(4, int((self.budget - self.used_budget) / 2))  # Adaptive reduction\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c) + 0.1 * (np.mean(self.population, axis=0) - a), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Population Size and Enhanced Mutation for Improved Convergence Speed.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 4642 is out of bounds for axis 0 with size 50').", "error": "IndexError('index 4642 is out of bounds for axis 0 with size 50')", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {}, "mutation_prompt": null}
{"id": "857c52d2-aba5-4fc0-8361-5c9b39b3a013", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "115ab543-dda3-40da-9f0a-93a4de80d869", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "1b2b9d56-c89c-4500-a8a4-fac8b5e63bf4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "35d2d83b-2a6a-46cc-a46d-10eb85a7b0b0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9  # Initial crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Adaptive Crossover\n                self.CR = 0.5 + (0.3 * np.random.rand())  # Adaptive CR\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Tournament Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i] or (np.random.rand() < 0.1 and f_trial < np.median(self.fitness)):\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Incorporates adaptive crossover probability and tournament selection to enhance convergence speed in Differential Evolution.", "configspace": "", "generation": 64, "fitness": 0.23733769540423375, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.7076959101864454, 0.6828273785218573, 0.7077755675928192, 0.7148563607206706, 0.6955875550444482, 0.7081888824219027, 0.7203382238429804, 0.7111292582912372, 0.6857255744112762, 0.4542458268276929, 0.4444515718010109, 0.46494187642890916, 0.4744820244078708, 0.4451789404978884, 0.46116499259673016, 0.4707409416287601, 0.4767964554558054, 0.4800975727348924, 0.13893047692897031, 0.1743595460658688, 0.1686233900932399, 0.12705814767712742, 0.13976701163569383, 0.13786836336764718, 0.12744614244700847, 0.14207839795523247, 0.14050660368775192, 0.12555130805060233, 0.11203356938786369, 0.12036004920774268, 0.1166643736834212, 0.11399310313007682, 0.11213511831011946, 0.11912992434658753, 0.15686180826528584, 0.13397610415327488, 0.9541597068955164, 0.963178840193146, 0.9319910275978398, 0.9521365698680142, 0.9508458117901273, 0.9485971089161762, 0.945457961632504, 0.9710264571006982, 0.9593477600962639, 0.2762861443404727, 0.2523580670081621, 0.2756237947780874, 0.2322960023835744, 0.27433592600966183, 0.26102604706932897, 0.2633280920948602, 0.25069519283494934, 0.28709090773437196, 0.2724850347614731, 0.26614320967002536, 0.2306347555404965, 0.27071906272041213, 0.28428329850476364, 0.3367870439480718, 0.27006625346555124, 0.3122719372464119, 0.2858566399743978, 0.17171895468828935, 0.16165153488695727, 0.14924834291060907, 0.18126339765409316, 0.15312877199333597, 0.15884933890061803, 0.17027092574805724, 0.16396522174752393, 0.13810788880772196, 0.10545900389706198, 0.14663427243036076, 0.12129162960053397, 0.1589597793416584, 0.13179905696412442, 0.1518275403088314, 0.167659022160066, 0.13066068156294386, 0.15174338762470307, 0.002922827455292265, 0.006403937066819743, 9.999999999998899e-05, 0.015951421745790895, 0.01035402266849339, 0.0024750798136116137, 0.013027862374071497, 0.005256020006077611, 9.999999999998899e-05, 0.0944117308100233, 0.10444086921052587, 0.08059205199657682, 0.06893963777323009, 0.0585450932907472, 0.07526515877659912, 0.13144117253580911, 0.12172952801434389, 0.13473357103201256, 0.003976298916590015, 0.00031507363396598986, 0.0059231859029102996, 9.999999999998899e-05, 0.007560103248685612, 0.0005626612425250199, 0.001500387465615538, 0.007655585180359803, 9.999999999998899e-05, 0.09706961848852858, 0.10901165505725163, 0.08741327198440052, 0.10288430337274912, 0.11667564798989738, 0.10441525029351417, 0.09658386436469113, 0.09917080835533143, 0.09929958528158278, 0.4343445142029937, 0.480419872173255, 0.44837574507764744, 0.4633605903772564, 0.4459331332825375, 0.45261716109031824, 0.45596699154195297, 0.4263889531165238, 0.44340288976738285, 0.08645654093751454, 0.08712328492782695, 0.09834204854647632, 0.10167323014718455, 0.09425619878654923, 0.09510862349277105, 0.09109367851001882, 0.0844708237150531, 0.09419804418350997, 0.13742010985234576, 0.16913834765649793, 0.12990299681788853, 0.1370096870562436, 0.13629935819005456, 0.14746327713731533, 0.16126535465550407, 0.1377794535976984, 0.14659480925881085, 0.26620938562164376, 0.24685365622731992, 0.2570022490398427, 0.2582790994145532, 0.2670985508611663, 0.2527296796723988, 0.29609988020255984, 0.29117024549951276, 0.2924931658243477, 0.1853384469446927, 0.20615672912828387, 0.20575303013630886, 0.1705829106159319, 0.19442191590560876, 0.1584966953461513, 0.20009720918446394, 0.22256876230129785, 0.2040470820052731, 0.19756408304326134, 0.20897745459052153, 0.19195097277452755, 0.1791217451326078, 0.18490303146041465, 0.17208940510933168, 0.17443335370390722, 0.18809259096323327, 0.1889815008177287, 0.18411482490426567, 0.1859009561742747, 0.18503974370486087, 0.18622320317197105, 0.18623421707887744, 0.18675646078141606, 0.22307094478234524, 0.18872297343591793, 0.18957495809558955, 0.16355630134975652, 0.1498098352351137, 0.30756899016382555, 0.3484932899937737, 0.30138381937843506, 0.21325707412854655, 0.25913606811721135, 0.15554726434299482, 0.1610652211685738, 0.2289615687905323, 0.25619066472982055, 0.22436049948957215, 0.20767246745097367, 0.21537141860955245, 0.1566994718718695, 0.20407693551856787, 0.3356912714972281, 0.28016382667008066, 0.1788260423441056, 0.17719644420125336, 0.19955529246294623, 0.19433799053990097, 0.17837849600273403, 0.17481538401469043, 0.20088213187638204, 0.1918412036746726, 0.19349134593885264, 0.0734371421208252, 0.07832631304942428, 0.06606915157052917, 0.07125005422633512, 0.07890214637393222, 0.07938452019705944, 0.076708357851204, 0.07358204243527922, 0.07165228561421588]}, "mutation_prompt": null}
{"id": "02aa3ff3-61e1-4abe-a5fa-f6ca20c4dfae", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "08bd7432-7b34-496f-a374-2ae40ae4fc0e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "b633a16e-4fe8-41bc-850a-6ff5afba634f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "3db4515f-3962-4534-bce8-5af14b51c460", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "3f9ecaa0-1600-4f61-9be4-28c9e6816c80", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "2064f8fd-f2a6-4317-8183-b698fbff00cd", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "ccc385f7-0c1d-40af-a1bd-5b02157aa2af", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "b341d235-8cba-4e1a-bbaa-b7ee86f3590c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "6f829098-5e2d-43a0-a4a9-f1eeb20e7fd8", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "41295f1a-342d-4d91-9442-b0b591cb11b7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "ddb2612c-df74-4953-ba97-bd0b157f1a26", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "b879493a-50c4-4526-ae46-b4d947674aff", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.initial_population_size, dim))\n        self.fitness = np.full(self.initial_population_size, np.inf)\n        self.used_budget = 0\n        self.population_size = self.initial_population_size\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.5 + (0.3 * np.random.rand())  # Adaptive reduction\n            self.CR = 0.9 - (0.1 * np.random.rand())  # Adaptive crossover\n\n            # Dynamic population resizing\n            if self.used_budget < self.budget / 2 and self.population_size > dim:\n                self.population_size = max(dim, int(self.population_size * 0.9))\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Population Resizing and Self-Adaptive Parameters.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'dim' is not defined\").", "error": "NameError(\"name 'dim' is not defined\")", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {}, "mutation_prompt": null}
{"id": "4081acaa-da38-46ca-be88-2049600ab2e6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim  # Common heuristic for population size\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5  # Initial mutation factor\n        self.CR = 0.9  # Crossover probability\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        # Evaluate initial population\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                # Mutation\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Selection\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                \n                if self.used_budget >= self.budget:\n                    break\n\n            # Adaptive mutation factor update\n            self.F = 0.5 + (0.5 * np.random.rand())\n\n        # Return the best found solution\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n# The class AdaptiveDifferentialEvolution can be instantiated and used to optimize a given black-box function.", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation Strategy for Efficient Exploration and Exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.683313703415177, 0.6865604893875918, 0.6954331318029772, 0.7032122506701561, 0.7121493684908043, 0.7208298804321698, 0.7211944616692691, 0.6994973328872087, 0.7261824191131874, 0.4258047135247235, 0.4976647858214811, 0.5224427541214058, 0.4589665287713818, 0.4932717951603476, 0.5056212187623406, 0.46096477603488994, 0.5177550065338814, 0.49823441076902897, 0.11155313802915134, 0.11045923674088676, 0.1079686103895523, 0.11420927095885058, 0.12387651221229845, 0.11095520361181366, 0.1272577401219398, 0.09738136274243281, 0.11362512651124235, 0.09554698699146136, 0.10701047044848822, 0.09020185296438499, 0.09398208109896444, 0.09214727837801473, 0.08770641978011995, 0.09334746602854704, 0.09816120574808684, 0.09976017506279111, 0.9141886375240695, 0.9436026910062077, 0.9396424050440377, 0.9408517362955543, 0.9516515643168171, 0.9454134477616439, 0.9573926614561247, 0.9122323549869525, 0.9345859413107254, 0.3013639473525642, 0.32057428932077225, 0.3464763641301223, 0.3367662180339699, 0.32416333580807255, 0.3341039675749421, 0.3501892499117798, 0.3481960752081106, 0.3444976701201563, 0.5663575245185082, 0.622780483288675, 0.5400976376974687, 0.612217701443576, 0.6578451440182806, 0.6495756342924789, 0.5946486075533683, 0.6912219557908983, 0.6230898049570441, 0.2197853424612658, 0.2291660998980336, 0.24439887318555398, 0.24565563117915512, 0.2615955801667996, 0.28783813351282084, 0.2817133832184662, 0.24627455993967562, 0.2462654465610099, 0.25007876980881627, 0.11142360826400732, 0.2622617920979282, 0.2754355454965708, 0.226869861500408, 0.27421385090360106, 0.271644877401348, 0.2520333968617866, 0.22396278766956823, 0.190562934930689, 0.18805414876634607, 0.20368006997327237, 0.16651689894044974, 0.20961151553380153, 0.18309165197913102, 0.18478998954768466, 0.1814905034326364, 0.23228576493300968, 0.3501372847032962, 0.27656401962364463, 0.32797851539765144, 0.28612956700993286, 0.3576365921164266, 0.3638734289358001, 0.33214201123564824, 0.39305955665632186, 0.35230587933676116, 0.04438900037232829, 0.0634243757486791, 0.04669414148811302, 0.031871036202618774, 0.09753017373830519, 0.07002131858556038, 0.07732837535537496, 0.06810707901752722, 0.09853990092060538, 0.16941611963323122, 0.19865335788872807, 0.19509979362021979, 0.20137458345452486, 0.19303163070431406, 0.22346888002856524, 0.19477494781224503, 0.2095244514058182, 0.17707952973561913, 0.5439202665266605, 0.5597251075537735, 0.5398870885847084, 0.5278139027267259, 0.5438567222884036, 0.56691952652581, 0.5430554016761294, 0.5487695990253295, 0.5872710913128737, 0.08593047281656041, 0.0966444867781352, 0.08083079785899949, 0.08705436668311684, 0.09206475656802648, 0.10185711979246548, 0.10307569729496446, 0.0942443465563707, 0.08838879493384588, 0.1640715813116782, 0.14779081851749887, 0.1639573006065086, 0.1737375321910447, 0.147256560252087, 0.15714530397476467, 0.15443622099985255, 0.19382128776084773, 0.15978951159260302, 0.30213441776429584, 0.32979122296611063, 0.30878257215878424, 0.31706199099345145, 0.30613910235839104, 0.3108481770499504, 0.3167706250470854, 0.3285841458524291, 0.34203492516640555, 0.2229613006489689, 0.23281264815860714, 0.22582493457987352, 0.21669143216209963, 0.20687035476669513, 0.2118637909916703, 0.243017340774488, 0.23214048491138373, 0.23859790822200433, 0.19074317807143404, 0.18724014723417726, 0.17271903846159653, 0.18867028106525174, 0.18376160546766018, 0.1742931386611153, 0.20531228627651643, 0.19361006492590938, 0.2031566866047727, 0.17177851439396274, 0.18064515067858933, 0.17823769129389944, 0.17454352123541872, 0.17680941864613775, 0.18296010788562567, 0.1779183149655419, 0.19798065991287306, 0.1761907574266135, 0.6125219398685544, 0.17453729534706686, 0.667450323136711, 0.5155552915773816, 0.6548598106720671, 0.3679379053687477, 0.5771544049852881, 0.3108773883119569, 0.6606878293894884, 0.5536751930925684, 0.1969829732924192, 0.5917569815667021, 0.5424726193412253, 0.19817698450681953, 0.6020209371024534, 0.2041999718745553, 0.20340513337764576, 0.2092588667693822, 0.18273980855036853, 0.18928547567397558, 0.1725065686082613, 0.1971589067235755, 0.17272148897362327, 0.18952546080545463, 0.18035896930172657, 0.18985746408662751, 0.19936205982540878, 0.07101221489335807, 0.07632887987540038, 0.06993901732843988, 0.08350199784973733, 0.06582487748186738, 0.07641993712114814, 0.09533166363789713, 0.0710671496091072, 0.07410765532164187]}, "mutation_prompt": null}
{"id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 78, "fitness": 0.34787167071351516, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "1ba9d510-05df-4b95-b900-3a9cb4829f84", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "f50c6597-131e-4dbc-90a8-975276cb1c9e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n        self.initial_diversity_factor = 0.1\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                F_adaptive = self.F + self.initial_diversity_factor * np.random.uniform(-1, 1)\n                mutant = np.clip(a + F_adaptive * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Scaling Factor and Initial Population Diversity Enhancement.", "configspace": "", "generation": 79, "fitness": 0.3474005506110191, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7668020535192055, 0.7451877609789606, 0.7664524544873241, 0.7677718448813666, 0.7551274880402052, 0.7662822558452357, 0.7524783522438183, 0.75151537611165, 0.7588958591884865, 0.5959477047146702, 0.6006069679945445, 0.5769587859619487, 0.5713297359332927, 0.5903523540942428, 0.5839656261086763, 0.5882319555624014, 0.585007057306421, 0.5893255029997667, 0.12426272010644024, 0.11414641458040475, 0.14271213749039557, 0.1487262302714929, 0.12179947602793817, 0.12347343977351066, 0.11446834665030015, 0.12816144544640062, 0.11071530228952375, 0.11690889651239522, 0.18048760220396165, 0.10517061247125092, 0.11800347353035157, 0.10588708554330784, 0.11772887125954368, 0.10968070433484423, 0.12496288887076334, 0.12139468813532361, 0.916661664457317, 0.9656471738594739, 0.9511165603459443, 0.9603804563022408, 0.9599759288627339, 0.9349519668901582, 0.9770514821775222, 0.9403721059417861, 0.9468721281554723, 0.43848834149944715, 0.4129480524753876, 0.4157961859136411, 0.4366684267650429, 0.3942295898089736, 0.4352010970751462, 0.3981755705687108, 0.3999174274838381, 0.42587056631499165, 0.7076011130980426, 0.7652397936162645, 0.7024020724478892, 0.6909286787534876, 0.7057720101926797, 0.7479355155004901, 0.7273851683022627, 0.7647342282467793, 0.7301447418300508, 0.2515580755995416, 0.15889879989774103, 0.25112040462869634, 0.2521418807849324, 0.2187248892577689, 0.1725687309341405, 0.17029120810957665, 0.2844443670832486, 0.20102480305367632, 0.20745557604443, 0.12245218468213803, 0.24288300695667497, 0.2197516119067262, 0.18372675325362575, 0.21121631749002356, 0.19312869118399312, 0.21934395327380285, 0.1915885561982379, 0.23739057501990424, 0.2479983956651567, 0.19021896127643556, 0.265851096041663, 0.24902345666419046, 0.23414819757084449, 0.29312766804910284, 0.26229162588041177, 0.2719504536506464, 0.3931865481437743, 0.4332248406418001, 0.41680061107727684, 0.3493025451772963, 0.36368030157000564, 0.4285764218686873, 0.38506423375672605, 0.4050993048812229, 0.40610811346296827, 0.09381989389851675, 0.15269055228821327, 0.08963966889332564, 0.13926638436945193, 0.14634669173439818, 0.10381078965584312, 0.08110677675666722, 0.09801591009059285, 0.12067491057269109, 0.22578529458027785, 0.22093795044256537, 0.21184517101846467, 0.2586277685766968, 0.2835176586589432, 0.24542686996425656, 0.22214023960278662, 0.2374929522587238, 0.21978666650051903, 0.6392827146766626, 0.6233734816863293, 0.619837823753583, 0.6237926891999964, 0.6024608582514128, 0.5961235123289449, 0.6400471278063304, 0.6356183230657428, 0.6343747537521561, 0.09187305120727163, 0.11757857824283713, 0.08845883348502503, 0.10062356632740488, 0.10987092824887146, 0.09668603779150031, 0.08357096927961827, 0.1084408058365609, 0.10648224361178815, 0.2401788221132366, 0.1374817630524121, 0.14569465238427326, 0.13263200846797207, 0.13823728242246902, 0.26847783049415497, 0.24786583049387878, 0.15907732422642262, 0.14842798791249423, 0.3691816526350373, 0.3826119439720307, 0.412743482496682, 0.3783685035831249, 0.3860312565344499, 0.4000606309739668, 0.4174099871833509, 0.4196127996885588, 0.41107984852097224, 0.2873471219944126, 0.28629784819315407, 0.30445028986269895, 0.29715311493884167, 0.3149058490041593, 0.32359672083567115, 0.32994988179690954, 0.32500505875029095, 0.31512266978222203, 0.19052743086325996, 0.20363126577521584, 0.19619016333404793, 0.2050670249592651, 0.2090612996796517, 0.19058040936275733, 0.21396832487238204, 0.20055592271749534, 0.22449003244697485, 0.2017759724301058, 0.22001770269093535, 0.27911153770745056, 0.22682489551934282, 0.2042868877744911, 0.21867281909849545, 0.3391115071516846, 0.20790176666416715, 0.2034494515031855, 0.17844318163635564, 0.7434971315469898, 0.6751354923833807, 0.1888178691545892, 0.7009466349556055, 0.7215519445067242, 0.6774071834473725, 0.6329999386175211, 0.7109972344347448, 0.16433211129595549, 0.5488309053232219, 0.7126617509685991, 0.1932070216468076, 0.19880023793983814, 0.6509619351444552, 0.15081139695962198, 0.20147213882367065, 0.2083389978066824, 0.1918283407550393, 0.16951456339636228, 0.19431919300631562, 0.1800066770511881, 0.17560150998647528, 0.18275973703733184, 0.19966200931178713, 0.19642312369109904, 0.1922852401657612, 0.08309945897363613, 0.08065820987762196, 0.08208304176747083, 0.08775539124565368, 0.08273502679362299, 0.07784576528261755, 0.08186244775012819, 0.08229344735588695, 0.07615693756702224]}, "mutation_prompt": null}
{"id": "e6792055-d6ac-4042-9026-405e84e8a423", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "c21d758d-5c51-4113-b010-407398e910da", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "1b321e73-0dd4-45d3-94c1-91db871253e3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "43918c3e-a2d1-4171-be68-79690e33abec", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "98c6bbf0-4ed6-4aad-bdf9-a1585e056e8b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "e3045b97-87c6-4749-8c57-8772357e19dc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "17e1acf2-3844-4ed4-95fa-5c4c90a02527", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "c4d3740c-6b03-484a-9abb-5cdd9e0a6752", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "6884e239-28e6-4a84-bc29-33cad6790485", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "73a4372a-c365-4847-9f57-e9849dfdbcaf", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "20c437f4-30d3-4e53-9253-474211127d3e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "a556f39a-bece-499a-9b60-7b3e3c409736", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "8d65b62a-114e-4103-9569-d3c90a590adf", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "615f0244-07ac-4a48-b7c3-e94cfa6c807d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "3fbc3536-7511-4499-a1f9-fb5de205046d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "1f377c5d-693b-474a-9b06-b3c681257631", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "00804abd-a81c-4418-85ed-77a19730c1f5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "e4641241-5555-4621-96d0-90c024fa46dc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "f62440eb-3c41-4635-9c54-a08ee2632111", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
{"id": "80d219fb-6df6-4ce6-a085-8458a88c4239", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.bounds = (-5.0, 5.0)\n        self.F = 0.5\n        self.CR = 0.9\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.successful_mutations = 0\n\n    def __call__(self, func):\n        for i in range(self.population_size):\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1\n            if self.used_budget >= self.budget:\n                break\n\n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.bounds[0], self.bounds[1])\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                f_trial = func(trial)\n                self.used_budget += 1\n                if f_trial < self.fitness[i]:\n                    self.fitness[i] = f_trial\n                    self.population[i] = trial\n                    self.successful_mutations += 1\n\n                if self.used_budget >= self.budget:\n                    break\n\n            self.F = 0.4 + 0.6 * (self.successful_mutations / max(1, self.population_size))\n            self.CR = 0.9 - 0.5 * (self.successful_mutations / max(1, self.population_size))\n            self.successful_mutations = 0\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Crossover and Mutation Factors using Historical Success Rates.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f0e097de-d04d-45d6-8efc-06ea649cf83b", "metadata": {"aucs": [0.7633921569089493, 0.7560793231142685, 0.7721800708997224, 0.7720423324924892, 0.7515893345768461, 0.7723274433872492, 0.7725864373092987, 0.7541842393466271, 0.7604043617642554, 0.5785957983965333, 0.5690275617070162, 0.5935704070738624, 0.5847020664989844, 0.5866534236263581, 0.5869879086737372, 0.604872773558943, 0.6042458562696584, 0.5901493520669336, 0.11769835937198825, 0.12334658072986882, 0.11130094953163228, 0.10635536048363814, 0.10119848527235098, 0.12189540893606099, 0.11746254745471274, 0.12495259126675462, 0.11526207022504664, 0.11595696633759622, 0.11301888555949213, 0.11866899227608396, 0.11376305783884821, 0.10923260647506572, 0.10348931795133454, 0.1090376784400241, 0.11017768894130253, 0.1161514059414318, 0.9604865615745644, 0.962547405128932, 0.9440135894570508, 0.9447977173839897, 0.9698566395176048, 0.9357754389891586, 0.9667445226948672, 0.9511904749206348, 0.9676905301475807, 0.4252910684818927, 0.4295204094754076, 0.4395446057611295, 0.4021645960155362, 0.43076597222869506, 0.3924157282744042, 0.4102529782761465, 0.41763550601973687, 0.45107826302687315, 0.740691929720774, 0.7050265474661369, 0.7340167723953892, 0.7474432444172238, 0.6989413497151824, 0.7636442163313105, 0.7129049629961403, 0.7092245048983492, 0.7402630019516463, 0.2750910285195497, 0.17349515481482158, 0.20562674281632642, 0.21502130929908203, 0.14879039694650165, 0.2134633952556766, 0.22770157874622277, 0.1847611431444286, 0.17861708996108794, 0.2123892603578753, 0.17296641720027361, 0.19460979603060213, 0.1896811415330748, 0.19820655035962276, 0.26877894262455493, 0.257095830024602, 0.190244072377742, 0.19557835497411058, 0.2862485847279156, 0.2780755342248564, 0.24354878534076363, 0.2458235108444805, 0.2561255930509778, 0.2704378413620603, 0.2532873818850172, 0.2813036987469949, 0.2751773543049125, 0.3823406050346023, 0.4142078316597674, 0.43406466072216177, 0.41980364141916193, 0.4102538064698842, 0.43382877824084687, 0.4188764723781867, 0.47532830167222295, 0.41954808579694136, 0.08175999338465412, 0.128008500313177, 0.08686281920433048, 0.15862866854597357, 0.11594035274432046, 0.16533029351260065, 0.14983113424839378, 0.1328467713140582, 0.10231398127736868, 0.23464968913429207, 0.2093877825860878, 0.21628440086116296, 0.2503833381721392, 0.25646959872472785, 0.2499589786993438, 0.23357646144796618, 0.23934682941731644, 0.2381287963189067, 0.604104505568382, 0.5937670414428623, 0.6238752378276503, 0.6306822225458626, 0.6195166336015063, 0.621094227633787, 0.6496002466905375, 0.6156908635829204, 0.6210784836989793, 0.09410090477296129, 0.1108560220802779, 0.10553740092461417, 0.10381837329687116, 0.11299875464144482, 0.10209650652455149, 0.09560518182317135, 0.15926517690416875, 0.09564703137847996, 0.15288600426097365, 0.1526991090546157, 0.16495620952688972, 0.16881814405201911, 0.20425228034680787, 0.1454329645911988, 0.19211017579385248, 0.17387011415726683, 0.13572547884145747, 0.3732487826060613, 0.3943140088004172, 0.4012462117343837, 0.3671509208439062, 0.3801111135286859, 0.4166401771583945, 0.40906202434281136, 0.43330196482651695, 0.3976682730088028, 0.32057745356646694, 0.2876707403163419, 0.28332595865300214, 0.29341514550849457, 0.29043109803891076, 0.294547793508689, 0.31038018850196947, 0.3169381002832321, 0.3148365972972338, 0.1990355556561535, 0.20484460807183902, 0.19841979069637072, 0.2082916146678323, 0.19097960102072253, 0.1967642376625246, 0.196021606998098, 0.24558408333411175, 0.19979594918698995, 0.22389659261469763, 0.18481385334849776, 0.24516419277680856, 0.21985088061166236, 0.1935394867692244, 0.22368884966754854, 0.19820423705268286, 0.18869420108106671, 0.2102868322101883, 0.16961743858212852, 0.6621793017612446, 0.6780231511928537, 0.7316565832516976, 0.522983941660595, 0.6630669687884606, 0.6057460870551918, 0.5728014888595918, 0.7449047242377465, 0.43526877985870693, 0.2023021026030386, 0.3595559032715867, 0.5192706163108122, 0.20387588050087324, 0.6490013104448584, 0.20789385825534468, 0.2014767713698602, 0.20674983914893275, 0.17966415214377907, 0.17956216369323208, 0.18983804300418905, 0.17274440164096672, 0.17996859963874723, 0.18328815557651024, 0.1745854524371223, 0.19191676000039404, 0.2018490279654579, 0.09323984031160149, 0.08533308488845581, 0.08229234244725392, 0.08438253497211079, 0.0826512644586832, 0.08548561223421203, 0.08744194215795709, 0.07740177685481864, 0.0828375502787636]}, "mutation_prompt": null}
