{"id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "\"Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control\" - A novel hybrid metaheuristic algorithm combining the strengths of differential evolution, levy flights, and self-adaptive parameter control to efficiently explore the search space and adapt to the problem characteristics.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/gpfs/scratch1/shared/hyin/LLaMEA/llamea/llamea.py\", line 180, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/gpfs/scratch1/shared/hyin/LLaMEA/llamea/llamea.py\", line 257, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"/gpfs/scratch1/shared/hyin/LLaMEA/mutation_exp.py\", line 44, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 55, in __call__\n  File \"<string>\", line 51, in optimize\nTypeError: 'bool' object is not callable\n.", "error": "TypeError(\"'bool' object is not callable\")Traceback (most recent call last):\n  File \"/gpfs/scratch1/shared/hyin/LLaMEA/llamea/llamea.py\", line 180, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/gpfs/scratch1/shared/hyin/LLaMEA/llamea/llamea.py\", line 257, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"/gpfs/scratch1/shared/hyin/LLaMEA/mutation_exp.py\", line 44, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 55, in __call__\n  File \"<string>\", line 51, in optimize\nTypeError: 'bool' object is not callable\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "12579235-028f-48dc-97ab-f7643988eb35", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control and random.random() < 0.16:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Probability-Based Strategy Refinement", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "6979bc18-734f-4667-8b81-a17f20fd0cc9", "solution": "import numpy as np\nimport random\n\nclass HybridADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.selected_solution = ADMDF(budget, dim)\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def selected_solution_mutation(self, x):\n        if random.random() < self.selected_solution.mutation_probability:\n            return self.selected_solution.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def hybridize(self, x):\n        x_hybrid = self.mutation(x)\n        x_selected = self.selected_solution_mutation(x)\n        return (x_hybrid + x_selected) / 2\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.hybridize(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "HybridADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, combined with a novel hybridization of the selected solution to efficiently explore the search space and adapt to the problem characteristics.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "96245e17-ae8b-4cc8-826a-abf97bf44071", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_map = np.random.uniform(0, 1, (self.population_size, self.dim))\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def probability_map_crossover(self, x1, x2):\n        x_new = np.zeros(self.dim)\n        for i in range(self.dim):\n            if self.probability_map[i, np.argmin(x1)] > random.random():\n                x_new[i] = x1[i]\n            else:\n                x_new[i] = x2[i]\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x1 = population[i]\n                x2 = np.random.uniform(-5.0, 5.0, self.dim)\n                x_new = self.probability_map_crossover(x1, x2)\n                x_new = self.mutation(x_new)\n                if func(x_new) < func(x1):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "A novel hybrid metaheuristic algorithm combining the strengths of differential evolution, levy flights, and self-adaptive parameter control with a novel crossover strategy using a probability map to efficiently explore the search space and adapt to the problem characteristics.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "5c78cfd9-dcfb-4150-bc76-b6bf10064d82", "solution": "import numpy as np\nimport random\n\nclass ADMDF_MDLF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.directions = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.direction_probabilities = np.random.uniform(0.0, 1.0, self.population_size)\n\n    def levy_flight(self, x, direction):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * direction\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x, direction):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x, direction)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_direction_probabilities(self):\n        self.direction_probabilities = np.exp(self.directions / np.sum(self.directions, axis=1, keepdims=True))\n\n    def select_direction(self):\n        return np.random.choice(self.population_size, p=self.direction_probabilities)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            directions = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                direction_probability = np.random.uniform(0.0, 1.0)\n                if direction_probability < 0.5:\n                    direction_index = self.select_direction()\n                    direction = directions[direction_index]\n                else:\n                    direction = np.random.uniform(-5.0, 5.0, self.dim)\n                x_new = self.mutation(population[i], direction)\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n                    directions[i] = direction\n            self.update_direction_probabilities()\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_MDLF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, combined with a novel Multi-Directional Levy Flights (MDLF) strategy that adaptively selects the most promising directions for exploration.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities do not sum to 1').", "error": "ValueError('probabilities do not sum to 1')", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "bf284aae-8fb4-4109-b480-0166eb1b6132", "solution": "import numpy as np\nimport random\n\nclass AdaptiveMultiDirectionalDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.adaptive_crossover_probability = 0.5\n        self.adaptive_mutation_probability = 0.5\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def adaptive_crossover(self, x1, x2):\n        if random.random() < self.adaptive_crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def adaptive_mutation(self, x):\n        if random.random() < self.adaptive_mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.adaptive_mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            self.adaptive_crossover_probability = np.random.uniform(0.5, 1.0)\n            self.adaptive_mutation_probability = np.random.uniform(0.5, 1.0)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "AdaptiveMultiDirectionalDifferentialEvolution", "description": "A novel hybrid metaheuristic algorithm combining the strengths of differential evolution, levy flights, and self-adaptive parameter control to efficiently explore the search space and adapt to the problem characteristics, while also incorporating a novel strategy of using a probabilistic adaptive crossover and mutation probability control.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "5658b5d2-0492-450f-b724-ac28574139ed", "solution": "import numpy as np\nimport random\n\nclass ImprovedADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2 + np.random.uniform(-1.0, 1.0, self.dim) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.crossover(population[i], self.mutation(population[i]))\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ImprovedADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Improved Crossover and Mutation Strategies.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "c08216ac-b004-49cb-84fb-59232f477bbd", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.least_improved_individual = np.random.uniform(-5.0, 5.0, dim)\n        self.least_improved_individual_value = func(self.least_improved_individual)\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            least_improved_individual_value = np.min([func(x) for x in population])\n            if least_improved_individual_value > self.least_improved_individual_value:\n                self.least_improved_individual = np.min(population, axis=0)\n                self.least_improved_individual_value = least_improved_individual_value\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control (ADMDF) with improved mutation strategy.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "5e484326-fb09-4dae-bc3c-9c5c3fd8680e", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def adaptive_mutation(self, x):\n        if random.random() < self.mutation_probability:\n            if random.random() < self.levy_flight_probability:\n                return self.levy_flight(x)\n            else:\n                return x + np.random.uniform(-1.0, 1.0, self.dim)\n        else:\n            return x\n\n    def adaptive_crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            if random.random() < 0.5:\n                return (x1 + x2) / 2\n            else:\n                return x1\n        else:\n            return x1\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.adaptive_mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Novel Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Probability-Based Adaptive Mutation and Crossover.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "b87f0136-2710-4c5c-8004-0ec98ad42641", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                x_new = self.mutation(self.population[i])\n                if func(x_new) < func(self.population[i]):\n                    self.population[i] = x_new\n            self.x_best = np.min(self.population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "\"Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Population-based Crossover and Mutation\" - A novel hybrid metaheuristic algorithm combining the strengths of differential evolution, levy flights, and self-adaptive parameter control to efficiently explore the search space and adapt to the problem characteristics, with population-based crossover and mutation strategies.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "532df6a5-c1f5-43e8-b2a7-85d25022d13e", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.directions = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            if random.random() < self.levy_flight_probability:\n                return self.levy_flight(x)\n            else:\n                return x + self.directions[np.random.randint(0, self.population_size)] * np.random.uniform(0.1, 1.0)\n        else:\n            return x\n\n    def update_directions(self):\n        self.directions = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            self.update_directions()\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n            if random.random() < 0.1:\n                self.update_directions()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Directional Mutation and Probability-Based Parameter Control.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "ed001102-38d7-4781-bbfe-f187870fd056", "solution": "import numpy as np\nimport random\n\nclass HybridADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.crossover_probability = 0.9\n        self.mutation_step_size = 1.0\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            if random.random() < self.levy_flight_probability:\n                return self.levy_flight(x)\n            else:\n                return x + self.sigma * np.random.uniform(-1.0, 1.0, self.dim)\n        else:\n            return x\n\n    def adapt_crossover_probability(self):\n        if self.f_best < 1e-3:\n            self.crossover_probability = 0.7\n        elif self.f_best < 1e-2:\n            self.crossover_probability = 0.8\n        else:\n            self.crossover_probability = 0.9\n\n    def adapt_mutation_step_size(self):\n        if self.f_best < 1e-3:\n            self.mutation_step_size = 0.5\n        elif self.f_best < 1e-2:\n            self.mutation_step_size = 1.0\n        else:\n            self.mutation_step_size = 1.5\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            self.adapt_crossover_probability()\n            self.adapt_mutation_step_size()\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "HybridADMDF", "description": "A novel hybrid metaheuristic algorithm combining the strengths of differential evolution, levy flights, and self-adaptive parameter control to efficiently explore the search space and adapt to the problem characteristics with a focus on adaptively adjusting the mutation step size and the crossover probability.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "ac4089e4-c4b7-4ff8-85aa-87d134112dfc", "solution": "import numpy as np\nimport random\n\nclass ADMDF13:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def multi_directional_mutation(self, x):\n        directions = np.random.uniform(-1.0, 1.0, (self.dim, self.population_size))\n        mutated_x = x + np.sum(directions * np.random.uniform(0.1, 1.0, self.dim), axis=1)\n        return mutated_x\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                mutated_x = self.multi_directional_mutation(x_new)\n                if func(mutated_x) < func(population[i]):\n                    population[i] = mutated_x\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF13", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Multi-Directional Mutation (13th probability change)", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (5,100) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (5,100) (5,) ')", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "7ddf6a5f-bf5b-4ba0-b06b-aa66aa675bf4", "solution": "import numpy as np\nimport random\n\nclass HybridADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability = 0.5  # new parameter to control the adaptation\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            if random.random() < self.probability:\n                return self.levy_flight(x)\n            else:\n                return x + np.random.uniform(-1.0, 1.0, self.dim)\n        else:\n            return x\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control and random.random() < 0.1:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "HybridADMDF", "description": "A novel hybrid metaheuristic algorithm combining the strengths of differential evolution, levy flights, and self-adaptive parameter control with a probabilistic approach to adapt to the problem characteristics.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "07f0ceec-9aed-4ad8-a74a-339106fa9284", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def additional_levy_flight_mutation(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (np.random.uniform(-5.0, 5.0, self.dim) - x)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            for i in range(self.population_size):\n                x_new = self.additional_levy_flight_mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Probability of Mutation and Crossover, and an additional Levy Flight Mutation Strategy with a Variable Step Size.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "ff661645-e3f6-43c6-94d2-9a120ef649fc", "solution": "import numpy as np\nimport random\n\nclass AMLFS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.x_worst = np.random.uniform(-5.0, 5.0, dim)\n        self.f_worst = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n                    if func(x_new) < self.f_worst:\n                        self.x_worst = x_new\n                        self.f_worst = func(x_new)\n                if func(population[i]) > self.f_worst:\n                    population[i] = self.x_worst\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "AMLFS", "description": "Novel \"Adaptive Multi-Directional Levy Flights with Self-Adaptive Crossover and Mutation\" (AMLFS) algorithm that combines the strengths of Levy flights, self-adaptive crossover and mutation, and adaptive parameter control to efficiently explore the search space and adapt to the problem characteristics.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "0bca3c89-2487-47d3-9b2a-785b58256a07", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n            # Adjust crossover probability based on current performance\n            if self.f_best < 0.5 * self.f_best:\n                self.crossover_probability = min(self.crossover_probability + 0.05, 1.0)\n            elif self.f_best > 1.5 * self.f_best:\n                self.crossover_probability = max(self.crossover_probability - 0.05, 0.0)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control and Crossover Probability Adjustment", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "d271423f-09a0-489b-a17c-dedf8f25eb7f", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.directions = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def multi_directional_mutation(self, x):\n        x_new = x\n        for direction in self.directions:\n            x_new = self.crossover(x_new, x + self.F * direction)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            self.directions = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.multi_directional_mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Multi-Directional Mutation.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "3958de2c-1059-455e-b925-f15b7908634e", "solution": "import numpy as np\nimport random\n\nclass ADMDF_DN:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.dynamic_neighborhood = True\n        self.neighborhood_size = 20\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def dynamic_neighborhood(self, population):\n        if self.dynamic_neighborhood:\n            neighborhood = population[np.random.choice(self.population_size, self.neighborhood_size, replace=False)]\n            return neighborhood\n        else:\n            return population\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x, neighborhood):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim) + np.random.choice(neighborhood, 1)[0]\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            neighborhood = self.dynamic_neighborhood(population)\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i], neighborhood)\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_DN", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control and Dynamic Neighborhoods (ADMDF-DN) - A novel hybrid metaheuristic algorithm combining the strengths of differential evolution, levy flights, self-adaptive parameter control and dynamic neighborhoods to efficiently explore the search space and adapt to the problem characteristics.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "878dff38-43f6-4265-a2bc-69e2cd484a0f", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control = True\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.improvement_ratio = 0.0\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def adapt_mutation_step_size(self):\n        if self.improvement_ratio > 0.5:\n            self.sigma = self.sigma * 0.9\n        elif self.improvement_ratio < 0.2:\n            self.sigma = self.sigma * 1.1\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-self.sigma, self.sigma, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            improvement_ratio = 0.0\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n                    improvement_ratio += 1\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            self.improvement_ratio = improvement_ratio / self.population_size\n            if self.self_adaptive_parameter_control:\n                self.self_adaptive_parameter_control()\n            self.adapt_mutation_step_size()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, but with an additional mechanism to adapt the mutation step size based on the fitness improvement ratio.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'bool' object is not callable\").", "error": "TypeError(\"'bool' object is not callable\")", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {}, "mutation_prompt": null}
{"id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control.", "configspace": "", "generation": 20, "fitness": 0.11290494962717137, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "0ad4f58f-b89f-492e-9994-697ecb57089f", "metadata": {"aucs": [0.2109251773931904, 0.1774435618605814, 0.16945292739248585, 0.16461390689555178, 0.17428771235290264, 0.19941895025928114, 0.2069326564683691, 0.16035783897293276, 0.1837394833919156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04032110748836004, 0.041898571814998675, 0.03424567950905821, 0.046054840258208274, 0.04209290465406135, 0.05126737059349473, 0.05011128348852145, 0.04554620496581685, 0.046844527746727316, 0.025998766172946164, 0.024728019312295735, 0.042973859949729576, 0.047288629929970405, 0.03992257126352183, 0.044164630556580375, 0.03218551721539353, 0.028519813199514243, 0.029896612775866416, 0.7048466555741527, 0.9986394781456549, 0.9594792803063039, 0.9021878154360549, 0.673926654561835, 0.5286818803194384, 0.4007987696440216, 0.14021330584403424, 0.21707100243652144, 0.07425313757777219, 0.0764226133529532, 0.07288289018118443, 0.0629816088500964, 0.05538904470373307, 0.061788745971589565, 0.06657665397239287, 0.08337447997177805, 0.07734681685203637, 0.13482035895938882, 0.1787086629252328, 0.12151799556580922, 0.15852249469735813, 0.10441221436821868, 0.11824341269012983, 0.10172108005978475, 0.12228123714296912, 0.12670134619665785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034091428434585014, 0.03999921589113509, 0.049915483050783194, 0.03625729807139777, 9.999999999998899e-05, 0.00017186898435139764, 0.017195871137536622, 0.004347707090085917, 9.999999999998899e-05, 0.0011275616700013869, 9.999999999998899e-05, 0.01184311567197105, 0.006955642958458297, 9.999999999998899e-05, 0.002753035888589106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04862350935107518, 0.0832468326339647, 0.03970961847158383, 0.03344259448748721, 0.030514224874332307, 0.049261486324990056, 0.10979436054150937, 0.08038240470469904, 0.04919137948457797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00027440417452617716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18944644957731815, 0.22251106139480514, 0.2069343217631202, 0.18573494566600435, 0.19481369993368658, 0.1752413782578831, 0.2006961082770936, 0.18655967063977952, 0.1841315791560536, 0.03120328841555997, 0.039603132521910056, 0.0494936829712489, 0.039357068476744805, 0.04125693467213254, 0.05018302966796906, 0.047925703117331464, 0.04222475203274101, 0.052282115217131886, 0.14023223652812722, 0.12086801349826604, 0.16504517266717578, 0.13812650793606296, 0.1449199042903656, 0.13607189562276822, 0.12348766424539048, 0.1475349338244194, 0.16164966333868191, 0.15269445885695276, 0.17429939753946788, 0.16952477443520142, 0.15898896254720551, 0.1824648965982405, 0.16876774571534137, 0.17456283999930255, 0.17367185072375124, 0.15977828501813474, 0.0928000021072114, 0.10052543301206518, 0.11152307806238637, 0.09321608629525069, 0.11565777360653462, 0.11971046722096912, 0.12567313563299598, 0.1090824688666282, 0.10286169310841742, 0.15788234505599663, 0.16215449174116836, 0.17379508005739863, 0.15390321569043408, 0.15632918295945042, 0.15651232834689877, 0.141855478613796, 0.17175575983777058, 0.16826770154520376, 0.14181383724873264, 0.1466075305614286, 0.1456507089853909, 0.14359845003275917, 0.15381795949059673, 0.13529380058926432, 0.13484936102594458, 0.14485537118227332, 0.16134623182463204, 0.16558216863926078, 0.19242052501193063, 0.1550943774728688, 0.2020037973845128, 0.2080654506911329, 0.16013747528972067, 0.22919893676167735, 0.20350443868326262, 0.1553839189618399, 0.19228571937838035, 0.23376106126607166, 0.17729136813833135, 0.1330501298154, 0.18032962104358685, 0.16884997669371782, 0.14958128335216825, 0.15797886448451026, 0.15222790462297164, 0.18054552605049845, 0.1915960855026455, 0.17078203665016622, 0.16843883825755512, 0.17701967518787498, 0.17457786943087106, 0.1931993941491914, 0.17695040875689172, 0.19320411565443107, 0.057378630895255966, 0.04890817053095253, 0.06042077047372363, 0.05875892376287517, 0.0561738885947507, 0.049593860763262776, 0.057296650109017744, 0.053182849088807105, 0.06142778957803863]}, "mutation_prompt": null}
{"id": "713631c5-c8c7-4088-8be5-5bbca46ce1a7", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.2109251773931904, 0.1774435618605814, 0.16945292739248585, 0.16461390689555178, 0.17428771235290264, 0.19941895025928114, 0.2069326564683691, 0.16035783897293276, 0.1837394833919156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04032110748836004, 0.041898571814998675, 0.03424567950905821, 0.046054840258208274, 0.04209290465406135, 0.05126737059349473, 0.05011128348852145, 0.04554620496581685, 0.046844527746727316, 0.025998766172946164, 0.024728019312295735, 0.042973859949729576, 0.047288629929970405, 0.03992257126352183, 0.044164630556580375, 0.03218551721539353, 0.028519813199514243, 0.029896612775866416, 0.7048466555741527, 0.9986394781456549, 0.9594792803063039, 0.9021878154360549, 0.673926654561835, 0.5286818803194384, 0.4007987696440216, 0.14021330584403424, 0.21707100243652144, 0.07425313757777219, 0.0764226133529532, 0.07288289018118443, 0.0629816088500964, 0.05538904470373307, 0.061788745971589565, 0.06657665397239287, 0.08337447997177805, 0.07734681685203637, 0.13482035895938882, 0.1787086629252328, 0.12151799556580922, 0.15852249469735813, 0.10441221436821868, 0.11824341269012983, 0.10172108005978475, 0.12228123714296912, 0.12670134619665785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034091428434585014, 0.03999921589113509, 0.049915483050783194, 0.03625729807139777, 9.999999999998899e-05, 0.00017186898435139764, 0.017195871137536622, 0.004347707090085917, 9.999999999998899e-05, 0.0011275616700013869, 9.999999999998899e-05, 0.01184311567197105, 0.006955642958458297, 9.999999999998899e-05, 0.002753035888589106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04862350935107518, 0.0832468326339647, 0.03970961847158383, 0.03344259448748721, 0.030514224874332307, 0.049261486324990056, 0.10979436054150937, 0.08038240470469904, 0.04919137948457797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00027440417452617716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18944644957731815, 0.22251106139480514, 0.2069343217631202, 0.18573494566600435, 0.19481369993368658, 0.1752413782578831, 0.2006961082770936, 0.18655967063977952, 0.1841315791560536, 0.03120328841555997, 0.039603132521910056, 0.0494936829712489, 0.039357068476744805, 0.04125693467213254, 0.05018302966796906, 0.047925703117331464, 0.04222475203274101, 0.052282115217131886, 0.14023223652812722, 0.12086801349826604, 0.16504517266717578, 0.13812650793606296, 0.1449199042903656, 0.13607189562276822, 0.12348766424539048, 0.1475349338244194, 0.16164966333868191, 0.15269445885695276, 0.17429939753946788, 0.16952477443520142, 0.15898896254720551, 0.1824648965982405, 0.16876774571534137, 0.17456283999930255, 0.17367185072375124, 0.15977828501813474, 0.0928000021072114, 0.10052543301206518, 0.11152307806238637, 0.09321608629525069, 0.11565777360653462, 0.11971046722096912, 0.12567313563299598, 0.1090824688666282, 0.10286169310841742, 0.15788234505599663, 0.16215449174116836, 0.17379508005739863, 0.15390321569043408, 0.15632918295945042, 0.15651232834689877, 0.141855478613796, 0.17175575983777058, 0.16826770154520376, 0.14181383724873264, 0.1466075305614286, 0.1456507089853909, 0.14359845003275917, 0.15381795949059673, 0.13529380058926432, 0.13484936102594458, 0.14485537118227332, 0.16134623182463204, 0.16558216863926078, 0.19242052501193063, 0.1550943774728688, 0.2020037973845128, 0.2080654506911329, 0.16013747528972067, 0.22919893676167735, 0.20350443868326262, 0.1553839189618399, 0.19228571937838035, 0.23376106126607166, 0.17729136813833135, 0.1330501298154, 0.18032962104358685, 0.16884997669371782, 0.14958128335216825, 0.15797886448451026, 0.15222790462297164, 0.18054552605049845, 0.1915960855026455, 0.17078203665016622, 0.16843883825755512, 0.17701967518787498, 0.17457786943087106, 0.1931993941491914, 0.17695040875689172, 0.19320411565443107, 0.057378630895255966, 0.04890817053095253, 0.06042077047372363, 0.05875892376287517, 0.0561738885947507, 0.049593860763262776, 0.057296650109017744, 0.053182849088807105, 0.06142778957803863]}, "mutation_prompt": null}
{"id": "de288009-216f-4f66-aff4-0a9e1ad6fa7b", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.2109251773931904, 0.1774435618605814, 0.16945292739248585, 0.16461390689555178, 0.17428771235290264, 0.19941895025928114, 0.2069326564683691, 0.16035783897293276, 0.1837394833919156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04032110748836004, 0.041898571814998675, 0.03424567950905821, 0.046054840258208274, 0.04209290465406135, 0.05126737059349473, 0.05011128348852145, 0.04554620496581685, 0.046844527746727316, 0.025998766172946164, 0.024728019312295735, 0.042973859949729576, 0.047288629929970405, 0.03992257126352183, 0.044164630556580375, 0.03218551721539353, 0.028519813199514243, 0.029896612775866416, 0.7048466555741527, 0.9986394781456549, 0.9594792803063039, 0.9021878154360549, 0.673926654561835, 0.5286818803194384, 0.4007987696440216, 0.14021330584403424, 0.21707100243652144, 0.07425313757777219, 0.0764226133529532, 0.07288289018118443, 0.0629816088500964, 0.05538904470373307, 0.061788745971589565, 0.06657665397239287, 0.08337447997177805, 0.07734681685203637, 0.13482035895938882, 0.1787086629252328, 0.12151799556580922, 0.15852249469735813, 0.10441221436821868, 0.11824341269012983, 0.10172108005978475, 0.12228123714296912, 0.12670134619665785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034091428434585014, 0.03999921589113509, 0.049915483050783194, 0.03625729807139777, 9.999999999998899e-05, 0.00017186898435139764, 0.017195871137536622, 0.004347707090085917, 9.999999999998899e-05, 0.0011275616700013869, 9.999999999998899e-05, 0.01184311567197105, 0.006955642958458297, 9.999999999998899e-05, 0.002753035888589106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04862350935107518, 0.0832468326339647, 0.03970961847158383, 0.03344259448748721, 0.030514224874332307, 0.049261486324990056, 0.10979436054150937, 0.08038240470469904, 0.04919137948457797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00027440417452617716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18944644957731815, 0.22251106139480514, 0.2069343217631202, 0.18573494566600435, 0.19481369993368658, 0.1752413782578831, 0.2006961082770936, 0.18655967063977952, 0.1841315791560536, 0.03120328841555997, 0.039603132521910056, 0.0494936829712489, 0.039357068476744805, 0.04125693467213254, 0.05018302966796906, 0.047925703117331464, 0.04222475203274101, 0.052282115217131886, 0.14023223652812722, 0.12086801349826604, 0.16504517266717578, 0.13812650793606296, 0.1449199042903656, 0.13607189562276822, 0.12348766424539048, 0.1475349338244194, 0.16164966333868191, 0.15269445885695276, 0.17429939753946788, 0.16952477443520142, 0.15898896254720551, 0.1824648965982405, 0.16876774571534137, 0.17456283999930255, 0.17367185072375124, 0.15977828501813474, 0.0928000021072114, 0.10052543301206518, 0.11152307806238637, 0.09321608629525069, 0.11565777360653462, 0.11971046722096912, 0.12567313563299598, 0.1090824688666282, 0.10286169310841742, 0.15788234505599663, 0.16215449174116836, 0.17379508005739863, 0.15390321569043408, 0.15632918295945042, 0.15651232834689877, 0.141855478613796, 0.17175575983777058, 0.16826770154520376, 0.14181383724873264, 0.1466075305614286, 0.1456507089853909, 0.14359845003275917, 0.15381795949059673, 0.13529380058926432, 0.13484936102594458, 0.14485537118227332, 0.16134623182463204, 0.16558216863926078, 0.19242052501193063, 0.1550943774728688, 0.2020037973845128, 0.2080654506911329, 0.16013747528972067, 0.22919893676167735, 0.20350443868326262, 0.1553839189618399, 0.19228571937838035, 0.23376106126607166, 0.17729136813833135, 0.1330501298154, 0.18032962104358685, 0.16884997669371782, 0.14958128335216825, 0.15797886448451026, 0.15222790462297164, 0.18054552605049845, 0.1915960855026455, 0.17078203665016622, 0.16843883825755512, 0.17701967518787498, 0.17457786943087106, 0.1931993941491914, 0.17695040875689172, 0.19320411565443107, 0.057378630895255966, 0.04890817053095253, 0.06042077047372363, 0.05875892376287517, 0.0561738885947507, 0.049593860763262776, 0.057296650109017744, 0.053182849088807105, 0.06142778957803863]}, "mutation_prompt": null}
{"id": "90cc97c1-bf15-49ba-9162-7bd017776839", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.num_islands = 5\n        self.population_per_island = self.population_size // self.num_islands\n        self.island_populations = [np.random.uniform(-5.0, 5.0, (self.population_per_island, dim)) for _ in range(self.num_islands)]\n        self.island_f_bests = [float('inf') for _ in range(self.num_islands)]\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def migrate(self):\n        for i in range(self.num_islands):\n            j = (i + 1) % self.num_islands\n            k = np.random.randint(0, self.population_per_island)\n            self.island_populations[i][k] = self.island_populations[j][k]\n            self.island_f_bests[i] = min(self.island_f_bests[i], self.island_populations[i][k])\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            for i in range(self.num_islands):\n                for j in range(self.population_per_island):\n                    x_new = self.mutation(self.island_populations[i][j])\n                    if func(x_new) < func(self.island_populations[i][j]):\n                        self.island_populations[i][j] = x_new\n                        self.island_f_bests[i] = func(self.island_populations[i][j])\n            self.migrate()\n            self.x_best = np.array([np.min([self.island_f_bests[i] for i in range(self.num_islands)])] * self.dim)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Novel Island Model with Dynamic Migration", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {}, "mutation_prompt": null}
{"id": "5ce5e0fb-a8c8-4ab1-96c7-89f35012b1e5", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.2109251773931904, 0.1774435618605814, 0.16945292739248585, 0.16461390689555178, 0.17428771235290264, 0.19941895025928114, 0.2069326564683691, 0.16035783897293276, 0.1837394833919156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04032110748836004, 0.041898571814998675, 0.03424567950905821, 0.046054840258208274, 0.04209290465406135, 0.05126737059349473, 0.05011128348852145, 0.04554620496581685, 0.046844527746727316, 0.025998766172946164, 0.024728019312295735, 0.042973859949729576, 0.047288629929970405, 0.03992257126352183, 0.044164630556580375, 0.03218551721539353, 0.028519813199514243, 0.029896612775866416, 0.7048466555741527, 0.9986394781456549, 0.9594792803063039, 0.9021878154360549, 0.673926654561835, 0.5286818803194384, 0.4007987696440216, 0.14021330584403424, 0.21707100243652144, 0.07425313757777219, 0.0764226133529532, 0.07288289018118443, 0.0629816088500964, 0.05538904470373307, 0.061788745971589565, 0.06657665397239287, 0.08337447997177805, 0.07734681685203637, 0.13482035895938882, 0.1787086629252328, 0.12151799556580922, 0.15852249469735813, 0.10441221436821868, 0.11824341269012983, 0.10172108005978475, 0.12228123714296912, 0.12670134619665785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034091428434585014, 0.03999921589113509, 0.049915483050783194, 0.03625729807139777, 9.999999999998899e-05, 0.00017186898435139764, 0.017195871137536622, 0.004347707090085917, 9.999999999998899e-05, 0.0011275616700013869, 9.999999999998899e-05, 0.01184311567197105, 0.006955642958458297, 9.999999999998899e-05, 0.002753035888589106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04862350935107518, 0.0832468326339647, 0.03970961847158383, 0.03344259448748721, 0.030514224874332307, 0.049261486324990056, 0.10979436054150937, 0.08038240470469904, 0.04919137948457797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00027440417452617716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18944644957731815, 0.22251106139480514, 0.2069343217631202, 0.18573494566600435, 0.19481369993368658, 0.1752413782578831, 0.2006961082770936, 0.18655967063977952, 0.1841315791560536, 0.03120328841555997, 0.039603132521910056, 0.0494936829712489, 0.039357068476744805, 0.04125693467213254, 0.05018302966796906, 0.047925703117331464, 0.04222475203274101, 0.052282115217131886, 0.14023223652812722, 0.12086801349826604, 0.16504517266717578, 0.13812650793606296, 0.1449199042903656, 0.13607189562276822, 0.12348766424539048, 0.1475349338244194, 0.16164966333868191, 0.15269445885695276, 0.17429939753946788, 0.16952477443520142, 0.15898896254720551, 0.1824648965982405, 0.16876774571534137, 0.17456283999930255, 0.17367185072375124, 0.15977828501813474, 0.0928000021072114, 0.10052543301206518, 0.11152307806238637, 0.09321608629525069, 0.11565777360653462, 0.11971046722096912, 0.12567313563299598, 0.1090824688666282, 0.10286169310841742, 0.15788234505599663, 0.16215449174116836, 0.17379508005739863, 0.15390321569043408, 0.15632918295945042, 0.15651232834689877, 0.141855478613796, 0.17175575983777058, 0.16826770154520376, 0.14181383724873264, 0.1466075305614286, 0.1456507089853909, 0.14359845003275917, 0.15381795949059673, 0.13529380058926432, 0.13484936102594458, 0.14485537118227332, 0.16134623182463204, 0.16558216863926078, 0.19242052501193063, 0.1550943774728688, 0.2020037973845128, 0.2080654506911329, 0.16013747528972067, 0.22919893676167735, 0.20350443868326262, 0.1553839189618399, 0.19228571937838035, 0.23376106126607166, 0.17729136813833135, 0.1330501298154, 0.18032962104358685, 0.16884997669371782, 0.14958128335216825, 0.15797886448451026, 0.15222790462297164, 0.18054552605049845, 0.1915960855026455, 0.17078203665016622, 0.16843883825755512, 0.17701967518787498, 0.17457786943087106, 0.1931993941491914, 0.17695040875689172, 0.19320411565443107, 0.057378630895255966, 0.04890817053095253, 0.06042077047372363, 0.05875892376287517, 0.0561738885947507, 0.049593860763262776, 0.057296650109017744, 0.053182849088807105, 0.06142778957803863]}, "mutation_prompt": null}
{"id": "c6e12886-c52b-4a38-bca0-cf2dc127033d", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.01\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.dynamic_population_size = np.linspace(50, 150, self.budget).astype(int)\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def multi_operator_crossover(self, x1, x2, x3):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        elif random.random() < self.crossover_probability:\n            return (x2 + x3) / 2\n        else:\n            return (x1 + x3) / 2\n\n    def optimize(self, func):\n        for i, pop_size in enumerate(self.dynamic_population_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for j in range(pop_size):\n                x_new = self.mutation(population[j])\n                if func(x_new) < func(population[j]):\n                    population[j] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n            if i < self.budget - 1:\n                population2 = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n                for k in range(pop_size):\n                    x_new = self.multi_operator_crossover(population[k], population2[k], self.x_best)\n                    if func(x_new) < func(population[k]):\n                        population[k] = x_new\n                self.x_best = np.min(population, axis=0)\n                self.f_best = func(self.x_best)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control, incorporating a dynamically adjusted population size and a multi-operator crossover mechanism.", "configspace": "", "generation": 25, "fitness": 0.09680456999505428, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.16985383229032391, 0.2298296883395382, 0.18271360098503053, 0.19788259167395983, 0.18495487858062898, 0.13758384695645565, 0.2094701540784809, 0.17003383869376154, 0.1702262053521807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04614983297874009, 0.06806926571993865, 0.03515730399347705, 0.07229431532619979, 0.04824150426112572, 0.06501062832939819, 0.04330088307301483, 0.03542981872938633, 0.036000830536309314, 0.03555768211581922, 0.028538265840714838, 0.03219235472309068, 0.02960935617265581, 0.026035371001717045, 0.051360121953468285, 0.024793017911354243, 0.027747984273486348, 0.037263042051558504, 0.3234320591744497, 0.2645608552306121, 0.13702671037034575, 0.08257814389175933, 0.07860570289038027, 0.09107820144478851, 0.12253416856104471, 0.12253456013649788, 0.7308523778368933, 0.06676674663246174, 0.06548584298179072, 0.04528042831068502, 0.09018839497858533, 0.12158703992343778, 0.0744125566882824, 0.03865627466850308, 0.11542933792890475, 0.04488784645142363, 0.1275181989156785, 0.1346762874151164, 0.14576638342087733, 0.11901734771940997, 0.15764965573396805, 0.11114937007321857, 0.11948911152652342, 0.11931147521900054, 0.11921134316511184, 0.01671431069098217, 0.006025291960025769, 0.0062726751503247025, 9.999999999998899e-05, 0.04446116576585479, 0.003496734741039842, 9.999999999998899e-05, 0.007825509042387435, 9.999999999998899e-05, 0.017399612693638433, 0.029963427722137892, 0.013856079539653732, 0.05960557994474025, 0.03482822662898488, 0.01638400343873614, 0.03653343274367704, 0.06496639671684024, 0.05341822874212099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04604275530219326, 0.07723609098471407, 0.07262609752756999, 0.03661780314296681, 0.05586122183699116, 0.07490406483514311, 0.021601028605819916, 0.028688735775582397, 0.06401524138146941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0122683939193583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19568834673749735, 0.19414850252125393, 0.18749922730200397, 0.19472366547922304, 0.1752110364326176, 0.1772434522327403, 0.20942039742325114, 0.2004355976968688, 0.19534093939032038, 0.04269585994524694, 0.03548765186474845, 0.04365171899911113, 0.04641560457582561, 0.04712158476297135, 0.044279662288045474, 0.0491185385827716, 0.042095065503397144, 0.0411920985212082, 0.14903601830950208, 0.11706830304525517, 0.1812215028844224, 0.14433978703916417, 0.1153811516175498, 0.1183451915054331, 0.147319902285171, 0.12083212706836444, 0.12320905791290626, 0.16864453775428245, 0.16980248029602685, 0.16176956301595824, 0.17171856407333397, 0.18206093682051105, 0.17335361272431238, 0.15987217882641525, 0.1836583246813257, 0.15989389951866706, 0.09255971152885145, 0.0890507873503833, 0.09829958389300286, 0.11402544973578588, 0.11086140402590627, 0.11734262002231366, 0.11111698360335609, 0.10354218575698904, 0.09996496799185228, 0.18509201503720973, 0.16661111232547499, 0.17502543972627826, 0.16447266158708007, 0.16837856824897968, 0.17686571087661995, 0.16943236877833623, 0.17300344016474756, 0.16931545293230643, 0.1404671657568921, 0.15446042886238798, 0.1563420610162537, 0.16069110781500662, 0.17046417851045625, 0.15310073111115996, 0.16149766940465649, 0.1569448970963787, 0.1461487114374529, 0.16703255097928538, 0.16538783358898546, 0.1797851188929892, 0.16241434487298612, 0.1637062683338314, 0.17831708623717224, 0.14936410959815316, 0.16169919678199896, 0.14456116401976538, 0.1797196370936499, 0.1850694418610761, 0.17141049158040167, 0.15116287525469618, 0.1633733285104323, 0.18653698190363033, 0.16078670710029874, 0.15747244411838235, 0.15920295741029733, 0.18285437269642235, 0.16843607604112254, 0.17193507337708958, 0.18692917989433555, 0.16796724564572474, 0.1748308214346843, 0.17511446546634213, 0.17890377198639595, 0.1808199684325532, 0.05145323645765221, 0.054446802654465554, 0.05801397054432278, 0.06122562811694221, 0.058878066198845946, 0.05307615095329932, 0.07390899689319486, 0.05062654124396615, 0.0485919624579938]}, "mutation_prompt": null}
{"id": "18191b8f-4964-4215-a9f6-bb56831eb142", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.01\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.diversity = np.inf\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def calculate_diversity(self, population):\n        return np.std(population, axis=0)\n\n    def adjust_mutation_probability(self, diversity):\n        if diversity < self.diversity:\n            self.mutation_probability *= 1.1\n            self.diversity = diversity\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            diversity = self.calculate_diversity(population)\n            self.adjust_mutation_probability(diversity)\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control, and incorporating a mechanism to dynamically adjust the mutation probability based on the population diversity.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {}, "mutation_prompt": null}
{"id": "1997ac1f-2fbe-4030-8b88-c6f5fc8b9a90", "solution": "import numpy as np\nimport random\n\nclass ADMDF_refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.dynamic_mutation_probability = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def dynamic_mutation(self, x):\n        if random.random() < self.dynamic_mutation_probability:\n            if random.random() < self.levy_flight_probability:\n                return self.levy_flight(x)\n            else:\n                return x + np.random.uniform(-1.0, 1.0, self.dim)\n        else:\n            return x\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.dynamic_mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n            self.dynamic_mutation_probability = 0.5 - 0.1 * (_ / self.budget)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Dynamic Mutation Probability", "configspace": "", "generation": 27, "fitness": 0.09766569636638318, "feedback": "The algorithm ADMDF_refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.15609719125479804, 0.17313884275495273, 0.16866384308793825, 0.16355238055742682, 0.16572300449187694, 0.22693462539075515, 0.1600928026930165, 0.14151011830576277, 0.21136897943287258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06772623863317528, 0.052972895100475426, 0.04206410545023809, 0.04006929870890874, 0.03494893515695907, 0.04556919526413816, 0.04807873603331314, 0.043445614240318675, 0.0406893661574399, 0.025482499551613746, 0.028382717052530815, 0.029113910254235043, 0.020416662406011477, 0.029150944301630455, 0.025414042595415243, 0.023547603777645643, 0.023998039493035916, 0.03674248672148439, 0.09457401670626608, 0.1402501771580803, 0.47772743002719076, 0.6576655447343283, 0.7262494900359698, 0.0922354097890089, 0.07365062343537154, 0.1607018123064592, 0.6453769766942874, 0.08653565649022366, 0.057815895229099246, 0.10031282633820959, 0.11021218696033319, 0.07250826803144705, 0.05230929171616172, 0.05666649775565269, 0.06799147222116009, 0.090872780846591, 0.10989503492632302, 0.10969855488284341, 0.10317847358159271, 0.11658252419448922, 0.10007040694788816, 0.12817359413242635, 0.12769907911279665, 0.10795911942745628, 0.10257522191568447, 0.013917571527751305, 9.999999999998899e-05, 0.003215021985186861, 9.999999999998899e-05, 9.999999999998899e-05, 0.01257435916632077, 0.010256671248632498, 0.021496751902497224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027301734021850876, 9.999999999998899e-05, 0.01718727194991898, 9.999999999998899e-05, 0.01769630442282355, 0.001980977935769679, 0.0009643536422867527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053997999398768814, 0.06853375952674146, 0.03433944509567066, 0.030686551649727334, 0.07007204037470405, 0.04023870188984435, 0.05008135754639931, 0.035844553779994404, 0.04407620314052563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004519185506212331, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21619102064496964, 0.18109546327832693, 0.2130951417902185, 0.17192879319632137, 0.19702441362530176, 0.18356835555342776, 0.20008865865383008, 0.17237823927325657, 0.1966602821508483, 0.03213273749942003, 0.040458344440936544, 0.037377238112438094, 0.04178338281027394, 0.03412234768587408, 0.043666527213383044, 0.06015492484498153, 0.03814470997012798, 0.050370735475279926, 0.1486631848669, 0.12447709030110887, 0.1379816982353712, 0.14597449256249162, 0.13486585615921598, 0.161514656638855, 0.14848323462341018, 0.12845000307466903, 0.13998140132081083, 0.16363319296054946, 0.1629465312597962, 0.1612312699884012, 0.16659112994978165, 0.17753957144578214, 0.17088178362442863, 0.1565000665743259, 0.17367574913737827, 0.17338809045076686, 0.09971148926393236, 0.12682257256529228, 0.11253315381810136, 0.0999176197154098, 0.12035162263180732, 0.10829179230677999, 0.1160435008527545, 0.1103377137396625, 0.10773980305839759, 0.14701212190094792, 0.1604851089787417, 0.1593280767935934, 0.14900885823190224, 0.13985073243950197, 0.1696890893385684, 0.15635421735152122, 0.1499576994947287, 0.1664762810339404, 0.1393943684551825, 0.1413770150856688, 0.13380770527572783, 0.12460195567904753, 0.14293662432256737, 0.14613527490388645, 0.15645067422199777, 0.1408253539782126, 0.1605247860131993, 0.14835791157788047, 0.1705125937240538, 0.14008938048258346, 0.16625394338331012, 0.172458013727385, 0.1727858840451496, 0.1841433005712998, 0.15996128122153896, 0.1800932985423318, 0.15314096926839305, 0.1579488989396608, 0.12316914140050483, 0.12682068334669216, 0.15224977340670243, 0.15276235034544383, 0.16000772603524205, 0.17128466291160582, 0.15595791291248928, 0.1915619114632363, 0.18351036747553384, 0.18061959945602923, 0.1815845292145153, 0.21097071862165462, 0.18722260897963205, 0.16359219152669535, 0.1854250021759858, 0.17968510151717854, 0.048192824920694655, 0.05127999555857843, 0.046873669833863985, 0.04790032056558924, 0.06286104371020229, 0.04843393067334145, 0.04565109526997346, 0.05410041751293104, 0.04767756979959903]}, "mutation_prompt": null}
{"id": "77b98bda-c7f6-43b2-8d14-88799d5abf60", "solution": "import numpy as np\nimport random\n\nclass ADMDF_Ensemble:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.02\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.ensemble_size = 5\n        self.ensemble_members = [np.random.uniform(-5.0, 5.0, dim) for _ in range(self.ensemble_size)]\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.ensemble_members = [np.min(population, axis=0) for _ in range(self.ensemble_size)]\n            self.x_best = np.mean(self.ensemble_members, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_Ensemble", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control and Ensemble Learning", "configspace": "", "generation": 28, "fitness": 0.10662540929367927, "feedback": "The algorithm ADMDF_Ensemble got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.12.", "error": "", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.19268479866992994, 0.1818134170791048, 0.17825928102881294, 0.18301204206274813, 0.17320170763106657, 0.1700790289930908, 0.14550843822055737, 0.16024390888903783, 0.17781094353575932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03944115014941996, 0.05423571182892861, 0.03889043326139141, 0.04519620105016675, 0.04417599215684653, 0.042503510768740815, 0.043455442675630396, 0.04034530369615874, 0.043543593709036044, 0.028190607345528584, 0.05257563857036729, 0.029761022102285817, 0.025695819644265594, 0.035681925972247175, 0.05729427630220141, 0.03535575977534444, 0.04213346485449454, 0.027884983720692036, 0.8692628335237315, 0.2039390334291501, 0.7442710730301412, 0.9715202672703356, 0.6449085356096804, 0.2866506974163031, 0.13307118343361712, 0.3700851045521657, 0.27779446788942297, 0.06258835537270457, 0.07661599400878472, 0.10283784740795532, 0.0697985208021058, 0.06348285015277522, 0.05492828038392694, 0.08118935027429308, 0.07716863524242767, 0.05846722621425593, 0.13912380630003518, 0.15710725027384598, 0.1142890287954147, 0.1672781937949096, 0.11380963276053391, 0.12085668663873583, 0.10798391448739819, 0.12348868435862492, 0.11912736925409284, 0.03271616442319569, 0.001960424486296186, 9.999999999998899e-05, 0.03368286869216375, 0.008483256924845972, 9.999999999998899e-05, 0.016302499705027174, 0.021852636650959933, 0.0016689496633364165, 0.009503052526458111, 0.009725333234785083, 9.999999999998899e-05, 0.0017672915044062432, 0.005207796865107417, 0.0011077392517576667, 0.01026349779133362, 0.017044830604705075, 0.0013165902450303912, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07468017770786228, 0.04293492118957276, 0.04114249985707774, 0.05432050380507902, 0.044972512365314965, 0.045646573578790206, 0.024254083630087964, 0.05671409830595098, 0.033683013039048304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01935896929543901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18489477657991105, 0.2006882612424904, 0.18481743653717542, 0.17453730720705973, 0.19821015864926017, 0.18339176884487518, 0.20536584934085522, 0.1864500261853801, 0.2121503550681041, 0.05183677455384439, 0.028938338910797556, 0.04720235187499677, 0.04217779831183721, 0.03638744337018163, 0.03612520150003551, 0.06250337892371949, 0.04781602482019465, 0.03430435303392221, 0.14699779250003775, 0.12846943845190129, 0.12851818556709427, 0.14787737543940516, 0.14116845248970422, 0.1421499531514342, 0.14022884654804857, 0.150153061498149, 0.13234214766041974, 0.15270071279132047, 0.16213557472495688, 0.1701766180455847, 0.15739929836841549, 0.16972630571876401, 0.173141801314734, 0.17480961482102553, 0.17371563200340734, 0.15304608900124816, 0.09627398038942447, 0.10141764795343355, 0.11894406633710897, 0.10883849635905551, 0.10834887473437338, 0.11152837275636762, 0.13238827764877947, 0.14653284682553946, 0.10923166772784665, 0.16052211883951872, 0.16340048894822268, 0.1470904014144202, 0.155923770424935, 0.15873984903627536, 0.16266148093566024, 0.15453682984453554, 0.18107362465926502, 0.14259837990744417, 0.12895200075017432, 0.14403242313087505, 0.14107379639882567, 0.16126306499003928, 0.15553016905322348, 0.13486305160014378, 0.1311148348524428, 0.151986407036104, 0.1606720097385098, 0.13872333719472385, 0.15947278569290735, 0.1355898532530635, 0.16386142556968675, 0.15019207049715166, 0.16980462004732721, 0.20495680917111525, 0.15445368097403878, 0.1442181427967244, 0.16231879388420367, 0.15769955585410111, 0.13199735497789256, 0.11947469246957787, 0.2273808546190924, 0.2236116396041824, 0.20439079001829963, 0.15625252597438555, 0.19053782186804014, 0.17293230192000175, 0.20685513262507016, 0.16618098084779553, 0.18625403893202752, 0.18681437150750124, 0.18420569153718547, 0.19200520909426588, 0.18274817262969678, 0.18895436006118838, 0.05957258605108362, 0.05442511709228037, 0.04990935795094009, 0.056246017512334046, 0.06543835002786158, 0.06008688324803113, 0.053311712667575395, 0.05585948604166546, 0.06752893416401728]}, "mutation_prompt": null}
{"id": "c04f38e6-a774-4234-8f63-dd51c28dc33b", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.2109251773931904, 0.1774435618605814, 0.16945292739248585, 0.16461390689555178, 0.17428771235290264, 0.19941895025928114, 0.2069326564683691, 0.16035783897293276, 0.1837394833919156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04032110748836004, 0.041898571814998675, 0.03424567950905821, 0.046054840258208274, 0.04209290465406135, 0.05126737059349473, 0.05011128348852145, 0.04554620496581685, 0.046844527746727316, 0.025998766172946164, 0.024728019312295735, 0.042973859949729576, 0.047288629929970405, 0.03992257126352183, 0.044164630556580375, 0.03218551721539353, 0.028519813199514243, 0.029896612775866416, 0.7048466555741527, 0.9986394781456549, 0.9594792803063039, 0.9021878154360549, 0.673926654561835, 0.5286818803194384, 0.4007987696440216, 0.14021330584403424, 0.21707100243652144, 0.07425313757777219, 0.0764226133529532, 0.07288289018118443, 0.0629816088500964, 0.05538904470373307, 0.061788745971589565, 0.06657665397239287, 0.08337447997177805, 0.07734681685203637, 0.13482035895938882, 0.1787086629252328, 0.12151799556580922, 0.15852249469735813, 0.10441221436821868, 0.11824341269012983, 0.10172108005978475, 0.12228123714296912, 0.12670134619665785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034091428434585014, 0.03999921589113509, 0.049915483050783194, 0.03625729807139777, 9.999999999998899e-05, 0.00017186898435139764, 0.017195871137536622, 0.004347707090085917, 9.999999999998899e-05, 0.0011275616700013869, 9.999999999998899e-05, 0.01184311567197105, 0.006955642958458297, 9.999999999998899e-05, 0.002753035888589106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04862350935107518, 0.0832468326339647, 0.03970961847158383, 0.03344259448748721, 0.030514224874332307, 0.049261486324990056, 0.10979436054150937, 0.08038240470469904, 0.04919137948457797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00027440417452617716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18944644957731815, 0.22251106139480514, 0.2069343217631202, 0.18573494566600435, 0.19481369993368658, 0.1752413782578831, 0.2006961082770936, 0.18655967063977952, 0.1841315791560536, 0.03120328841555997, 0.039603132521910056, 0.0494936829712489, 0.039357068476744805, 0.04125693467213254, 0.05018302966796906, 0.047925703117331464, 0.04222475203274101, 0.052282115217131886, 0.14023223652812722, 0.12086801349826604, 0.16504517266717578, 0.13812650793606296, 0.1449199042903656, 0.13607189562276822, 0.12348766424539048, 0.1475349338244194, 0.16164966333868191, 0.15269445885695276, 0.17429939753946788, 0.16952477443520142, 0.15898896254720551, 0.1824648965982405, 0.16876774571534137, 0.17456283999930255, 0.17367185072375124, 0.15977828501813474, 0.0928000021072114, 0.10052543301206518, 0.11152307806238637, 0.09321608629525069, 0.11565777360653462, 0.11971046722096912, 0.12567313563299598, 0.1090824688666282, 0.10286169310841742, 0.15788234505599663, 0.16215449174116836, 0.17379508005739863, 0.15390321569043408, 0.15632918295945042, 0.15651232834689877, 0.141855478613796, 0.17175575983777058, 0.16826770154520376, 0.14181383724873264, 0.1466075305614286, 0.1456507089853909, 0.14359845003275917, 0.15381795949059673, 0.13529380058926432, 0.13484936102594458, 0.14485537118227332, 0.16134623182463204, 0.16558216863926078, 0.19242052501193063, 0.1550943774728688, 0.2020037973845128, 0.2080654506911329, 0.16013747528972067, 0.22919893676167735, 0.20350443868326262, 0.1553839189618399, 0.19228571937838035, 0.23376106126607166, 0.17729136813833135, 0.1330501298154, 0.18032962104358685, 0.16884997669371782, 0.14958128335216825, 0.15797886448451026, 0.15222790462297164, 0.18054552605049845, 0.1915960855026455, 0.17078203665016622, 0.16843883825755512, 0.17701967518787498, 0.17457786943087106, 0.1931993941491914, 0.17695040875689172, 0.19320411565443107, 0.057378630895255966, 0.04890817053095253, 0.06042077047372363, 0.05875892376287517, 0.0561738885947507, 0.049593860763262776, 0.057296650109017744, 0.053182849088807105, 0.06142778957803863]}, "mutation_prompt": null}
{"id": "da0386ad-2435-4858-a2db-8341fcd52f6b", "solution": "import numpy as np\nimport random\n\nclass ADMDFS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.dynamic_mutation_probability = np.ones(self.population_size)\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def dynamic_mutation(self, x, i):\n        if random.random() < self.dynamic_mutation_probability[i]:\n            if random.random() < self.levy_flight_probability:\n                return self.levy_flight(x)\n            else:\n                return x + np.random.uniform(-1.0, 1.0, self.dim)\n        else:\n            return x\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.dynamic_mutation(population[i], i)\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n                    self.dynamic_mutation_probability[i] = 0.8\n                else:\n                    self.dynamic_mutation_probability[i] = 0.2\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDFS", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Dynamic Mutation Strategy.", "configspace": "", "generation": 30, "fitness": 0.10152920569352182, "feedback": "The algorithm ADMDFS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.13.", "error": "", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.16999607957629048, 0.17454038534829885, 0.16030062896854647, 0.1576166861103131, 0.15150459852752884, 0.18995926383402506, 0.22763373940390164, 0.1578133690680228, 0.15936081523556567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05302703034153333, 0.05854951198195435, 0.03810741546060925, 0.03792655913735421, 0.037024048269834964, 0.046922048971208774, 0.03983538991599367, 0.045935559699205486, 0.04030664256696459, 0.028859523168345058, 0.03152001211245492, 0.03216608432910684, 0.020763164910624576, 0.028231719858607174, 0.030261836878185622, 0.0679926022567039, 0.041441018866708146, 0.022868898688199635, 0.9994226583643737, 0.08555788252204588, 0.14012832471331405, 0.07582654719155302, 0.07879722283479573, 0.4765768203673446, 0.9903412287240316, 0.07881607532273716, 0.865271850794248, 0.0713570702966212, 0.0755249983596874, 0.0897376269459943, 0.08079604467102564, 0.12013320068708422, 0.0638430987862334, 0.0920892991754354, 0.07317499124163718, 0.058409769584481186, 0.13067268988022984, 0.15977756347203398, 0.09093512542429982, 0.10362592167731943, 0.13292185144889768, 0.13483328003965867, 0.12949043093176293, 0.13973918546148967, 0.12828390541209556, 0.020732855044126364, 9.999999999998899e-05, 9.999999999998899e-05, 0.029888288003101615, 9.999999999998899e-05, 9.999999999998899e-05, 0.008275925409388263, 9.999999999998899e-05, 0.018011013872065496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006436918209921205, 0.016798454263165508, 0.016414321700272905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021744030415673077, 0.0710381934770008, 0.04737772548310948, 0.01868171861365553, 0.08627870168922891, 0.06142193917709504, 0.04931075345456537, 0.04273758849875264, 0.04293502878043909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011750485804073119, 9.999999999998899e-05, 0.0049040806819308225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21861116533245872, 0.19789304440471722, 0.20622939303044718, 0.1764590938945526, 0.19365575845416272, 0.17497948082269055, 0.19081691277246493, 0.18753624303097793, 0.20191155292678753, 0.031382767985349336, 0.04277145952350869, 0.0339461056923388, 0.04231560673027923, 0.0479896352744017, 0.05555279842175731, 0.05292709549318608, 0.0416259963415716, 0.04657542032899642, 0.12495841024137722, 0.11824038613158172, 0.18139256319351282, 0.14197651138756084, 0.13597987848559512, 0.13450377908201538, 0.13433344497223587, 0.12851589434377841, 0.12723252430620757, 0.15392377171313232, 0.14905511159612905, 0.17867274533495803, 0.15692619158993315, 0.16481102766435163, 0.16166797915640274, 0.1651928707979381, 0.17367131178729356, 0.19289806789985142, 0.09598657614999595, 0.12891866597177082, 0.10390486615234784, 0.09544430985188301, 0.09342473299441167, 0.11251373022026112, 0.10127062649001162, 0.1236261495121791, 0.09691156438703563, 0.14546657753872172, 0.15800096007665576, 0.15851176421599067, 0.14936228707949117, 0.16889336808721878, 0.16097787090146798, 0.13158956969909252, 0.16205075919580558, 0.15849195360959256, 0.14337144517481248, 0.1327567845498614, 0.1419870767518332, 0.13969933899240805, 0.15350402806080943, 0.14903661693025083, 0.13260748704939196, 0.1363086853733273, 0.16052331656944785, 0.14481565886949976, 0.1515462631967528, 0.15114472427168457, 0.15603045648550362, 0.20133688252217496, 0.14086823246156455, 0.15860967263177084, 0.16270069371519624, 0.17798123842455948, 0.1127410665312889, 0.15031564666651775, 0.14557629691535745, 0.16318202125106906, 0.15272939971641497, 0.17952497051392025, 0.14329046251825783, 0.18279842922361234, 0.1630837085356307, 0.1825829420824714, 0.17919333660283576, 0.1754289232749492, 0.18263896094861343, 0.1766324665607335, 0.16687729728494072, 0.20058962281346826, 0.1831118051733156, 0.20290357190902486, 0.05451086632944402, 0.04098186572416185, 0.04786468541390654, 0.04736847382145626, 0.05144980568344493, 0.04944394889610082, 0.04160959520486174, 0.05418996840623569, 0.05659403709531452]}, "mutation_prompt": null}
{"id": "89d25f8d-339a-4732-91f5-fe79c882bfad", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.025\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def select(self, x1, x2):\n        if random.random() < 0.5:\n            return x1\n        else:\n            return x2\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                x_new = self.select(population[i], x_new)\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control, and incorporating a probability-based selection mechanism to improve the convergence rate.", "configspace": "", "generation": 31, "fitness": 0.105023717478546, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.12.", "error": "", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.17578672193192635, 0.1720044405897937, 0.1433380717028595, 0.16233817430107722, 0.1669049090705388, 0.16933139047950918, 0.15145584418013636, 0.15399797290599349, 0.18928897965181324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227197774320679, 0.04384468495147087, 0.0411732434277392, 0.04549131653629834, 0.03628029073332395, 0.051318081813623406, 0.047091752287996336, 0.040450731190240896, 0.04360944264470601, 0.02653250853116207, 0.04425115076728947, 0.046654731742375444, 0.0252531703105755, 0.038498350560741135, 0.040987181745112844, 0.03326577788165486, 0.026490388897180472, 0.033003885784140374, 0.2911499600094092, 0.5131713730439436, 0.7872733118642773, 0.08986878353190608, 0.5031413347032758, 0.8789789272946861, 0.4476135246595391, 0.468338360194943, 0.8049716853051458, 0.067091815099525, 0.0560548889349618, 0.06233444290614165, 0.05166811805993399, 0.04952246736056132, 0.04828415895205196, 0.07474693953894218, 0.059545757516374365, 0.0788021748813359, 0.1191668853961968, 0.1256192095762939, 0.10779660480788056, 0.13032960500586666, 0.12640793523298122, 0.12422492418540443, 0.09926930634932762, 0.11628920966444345, 0.20419805791663825, 9.999999999998899e-05, 0.0019707601778858885, 0.0009283218131196369, 9.999999999998899e-05, 9.999999999998899e-05, 0.017265154099939117, 9.999999999998899e-05, 9.999999999998899e-05, 0.023007803285931883, 9.999999999998899e-05, 0.0016452839984236745, 9.999999999998899e-05, 0.0011298311741989586, 0.007225642001665977, 0.02009633656238674, 0.010246329720740688, 9.999999999998899e-05, 0.0044552377098130425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03949119446519689, 0.033561503231007705, 0.05865859077621849, 0.03424970644247205, 0.021122902856591463, 0.018298638674358325, 0.03982029970395384, 0.07790246001549517, 0.02730524061747397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003180233038634128, 9.999999999998899e-05, 9.999999999998899e-05, 0.008633365269985371, 0.003202211826861423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17263874212483765, 0.19917449113999897, 0.23348184757204615, 0.173954078615282, 0.18487570943268128, 0.1740897468723135, 0.19112420811042907, 0.19205037602538821, 0.17052268440827845, 0.03386453307811921, 0.037540667604671785, 0.028564849893295663, 0.039911245624336344, 0.04658064261815176, 0.05056461601541484, 0.07642786863846307, 0.049975205476833984, 0.04689195967255033, 0.13799010796205546, 0.12378691069312009, 0.12948784022063609, 0.13746253152258137, 0.14633103737526054, 0.1275336292267535, 0.13063771327120155, 0.14457003613140096, 0.12350200499602071, 0.16065336105313566, 0.1619005230213113, 0.1705862628901661, 0.16564925446990109, 0.15883711063449246, 0.16142169782872917, 0.15643950699782783, 0.1740529703772321, 0.17302755278320614, 0.12804240144554024, 0.0975122217369333, 0.11512964808077908, 0.10672881820197089, 0.1304617516087937, 0.10644232966164069, 0.12320982583633355, 0.1236499298664494, 0.12311758238254844, 0.1491602322168779, 0.16304744718582442, 0.16258194209467014, 0.16051248212666547, 0.14407022772812028, 0.1581217791076751, 0.16190746632014597, 0.14987933876148085, 0.18105915686533036, 0.1363284161764734, 0.14648098569301093, 0.12983074922824323, 0.14321360035045705, 0.14416491685986588, 0.13161127989195553, 0.14508478538686764, 0.15149650199557618, 0.16052112175259736, 0.1967296716832012, 0.1684241154041869, 0.24142820008907395, 0.1620670385393429, 0.17211188586235626, 0.1553116117688469, 0.18866675004764588, 0.16307958916554766, 0.16868333721838968, 0.1477078124695247, 0.15079755168557663, 0.1422020026401053, 0.15394410626053667, 0.12072339408410748, 0.11719498974462317, 0.18850912514385443, 0.14859615551785044, 0.11927181682265109, 0.18043209464245757, 0.17603915711340945, 0.17982574307676857, 0.18495737556157044, 0.17428506897739282, 0.20527609972512595, 0.17127923119500832, 0.1904890445694264, 0.17201268975087147, 0.04987028581807951, 0.045505972121333116, 0.05823210187813077, 0.0527230963603641, 0.049576732792321, 0.05445385663299618, 0.03703485995397826, 0.04730700442347879, 0.05663096186802308]}, "mutation_prompt": null}
{"id": "181fb5b1-9a6a-47ce-9db0-9a9ac874d14f", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50  # Reduced population size\n        self.crossover_probability = 0.95  # Increased crossover probability\n        self.mutation_probability = 0.05\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.02  # Reduced probability of self-adaptive parameter control\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def cauchy_mutation(self, x):\n        mu = 0.0\n        gamma = 1.0\n        return x + gamma * (np.random.standard_cauchy(self.dim) * np.exp(-mu**2 / (2 * gamma**2)))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        elif random.random() < self.levy_flight_probability:\n            return self.cauchy_mutation(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by using probability 2, which involves changing the individual lines of the selected solution to refine its strategy, by applying the following modifications: reducing the population size, increasing the crossover probability, and introducing a novel mutation strategy based on the combination of Levy flights and Cauchy mutations.", "configspace": "", "generation": 32, "fitness": 0.09868642867883543, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.10.", "error": "", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.18860123648782212, 0.17701810325185985, 0.14954333387181284, 0.1569370422692522, 0.18745477911023667, 0.1812379954599006, 0.18606374807192982, 0.16579116527576676, 0.22242816553372968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040853059903558475, 0.042605848304211213, 0.03739605278657543, 0.058520052375704346, 0.04175626385067022, 0.05043064377847695, 0.05284882843848826, 0.058771117046520494, 0.03892184366126206, 0.03467246382698119, 0.022747654354124958, 0.03698375566008638, 0.031222064877228117, 0.05136073779053407, 0.03286018048136252, 0.06648790770713187, 0.03919207785260026, 0.029801920934964476, 0.09267378449613117, 0.10261912596147937, 0.1063384904789878, 0.11875645500433807, 0.0966459588831774, 0.7841442534976603, 0.09784796564063547, 0.9561221906053816, 0.10899249568613356, 0.10072167690764766, 0.07035426954591673, 0.08252256220076104, 0.08477632032430882, 0.06325983169439475, 0.06375999225133622, 0.04198547967637356, 0.06066999396294648, 0.090639798136394, 0.1275167349005677, 0.1449511289601132, 0.09058654427619861, 0.1398104802256105, 0.10566353584192689, 0.12961886099219377, 0.14120331591709745, 0.13831601749317946, 0.10699149697019128, 9.999999999998899e-05, 0.0065815016461723275, 9.999999999998899e-05, 0.06059313650866738, 0.0410192158404632, 0.04735148199722372, 0.01748820023025832, 9.999999999998899e-05, 0.026937943871462644, 0.012400686059799382, 0.005097418552733157, 0.016663136201159223, 9.999999999998899e-05, 0.002670303221251169, 0.011961990306394332, 0.0002502990126915794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037463651853982594, 0.06968304654352109, 0.056422444044600506, 0.06965964714686945, 0.06520998344781237, 0.056202532417726436, 0.057762254408567415, 0.05670507455111673, 0.018641766399333237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18638312132433044, 0.18142324505421692, 0.17761496661460296, 0.2311426038102904, 0.19350830391974683, 0.1766270302047589, 0.20642536743266515, 0.1870304798322192, 0.2073264422827844, 0.05574219972175032, 0.04179788924261152, 0.040950547387049285, 0.05607786400394055, 0.04175642444609007, 0.04618261869599172, 0.041838474292804295, 0.04263178293437886, 0.04721936601294363, 0.1512925804954819, 0.13142809731075467, 0.1835834600687184, 0.1374692425787023, 0.14878917894299026, 0.13418426142246498, 0.1285554392124414, 0.14418578257356351, 0.12491395117476567, 0.1596613080365894, 0.1733396730361696, 0.16361864877595766, 0.15457685555194878, 0.16684474257747406, 0.15702266384550945, 0.173656392429397, 0.1836583246813257, 0.17311690332872243, 0.10861821158310558, 0.10312993071225351, 0.11132888875815339, 0.10950785561121046, 0.12745294625938364, 0.10808161337739763, 0.10502342192220626, 0.12438740243512403, 0.10476730844208049, 0.16120676175920967, 0.1692358902216381, 0.18985619532347175, 0.17268289938479375, 0.1432817733329601, 0.1636181203445065, 0.14108901238273264, 0.14767080256790455, 0.1445249158740628, 0.15299305481385217, 0.14763164850323285, 0.1481683111600376, 0.1411495154177359, 0.15205006757599093, 0.14169314944281453, 0.141036174195461, 0.14195955361689194, 0.14829880427154418, 0.1710552718004572, 0.1658493890626478, 0.18252417081280914, 0.18494700963165622, 0.1410867935410577, 0.17536406543625926, 0.15557694864629978, 0.15709646105524366, 0.17008567515439021, 0.15431474370503184, 0.17122547825100543, 0.1623990840963626, 0.14326318250819658, 0.1577598178177927, 0.16764036113092862, 0.14384586842283664, 0.16813420225704123, 0.23164227872731002, 0.1826097392080055, 0.20085224909696886, 0.17703659396701243, 0.1853452220173325, 0.1991245209959588, 0.21475168645266063, 0.19991883374769337, 0.18090208455796764, 0.18118678217033046, 0.05025387001063952, 0.04600038332940315, 0.06572479780850149, 0.04918662708010091, 0.060811421371406826, 0.07141382364302695, 0.05114934912404712, 0.05617939725767973, 0.0670274304307984]}, "mutation_prompt": null}
{"id": "743becd7-6416-44f4-8a93-79be9fb7bb96", "solution": "import numpy as np\nimport random\n\nclass ADMDF_refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.03\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.local_search_iterations = 10\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def local_search(self, x):\n        for _ in range(self.local_search_iterations):\n            x_new = x + np.random.uniform(-0.1, 0.1, self.dim)\n            if func(x_new) < func(x):\n                x = x_new\n        return x\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n            for i in range(self.population_size):\n                self.x_best = self.local_search(self.x_best)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Novel Local Search Strategies.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {}, "mutation_prompt": null}
{"id": "7fd5fd99-5db3-424e-869e-7462950cf0c4", "solution": "import numpy as np\nimport random\n\nclass ADMDF_refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.dynamic_levy_flight_probability = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            if random.random() < self.dynamic_levy_flight_probability:\n                return self.levy_flight(x)\n            else:\n                return x + np.random.uniform(-1.0, 1.0, self.dim)\n        else:\n            return x\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.mutation(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n            self.dynamic_levy_flight_probability = max(0.01, self.dynamic_levy_flight_probability - 0.001)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_refined", "description": "Novel Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Dynamic Levy Flight Probability and Improved Crossover Strategy", "configspace": "", "generation": 34, "fitness": 0.08530751508938161, "feedback": "The algorithm ADMDF_refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.16388307755139309, 0.1541843133565166, 0.15501437608327195, 0.14469859340889835, 0.16324658972408612, 0.15585629998698936, 0.15795878391222373, 0.15225898569063756, 0.14720918677666595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03753681952503607, 0.051357462159436595, 0.032142545185332216, 0.035270420990072715, 0.03431937481216496, 0.04053284207620822, 0.049265552293433434, 0.038114317906405404, 0.053887018021549604, 0.023300239508031506, 0.033372761826909625, 0.032330906056854625, 0.03243420751325832, 0.025831368735228843, 0.024916837180565143, 0.04015683997717512, 0.027932247423935075, 0.04554985479958673, 0.0955680039314335, 0.0848765242888232, 0.07069995455569111, 0.07979599173993357, 0.09674297788918396, 0.109550525154398, 0.09184159230346156, 0.09332814495636643, 0.07873628215777118, 0.06380259284747503, 0.061974023472443296, 0.06944185605357178, 0.08109096921009984, 0.0877803103667919, 0.06211878154730932, 0.06666310257604824, 0.04786897363028553, 0.09004553078410349, 0.10359065528764277, 0.12403238471351763, 0.08921669877209859, 0.1286496964531525, 0.12821963257130886, 0.10277286783841477, 0.10512644237674229, 0.20203883305295411, 0.10182599017708982, 9.999999999998899e-05, 0.011326923946021972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00046921061136739883, 9.999999999998899e-05, 0.021507739245571256, 0.008872741871977952, 0.002101872386416459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01737084103835529, 0.0043473806648245406, 0.0019649832254321487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05702579539190378, 0.07243311439533084, 0.04326221360029958, 0.015632967483812932, 0.08838989989705459, 0.015968423498437412, 0.050470736379371606, 0.03528804334468383, 0.018342033731938656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21187032664696315, 0.1894623928995387, 0.18081196191629156, 0.21123563093933728, 0.19049194956208526, 0.18760461931638184, 0.20075227996479406, 0.1812147712028389, 0.18473130465028376, 0.04559838914658654, 0.04052783290246753, 0.03831683498819438, 0.0559093747862458, 0.034544993739114904, 0.04882112371551173, 0.04710041900430373, 0.03884497433596645, 0.04177042515670715, 0.162779242008538, 0.12278855336477901, 0.1790553326473855, 0.13870264335973903, 0.1414619605943186, 0.16034099286405035, 0.1212122927953434, 0.12082412073356263, 0.11997789354048727, 0.16052572488883143, 0.16277230143685828, 0.16158780969129383, 0.153091109290328, 0.1535002778765251, 0.1666075179948341, 0.16631290650654695, 0.17367457709284662, 0.16137144795750935, 0.11150535735412215, 0.09206822821716543, 0.1091865108374912, 0.09933486238682776, 0.09175332062755714, 0.10496859824370186, 0.10255369619882526, 0.1367327835079124, 0.11196343295494737, 0.14300113012372695, 0.16110894798296194, 0.14953295538581246, 0.16815589632738248, 0.1410790753812733, 0.1495555120165134, 0.14187186161342358, 0.1396887247581351, 0.17608309346440398, 0.14278811026701588, 0.14698362560047518, 0.14061625401908662, 0.12954622943691285, 0.1401021574650695, 0.13978237441933894, 0.14471806761403727, 0.14037590337739403, 0.1605247860131993, 0.1349991766206673, 0.1553413801503022, 0.21347800752621293, 0.1461863516366949, 0.18748884425676304, 0.14579340705523192, 0.15042891998023855, 0.20088808959358917, 0.17474306159580077, 0.14568243898917588, 0.15572602245087963, 0.19673630344757442, 0.1276420869498075, 0.13308712437753278, 0.149653982208785, 0.1596561417307938, 0.16049548890478416, 0.12519787414709505, 0.19647664147056965, 0.1856906555021942, 0.1746535460621269, 0.16760854452951057, 0.17026412037088412, 0.17818581051191773, 0.17690654168958753, 0.18212930735244648, 0.16989945068038015, 0.04750177580253934, 0.049945103629508436, 0.03970446074979461, 0.03938764317712906, 0.05842086099007915, 0.061373645068753646, 0.04740121177932033, 0.05304570201509051, 0.05348964928778499]}, "mutation_prompt": null}
{"id": "b781769b-5c15-4d3d-b6e8-221ef9ab375c", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                if random.random() < 0.1:  # Change the individual lines of the selected solution with probability 0.1\n                    x_new = self.mutation(population[i])\n                else:\n                    x_new = self.crossover(population[i], self.levy_flight(population[i]))\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution.", "configspace": "", "generation": 35, "fitness": 0.12066219090390475, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "63bf11a1-4cbc-47c5-b4fe-357b54378f3d", "metadata": {"aucs": [0.16320384103577812, 0.1808636021155411, 0.18843321728104478, 0.19726870463203083, 0.15829567071480033, 0.15311421956246318, 0.1689243833534756, 0.16204852880041565, 0.15236987805748525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06360008526431482, 0.04991905647112349, 0.05878080853765333, 0.037686537916258755, 0.04408729365395159, 0.04774610780485877, 0.041108357082838665, 0.040391330783547175, 0.038041944165922215, 0.027961572329325834, 0.03368480824116327, 0.023288212629114957, 0.02694514417428795, 0.04977553017852865, 0.02947749345034867, 0.02487069026732225, 0.035464489495168006, 0.021453106096159913, 0.9298010948874587, 0.998640947454288, 0.8963235629727457, 0.9605830142127251, 0.8735710003242804, 0.960258504954405, 0.89143517017171, 0.9524028163784034, 0.8521118439852893, 0.06959040067893707, 0.05920598189866033, 0.0750192191947483, 0.07128070030097111, 0.0622459439650096, 0.060215072935481895, 0.10528392855650559, 0.0842944711823227, 0.06548915223101326, 0.14021428260234226, 0.1132925550613385, 0.11730823523542444, 0.1258985028680547, 0.09880301987316376, 0.08763569203274368, 0.09654870158429218, 0.14016753655918146, 0.15230088405791686, 9.999999999998899e-05, 9.999999999998899e-05, 0.014849857685867884, 0.008077670579477503, 0.046408223798057535, 9.999999999998899e-05, 0.012424489001276018, 0.006174637637521352, 0.018017665318566634, 0.012370115855240171, 0.07067967194610714, 9.999999999998899e-05, 0.001774908347608073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004242250323902463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05774805245616155, 0.07958183465673774, 0.030342627813150114, 0.02881461767428939, 0.024363961957639013, 0.050879060213449345, 0.06308372377512383, 0.05725792836284749, 0.05143270825986723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057337124082528, 0.004412288225406846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1962238307536328, 0.17683239954166785, 0.1704644982132606, 0.21784516218922167, 0.19440443822932763, 0.19091382434129034, 0.17286236132205468, 0.19899259266819413, 0.19410485021887458, 0.03609054386664157, 0.03341042767932467, 0.037543686410374866, 0.03965270879220839, 0.03611697559495297, 0.0401018197328149, 0.04723643811414002, 0.03103148609995765, 0.03974792195487664, 0.12177417094751675, 0.15299174276544358, 0.13099915579957233, 0.15398682003318886, 0.13485797034425573, 0.1195003360744582, 0.1121041838724075, 0.13752850310183418, 0.14124879826565406, 0.16781373120496468, 0.17035023070864574, 0.16466869400521067, 0.15245731435090037, 0.15990446863765995, 0.16425494262857532, 0.15486768905662718, 0.17366152346300912, 0.15359440912991562, 0.10542287099188419, 0.1062789149570692, 0.09724540247561853, 0.10342457615352707, 0.09627651303587537, 0.10183266396808444, 0.10388857839052379, 0.10537796648230835, 0.10395670485886244, 0.16216788723505193, 0.1592345563985349, 0.14618222637271594, 0.14374901943857132, 0.15267042729652713, 0.16106564669583734, 0.146738449289187, 0.15019375656924894, 0.1834541970577478, 0.13105751626548967, 0.1005674342033992, 0.14375236840003203, 0.13708968349545014, 0.15701191607333564, 0.12946695437512568, 0.1375083717093608, 0.11912327177320126, 0.1605084278214981, 0.15953019299946258, 0.1492798922457087, 0.1411384357259614, 0.15596623422819578, 0.14410742712969637, 0.16689025193198848, 0.1672296779024638, 0.2054298527621109, 0.17259640525421727, 0.1965522927665877, 0.15274114006199835, 0.16653517933987494, 0.1402361442162433, 0.12212817431714595, 0.15005654259206258, 0.1335561701017427, 0.1444091917275966, 0.13724494092375372, 0.16719081954906634, 0.17235305562374548, 0.16770589077007758, 0.1660676131674118, 0.19954890749551957, 0.16958781366433906, 0.1830187904304733, 0.18572565701859178, 0.17559231110802775, 0.05153022053716361, 0.06330490777610753, 0.06589390989379185, 0.048130617208441806, 0.04413125643297411, 0.06679333737006476, 0.050975388530667964, 0.04844210029399987, 0.043105058982707334]}, "mutation_prompt": null}
{"id": "805af208-6cc3-45c7-acf9-b363a0575d28", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                if random.random() < 0.1:  # Change the individual lines of the selected solution with probability 0.1\n                    x_new = self.mutation(population[i])\n                else:\n                    x_new = self.crossover(population[i], self.levy_flight(population[i]))\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b781769b-5c15-4d3d-b6e8-221ef9ab375c", "metadata": {"aucs": [0.16320384103577812, 0.1808636021155411, 0.18843321728104478, 0.19726870463203083, 0.15829567071480033, 0.15311421956246318, 0.1689243833534756, 0.16204852880041565, 0.15236987805748525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06360008526431482, 0.04991905647112349, 0.05878080853765333, 0.037686537916258755, 0.04408729365395159, 0.04774610780485877, 0.041108357082838665, 0.040391330783547175, 0.038041944165922215, 0.027961572329325834, 0.03368480824116327, 0.023288212629114957, 0.02694514417428795, 0.04977553017852865, 0.02947749345034867, 0.02487069026732225, 0.035464489495168006, 0.021453106096159913, 0.9298010948874587, 0.998640947454288, 0.8963235629727457, 0.9605830142127251, 0.8735710003242804, 0.960258504954405, 0.89143517017171, 0.9524028163784034, 0.8521118439852893, 0.06959040067893707, 0.05920598189866033, 0.0750192191947483, 0.07128070030097111, 0.0622459439650096, 0.060215072935481895, 0.10528392855650559, 0.0842944711823227, 0.06548915223101326, 0.14021428260234226, 0.1132925550613385, 0.11730823523542444, 0.1258985028680547, 0.09880301987316376, 0.08763569203274368, 0.09654870158429218, 0.14016753655918146, 0.15230088405791686, 9.999999999998899e-05, 9.999999999998899e-05, 0.014849857685867884, 0.008077670579477503, 0.046408223798057535, 9.999999999998899e-05, 0.012424489001276018, 0.006174637637521352, 0.018017665318566634, 0.012370115855240171, 0.07067967194610714, 9.999999999998899e-05, 0.001774908347608073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004242250323902463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05774805245616155, 0.07958183465673774, 0.030342627813150114, 0.02881461767428939, 0.024363961957639013, 0.050879060213449345, 0.06308372377512383, 0.05725792836284749, 0.05143270825986723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017057337124082528, 0.004412288225406846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1962238307536328, 0.17683239954166785, 0.1704644982132606, 0.21784516218922167, 0.19440443822932763, 0.19091382434129034, 0.17286236132205468, 0.19899259266819413, 0.19410485021887458, 0.03609054386664157, 0.03341042767932467, 0.037543686410374866, 0.03965270879220839, 0.03611697559495297, 0.0401018197328149, 0.04723643811414002, 0.03103148609995765, 0.03974792195487664, 0.12177417094751675, 0.15299174276544358, 0.13099915579957233, 0.15398682003318886, 0.13485797034425573, 0.1195003360744582, 0.1121041838724075, 0.13752850310183418, 0.14124879826565406, 0.16781373120496468, 0.17035023070864574, 0.16466869400521067, 0.15245731435090037, 0.15990446863765995, 0.16425494262857532, 0.15486768905662718, 0.17366152346300912, 0.15359440912991562, 0.10542287099188419, 0.1062789149570692, 0.09724540247561853, 0.10342457615352707, 0.09627651303587537, 0.10183266396808444, 0.10388857839052379, 0.10537796648230835, 0.10395670485886244, 0.16216788723505193, 0.1592345563985349, 0.14618222637271594, 0.14374901943857132, 0.15267042729652713, 0.16106564669583734, 0.146738449289187, 0.15019375656924894, 0.1834541970577478, 0.13105751626548967, 0.1005674342033992, 0.14375236840003203, 0.13708968349545014, 0.15701191607333564, 0.12946695437512568, 0.1375083717093608, 0.11912327177320126, 0.1605084278214981, 0.15953019299946258, 0.1492798922457087, 0.1411384357259614, 0.15596623422819578, 0.14410742712969637, 0.16689025193198848, 0.1672296779024638, 0.2054298527621109, 0.17259640525421727, 0.1965522927665877, 0.15274114006199835, 0.16653517933987494, 0.1402361442162433, 0.12212817431714595, 0.15005654259206258, 0.1335561701017427, 0.1444091917275966, 0.13724494092375372, 0.16719081954906634, 0.17235305562374548, 0.16770589077007758, 0.1660676131674118, 0.19954890749551957, 0.16958781366433906, 0.1830187904304733, 0.18572565701859178, 0.17559231110802775, 0.05153022053716361, 0.06330490777610753, 0.06589390989379185, 0.048130617208441806, 0.04413125643297411, 0.06679333737006476, 0.050975388530667964, 0.04844210029399987, 0.043105058982707334]}, "mutation_prompt": null}
{"id": "da463014-65f9-4e22-a154-dbd4b7f177ac", "solution": "import numpy as np\nimport random\n\nclass ADMDF_Chaos:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.chaos_map = np.array([[0, 0.3, 0.6], [0.3, 0, 0.7], [0.6, 0.7, 0]])\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            r = np.random.uniform(-1.0, 1.0, self.dim)\n            for i in range(self.dim):\n                r[i] = self.chaos_map[i % 3, i % 3] * r[i] + (1 - self.chaos_map[i % 3, i % 3]) * x[i]\n            return x + r\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                if random.random() < 0.21:  # Change the individual lines of the selected solution with probability 0.21\n                    x_new = self.mutation(population[i])\n                else:\n                    x_new = self.crossover(population[i], self.levy_flight(population[i]))\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_Chaos", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Novel Mutation Strategies inspired by Chaos Theory.", "configspace": "", "generation": 37, "fitness": 0.11853550214928964, "feedback": "The algorithm ADMDF_Chaos got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "b781769b-5c15-4d3d-b6e8-221ef9ab375c", "metadata": {"aucs": [0.14809638758736432, 0.1548173610446425, 0.16750305077291783, 0.18777901788620377, 0.19518861454768466, 0.2002583413026222, 0.16487849365763363, 0.13787232798436178, 0.15848520880504946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017179237461765196, 0.04242436173324626, 0.04240024557797484, 0.03751855278662475, 0.049244061172308284, 0.0346553220708673, 0.04690735747868435, 0.03982905684478122, 0.03128258031523423, 0.043195499890886224, 0.022811124426539542, 0.036721706455415504, 0.041484454182292074, 0.027757503414015283, 0.022250873398311333, 0.025168406950304756, 0.06862183630048424, 0.024335840281202725, 0.02852104946050882, 0.9994364979320568, 0.9874705817330528, 0.8964403407556789, 0.9883650045368315, 0.9302727563400357, 0.8461737294155229, 0.9356160895358114, 0.9889623918862409, 0.6529081928753853, 0.07775329648872376, 0.07728283063723829, 0.07021481419311826, 0.06738695776567694, 0.06008913431441831, 0.08091059430067293, 0.05967311874020542, 0.04565611261742619, 0.07767526471809194, 0.11869272544965859, 0.12896715642784784, 0.09064616448009344, 0.0930770573502776, 0.12178505411452933, 0.11703392139519564, 0.09616803277949115, 0.12174667447770537, 0.11107085059783295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007665794920043267, 9.999999999998899e-05, 9.999999999998899e-05, 0.001015803601110421, 9.999999999998899e-05, 0.020115906532052752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034940183144133163, 0.018336105601511776, 0.0013129132174697355, 9.999999999998899e-05, 0.0014278894241788187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03908219528721424, 0.07091092537872556, 0.023749228779489373, 0.0609565192424214, 0.023614136026897214, 0.038583843112975025, 0.047009281743638165, 0.053920782614296336, 0.02286581196083537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0042941643572570465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0074451194002609355, 9.999999999998899e-05, 0.19348925381270354, 0.1936742057407359, 0.2179653163218036, 0.18976743369663374, 0.16434605970928717, 0.17365184537481926, 0.20603335372577236, 0.17350744893544212, 0.20013519426637438, 0.06508641724899644, 0.045007462131242626, 0.032671260834751914, 0.03980495375174864, 0.026541690595843992, 0.046865331790387654, 0.041357064347280925, 0.04719566504743289, 0.05300772099498918, 0.13179824817427166, 0.12156885856075494, 0.12301285881973001, 0.13908457386798234, 0.13485889810688045, 0.13718004218584978, 0.13035653630529453, 0.13101853057297663, 0.16188199214755372, 0.1639714350613376, 0.15936030673679746, 0.16804823601405128, 0.15864286784039194, 0.1639046618451777, 0.17022879558124682, 0.18107040022625165, 0.17366152346300912, 0.16547311425445566, 0.10104496308787625, 0.0902648148454488, 0.09991080845804279, 0.10130279665760555, 0.09444234369685744, 0.11708363938921762, 0.09969192811254746, 0.09966450955155237, 0.10955782043313722, 0.17292289784103143, 0.14886394128164282, 0.190118714752461, 0.1763019565298427, 0.1412192862592463, 0.17529999044591604, 0.16814096944425416, 0.15101771429136157, 0.14127174669872422, 0.12882528056154074, 0.14154486174679837, 0.1443844467842813, 0.14003131560036686, 0.14131670156152398, 0.13792198633862607, 0.14400899354476882, 0.12490554655216324, 0.1621715663809855, 0.1644704393833295, 0.14139772885365387, 0.16848142061014948, 0.1547131194813457, 0.14014646474678705, 0.1536194059518493, 0.13190301107562552, 0.1434769474838149, 0.16635312855757456, 0.16009973116550025, 0.12800504783963318, 0.15782823774227583, 0.1458846266532906, 0.12464409180185065, 0.12823909856793703, 0.1278141972526199, 0.12734623220131613, 0.12639298105115593, 0.16400721309742317, 0.18838807445160988, 0.186122433304154, 0.17888857269070613, 0.1863562551839446, 0.16566296326396257, 0.1806627594574407, 0.18703524899762425, 0.19398524338848733, 0.047788851649814945, 0.04759130886768359, 0.059611267014826996, 0.04451273676805356, 0.04814472308102635, 0.05525025229157998, 0.04568328621771267, 0.044136118419458414, 0.04716180129531422]}, "mutation_prompt": null}
{"id": "c687aae5-57d6-449b-8962-1eb768c3227e", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                if random.random() < 0.1:  # Change the individual lines of the selected solution with probability 0.1\n                    x_new = self.mutation(population[i])\n                else:\n                    x_new = self.crossover(population[i], self.levy_flight(population[i]))\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution.", "configspace": "", "generation": 38, "fitness": 0.11898434259010732, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "b781769b-5c15-4d3d-b6e8-221ef9ab375c", "metadata": {"aucs": [0.16864202376517334, 0.175243679142293, 0.1747596373821736, 0.18725009993978758, 0.1660343715288891, 0.1536738680064922, 0.17062621457139082, 0.14995722760746666, 0.16913365988725326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04180985948837057, 0.0405713139419539, 0.038807740804738367, 0.038432509188530695, 0.038093101421103004, 0.032949492410356274, 0.04225305043155181, 0.03946810179985605, 0.042033228462772465, 0.026598990346549334, 0.03862165549433427, 0.029398849325893983, 0.03205348831755295, 0.019593364745776, 0.029671326805743026, 0.02320762605686144, 0.028665505766609978, 0.043943742030230215, 0.9325226385075558, 0.9986402927557282, 0.5468027682992906, 0.7832375276881487, 0.921863814412839, 0.8592503820728747, 0.9674916072553055, 0.9544383566557898, 0.9842581496024724, 0.06433564788462076, 0.06858263365966999, 0.06793467448287005, 0.07486762600233454, 0.06104125123913784, 0.03848528983811994, 0.09000633082306775, 0.07802655481497545, 0.07139108494755875, 0.10123064741965049, 0.14546731625520282, 0.14827355709602796, 0.1124091200514209, 0.1260231800426982, 0.1158388575174506, 0.1262962140900752, 0.11017397474254342, 0.11252800910289151, 0.039073072834222344, 9.999999999998899e-05, 0.011772805765696615, 9.999999999998899e-05, 0.04657316150154389, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017406090843841038, 0.012370115855240171, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006912444560638553, 0.004183805874887869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04685364623917854, 0.06890729483821267, 0.04375866648160687, 0.03689684716303798, 0.05480835206364498, 0.04792789794040908, 0.07080666900371946, 0.05231177989465596, 0.045108398445750764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014799125988030237, 9.999999999998899e-05, 0.012544638441701284, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001960453325464684, 9.999999999998899e-05, 9.999999999998899e-05, 0.1730110467728444, 0.1780578167037773, 0.18188781059383896, 0.19860957208363283, 0.19009534738356648, 0.19592924803841272, 0.18922473282671493, 0.17303988928123093, 0.19728601194060524, 0.047340617918263495, 0.03631757600995622, 0.04962479936158126, 0.0357922147696077, 0.03715577170188822, 0.04365215928496069, 0.03954118592121614, 0.045774523880789064, 0.06788761810237398, 0.12759984532636826, 0.16780029195532042, 0.12791689533964223, 0.1498259021620817, 0.1437362990435921, 0.11462347073788803, 0.1364169839110595, 0.1295148560362761, 0.13741481335931982, 0.15960488734475387, 0.17348738969941246, 0.16843174743682687, 0.15947087594487608, 0.15713204100309808, 0.16154710728453303, 0.15862991149412486, 0.17367395937481578, 0.15289104052516445, 0.10094356233001622, 0.09602409815613555, 0.11146878789498771, 0.09812894460846988, 0.09986329405639116, 0.10547172904955937, 0.10396028888738107, 0.10234585694694964, 0.10233944524157634, 0.14536206886580272, 0.186437261067964, 0.14158906741686206, 0.14572395796059268, 0.14218995877801022, 0.14787205020456018, 0.13964938909655988, 0.15000714343446997, 0.18290771690648833, 0.13860342538252657, 0.13630951002786185, 0.13801515005393628, 0.14404335699560145, 0.1562230173525928, 0.1387070913934676, 0.14115869109635681, 0.1313678473694576, 0.1605084278214981, 0.16611997890712393, 0.16740032797108784, 0.17540346354660197, 0.20873473623162864, 0.14457952209917735, 0.14175049605928003, 0.1672210278044266, 0.15623975246477406, 0.12272710975074719, 0.15379641801302657, 0.14587014781047003, 0.1565672390788142, 0.15534778443505493, 0.134973849328347, 0.17041894781917055, 0.12555782761545575, 0.13076344004975893, 0.1258044799381205, 0.1768809859559637, 0.18329798788572438, 0.2066331319126854, 0.17084012721340947, 0.20245757131328757, 0.1924325639817479, 0.1755873840881833, 0.18188869294770238, 0.19205792628714413, 0.059576120727039994, 0.044153313856692744, 0.0572446319996579, 0.0480609869006714, 0.05334266323740433, 0.04740947827494435, 0.05043225710270216, 0.04702159999885425, 0.05433453290722068]}, "mutation_prompt": null}
{"id": "7258246c-b01e-453e-ae8b-3a2ee728428c", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                if random.random() < 0.14:  # Change the individual lines of the selected solution with probability 0.14\n                    x_new = self.mutation(population[i])\n                else:\n                    x_new = self.crossover(population[i], self.levy_flight(population[i]))\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution, and further refined to change the individual lines of the selected solution with probability 0.14.", "configspace": "", "generation": 39, "fitness": 0.11977107779699618, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "b781769b-5c15-4d3d-b6e8-221ef9ab375c", "metadata": {"aucs": [0.1645693169549458, 0.16036270606221237, 0.17197036659010356, 0.1899958821429728, 0.15893302144391308, 0.1571385455314045, 0.16846690492022043, 0.14215743181110807, 0.14985027146674534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03578560089760663, 0.03556396620593116, 0.03797179953790364, 0.03346314532232186, 0.0361198441153443, 0.036367968752045066, 0.04396947143760066, 0.04579672766441234, 0.039004935804011764, 0.024470384782971255, 0.031028055677976618, 0.0285300477893361, 0.029699504124180764, 0.037533780051115406, 0.028644859147865853, 0.02884632183759217, 0.023117757768037372, 0.04434610100372305, 0.7019757278178556, 0.998640947454288, 0.8031698705412422, 0.9406528874975667, 0.9308585594398705, 0.9943311517457726, 0.9231290989949555, 0.8475094733216659, 0.9842581496024724, 0.06438389095953245, 0.06468149481520047, 0.059374166517779825, 0.07693700938196213, 0.060103317570362025, 0.08303254519434144, 0.08792197847541361, 0.060755806394243383, 0.05779341375441649, 0.14931309377630586, 0.13842120807139746, 0.126111172032212, 0.11166095907586171, 0.11114615325287414, 0.1284292546177831, 0.09837507986461291, 0.11420266162984372, 0.15254045725459398, 9.999999999998899e-05, 0.01829287990485029, 0.014710143201699943, 0.007680653483775113, 0.06261668767467887, 0.0009123828481799601, 0.0036236163850260628, 9.999999999998899e-05, 0.05208661850101959, 9.999999999998899e-05, 0.0013880202864631208, 0.009211804678829871, 0.01638369762770564, 0.000552962551903291, 0.009655174015138046, 0.0035277800944346627, 0.014857213396267777, 0.008649287121101579, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0256878451747522, 0.08648478514616331, 0.042200129022601174, 0.08015703373555771, 0.0483454252688853, 0.08232361273419497, 0.06635666876209145, 0.05474206318832153, 0.028055838140467082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0059954773800862116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18219596076770372, 0.18124865063862194, 0.18593756659809868, 0.2027613390675589, 0.18315217510196857, 0.1969063744364733, 0.18559737823097133, 0.19015341057028978, 0.19021776883750863, 0.03629890294469973, 0.04388412304635325, 0.03445307231746719, 0.03740590287139256, 0.03640287749636539, 0.027716514528700054, 0.03719250181298428, 0.04272134292538399, 0.036569767852097756, 0.12024984039017617, 0.1280115420368373, 0.12387682782745446, 0.1435260588859839, 0.13732310282714244, 0.1321532102758416, 0.12059837769868176, 0.13684691157582451, 0.11716484983869646, 0.152095401972423, 0.15526066500292746, 0.16122255219483372, 0.16400605472640983, 0.1613043905103212, 0.16872489120330336, 0.17125060380274548, 0.17417806892324028, 0.15353648554783772, 0.09440848698861792, 0.10924280075721104, 0.097573023545527, 0.09717618242675286, 0.10072589998079384, 0.10507981989139992, 0.11013621256360007, 0.10371943718717336, 0.10122963141662444, 0.13649116207151202, 0.16234714582269594, 0.16847597352175836, 0.17363111905870188, 0.1416448531470822, 0.15611780782435436, 0.14897601147688488, 0.15931585719396102, 0.18302992358351478, 0.13600401142175866, 0.12275643307436879, 0.1426072740472739, 0.14619860878597324, 0.13188457394007436, 0.14026053709716357, 0.13529644980226074, 0.1409241016865943, 0.1605084278214981, 0.25769287543395003, 0.14632967397336794, 0.15997666518125153, 0.1612097706560085, 0.14539462086198052, 0.1510954900897059, 0.15018432488000122, 0.16296694784839438, 0.14857513817222956, 0.1267212843644001, 0.15357756412127876, 0.1730161382299069, 0.14587428357988041, 0.1852023916642802, 0.1298458068887589, 0.13760664124075572, 0.147376027633486, 0.11917905011249097, 0.16360561217833514, 0.17562713212261805, 0.1872049679532447, 0.18119067744755324, 0.17022297163158762, 0.16973224971424627, 0.1777102612427809, 0.17492850188855336, 0.17874082811180414, 0.06002740162801623, 0.05437192044810468, 0.06583427472737968, 0.05897437362218294, 0.04847807561678841, 0.0642634699551512, 0.07526158857291598, 0.047760981563689575, 0.05517354115141915]}, "mutation_prompt": null}
{"id": "ae4f13a4-f784-451a-b551-d7436f86afb3", "solution": "import numpy as np\nimport random\n\nclass AdaptiveMultiDirectionalDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.neighborhood_size = int(0.1 * self.population_size)\n        self.neighborhood = np.random.choice(self.population_size, self.neighborhood_size, replace=False)\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def adaptive_neighborhood_search(self, population):\n        neighborhood = np.random.choice(self.population_size, self.neighborhood_size, replace=False)\n        for i in neighborhood:\n            x_new = self.mutation(population[i])\n            if random.random() < 0.1:  # Change the individual lines of the selected solution with probability 0.1\n                x_new = self.mutation(x_new)\n            if func(x_new) < func(population[i]):\n                population[i] = x_new\n        return population\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            population = self.adaptive_neighborhood_search(population)\n            for i in range(self.population_size):\n                if random.random() < 0.1:  # Change the individual lines of the selected solution with probability 0.1\n                    x_new = self.mutation(population[i])\n                else:\n                    x_new = self.crossover(population[i], self.levy_flight(population[i]))\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "AdaptiveMultiDirectionalDE", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Adaptive Neighborhood Search.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "b781769b-5c15-4d3d-b6e8-221ef9ab375c", "metadata": {}, "mutation_prompt": null}
{"id": "5514887e-666c-4ece-985e-06623ea8254b", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        if random.random() < 0.1:\n            x_new = self.mutation(x)\n            return x_new\n        else:\n            x_new = self.crossover(x, self.levy_flight(x))\n            return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution.", "configspace": "", "generation": 41, "fitness": 0.12185322836705109, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "b781769b-5c15-4d3d-b6e8-221ef9ab375c", "metadata": {"aucs": [0.16265464844666822, 0.15379362621466497, 0.15840500102697697, 0.18851536158814908, 0.16171263642391076, 0.1791930534918531, 0.15292566625390258, 0.184818819938539, 0.17892851795222164, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04177712068776074, 0.06193632160812834, 0.048117565460759626, 0.039769913021107994, 0.032156442030687904, 0.04196538702945285, 0.045065029253940736, 0.049712328599823774, 0.03905864960658345, 0.027492797617266862, 0.03385761241498353, 0.04636551812878498, 0.044288019521733224, 0.026790876549011244, 0.0305997587669955, 0.026529981767982047, 0.03247974987560154, 0.04404111418459977, 0.9988631915572473, 0.998640947454288, 0.826557970346451, 0.9938873408937136, 0.9587051443212843, 0.9553169719071497, 0.9337201729094962, 0.9151596893172227, 0.984599650681664, 0.07401459960053358, 0.06852849572443831, 0.06456932887400857, 0.05958234675143281, 0.05794767279508195, 0.062171279763310716, 0.08549989734075536, 0.07742587574674231, 0.05749327509771773, 0.1212120678635954, 0.12961474293025532, 0.11648079590369476, 0.1196031682504296, 0.1016558065869766, 0.11714991027249011, 0.0918955730244958, 0.1660437194598935, 0.10165694792490343, 0.004093235621743019, 9.999999999998899e-05, 0.0005165193618653641, 9.999999999998899e-05, 0.0032091757551108158, 9.999999999998899e-05, 0.012452192263993078, 0.019425819540304312, 0.027686440786285127, 0.009560553838360297, 0.001560956034364791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010131879618490713, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018512893045286027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046677288505999615, 0.04972117841448276, 0.0404436234707658, 0.0560084039227402, 0.04334390567931401, 0.0566442980999694, 0.04409194581165865, 0.04616746927810522, 0.04598047681637474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01254322363514826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2240608439498335, 0.17672204591087115, 0.16590915380361926, 0.190596346627403, 0.18884543735310932, 0.21206947517476438, 0.1862357386671314, 0.1752450163651389, 0.19948536977804232, 0.035436860701617334, 0.03745222771204548, 0.03703865736634815, 0.03725513896463617, 0.04055824145299991, 0.03336047873176007, 0.0757261297688352, 0.034804389664977675, 0.053645309377046924, 0.11421830729739724, 0.13566772914559988, 0.12396072666927671, 0.13909369528612547, 0.14385856215013249, 0.13654566986582362, 0.13952329120818852, 0.13777376184768364, 0.12659062550513922, 0.16914209461297847, 0.1647165365310429, 0.16122255219483372, 0.16388903171683977, 0.15736511678796472, 0.16168938083034468, 0.1584801629355559, 0.17366152346300912, 0.1651152783392168, 0.10465570154465242, 0.1039900918032377, 0.0965686812724511, 0.12816322217421983, 0.12022101986450684, 0.1143183508178105, 0.12185259032053819, 0.11007829184255247, 0.1040572374212465, 0.16254991128985452, 0.16622574040840887, 0.1382547099082021, 0.15289367718807956, 0.1454203941868094, 0.15725687733229365, 0.13738794857059944, 0.15096339008959425, 0.18244919667977433, 0.1379396960160073, 0.13639423968661035, 0.14182070082445952, 0.13931505205409123, 0.13803128464571768, 0.1362621534416497, 0.14756645048573303, 0.144139704322919, 0.1605084278214981, 0.1468200225579801, 0.1463309206338146, 0.19174254380176958, 0.14969742399879504, 0.1386976524781105, 0.14981929026995677, 0.1606608579472264, 0.16410814503102789, 0.19357874051371338, 0.11878278018408239, 0.15029701843993626, 0.20172283010100323, 0.14445886871703784, 0.1834264448038817, 0.13482936511567023, 0.14793056568123208, 0.1671293632837333, 0.10511878419787302, 0.1649969681448551, 0.19605292859348777, 0.1837938071922478, 0.1629208937662039, 0.17106247083615977, 0.18021846780901374, 0.17612929278513512, 0.17322779874061867, 0.19200174472488074, 0.05973065636728536, 0.04861646382997675, 0.04604012944400526, 0.04731354450511149, 0.04402164101945549, 0.050043701894806, 0.07512704505286094, 0.040369659993857554, 0.05154102890848755]}, "mutation_prompt": null}
{"id": "cf7aaad0-6ea1-4ac8-8dfa-3f3ae2e673b5", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        if random.random() < 0.8:\n            x_new = self.mutation(x)\n        elif random.random() < 0.1:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.crossover(x, self.mutation(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and a probability of 0.8 to change the individual lines of the selected solution randomly.", "configspace": "", "generation": 42, "fitness": 0.11255071449899097, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "5514887e-666c-4ece-985e-06623ea8254b", "metadata": {"aucs": [0.19481158829221745, 0.17211807827491665, 0.18232291279433588, 0.16648119035811704, 0.17431412166980675, 0.1826607568205395, 0.1730198610830601, 0.15424411326676413, 0.17421913287505686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04328539019875566, 0.03640985983782663, 0.04107587507866317, 0.04695875701391672, 0.040442633729321775, 0.04369191010242923, 0.04087682446309193, 0.06696718307595961, 0.03524951574585378, 0.03191862722027328, 0.02505859465394611, 0.030604410026760176, 0.02884919030336719, 0.024038011410756566, 0.027488658564205015, 0.026029096854396805, 0.029205359091902028, 0.050040406532733006, 0.9160725917732838, 0.9812998653626313, 0.1298923711994454, 0.6233887077700672, 0.45431680009276787, 0.7658568323152998, 0.8351598653292454, 0.5078422010258804, 0.7284470399237928, 0.08742222047960257, 0.07405510658630088, 0.07442425777045081, 0.06639002731515631, 0.06826938705119867, 0.08322702088551703, 0.0820936377005892, 0.06315035525651325, 0.07565202468707755, 0.1175420601807462, 0.13432938050990995, 0.11382336226419865, 0.12700767213730846, 0.09741210059532901, 0.10675225629320162, 0.11683248943723534, 0.14828207933209558, 0.1552901571054346, 0.002819008916545185, 0.010553181645772791, 0.002183343484272293, 9.999999999998899e-05, 0.04037621635624822, 9.999999999998899e-05, 0.0019291980216288307, 0.0010151199223568108, 0.0030931912476999113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027151811629964273, 9.999999999998899e-05, 9.999999999998899e-05, 0.01097989915933284, 0.004449555317904363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060007934231263604, 0.06742494873867921, 0.04512653001350386, 0.06347170662770896, 0.019095031704993715, 0.04138897438691658, 0.04764401013798647, 0.08259084428710284, 0.024316214960733662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012270165970384217, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19096694114578783, 0.21175426369320105, 0.19849061866300477, 0.21611225258884492, 0.16788113732446996, 0.17212573967576084, 0.22162662031172764, 0.18406368888502944, 0.2048001618749391, 0.04883973349154058, 0.03564810415288544, 0.03909247640318658, 0.03993099364269914, 0.036089266939505094, 0.06807518210534724, 0.047780616305210466, 0.042328970036309865, 0.04443196190969212, 0.14311861944938375, 0.13254294476475226, 0.15590511227616644, 0.14181793340003102, 0.14950186784955932, 0.1464899549888602, 0.13778443451095568, 0.1282405898009623, 0.13160663205473555, 0.1634256766584542, 0.1718731182212737, 0.16400331758731168, 0.16315237569704644, 0.16249742395293965, 0.17294892425498531, 0.1718412676679565, 0.18156175605212088, 0.16934568494249946, 0.0980479865487941, 0.09837474698536319, 0.11328685935561078, 0.10948143300752422, 0.13206732078195493, 0.10413639899892568, 0.12229364820686972, 0.12153010222422145, 0.12756035296703705, 0.146826701345111, 0.18203026996987048, 0.16396594861361824, 0.14974442050390901, 0.14714843459528115, 0.15383525715810886, 0.17286445520430205, 0.17811631507932546, 0.14711399400107206, 0.1371063677186357, 0.1429373828617294, 0.1610415095407629, 0.12453663911231283, 0.1405851934729715, 0.13153146190354326, 0.1206223024910329, 0.14788391558160696, 0.1605247860131993, 0.16581821530987473, 0.14956889713918586, 0.1462422375426724, 0.15011913350504524, 0.20481980615385054, 0.15432827326882126, 0.22847583757109846, 0.1833442675046444, 0.16722266018268495, 0.13084634961270802, 0.15878787717419496, 0.15640822958098666, 0.12086200185684848, 0.14632408362542593, 0.13177125742284157, 0.16844491021916586, 0.14980655065081006, 0.1500098716651057, 0.20543038269946545, 0.20134107872144902, 0.20592951155131478, 0.19668309475053336, 0.1895496050127331, 0.1857968820137682, 0.17932891249426253, 0.17461591737882587, 0.18138226841155425, 0.0653889159211376, 0.05248748206665954, 0.0506629270938298, 0.04976649045838255, 0.058602611381546876, 0.047487246816619866, 0.06252746759452077, 0.04678907827634282, 0.05229261515105832]}, "mutation_prompt": null}
{"id": "03358335-1bac-4217-a9d7-cb90344f609f", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def dynamic_mutation(self):\n        self.mutation_probability = np.random.uniform(0.01, 0.1)\n\n    def update_selected_solution(self, x):\n        self.dynamic_mutation()\n        if random.random() < 0.1:\n            x_new = self.mutation(x)\n            return x_new\n        else:\n            x_new = self.crossover(x, self.levy_flight(x))\n            return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Dynamic Mutation Probability and Levy Flight Crossover.", "configspace": "", "generation": 43, "fitness": 0.12097935326486392, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "5514887e-666c-4ece-985e-06623ea8254b", "metadata": {"aucs": [0.16731061324193308, 0.16801541421442712, 0.15278788684967948, 0.16014792462797445, 0.17604381892932197, 0.17938757504824188, 0.15187590347240798, 0.16238283857092084, 0.15501494602444876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04158278141829874, 0.04319667276550665, 0.041096842050721505, 0.03341604152572275, 0.04293455246027311, 0.03612530795791258, 0.04844780915423308, 0.050864402707243794, 0.04055143618032875, 0.032907767784623676, 0.028646337932987764, 0.020569486129729975, 0.04154360846171745, 0.03151555776485526, 0.02909944210543758, 0.035788747650440156, 0.032268746346681976, 0.029937348731943203, 0.9577393398968979, 0.9135229589341957, 0.9496496100584724, 0.9939016257400901, 0.9355226786252409, 0.7230919803678844, 0.9965326101446358, 0.9815381302060308, 0.9575180224608135, 0.07331024482906634, 0.0777268705010754, 0.05320769924024005, 0.09130446932407099, 0.08213941081038578, 0.06526560562135852, 0.08072848676012423, 0.06149390829775314, 0.0784668448500564, 0.10734861700715137, 0.19471259180699763, 0.11645064387018378, 0.1162551407827932, 0.09763680202833636, 0.09646016506582877, 0.09687695364439386, 0.11587248610021483, 0.12007719515046522, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007722443194270956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004012566508335702, 9.999999999998899e-05, 0.00433051601707668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013071469448695638, 0.005603101085661866, 0.03235368091318702, 0.0020604114072341195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03165777884665788, 0.044173293283106596, 0.02220831493888875, 0.020185951197711605, 0.04357622285363927, 0.022205848565329922, 0.049827069798144996, 0.0446612139417808, 0.06581779152567757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012809207267145961, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16819153170791235, 0.19069133919283499, 0.18245288681552474, 0.20572669591638892, 0.2207365075958384, 0.19171873613433632, 0.18017888673995075, 0.1805815177482878, 0.19619830185426512, 0.033701903528629784, 0.04509841030673056, 0.03420087102063041, 0.03855070401553362, 0.03631409227056481, 0.04531613405674784, 0.04628755978776267, 0.04513834095484748, 0.04326611909122369, 0.16491996590325275, 0.1466882431672799, 0.1181278736884005, 0.1374778475833076, 0.14122692781760748, 0.11819305603984198, 0.15088056189032217, 0.12895782573936287, 0.12016196535699908, 0.15806191542996328, 0.15403529165360452, 0.16766364141909962, 0.1487680611187725, 0.14953427257168683, 0.17506397889773873, 0.1519320466215831, 0.17366520301881794, 0.1558134545687614, 0.11112470677555597, 0.09038333377974705, 0.09494015029765213, 0.10547026998121023, 0.10073097170625789, 0.09824828469638891, 0.13489626857728454, 0.11968215551431238, 0.0983684875309011, 0.14301990038142431, 0.16240852783095594, 0.15296405695524862, 0.15035029726450977, 0.15255430026965644, 0.16160025955973356, 0.17592501522961157, 0.15050283380850782, 0.15193318885560803, 0.11379024709608643, 0.12019103892182614, 0.13592250284715168, 0.1121603144518416, 0.1441836194296311, 0.12782559066639865, 0.1359737667048203, 0.1413489903861539, 0.1605084278214981, 0.19979277870896006, 0.18191995255767146, 0.15270281408888098, 0.21242248033691824, 0.16374093993626904, 0.17663413313348342, 0.2061134216042917, 0.17003620704880273, 0.16613037512286155, 0.16291362155375466, 0.18562425859186193, 0.15244444323020234, 0.1242588456063557, 0.2006072097438728, 0.17245711136671837, 0.14532888759046558, 0.12837871871213924, 0.1336698367775352, 0.17708324730162472, 0.17726193110371202, 0.18152174265299514, 0.18010210867094079, 0.17790483560816317, 0.17496019615685487, 0.17916986859959538, 0.1698916021360497, 0.1833053310823044, 0.048809401061623015, 0.05397825024227898, 0.06612551818818557, 0.054088709239628274, 0.06201997443254237, 0.056464764086403885, 0.07561068580084707, 0.04196563540402565, 0.04849381599958802]}, "mutation_prompt": null}
{"id": "32fc513c-0a14-4b08-9aef-767576a0361e", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.8:\n            x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution.", "configspace": "", "generation": 44, "fitness": 0.12352335654945902, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "5514887e-666c-4ece-985e-06623ea8254b", "metadata": {"aucs": [0.17243635645489408, 0.16573946962505792, 0.17124985231466294, 0.18887280991576616, 0.17024826628307965, 0.15713097494901596, 0.17121972628655402, 0.1694016265286118, 0.15365411553167174, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06671989737034578, 0.04035061829787445, 0.043765882827819236, 0.039487701110095474, 0.03650270672953715, 0.05541930474227996, 0.05145636946699961, 0.06807856355081998, 0.044643109723303875, 0.026273597703440843, 0.0348965131193445, 0.03719929177834669, 0.02701196827648278, 0.05864971770177507, 0.046900138439769035, 0.04263974160704942, 0.029606275619002198, 0.02755555389032105, 0.9558771592013816, 0.9870333387942912, 0.7451183051674735, 0.9733067310478519, 0.9379752295153788, 0.9957592033856272, 0.9281336141475544, 0.9508346511023917, 0.9194129803448085, 0.08863565011761199, 0.0655823950251575, 0.07049393447942298, 0.08617906197452008, 0.08310796988887414, 0.07465921375424256, 0.07326647449812063, 0.056726994253453844, 0.10266498946109681, 0.1221992808519139, 0.10440285314945619, 0.11430013108028647, 0.09444244269657431, 0.11415116562884398, 0.09938030638407147, 0.11258176774286166, 0.11295718139557553, 0.13779147498489108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008050260256604824, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038578330957051987, 9.999999999998899e-05, 9.999999999998899e-05, 0.012530609429176165, 0.004389207445374632, 9.999999999998899e-05, 0.014762315815102234, 9.999999999998899e-05, 9.999999999998899e-05, 0.023444304371581737, 0.0164123993212677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047486432424448166, 0.01884201683424258, 0.05603015374428433, 0.012157796971067003, 0.04391372792129222, 0.018228786024316657, 0.06516801179992304, 0.04667603177949753, 0.0675556315608632, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019699394386036517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1855224500264474, 0.18664860983503218, 0.18676541931515545, 0.17650492108333016, 0.17421977141746725, 0.20219249447618481, 0.1823019296370244, 0.2043782319821411, 0.19337698109664625, 0.04964477996638139, 0.04250391981077517, 0.04526165550214678, 0.03922973353147774, 0.03795473631527979, 0.04395247274747893, 0.05447646430050368, 0.04521846276142205, 0.05444761758222305, 0.12977193706676549, 0.11800446211801485, 0.12248381569946154, 0.14475235497406025, 0.1411862064219369, 0.14120482235763832, 0.12567983666266114, 0.1449571061111543, 0.14970068088825828, 0.16360224377503274, 0.1743421886989618, 0.16121793106935622, 0.16941448015079008, 0.15184717058186548, 0.17105568739363608, 0.16163601423081586, 0.17367185480881797, 0.15959171583650955, 0.09624098963723227, 0.12830602193753837, 0.10496789706374277, 0.13826831550798435, 0.14576218488085668, 0.1274500135074177, 0.10167432737094473, 0.11040520812932919, 0.10271025854115923, 0.14542884911825948, 0.15706345111123976, 0.1383314731222568, 0.17821519126519703, 0.14370966913609173, 0.15813252252615473, 0.1495687637713239, 0.1625970815767389, 0.15332222194965273, 0.1385504592462905, 0.14099303894835957, 0.15251441848257696, 0.14067310796091514, 0.13980032117750818, 0.14734544252054604, 0.12803690242448706, 0.13331715544175915, 0.16052214081866878, 0.24093328540175485, 0.18856674546703667, 0.22838293236228813, 0.21622578733445275, 0.18410392402845, 0.1831532588048368, 0.16405586438829145, 0.15486200889908142, 0.13260809718772293, 0.1842994840736324, 0.2121606196929734, 0.22107417581385336, 0.14685777548540757, 0.17004148946202569, 0.13362814934536527, 0.14134287279081104, 0.1586945556156063, 0.11469321449698855, 0.17839694387856775, 0.19367661153509985, 0.17118806360785221, 0.18845766316683543, 0.1789779808604326, 0.17860522850824634, 0.18305089145065478, 0.1819708250638279, 0.18072619482912355, 0.05490658434102258, 0.05076028613690542, 0.05070753482213586, 0.03974389024980696, 0.04714689879264933, 0.04757469726266206, 0.046455780488329435, 0.06045914933206531, 0.05203739920083117]}, "mutation_prompt": null}
{"id": "c65f66b0-c221-4611-a103-98311b19f833", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n        self.probability_update_best_solution = 0.2\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.8:\n            x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def update_best_solution(self, x):\n        if random.random() < self.probability_update_best_solution:\n            self.x_best = x\n            self.f_best = func(self.x_best)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            self.update_best_solution(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Novel Strategy to Reduce the Probability of Self-Adaptive Parameter Control by Introducing a Probability of 0.1 to Change the Individual Lines of the Selected Solution and 0.2 to Update the Parameters of the Best Solution.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "32fc513c-0a14-4b08-9aef-767576a0361e", "metadata": {}, "mutation_prompt": null}
{"id": "c3ec87b8-483d-45a1-9506-8c766f6b7341", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.2\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.8:\n            x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.2 to change the individual lines of the selected solution.", "configspace": "", "generation": 46, "fitness": 0.12013249780103369, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "32fc513c-0a14-4b08-9aef-767576a0361e", "metadata": {"aucs": [0.1786784676304336, 0.1798171802976649, 0.1586107242651591, 0.16091631111559168, 0.15344101029501467, 0.1609602330991161, 0.22805663037282053, 0.17166408529428046, 0.19576999223612346, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04219575045791313, 0.07307976554020423, 0.04193418343709132, 0.03454166312958329, 0.03872484832072298, 0.04665726465527109, 0.043357022187542005, 0.04675508963674824, 0.04213937528404965, 0.022463097915436214, 0.0300415398797117, 0.04820504059798891, 0.025962020599555546, 0.03182622159803872, 0.024010686349665744, 0.05346072272379365, 0.036451820274362556, 0.030237266452292855, 0.9541852867806946, 0.7630579742742433, 0.7032272763114216, 0.9055539416792101, 0.9409949013346066, 0.9555045198435295, 0.9829802381565441, 0.7385075596421355, 0.8723533211483723, 0.0727277212597528, 0.07735028704244595, 0.08713822900815393, 0.06349528934618553, 0.05664830921289099, 0.057966320981405084, 0.09298334748473591, 0.05730533797349724, 0.06317144173988343, 0.11352700379913971, 0.19401514672191322, 0.10667638173569594, 0.10218746985359739, 0.1112100621356572, 0.1401756124051593, 0.10440845131151888, 0.11162899389610559, 0.11473834303523123, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010076059210734067, 0.0026865370839382896, 9.999999999998899e-05, 0.00951560606877444, 0.004518942316550811, 0.021400262291324523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012329977118014535, 0.025099116916072695, 0.007229020831481137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04110089457015187, 0.05228576810473429, 0.0331632095071549, 0.04902576301684258, 0.02227006741300719, 0.048438763178184074, 0.04191418956111015, 0.04710969613455529, 0.03675746097747867, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007631061056364685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1796071132183673, 0.1902021292408307, 0.1732158737299122, 0.16752904994180462, 0.1901599796157506, 0.19777224866885168, 0.21894398755178635, 0.18219370354800146, 0.22898585940080363, 0.05127024627510235, 0.03648067531367505, 0.04256548559937767, 0.0402609851577046, 0.04140208153650471, 0.03410890360124963, 0.04504094967690708, 0.04432989119957387, 0.034868169017095885, 0.11879903191713803, 0.12782768718167403, 0.18418684402342422, 0.15269211004737482, 0.14752997594966255, 0.13577556414569658, 0.12237868924009088, 0.1532335200737811, 0.17236408697727912, 0.15993275562547293, 0.16454224603736933, 0.16686776849932217, 0.1693079412192301, 0.17190535462334122, 0.16665559857343393, 0.15713884990362825, 0.17366815208180175, 0.15440314323884452, 0.11927574948739328, 0.10505358856286351, 0.09921612313543005, 0.11192790544590148, 0.09112767634448371, 0.1061073314653086, 0.14023745831090906, 0.10829641848941085, 0.10477575605490042, 0.15840260437917608, 0.1518572083078148, 0.17343129397619872, 0.1765590897063406, 0.1674290355810173, 0.16038683246653251, 0.1438073151160867, 0.14681658006689613, 0.18379281466502184, 0.1333838358410654, 0.15080835017412297, 0.13793538863917343, 0.14059100006231218, 0.1581348692247455, 0.12632803227297007, 0.1439339837312873, 0.13617352967362495, 0.1605084278214981, 0.15463971435801083, 0.15406287446816802, 0.18827579394616079, 0.1927655251697471, 0.17530646901411528, 0.1839611558241414, 0.15441001062251491, 0.15101054440313688, 0.1695678587581093, 0.18399326375560687, 0.1488873604187676, 0.20286619150124452, 0.12577576350884467, 0.1396506233934679, 0.16834678797352043, 0.1251992832546137, 0.13435183389349337, 0.11544998654091376, 0.17729610130568685, 0.17836516418164283, 0.181190422638017, 0.18084642299256504, 0.19941482068734595, 0.18381078402196283, 0.18144388393308442, 0.18456967688684234, 0.1848392541850078, 0.054529049400414475, 0.04750851404521095, 0.05538438163639747, 0.05569278511820319, 0.05868130836099006, 0.0454067353976334, 0.05451911340558524, 0.05765446441268973, 0.05284002712835423]}, "mutation_prompt": null}
{"id": "e29dc04a-c0d7-492d-9d5d-9630a129acc4", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.8:\n            x_new = self.crossover(x, self.levy_flight(x))\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability * 0.5:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Probability of 0.1 to Change Individual Lines of the Selected Solution and a Novel Strategy to Reduce the Probability of Self-Adaptive Parameter Control.", "configspace": "", "generation": 47, "fitness": 0.11951162712692577, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "32fc513c-0a14-4b08-9aef-767576a0361e", "metadata": {"aucs": [0.1749436109961613, 0.14669001982193364, 0.15091798709871673, 0.15917980927333752, 0.17009926858734836, 0.18962804388306098, 0.15618790152165418, 0.15341395547735592, 0.1966763610783273, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04472779240470304, 0.04031825500885933, 0.03815008817445176, 0.03730092525040851, 0.03698474300135801, 0.046189113782513225, 0.053067681117820564, 0.06798415362077725, 0.038597048957945246, 0.031684204340749256, 0.028283219957392802, 0.03741442226591152, 0.02469715742057399, 0.040001344662584204, 0.03170564886868654, 0.07675216651687422, 0.031058336666995645, 0.024238061348899276, 0.9579519478018702, 0.9594240374274027, 0.9379822459286605, 0.9358468197640368, 0.9393276258354415, 0.980161054828896, 0.9965279385252157, 0.6205206032382709, 0.8168910154366027, 0.09024157505514863, 0.05507617072663529, 0.09213153679432873, 0.08410549718214222, 0.05811607972383659, 0.05739262627286701, 0.08067449342266952, 0.05356651941019541, 0.059646971414968775, 0.1373489642911132, 0.12991191829469828, 0.10946448505158657, 0.13384043587240868, 0.0947513032062014, 0.11938191598881964, 0.1250090601407997, 0.11151228253636492, 0.13566996363225048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01539949895410686, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038532446244308183, 0.0006709909093760569, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456708150817232, 9.999999999998899e-05, 0.012546457258975297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06075753637984016, 0.03205773086840347, 0.0481808434548906, 0.015806285785958996, 0.05709185318626164, 0.052370978251848666, 0.05242017244491448, 0.05085959778211435, 0.02129502201548128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2030512672572411, 0.1945744478361925, 0.18059811039707097, 0.19086449565680075, 0.19369953734004997, 0.17644611030001944, 0.17863637553389544, 0.21448199258301404, 0.1799369677035707, 0.04080477049521336, 0.034468754360887366, 0.045450012220146885, 0.040388279186101106, 0.03213966537482449, 0.05276145654056441, 0.05422509801713238, 0.048975326093685045, 0.03162515291423096, 0.13828000877044466, 0.12507876648553518, 0.1460103725922821, 0.14164422584235437, 0.13961748097285487, 0.12630241601133418, 0.13722217858695607, 0.13191737762993383, 0.12611701681054532, 0.15779418434241232, 0.16751195911115924, 0.17004121311279063, 0.16912770730622428, 0.15537519280580803, 0.17883521629514432, 0.17347006659436226, 0.17367792321764752, 0.1524201599907954, 0.09951673610333345, 0.13430610600283366, 0.09980474106083637, 0.10688228870396033, 0.12154640328640542, 0.10449860734111205, 0.11968745985202167, 0.1032002786475168, 0.1163524114166341, 0.15144386330305026, 0.1494855063665793, 0.1479153780520004, 0.1532896110869758, 0.14913761396206882, 0.17294271156456176, 0.14587869243576257, 0.14504403062416515, 0.15515406091478567, 0.14163677173755163, 0.13286437108117244, 0.1243654132547577, 0.13782373098991862, 0.1528280179933187, 0.14380955214703517, 0.1160373942479862, 0.14267079272326677, 0.16052211601110955, 0.1446100473644114, 0.16072412651323775, 0.15486107266437343, 0.15469272841492188, 0.1800491818573592, 0.1428634576131561, 0.15015409349115094, 0.13138891067793756, 0.18306458031465422, 0.21508029183184507, 0.1629167073003437, 0.14488522020811034, 0.14461935933109105, 0.12179919341937706, 0.11700243336605853, 0.168812813818902, 0.11156742796908037, 0.13880352920829087, 0.19007443225678256, 0.19049560041104419, 0.18836379030279837, 0.18765129076365905, 0.17438650465479166, 0.1752168233619419, 0.17422489589146684, 0.18447123901448248, 0.17750343864522278, 0.06045989258500939, 0.05825438811879102, 0.04754442648886836, 0.050988575544018255, 0.045845767669980164, 0.0474820927994013, 0.050060000250344405, 0.05565833249304886, 0.05357514326646029]}, "mutation_prompt": null}
{"id": "2f9e3267-d0f5-48aa-a53b-b0b14bea7f9a", "solution": "import numpy as np\nimport random\n\nclass ADMDF_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines / 2:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.8:\n            x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_Refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Refinement of Individual Line Change Probability", "configspace": "", "generation": 48, "fitness": 0.11812053380377073, "feedback": "The algorithm ADMDF_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "32fc513c-0a14-4b08-9aef-767576a0361e", "metadata": {"aucs": [0.16395929169332413, 0.15907890646891498, 0.15326904121207774, 0.1539327508086692, 0.15910817628499152, 0.1894448346595785, 0.15433865755743992, 0.1445019602542783, 0.16423684962744978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163896390133326, 0.04430963997713877, 0.04231552311263809, 0.03739231367828655, 0.03990995204839365, 0.05201712900480415, 0.03428318308940925, 0.04602553773282758, 0.04235020855124472, 0.026587784196815845, 0.017834466587045794, 0.03372650318414194, 0.027456169516352547, 0.02895667053465245, 0.04754177551494909, 0.02318635329346541, 0.04424482523819462, 0.017151727707573228, 0.8926641648792668, 0.858742525911985, 0.6945462729102241, 0.9918087279097304, 0.7575934418133028, 0.8478318157612734, 0.8403228605974606, 0.9451553339795481, 0.8988643025729477, 0.07769437642269628, 0.07255639904637179, 0.08694335828728017, 0.06846956083430922, 0.07086164389745897, 0.059083631366407485, 0.05461239566208209, 0.0726882346143064, 0.06543099095784288, 0.13001052123357038, 0.10273660940161844, 0.09117790349065913, 0.1243376323433657, 0.12868466060970074, 0.12813320087444713, 0.14303391899099183, 0.13364905068870525, 0.1442277968478909, 0.001525839278297303, 0.00628781018988589, 0.0016537143828452283, 0.0023599297431564636, 0.004923014458769082, 0.015404966966599432, 0.0008762986737758105, 9.999999999998899e-05, 0.018014116093496346, 0.0032311030409039043, 0.029885382183282627, 0.05380579840964417, 0.02775191197076643, 0.012487986639707405, 0.02354772570465935, 0.023744257410575287, 9.999999999998899e-05, 0.012885176372316343, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04516290157155456, 0.03472339279514558, 0.027625474498629177, 0.02653015776890666, 0.08147837688966264, 0.036082353759037455, 0.025852218551808748, 0.050072408406025004, 0.05183182007548437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013187414899812566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008306181354801434, 9.999999999998899e-05, 0.1825743805127027, 0.19546362325120903, 0.17944426674669434, 0.19623802337077334, 0.18549319261195407, 0.2085842085788051, 0.19866505710906746, 0.1797832659885289, 0.2033212359858626, 0.0378521635531508, 0.04317314803564953, 0.04576315041798462, 0.04274814433440477, 0.03729950890385847, 0.04635193630733625, 0.044933595456801756, 0.036746130745147876, 0.05317525319474681, 0.15534081552700096, 0.15013081949329554, 0.12748048771730058, 0.13747371806967001, 0.13518993586985073, 0.1418806473372195, 0.11573817410293052, 0.14209463351811813, 0.13276378467719008, 0.1786733839516914, 0.15948584956849843, 0.16177573653350175, 0.1580358032913617, 0.1557103201971589, 0.17508602979649512, 0.15707393365658795, 0.1736699498415768, 0.16688262634930628, 0.11131885976545963, 0.09858340460495185, 0.1037616665959824, 0.1040172730697303, 0.11735300475686417, 0.10657757681439528, 0.10873448644239525, 0.10432278986129184, 0.10302154129067198, 0.15294761851813743, 0.14592965075426723, 0.1393628211889285, 0.17316281641989517, 0.1431151337467096, 0.15234438549743023, 0.16350693857683696, 0.16788965308190562, 0.16123050357608604, 0.1308039071404884, 0.14813859545102004, 0.1455594292171729, 0.13792048168752646, 0.13890678142205892, 0.14755613218069263, 0.144839549211233, 0.142195539106157, 0.1605084278214981, 0.1431893440547094, 0.1434433468125953, 0.1507733102927845, 0.152820943151869, 0.15090207732384464, 0.14641645787404833, 0.15288732396667915, 0.16493954322638327, 0.18870774339983232, 0.1847439190483261, 0.16512371459048247, 0.13593247689806232, 0.13597382443642514, 0.12253316476301479, 0.1429617043906244, 0.15990730593787705, 0.1538225150412078, 0.11691098918108744, 0.17639970810311678, 0.18955771636772845, 0.18313701984730424, 0.1769861518450322, 0.18191811093658172, 0.17065270712335512, 0.18775517451095802, 0.1770309103378006, 0.18311226335626019, 0.0500844433318689, 0.04596573045400676, 0.04449621890895017, 0.05691584372674385, 0.04541999497349658, 0.05371918788936969, 0.05184963421652278, 0.056229057075033784, 0.06161156238629284]}, "mutation_prompt": null}
{"id": "6fc3471e-633f-4459-96b8-47beb50811de", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n        self.x_best_global = np.random.uniform(-5.0, 5.0, dim)\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.8:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.crossover(x, self.x_best_global)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            self.x_best_global = self.x_best\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite, refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution, and further refined by introducing a novel crossover strategy that combines the selected solution with the best solution found so far.", "configspace": "", "generation": 49, "fitness": 0.11942446004187797, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "32fc513c-0a14-4b08-9aef-767576a0361e", "metadata": {"aucs": [0.16966964685734942, 0.1788721873613247, 0.18592539150740117, 0.16027023928777784, 0.20070330732832908, 0.1918098988139484, 0.17445175654351786, 0.18169378337023867, 0.1923603385591015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04477477845260924, 0.0601926052008932, 0.058012143646003045, 0.03045089828577241, 0.030755189958377227, 0.04309920450346305, 0.0354271916889769, 0.04093884856961372, 0.04132655344411873, 0.024636906523427426, 0.02990477592034657, 0.028908561380715958, 0.024167477366228596, 0.030687141556367536, 0.051281003829890315, 0.07630009913101565, 0.037865317509986784, 0.027261170432081205, 0.920304679738295, 0.981708592867267, 0.8990649967639879, 0.9475356135438824, 0.37607046089539586, 0.9984612046509276, 0.9503768617291841, 0.9800914165081769, 0.8997765441755521, 0.06262791443378013, 0.06020129898253146, 0.07251590458143198, 0.06659297991765312, 0.06671355717912975, 0.06578434226187113, 0.06596505683493215, 0.0579543151129992, 0.057644267964829465, 0.10040220282342815, 0.11498774466278538, 0.1132200879928934, 0.11991434661565092, 0.10035191196645865, 0.11457711396260983, 0.13450060767964134, 0.11999474664794818, 0.10725969400334101, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009442867037947611, 0.004011791866905479, 0.004849594941599533, 0.005088603500266964, 9.999999999998899e-05, 9.999999999998899e-05, 0.017962955392878177, 0.00066516447152698, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335834208235323, 9.999999999998899e-05, 9.999999999998899e-05, 0.02077799054475704, 9.999999999998899e-05, 0.011635473124236184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042070731584102905, 0.045773405142152446, 0.024285897238397358, 0.023866662828130547, 0.10397015402651288, 0.0415645205699382, 0.04121808205079447, 0.055021543442287824, 0.032323995570227804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012861555109613398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008175717422295392, 9.999999999998899e-05, 0.19321880827248783, 0.19288920642703455, 0.19051588688775023, 0.18474027543274085, 0.18049842685865136, 0.21599721653883985, 0.2024644731510834, 0.18287151435791793, 0.1759553028156633, 0.03152175987003736, 0.0343158779229541, 0.044878262490471, 0.08121359233747849, 0.05452564728929066, 0.05492811468659953, 0.041773634204616994, 0.044208889816991004, 0.04316641719727199, 0.13181014872931862, 0.1628857915155597, 0.1339060574643911, 0.13749685386247545, 0.13487213107421425, 0.13962694316930335, 0.1512230900616307, 0.15268552933949575, 0.11660305932611537, 0.15607780145796002, 0.17453940544925373, 0.1638553477797, 0.16504831609175585, 0.16518129739736565, 0.1700266416026499, 0.16746301600642988, 0.17370428486444012, 0.15383038857894138, 0.10981805303720993, 0.09446719222460176, 0.09659688275250211, 0.09653861460655444, 0.11036726606974101, 0.1045651945605327, 0.13973506070162478, 0.10353485645131044, 0.10480496342114476, 0.14237047073288323, 0.14988965349323136, 0.16628911608712005, 0.17663916201773733, 0.13691987729215727, 0.15169412358999912, 0.15972776791214893, 0.18126112899186742, 0.15372598114482683, 0.13521797148356274, 0.14229340493078657, 0.12034130218804417, 0.15985339704047563, 0.14819441108367304, 0.13081408846908926, 0.13476727511618825, 0.13525352893620912, 0.1605411442049004, 0.1605356613069323, 0.16017652233135882, 0.14817554314307768, 0.15968610363565328, 0.1504868067723577, 0.1483646258689454, 0.16581355268723386, 0.16464567140358244, 0.14628329765009673, 0.15808178308406273, 0.15381218403339625, 0.1439265677374033, 0.14782860129739073, 0.1336064707063751, 0.11077902228874936, 0.13516233839435177, 0.15063700836512361, 0.11958127883397651, 0.19963333399006522, 0.17924482855761348, 0.19175025209887675, 0.20354111784464668, 0.18137833447089102, 0.17864341804490214, 0.1803544647319808, 0.17109136185649076, 0.1734186740904866, 0.0472208165896012, 0.05905442131484451, 0.04892289065305433, 0.05445254025553492, 0.05240674962810643, 0.04508558314517541, 0.057725114692166235, 0.04864728328566692, 0.06771649624823461]}, "mutation_prompt": null}
{"id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 50, "fitness": 0.12370370324532663, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "32fc513c-0a14-4b08-9aef-767576a0361e", "metadata": {"aucs": [0.18099998467047584, 0.18325239573490903, 0.15634495372217883, 0.19398867722124624, 0.20673648169551528, 0.16155004403333828, 0.22915567383370794, 0.16190867262054798, 0.18164376851565123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04304104146071219, 0.050677063487061025, 0.03565372721137716, 0.04180010236005727, 0.04881230161360728, 0.04748036953855239, 0.04184372925693658, 0.05800502280327147, 0.03696454428861762, 0.033041337480565036, 0.05471731640004762, 0.030054467948782637, 0.03715569729638768, 0.034060337777713, 0.04708263143403579, 0.031061279433775235, 0.028406437201520696, 0.026662316259612795, 0.9868835453249521, 0.9756977067407636, 0.9118331930258435, 0.9748290412948057, 0.9047575869719664, 0.9772434766975318, 0.8940250511830045, 0.9998, 0.9753747544655327, 0.08120501647409561, 0.08313920261092766, 0.056426315692649, 0.049532754731400175, 0.07608338770441403, 0.0866509885521799, 0.09097447569374417, 0.07229833336586722, 0.0709345394210692, 0.11082395603201145, 0.11867295820703183, 0.10310778389107911, 0.11502542890217937, 0.1315274679106324, 0.10483007067389793, 0.10361406623103231, 0.11730972386059513, 0.11534190721132231, 0.007562674000035963, 9.999999999998899e-05, 0.017898627322583294, 9.999999999998899e-05, 0.0255108905989484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021280900181190554, 9.999999999998899e-05, 0.030736841534323323, 9.999999999998899e-05, 0.011038558826357292, 0.016582541510011484, 9.999999999998899e-05, 0.0023367961599427556, 0.007411766159734157, 0.003309206611066706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03459842193444984, 0.03552603911404184, 0.03340448479155134, 0.07035166545092286, 0.029365054571732663, 0.051571203568310686, 0.039467750041114025, 0.055036065491156805, 0.03458533350446613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16957580597387678, 0.18997793807693897, 0.1713151436667003, 0.18642724415103273, 0.19669853979055196, 0.20831796872889585, 0.20649053854506916, 0.18767454740759748, 0.18930868168243964, 0.045544777910199064, 0.03803724953383081, 0.05056085463503912, 0.03430273430405528, 0.036783019886961865, 0.03583827215968394, 0.04333916953932748, 0.044238555643378086, 0.03709599377129813, 0.12815806526473317, 0.12204878815885367, 0.12455782328474285, 0.13747875663399978, 0.14871467873263666, 0.12975858654715522, 0.14748145081380026, 0.14164600288307827, 0.14467288825587366, 0.16534838726924794, 0.17319798232168104, 0.16246152586272566, 0.15755552854492139, 0.15845269569723897, 0.16179882145561297, 0.1511492197542479, 0.17365836726952688, 0.15206306068308806, 0.09597804592271064, 0.09479528384656588, 0.10432250779770602, 0.11436268897514856, 0.11093111437726311, 0.10580474289223207, 0.15062579908553775, 0.09967272310241859, 0.1197821008769886, 0.14846498447326995, 0.15243926863570556, 0.1909934830321185, 0.1573783552151865, 0.15149206890480127, 0.13914880343980351, 0.14753021382255538, 0.14230400396809495, 0.17494887101105983, 0.11763103524118634, 0.14929871330366495, 0.14337982388629478, 0.14875673093709119, 0.1372462949862927, 0.1344466614685833, 0.13389832941870083, 0.14085641038844365, 0.16065265818294938, 0.21051524275338818, 0.1560619647215561, 0.1576752546797615, 0.21453978232854232, 0.17428626337351616, 0.17849146071107247, 0.1798193500362062, 0.1368087986141292, 0.16690278868183506, 0.14038711758857592, 0.162026850499833, 0.19326113644668896, 0.1561163370309745, 0.11929846533465638, 0.16410346888617622, 0.12590174769073603, 0.20579785160806974, 0.16023044394897534, 0.17726982808452962, 0.19124017420227424, 0.1753085214561696, 0.18909717526712777, 0.19617688728845162, 0.18768151199030858, 0.1735365131279406, 0.18276341188600498, 0.17678423192107606, 0.04671357331104842, 0.04515808287141321, 0.05885171504508058, 0.04749085057019298, 0.043471573580713296, 0.05231843617757692, 0.049797461518969466, 0.056411260428178456, 0.04681505575371536]}, "mutation_prompt": null}
{"id": "4fec5ac4-3c70-4903-82b4-56abe0db85b4", "solution": "import numpy as np\nimport random\n\nclass ADMDF_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n        self.probability_crossover = 0.9\n        self.probability_mutation = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.probability_crossover:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.probability_mutation:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_Refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Probabilistic Crossover and Mutation Refinements.", "configspace": "", "generation": 51, "fitness": 0.1203289581252184, "feedback": "The algorithm ADMDF_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16228896561705664, 0.17668981632171832, 0.14939363948610496, 0.1735812152555467, 0.1913761033323843, 0.18299721746864683, 0.1546887442885836, 0.15664822261388167, 0.16842601995484352, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050729661592897934, 0.04031868131357641, 0.03925346843499278, 0.041522546461269294, 0.0445342179825291, 0.03707133684280106, 0.052499212238490744, 0.04381066972340397, 0.06167957642920663, 0.029025193344577205, 0.035325865937042344, 0.03000074001693287, 0.022894155174776998, 0.03229015078591568, 0.03734388058590943, 0.022539354971103598, 0.026603059301572474, 0.03072149278171621, 0.9998047723085209, 0.9242101598042051, 0.885293728622443, 0.9452776681866883, 0.6348691202061845, 0.9113504476001725, 0.9965307656772143, 0.9610381270606266, 0.771071200514766, 0.0752485631816111, 0.0820165956007124, 0.056884716213575715, 0.07809540007810811, 0.13131840682405693, 0.05125355628407546, 0.07396929268104291, 0.0706812604872663, 0.07704011348962847, 0.11200388490567548, 0.11666725921196885, 0.10581129646005394, 0.10827820624871387, 0.11469208459177715, 0.11723971232114805, 0.10853098707387376, 0.1371467376197536, 0.10640214177247254, 9.999999999998899e-05, 9.999999999998899e-05, 0.017993433579698848, 9.999999999998899e-05, 9.999999999998899e-05, 0.02105894670689834, 0.01157061789317304, 0.006544417030015959, 9.999999999998899e-05, 9.999999999998899e-05, 0.00739515640855648, 9.999999999998899e-05, 9.999999999998899e-05, 0.011939229555050446, 9.999999999998899e-05, 0.00025614421402619936, 0.018730102481856026, 0.0007078242889879682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058432704118070666, 0.03134478167411492, 0.02133772795635358, 0.041727848350628816, 0.03127934715447045, 0.04629999773362847, 0.06593172441865569, 0.054771764688825386, 0.06849788485769714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012479121824135797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20750697148218222, 0.19614130958878206, 0.18361011544631922, 0.17822210084397372, 0.19380367956011668, 0.1829824560599267, 0.20625526086069235, 0.18232282258508625, 0.19413294551481064, 0.038847741622246024, 0.04167220730029564, 0.05322353212436559, 0.0542396219060749, 0.03576184825298956, 0.0355743597590088, 0.04947574192749582, 0.03612174705630733, 0.03785662772997023, 0.153231243206719, 0.12371738141539901, 0.12811801384961763, 0.14918194544569852, 0.14180000074122767, 0.1358026416069692, 0.1463437181786763, 0.14087379844442605, 0.12603446092815884, 0.16289105109737212, 0.17118177751731856, 0.16429406433708915, 0.15807973240237438, 0.21561313735860277, 0.169081002474484, 0.17320528409827074, 0.17367466470037307, 0.1520480152454009, 0.09621987200550464, 0.10480858166119578, 0.1008385625987761, 0.10567707741626875, 0.11411988824849673, 0.1100672946562612, 0.12124167769804628, 0.10598115818746523, 0.09110659623250283, 0.1601984288260594, 0.1971529034792141, 0.1665354369294324, 0.14461453364117116, 0.1422664179195452, 0.15834902427977682, 0.15797265301197916, 0.16645858685318837, 0.15198724327665547, 0.13982425851172686, 0.1599122882074877, 0.14643611580925986, 0.1493843976021304, 0.1402952357693723, 0.12147920459487849, 0.14437224438139495, 0.136319495310945, 0.1605236686092234, 0.15464515822447444, 0.1513764938618073, 0.15511504325253467, 0.21451369975048284, 0.1562207877467936, 0.17131068047730347, 0.15007154391240018, 0.13629776231597157, 0.19072863418086294, 0.17740638607639792, 0.15384720093413273, 0.1714676565253952, 0.10513969509907328, 0.15633721445272764, 0.17415696726721397, 0.12454905897333379, 0.16763895960183528, 0.13582456804565246, 0.1796265093803926, 0.1950010334480956, 0.18331795241690352, 0.18242603980765726, 0.20230771656276636, 0.17219360245933035, 0.1684124641711514, 0.18212562357099704, 0.18238083827837925, 0.047758768393394546, 0.04358023415497614, 0.05783999810549434, 0.047479756358533964, 0.04341285516594928, 0.04918499937025822, 0.04770889855772398, 0.047820804839297626, 0.04508529270203798]}, "mutation_prompt": null}
{"id": "968517ba-17be-482e-bf0b-0fb94a93089f", "solution": "import numpy as np\nimport random\n\nclass ADMDF_MS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n        self.multi_directional_search_probability = 0.3\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def multi_directional_search(self, x):\n        directions = np.random.uniform(-1.0, 1.0, (self.dim, self.dim))\n        directions /= np.linalg.norm(directions, axis=1)[:, np.newaxis]\n        x_new = x + np.dot(directions, np.random.uniform(-1.0, 1.0, self.dim))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if random.random() < self.multi_directional_search_probability:\n                    x_new = self.multi_directional_search(x_new)\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_MS", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control and Multi-Directional Search (ADMDF-MS) - A novel heuristic algorithm that combines adaptive multi-directional differential evolution with levy flights, self-adaptive parameter control and multi-directional search to solve black box optimization problems.", "configspace": "", "generation": 52, "fitness": 0.12237446652446701, "feedback": "The algorithm ADMDF_MS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.17121481936886762, 0.16777581969190591, 0.1801368312389472, 0.16169839120818374, 0.18385650161580258, 0.17556527698402624, 0.15622530685353742, 0.1864104754668645, 0.16570792176631244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039656868669219913, 0.054741390709192594, 0.041222166865258814, 0.04459741272464923, 0.03620319410389461, 0.06626527419793093, 0.05038858892820641, 0.04628189336433419, 0.038104910206960274, 0.037724806286991375, 0.033177871634953005, 0.03316129400688261, 0.028241434906286833, 0.027668294230693724, 0.025978415362722274, 0.0421547375009137, 0.024768111820825833, 0.02249905682343345, 0.9828793639880752, 0.938718379604333, 0.9675252217074635, 0.929200271802921, 0.972980262008449, 0.937050363657237, 0.9905655041656671, 0.9310410724711312, 0.8399057763618025, 0.09230169074589412, 0.0693826481207207, 0.08588279366951812, 0.08692700714468571, 0.061811344288395076, 0.07752368977619395, 0.06765217119605516, 0.07345380976078719, 0.0626296555506739, 0.1523648801808546, 0.10153555875251008, 0.13185320609247297, 0.10546709378952224, 0.12701363495848583, 0.09403000875585388, 0.10106492990761395, 0.1178656781657299, 0.10882367377622759, 0.026349718767409325, 0.03172239224710138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014354416489964716, 0.03520996799395071, 0.008386127696545786, 9.999999999998899e-05, 0.005985313751642796, 9.999999999998899e-05, 0.009265533522528346, 9.999999999998899e-05, 9.999999999998899e-05, 0.002095110692709179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03938447187331129, 0.02428772601452278, 0.04134931788259222, 0.04478834860055503, 0.057033146819929104, 0.03292103511793032, 0.0377763024445823, 0.03948411238324412, 0.06532664613195849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16570032545033375, 0.18733563474049986, 0.188026073736419, 0.18358845779757083, 0.18281139042992123, 0.17847133943025983, 0.19771998772946775, 0.17490329576885066, 0.18783632468927103, 0.03142177278518388, 0.040683015653660726, 0.035579739876628436, 0.04055054075080078, 0.04009202142187407, 0.04630007185432483, 0.0501548336920723, 0.04406479547221753, 0.03541451325781053, 0.13764220238891467, 0.13941787989949173, 0.14417580461288415, 0.1374736390293254, 0.14644672258972802, 0.11426415966710812, 0.14367754104051256, 0.12250263220015944, 0.12415783871336794, 0.16630109383340752, 0.16106377275620032, 0.169642998688746, 0.15571215591239795, 0.16328577206537265, 0.1689176277450355, 0.15849696242977784, 0.17970655542624503, 0.16333211428983962, 0.10017992402499598, 0.10904991609468084, 0.1152184778418186, 0.09499371167880433, 0.11965076144105902, 0.10878264025598128, 0.11485850529401087, 0.10992974046600479, 0.10802920078218636, 0.18738386799674456, 0.16474238199594216, 0.14797910395995417, 0.13646329628292675, 0.15436726541587686, 0.1454593967983614, 0.1476232359353098, 0.14676579563777736, 0.15322229365292883, 0.1473321993467458, 0.13560421396374844, 0.11466022720505131, 0.13136133376178627, 0.16551864867100086, 0.14313686486279198, 0.12894101208723896, 0.11638763996095913, 0.16052318025353873, 0.18498107769682393, 0.17172638459088263, 0.18803776476078993, 0.15344084514951195, 0.15666920249402794, 0.177601024859107, 0.1618041002103291, 0.16869988265558844, 0.16715874848561274, 0.17986989608087411, 0.1604652709596488, 0.16145387102916342, 0.1551855282083907, 0.14806991867715003, 0.16116935459381798, 0.21292570742542127, 0.15282291612726662, 0.15047072708624654, 0.17183723712643928, 0.18877100296026594, 0.1744162693843314, 0.18904038465810513, 0.19998222370543595, 0.18646395760403223, 0.18633859058729796, 0.17874799944028763, 0.18837227037291948, 0.056860887389597714, 0.058667689444341864, 0.05307862325271451, 0.06387623445158774, 0.0400521907382303, 0.048889644792057485, 0.04387386697330953, 0.0550166861051512, 0.05181390034666289]}, "mutation_prompt": null}
{"id": "91422521-bea4-42e5-af6c-3dfcfe190c63", "solution": "import numpy as np\nimport random\n\nclass NovelADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.15\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "NovelADMDF", "description": "Novel Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with a probability of 0.15 to change the individual lines of the selected solution to refine its strategy.", "configspace": "", "generation": 53, "fitness": 0.1207464740493567, "feedback": "The algorithm NovelADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16169239571114125, 0.18017248391937846, 0.18553488188059075, 0.18217612306265196, 0.17708460391823921, 0.16946755025515847, 0.17904218628583313, 0.14556778957591487, 0.14823415631906378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0688668225811111, 0.041432572834425474, 0.04009974058098742, 0.0339789647991412, 0.03421430874981213, 0.04224318231721713, 0.042677032451260644, 0.04281735880903348, 0.04532254526246415, 0.028354654182898398, 0.0380149359747447, 0.038960024321403774, 0.026644536767759908, 0.03211124338765026, 0.058553905608114465, 0.03046555884982749, 0.024058794239392278, 0.022246391551254407, 0.7518439336328436, 0.8390222948318866, 0.9054274173340476, 0.8731347795659647, 0.8713260442282076, 0.9330727924063075, 0.999025581381916, 0.9918087564775672, 0.784574397819121, 0.06256155957444665, 0.08379970540662285, 0.08338728332158463, 0.06399132910457994, 0.07987127334424005, 0.0683199917411057, 0.08681155089547499, 0.08400665121963735, 0.04333483747416489, 0.1255718118087934, 0.10392142895351353, 0.11530132750195332, 0.13604248336240743, 0.14280152868179685, 0.11485761696007979, 0.11707761285576712, 0.10101227380125621, 0.11137228308915814, 9.999999999998899e-05, 0.007331090635731341, 0.010602882589885287, 9.999999999998899e-05, 0.025496694400619746, 9.999999999998899e-05, 0.022715684123519764, 9.999999999998899e-05, 0.01069912527160466, 9.999999999998899e-05, 9.999999999998899e-05, 0.014529111236608827, 9.999999999998899e-05, 9.999999999998899e-05, 0.005867650765838173, 0.0008758101533259399, 9.999999999998899e-05, 0.0034356114617345446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058206446819255464, 0.08574894373042063, 0.10320983372878745, 0.06812681046831925, 0.021740196668670664, 0.06679872208903193, 0.05546017615170984, 0.045948029057009676, 0.052707973366437955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007483508797302418, 9.999999999998899e-05, 9.999999999998899e-05, 0.009234202781780776, 9.999999999998899e-05, 0.001313472938596405, 0.18816062786252508, 0.20634648441810677, 0.19591523069608807, 0.18131644229565635, 0.1848545276531427, 0.16976055492617892, 0.20739760444517352, 0.18199135760024532, 0.20302645072044967, 0.056520283443284636, 0.040669550120087106, 0.039386055698256484, 0.038150381599165284, 0.033573456194523565, 0.03570825387289245, 0.04964268738782407, 0.04561789440318098, 0.05269154077547211, 0.11416223548067683, 0.14574496113359114, 0.15321563542914463, 0.139221187575176, 0.16286907279636764, 0.13836211895515693, 0.13101747949705367, 0.144074680569382, 0.134812398084181, 0.16519711767256395, 0.15192454025480406, 0.16123258793707207, 0.1679737135678535, 0.2156724491905544, 0.16138919672763752, 0.1457717179972473, 0.17366442003504723, 0.1645446014354397, 0.1030644364217509, 0.09993476086430186, 0.09540313222129282, 0.10397745138358427, 0.1462814767127848, 0.10363688741536803, 0.11249196692447017, 0.11042600481296105, 0.09891331657886637, 0.16013178081532753, 0.14865168002500817, 0.15114258072258124, 0.15450193984226102, 0.1521713775435961, 0.13839113772608547, 0.15047767885337526, 0.17361700534045243, 0.1446369331066828, 0.131051713460401, 0.150532044426128, 0.1360908243151755, 0.13877928655703053, 0.15270406733270792, 0.12540278715925202, 0.14746858849414168, 0.1339635982171642, 0.1605084278214981, 0.16076236666527088, 0.15868401770874863, 0.17028286006593985, 0.1613332114030207, 0.1559866085574727, 0.1366979388420646, 0.2196315449857279, 0.1465469542873148, 0.1333831229249356, 0.1550385148108162, 0.14403500497088495, 0.16063749297476482, 0.17401412086832646, 0.14461898089708847, 0.1625676853172041, 0.16646165074509756, 0.17878086905816448, 0.11970769881442611, 0.2000017764910148, 0.18129957136334107, 0.18557356273802417, 0.1941247569255906, 0.21597377872404833, 0.1898246708660708, 0.18156463152378588, 0.19023013586637194, 0.17002612637042935, 0.045812360574949196, 0.05719525339227549, 0.047937318729200484, 0.05947274790305723, 0.04316086562943311, 0.045446224802900725, 0.0447628139175813, 0.05513660440516599, 0.04354689878798401]}, "mutation_prompt": null}
{"id": "e2c240e3-c811-4726-954a-bc3765edba34", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.levy_flight_probability:\n            x_new = self.levy_flight(x_new)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.05 to change the individual lines of the selected solution using levy flight.", "configspace": "", "generation": 54, "fitness": 0.1186855215258879, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.16.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.1575212624938397, 0.15724079061218277, 0.18566014460985958, 0.17211823473445953, 0.15600607993951976, 0.16984482264185885, 0.16265495393882812, 0.16257723419932446, 0.19263920604415208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323636689813792, 0.0433733684537263, 0.039746896639014984, 0.048356481801846374, 0.03511714073395866, 0.04068241247968685, 0.0431648723094078, 0.047153905873153046, 0.03626463258886237, 0.03713305244860343, 0.04811260802702322, 0.029314263188825906, 0.032269714864099464, 0.02497770095976304, 0.03686198845604105, 0.04218936534805484, 0.04091391608189754, 0.03526236590880416, 0.9766331960473539, 0.7697519934757477, 0.46060796875791243, 0.9536175611967791, 0.7298779020305626, 0.9207806578784308, 0.9887155743664515, 0.9109401806435714, 0.5577520464384611, 0.0647898799103328, 0.0606939965777441, 0.06313902389356207, 0.06540945937014109, 0.06334341188186277, 0.09800093552114408, 0.11628936428933534, 0.06593636282365112, 0.0644037952396821, 0.11027093181421732, 0.12347020366822692, 0.10118364507229816, 0.10995607661085505, 0.12526774504235305, 0.12871292669327594, 0.14412534518489717, 0.1004190339939931, 0.1223347849922789, 0.03385951027645884, 0.015165492832708516, 0.004744828544622548, 9.999999999998899e-05, 0.010188649035611674, 9.999999999998899e-05, 0.003157686272648008, 9.999999999998899e-05, 0.02354118928610316, 9.999999999998899e-05, 0.004321138567965344, 9.999999999998899e-05, 0.0011504312892298696, 0.00546527279456821, 0.0014285759675231047, 0.0014043142718310753, 0.014507237190593547, 0.000731331298334803, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054836199794827234, 0.0502666463865038, 0.04455349253713359, 0.04608944319288222, 0.07221124825700975, 0.054956456408521315, 0.044312935544284504, 0.05417258273318315, 0.06576030391654508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005061198619970342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006927612467986677, 9.999999999998899e-05, 0.20044224270046085, 0.20082052393966277, 0.19599729390294074, 0.19241669082181134, 0.20775979432680336, 0.17806808372567118, 0.18101845192551147, 0.18251936570045868, 0.17964594355931862, 0.052181751992678604, 0.038006496384300426, 0.03851147969871194, 0.04178394633917082, 0.0391678438658466, 0.04119263604054524, 0.04053769249963479, 0.040841980397800626, 0.0515361893983578, 0.1279708180969381, 0.1263307236770974, 0.12280277838529796, 0.14387689173585805, 0.13485558940400277, 0.14963397117771948, 0.1498243073698442, 0.14361716252812673, 0.13443143352705633, 0.16427859538495304, 0.18146292485324111, 0.1762305510417671, 0.15778912229038544, 0.16631153980496927, 0.1626198519337615, 0.1624905004000704, 0.17367185072375124, 0.15774821293547192, 0.10850119089084276, 0.12618064753456892, 0.10422772370008038, 0.1046411669814663, 0.1075032643922188, 0.10149973613963226, 0.11398862315472691, 0.1236781545505019, 0.12769569406701975, 0.15654127059222933, 0.15841075883282452, 0.16229609580260984, 0.1551247892791855, 0.15096694196140048, 0.17685338433664932, 0.16162170416126387, 0.15133435163975062, 0.1657822034603751, 0.11185281777079692, 0.11556268733763486, 0.14527916626690873, 0.14991422833848778, 0.14625708501005974, 0.14137749875363315, 0.14153102687256747, 0.15052691096524562, 0.1605084278214981, 0.1429213352142693, 0.17475009911347283, 0.16828613092660327, 0.1650178322312038, 0.2377720758694113, 0.16144497806313152, 0.22935815363321466, 0.16347391330821048, 0.16113675879920264, 0.18135803170334608, 0.1834960805959145, 0.14936995391429264, 0.14063567778586838, 0.2378573550452865, 0.13301898080336383, 0.1495440948440766, 0.16320999284733084, 0.15034273079816574, 0.19371246876536052, 0.18186843684859444, 0.18737111907424242, 0.18767159240928366, 0.18501018859384533, 0.1892147342647057, 0.17326296120116347, 0.17257010831222397, 0.19238468881913262, 0.05452423982178256, 0.052287371288471496, 0.04310927458789138, 0.057004201795258225, 0.04936476859756311, 0.06662635397621652, 0.054518806849317425, 0.05576185307882242, 0.04923095953027079]}, "mutation_prompt": null}
{"id": "75769a44-480c-46c6-b59c-041aab884cee", "solution": "import numpy as np\nimport random\n\nclass ADMDF2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF2", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Enhanced Crossover Strategy using Probability 2", "configspace": "", "generation": 55, "fitness": 0.12158169484121766, "feedback": "The algorithm ADMDF2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.17114966389311426, 0.156804792795745, 0.1735336340985183, 0.17096067039708118, 0.1833108564374547, 0.2480936334759245, 0.16953375001831283, 0.16301943375269234, 0.18918297738128664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03899100958177881, 0.07382464519406495, 0.035166708513781675, 0.04357343541141112, 0.03323315214665945, 0.043427518325746095, 0.04561971632985207, 0.04091844547669299, 0.04499284336947307, 0.03160087864927974, 0.03502217372603955, 0.02528756076188443, 0.037570265924467994, 0.030939889008005816, 0.0483111020348479, 0.02690519954544457, 0.028966181184379658, 0.02162531741780127, 0.9998047723085209, 0.8320025618300608, 0.8804406900446191, 0.9543596868271664, 0.9113033085680651, 0.8610621821506749, 0.9851426708127362, 0.9016502311237373, 0.8159325539695962, 0.07511599831708349, 0.05513556972772515, 0.0721278363433907, 0.07002762970255261, 0.08251057685127416, 0.07013461020637846, 0.09487017177426438, 0.06553790434767581, 0.08661314800128406, 0.12088808865496647, 0.11061321878106534, 0.14856731701993175, 0.0990211693275358, 0.12023714863982327, 0.10909136441719569, 0.1102161117977476, 0.14333868578326325, 0.10541622313516585, 0.0018667541975162516, 9.999999999998899e-05, 0.0010304931842836096, 0.008082763364768097, 0.05564473519327062, 9.999999999998899e-05, 0.012187475307273044, 0.00033728322305759395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000166357726449462, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013771970994712612, 0.02409930386489434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06113415778831499, 0.03146496294812917, 0.05124691747336241, 0.07550096377322624, 0.08810358457399303, 0.03226293840127581, 0.03149053664442958, 0.03636290539535769, 0.02688831484598575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008507313250748272, 9.999999999998899e-05, 0.2049502028567457, 0.23873894147462604, 0.19752050995331805, 0.17951070601154295, 0.17504544580018433, 0.19939632466846924, 0.18523412023277575, 0.18138983989703872, 0.19181815843476024, 0.05654645390407309, 0.0459580859149018, 0.05470533305842551, 0.036879862954739884, 0.03676994434308001, 0.03251057444125072, 0.0459356956575353, 0.04387358361282245, 0.05344226966639343, 0.11831891765900915, 0.11544922630178267, 0.15360041739505892, 0.1374736390293254, 0.13648017595026818, 0.12992112214382645, 0.1283581447573755, 0.14322622072240943, 0.1349057609932317, 0.159117059608061, 0.15856393265834923, 0.16154393442282777, 0.1618141213580404, 0.14914526139455653, 0.17691187480867776, 0.17428330302761952, 0.17368144589718626, 0.20387867330162346, 0.09278572634414994, 0.09856281381617171, 0.10428611368010188, 0.11483799091013858, 0.1071136637333111, 0.10584420550444884, 0.10665580996746882, 0.10878311004364294, 0.11016910352242015, 0.1485852470982285, 0.14583838722166986, 0.14172128452853794, 0.14705799547091336, 0.15287929822948298, 0.18738584563402638, 0.1693483882255561, 0.16221062981439682, 0.15624770876695349, 0.11665884729516618, 0.1598984247133023, 0.1480876285618279, 0.1470910150976501, 0.15375036543147602, 0.12576479677197006, 0.13809131148626164, 0.15472049584915148, 0.1605084278214981, 0.2107315472946042, 0.15793772735910439, 0.13994341609385919, 0.17412340585795283, 0.2191213361457519, 0.16340447718299878, 0.1446026217270382, 0.13692726297967095, 0.12892220177607105, 0.15775756673347718, 0.16227532527805866, 0.1402039613919327, 0.11880814820428154, 0.14666949997979173, 0.14769385367212673, 0.21521152610084138, 0.15658826487766997, 0.15334246777088867, 0.17676177748391497, 0.17482767744369798, 0.17072050226118995, 0.18074011592586758, 0.2038448746645517, 0.1852174968837187, 0.19188141663749825, 0.18936261175402114, 0.17780981900965487, 0.048722133758383857, 0.049051726284440544, 0.042972443187989096, 0.04906654753957651, 0.05287884062226311, 0.04873202814730926, 0.05063628153510269, 0.058411357379731244, 0.049078061335096734]}, "mutation_prompt": null}
{"id": "88bfc62e-67c4-4ff2-af7e-4ac0a0a01c14", "solution": "import numpy as np\nimport random\n\nclass ADMDF_refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with a novel strategy to refine the selected solution by changing individual lines with a probability of 1 and crossover with levy flight with a probability of 0.", "configspace": "", "generation": 56, "fitness": 0.12241777798812657, "feedback": "The algorithm ADMDF_refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16827091935481409, 0.14091203107501027, 0.16672125462809273, 0.17837515129860115, 0.17985616227404966, 0.16436571073077066, 0.15754680045694802, 0.1581805239859857, 0.194346124555688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039246851600933774, 0.053669225295601475, 0.038722460230152134, 0.04331498016816748, 0.036382571816490406, 0.05093111216271695, 0.050326923889880026, 0.04504453705768452, 0.04010830721948966, 0.020880467483859633, 0.05558972101805504, 0.029939870235896726, 0.025909590608518607, 0.033270277007934834, 0.048790356060840145, 0.027607092480359974, 0.026242913330092543, 0.02892398071224145, 0.9998047723085209, 0.9976835623145217, 0.8542354794169598, 0.9759239774026068, 0.9438674394653476, 0.9982816796064631, 0.9823418274811099, 0.8876350924004556, 0.9967190231123201, 0.06482552671244268, 0.07491496379615814, 0.06104682587563259, 0.06364892449900472, 0.07316457915299501, 0.06950893787712809, 0.0868143497781364, 0.08863427470685925, 0.07146325675703191, 0.1224989979319887, 0.11218018194259072, 0.091749524190742, 0.11707843693624931, 0.16864555424088035, 0.09977762399730417, 0.09444648263766953, 0.10150885002027299, 0.11786109745324413, 0.0022825958832496385, 9.999999999998899e-05, 0.00952858349273411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011399424761215915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01304096777709396, 0.009117507567286576, 0.006957674208262876, 9.999999999998899e-05, 0.0034303638313100127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05996607114064556, 0.03096988802640155, 0.03814078689276157, 0.029255482172016456, 0.044571922348368376, 0.02731742324981079, 0.030161469056036783, 0.053232817467122384, 0.04651569964900759, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17909386014904105, 0.24161465127908943, 0.18827297857594372, 0.21896639480870905, 0.17895962502517182, 0.1726899076403834, 0.17574358791676536, 0.18333164762004428, 0.1896418881284172, 0.03016103892135047, 0.04107361782151275, 0.0338698106271913, 0.04391286147307205, 0.0396758775031405, 0.033909085711813725, 0.048645833194756016, 0.04550322855926969, 0.04021307665326512, 0.11786083836063643, 0.1557667077344611, 0.1301224064553418, 0.1374736390293254, 0.14964177188490813, 0.1528921002512087, 0.13569333732836364, 0.1734603481823329, 0.12611285558758156, 0.14963030633085417, 0.15517436301652598, 0.16473986482657432, 0.15392047285549193, 0.1548546386583397, 0.16546452849094517, 0.16227694541924542, 0.17701669062356884, 0.1491509467679123, 0.09016660729874093, 0.0898360990747098, 0.10337940882806274, 0.0955848636115002, 0.09105241742032744, 0.10953744096508944, 0.11800689836360778, 0.0996686923473199, 0.09609745700196326, 0.1657072378039386, 0.14535682460218524, 0.1566056024080148, 0.16138730916710753, 0.16348310193057436, 0.15692474550995683, 0.13785635225160497, 0.17055853663724663, 0.14350682569573714, 0.14202172238658517, 0.15992888346067635, 0.1368322378940271, 0.14330622594531672, 0.14488563394458365, 0.14065695139858436, 0.12093116144728278, 0.13479036249104015, 0.1605084278214981, 0.20154140133922382, 0.16850880710654514, 0.15112274624995448, 0.16620949911117133, 0.21686066484594535, 0.14123646957460956, 0.2303093984947322, 0.20595415035731401, 0.14764697560862883, 0.14833474939441982, 0.13284360158957498, 0.12464505526369851, 0.14062230954932198, 0.15415466261383304, 0.22440072527105082, 0.12103371846980149, 0.20008212060072905, 0.124050659629519, 0.1811221889797715, 0.20284833471876895, 0.17126427558579016, 0.1739348698311466, 0.19231421934139614, 0.18889952208795746, 0.17493553829626363, 0.17826082428561474, 0.19616943821927113, 0.043981938667968956, 0.04607625772409063, 0.05599835337329917, 0.05430663109280354, 0.0537160923697646, 0.04492203604495992, 0.07543490884761872, 0.05337177631358003, 0.049949009473624906]}, "mutation_prompt": null}
{"id": "beb2df3b-2d12-444c-91a9-931adb59c3d1", "solution": "import numpy as np\nimport random\n\nclass ADMDF2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n        self.directions = np.random.uniform(-1.0, 1.0, (10, dim))\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def multi_directional_crossover(self, x):\n        x_new = x\n        for i in range(self.dim):\n            if random.random() < 0.5:\n                x_new[i] = x[i] + self.F * self.directions[i % 10, i]\n        return x_new\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.multi_directional_crossover(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF2", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control and Multi-Directional Crossover, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight and multi-directional crossover.", "configspace": "", "generation": 57, "fitness": 0.1212933350451132, "feedback": "The algorithm ADMDF2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.18892332979484971, 0.1751551706086122, 0.15519138286233758, 0.19037799244837394, 0.16801472890709135, 0.1676002408295706, 0.14658402599364728, 0.15163429642489135, 0.15692518078284556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03589211682024129, 0.04484845055938036, 0.04053365571684575, 0.032924439224215174, 0.04512367671043227, 0.05099829513996046, 0.0469780518129832, 0.031044804878216925, 0.030500130204255016, 0.02493938168212695, 0.03632698815854052, 0.03722197468902866, 0.02481189272654205, 0.038339853739236984, 0.032011158602265666, 0.0427362054096353, 0.03259627157097145, 0.022048676661679978, 0.9479262494561792, 0.976143965162074, 0.8614218490398495, 0.8273840846033145, 0.9775598234154357, 0.9020281999130683, 0.8989319585483411, 0.9694818213163404, 0.9406270697330043, 0.0667357551009018, 0.09056991425761407, 0.09242181100843427, 0.05729444054800681, 0.07956258350738077, 0.05221556628948909, 0.0674859467650607, 0.04751460167574861, 0.058416756374560785, 0.10272185339027107, 0.14256259712293318, 0.1213322315677029, 0.10854215196008876, 0.12486575396383048, 0.12465207248108368, 0.1476010691732521, 0.11787419034071167, 0.12388881638502502, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026660809226591087, 0.025972807871893377, 0.0042463013162475916, 9.999999999998899e-05, 0.004423286339225174, 9.999999999998899e-05, 0.00020870016299379124, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007619911264529433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.063385338374769, 0.05001015026500211, 0.0624608359269776, 0.041628237059993856, 0.09085036370868094, 0.058579087773525274, 0.05709402617324977, 0.0306591623041651, 0.04522375597919415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006732683621428648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005177838716345695, 0.0019107808127131198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2062015269703079, 0.19945891129769822, 0.1859985591754837, 0.1844925331812225, 0.17826560043010797, 0.20274716365366952, 0.18364859227146657, 0.2031222550990115, 0.18368601002120477, 0.03409216514692015, 0.037764880720131955, 0.04846116221355701, 0.0434341693407867, 0.036441514060905456, 0.03886539399878475, 0.043371221655069125, 0.04393768804268616, 0.03250237692046776, 0.12486112993851917, 0.13514180877321413, 0.1410120534183923, 0.1373449237158617, 0.1342587986061562, 0.13739223772873954, 0.13872645387125904, 0.1444799697294722, 0.1455644991650814, 0.15559489711362895, 0.1556044482688712, 0.1717597998321353, 0.16269391312263215, 0.18752011716764705, 0.16157123740488422, 0.1740174582312244, 0.17652616510699803, 0.14913399682921225, 0.09901430048735416, 0.09579618139961843, 0.0975697855752109, 0.11057860898821237, 0.1111339840061526, 0.1059987023985266, 0.1057954800683154, 0.11701530202019361, 0.10232664185949447, 0.14209776613203962, 0.1310802829521177, 0.1445647477830576, 0.15968911972091937, 0.15043124227511306, 0.1736210488571378, 0.15556500679098395, 0.16239617687188435, 0.1444505460234119, 0.13824501025276636, 0.15939783535863628, 0.12153261948450578, 0.143097357234938, 0.13607544728821197, 0.13999581814449502, 0.13240331067401367, 0.14142766476422042, 0.16085194984722273, 0.1515188975366667, 0.1476681156246934, 0.1435942147568161, 0.2144250192779953, 0.1300010590347379, 0.2211023898364961, 0.16188578124582587, 0.1535081490430068, 0.18889399286191666, 0.13914830368348863, 0.18992469232528664, 0.18917210769521164, 0.1485574998610829, 0.12553008778371588, 0.1573574303641866, 0.19241516724129337, 0.12095297892695211, 0.11827314107948605, 0.1793530083158037, 0.18253938757596766, 0.21164553624497418, 0.19043204704873673, 0.19267686688850338, 0.18705885732656247, 0.18052919096861664, 0.17679955583644447, 0.2045740586647491, 0.053500028430872426, 0.045872497186297156, 0.04103855100636333, 0.04333803404498926, 0.0452099298310199, 0.05488405084110759, 0.038936990895521384, 0.055772355709351684, 0.05403324231154094]}, "mutation_prompt": null}
{"id": "eb6c2935-6868-4e46-8aff-efee1eef9911", "solution": "import numpy as np\nimport random\n\nclass ADMDF_11:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n        self.probability_levy_flight = 0.11\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < self.probability_levy_flight:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = x\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_11", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight, and further refined to follow the probability 11 to change the individual lines of the selected solution to refine its strategy.", "configspace": "", "generation": 58, "fitness": 0.10014596667133799, "feedback": "The algorithm ADMDF_11 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.11.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.1618054310240714, 0.16517656290208593, 0.15216187806028214, 0.16864739396209005, 0.19699573266251935, 0.1558331750494223, 0.17447987685081867, 0.14481902344768172, 0.1844646200130725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039145526657300755, 0.037970440680316075, 0.03501210648147701, 0.0324370933525725, 0.03576589154122889, 0.046787147910098414, 0.040587985784526825, 0.03990110584668183, 0.042512780744289214, 0.02538913392799591, 0.03172956930741, 0.034113401066649396, 0.029145932182073175, 0.041044654597225394, 0.029426175015051514, 0.04106457274840036, 0.027076458653257585, 0.029321876521934742, 0.9103427076207041, 0.4447434973126412, 0.694945050846988, 0.26439553848812525, 0.2561762706351579, 0.11574096301915693, 0.30651976948436277, 0.8175261400870804, 0.20961487657223266, 0.07654192018341277, 0.06601428186500657, 0.07579329335299445, 0.05016167609412592, 0.05766555539298368, 0.047550284050350666, 0.08737404550139194, 0.08039629658271064, 0.06148697553535021, 0.10359614161221764, 0.12307534321952984, 0.14669046913264705, 0.09993637846135517, 0.11088759220143907, 0.08643136552557296, 0.11549806135938945, 0.14626558974657078, 0.15178228825417917, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002744421613332104, 0.011438031617580946, 0.010446176270109797, 9.999999999998899e-05, 0.02718464867051551, 9.999999999998899e-05, 0.020875759259398552, 0.0022225689306829555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014773421918146123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04284552686444443, 0.0018960380567770718, 0.03159544544131332, 0.014859015682976096, 0.07370739048722241, 0.02615964923930314, 0.05562216802480202, 0.03535361150215233, 0.03305147716309298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0039833847110608556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003994854315742091, 9.999999999998899e-05, 0.21296147320209569, 0.18483969019286384, 0.17877473187662962, 0.23270170200857077, 0.2088798206152669, 0.19836807026802283, 0.19939222878428942, 0.1706938081320617, 0.19015113834729203, 0.02897018835253584, 0.036340813602055655, 0.041764605364560836, 0.03453853018231823, 0.027243870646230794, 0.06664429288238805, 0.04382290250062948, 0.0360715491757182, 0.044640438606037836, 0.12179172263323268, 0.1488469676904136, 0.13481213422952565, 0.13746929547427866, 0.14962176885270873, 0.1309215420322587, 0.12827596774008965, 0.13369978413661177, 0.1159606528390903, 0.15259313013897868, 0.14727474234004234, 0.1792409176291585, 0.15272290521212128, 0.1621560435679127, 0.16177806630940395, 0.15571781325140965, 0.17367574913737827, 0.17283405296126586, 0.11030145700157701, 0.09261733394488914, 0.11164799208943499, 0.0984270533286713, 0.09795620286007722, 0.1048736639536283, 0.12183153146339176, 0.10369890767909107, 0.12111741530028808, 0.151103639362009, 0.15610517593322493, 0.13779186217964545, 0.14825034880649512, 0.15094499642539794, 0.14978208104162682, 0.17497349390602446, 0.1681509616331296, 0.15582218724238883, 0.1400518137613992, 0.12226890371190513, 0.1351911742083317, 0.13826837879344112, 0.14638357164449212, 0.14553861611824437, 0.1030916039059604, 0.11893627544076701, 0.1605247860131993, 0.15864932151605649, 0.17299161856926948, 0.24078195740730113, 0.16463561936997795, 0.13433942489298367, 0.14722168841162753, 0.13427156766178994, 0.16331156487038223, 0.14401782507544703, 0.18507515940114738, 0.14791005767303744, 0.18674998812174148, 0.12932229713581833, 0.18768252492774595, 0.10831802343047059, 0.20708819633141617, 0.11631994120428057, 0.196047857142723, 0.1837218622855149, 0.18021756397629396, 0.1837544494539899, 0.17601965787445206, 0.17900221450724163, 0.19202315583676643, 0.19754585066500485, 0.17887990660308029, 0.17110130723483452, 0.04637513327637932, 0.03966190800877101, 0.049004974178308514, 0.04374503064982216, 0.059541685334916106, 0.05514530755531011, 0.05186624532132811, 0.054060769333035386, 0.04935717793602712]}, "mutation_prompt": null}
{"id": "d0f2a6ff-1ec0-4908-afab-aa1889089ec9", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\nclass ADMDF3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.3:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.7:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight and following the probability 3 to change the individual lines of the selected solution to refine its strategy.", "configspace": "", "generation": 59, "fitness": 0.12194275228154712, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.15264330506833956, 0.15925462812696023, 0.16567537513680763, 0.14231582481419192, 0.17856351879791288, 0.19160166145118807, 0.1724466270434687, 0.1652926980153847, 0.1923464308259084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041028897401699904, 0.047955816262426065, 0.039065535827751185, 0.0463254466889057, 0.045162784977095916, 0.038022191760960555, 0.053377176629683554, 0.04995595672532527, 0.04286780196040907, 0.0295630351662739, 0.03091194420626675, 0.04132280926688181, 0.03140705930251986, 0.021510579878450842, 0.04371924053204479, 0.03177982436329585, 0.03806002759823368, 0.03151745349954549, 0.9802253484872689, 0.9143428885161083, 0.9739638008807552, 0.9611056359136958, 0.9522726479923787, 0.9018208965064483, 0.910482540219492, 0.8778873990333705, 0.9944135296024182, 0.06607838484124806, 0.07570940363974477, 0.0554236885941527, 0.05858494514195012, 0.07639159499794057, 0.07945122400467464, 0.07242254398378156, 0.05768426796412296, 0.07277461317678646, 0.11553496268837826, 0.14238346771608945, 0.10732620650514202, 0.10463624616050582, 0.09904362602782768, 0.13127041542513285, 0.1072657116609167, 0.13036297419553788, 0.12851563908470742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003421769207032077, 9.999999999998899e-05, 0.02740352017772607, 0.020828964631852576, 0.011851979166925042, 0.003355320907447612, 0.0003091496098437396, 9.999999999998899e-05, 0.020504876117387494, 0.0013166571757959877, 9.999999999998899e-05, 0.007649459970683559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02722250702059481, 0.05008116097290671, 0.06073260317143414, 0.04442185025122958, 0.012735464584526235, 0.06553918356897792, 0.016745100779256394, 0.04478570143691707, 0.059631547501631244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012633757296395931, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.24026313093332086, 0.20161967775935685, 0.20478952669677652, 0.1679290430616036, 0.22667546465309418, 0.1770772540336788, 0.17520474963191612, 0.18019742562909302, 0.18692660484340573, 0.05743776586177607, 0.0414214710149019, 0.03341270919895556, 0.05300411621477019, 0.04173849378261707, 0.0697800678013697, 0.046919754096385935, 0.042799374099810716, 0.04360266704987337, 0.1533922357500418, 0.1199477498206506, 0.17013982342062772, 0.1436713095358051, 0.1409560737944099, 0.137336370224995, 0.13801765866044535, 0.14554106081638274, 0.13129669980804792, 0.16550854835434037, 0.14986026640850136, 0.17175350380348264, 0.1584320298938846, 0.15144950187525852, 0.1614085416283889, 0.15614710999626935, 0.17701383592692965, 0.15533905931550385, 0.10113000390626836, 0.11838524808995876, 0.09238489576162134, 0.09379326510682273, 0.14628235597410255, 0.10348582318313582, 0.14855480994900683, 0.11484631403640688, 0.11082809928694148, 0.1350877169500473, 0.15224773085108778, 0.16824677360496187, 0.14532119379159902, 0.13111728780457066, 0.15078781242462902, 0.16940065886186872, 0.14972142342641748, 0.14621754572788848, 0.11124248693413097, 0.1551542824052844, 0.14232514353487802, 0.13521532216026155, 0.14109123344291852, 0.12691569483882337, 0.13694973982478698, 0.1394103936251564, 0.1605247860131993, 0.17607949346159024, 0.17131051171615108, 0.14494954877478228, 0.2143701795650621, 0.15216974564142294, 0.16147107766908497, 0.14840680838300302, 0.12717438519669033, 0.1665580013303566, 0.11683545527898165, 0.1968194994208472, 0.13542060498880293, 0.13226316705048224, 0.1179819724366915, 0.14303490999467083, 0.1619717218391199, 0.17301045633545598, 0.13722434105373282, 0.17120766108803476, 0.1805073724898466, 0.17910577398170757, 0.18469684037936973, 0.18941341226698005, 0.1881083555578239, 0.184063235812424, 0.20367651039829804, 0.17482913970624392, 0.04387838829692026, 0.058253267004303555, 0.06818406198530469, 0.04993957102278668, 0.059883134637351954, 0.04453268932283294, 0.07545670735621002, 0.04907453936358652, 0.04645440725670724]}, "mutation_prompt": null}
{"id": "ff415b8f-80da-4d2b-ab5d-b12c2930d7ae", "solution": "import numpy as np\nimport random\n\nclass ADMDF_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        index = random.randint(0, self.dim - 1)\n        x_new = x.copy()\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_Refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with a novel strategy to refine the self-adaptive parameter control by changing the individual lines of the selected solution with a probability of 1.", "configspace": "", "generation": 60, "fitness": 0.09073099607799874, "feedback": "The algorithm ADMDF_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16996301748689946, 0.19056721331339455, 0.17476563259001554, 0.2001085978316609, 0.17393512945385914, 0.1881370147280692, 0.17367162439322748, 0.15573165955385504, 0.16041158994556992, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940497214618621, 0.05072498693642136, 0.03608643443957971, 0.03754098050343857, 0.03350571412371195, 0.04178478016575715, 0.04106798706292225, 0.0635805970634914, 0.05490980992573369, 0.022250994628814635, 0.036218358488611324, 0.04217106987917196, 0.034200848996346345, 0.03865551381810639, 0.056170975958056424, 0.053937020468623253, 0.0369145419290855, 0.0326332688458868, 0.0800664248395675, 0.07345393148194002, 0.08623867910126048, 0.07459873585928367, 0.08349833729858913, 0.0792451276736027, 0.07721867127801829, 0.0798598551279327, 0.07863705136479326, 0.07562591395940121, 0.09087719292452856, 0.10053989161635568, 0.06284468621292127, 0.06500684073461394, 0.07648658787072271, 0.09518144617692437, 0.062404844156159434, 0.09110752214800888, 0.1196179829088343, 0.19025251941404875, 0.1444521501520769, 0.11466645316068969, 0.11153039425109146, 0.13231432788923525, 0.11131004637229036, 0.11651623915291509, 0.11051836065035914, 0.008583888162056574, 0.008707174942571339, 0.004329835061387399, 9.999999999998899e-05, 0.03144212798674528, 0.005034369154073959, 0.0014611128564000486, 0.0008024183631885062, 0.0027216068974150742, 9.999999999998899e-05, 0.06228936204094915, 9.999999999998899e-05, 0.00802119202683238, 0.01596330148037539, 0.023148787462782816, 0.0344016169706407, 0.008165923099917705, 0.025901563881334355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07650273197081203, 0.0701587542738511, 0.053071126257459356, 0.04986338128601997, 0.08228027386972148, 0.048930984901547014, 0.03861244107817807, 0.10754833656973695, 0.05760953059454055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004106554452917965, 0.00036750247751804466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003897314792194684, 0.0001064248034227111, 0.1892078727522497, 0.20579175701477614, 0.18038253691552586, 0.21851657428675741, 0.20337662765424536, 0.2286832837073154, 0.19583021528784617, 0.2014386177767027, 0.20556416703753289, 0.04287989712027829, 0.03841190121507698, 0.042258903240657286, 0.04533072934498217, 0.042048814906879284, 0.04432985178970261, 0.06254789503262637, 0.0449591252965571, 0.04715998981292635, 0.13653361390854857, 0.13434423895410796, 0.12807707640399035, 0.14665411706007836, 0.13627434642538594, 0.13961840891318245, 0.14893877585154192, 0.1375329960975158, 0.16264968908093436, 0.1716519570081564, 0.16029964080991665, 0.16641738039736176, 0.1658185020611096, 0.16109448733371123, 0.17219076534424038, 0.16606914205162648, 0.17367403040747065, 0.17197972720603416, 0.10409040602278585, 0.12156080049214435, 0.12252139791880012, 0.09989991609392346, 0.12144553821846327, 0.10835850540304748, 0.11114400831172355, 0.12321294635178015, 0.1060598021572321, 0.1446288064493525, 0.15964966662251756, 0.16236741908434082, 0.16205718414397374, 0.1427656258968334, 0.16833617610420348, 0.1488639699604839, 0.1681998866085498, 0.1783912941786493, 0.14812098244177319, 0.15097313178602922, 0.14025131504409838, 0.1537034376127685, 0.14210476087239166, 0.15048386510979528, 0.15104385226302197, 0.14026603397380422, 0.1605084278214981, 0.14480011015911054, 0.1840231972286549, 0.14234150372280163, 0.16407552998624053, 0.16504801855548412, 0.17069251787282158, 0.1476186361832843, 0.1646424541173841, 0.1655492571639492, 0.14350455272131568, 0.16673160334741732, 0.13489449574965762, 0.13813676125177154, 0.13368010755834658, 0.19141914724013198, 0.16437436921116255, 0.16049866175820093, 0.1513329121731325, 0.17084038721791017, 0.1759731336380883, 0.1733660200371785, 0.20205612615463653, 0.21085370552789406, 0.18344608254908668, 0.1812215912198264, 0.189164362465449, 0.20372378176103967, 0.04385531315613267, 0.0602712724942116, 0.0660329190192146, 0.05314492137979909, 0.0618525109209368, 0.05765867462137453, 0.049353206435457264, 0.056433787139893554, 0.05508652248994128]}, "mutation_prompt": null}
{"id": "c5732b95-9cdc-4e99-8be8-568bae271312", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.0\n        self.mutation_probability = 0.0\n        self.levy_flight_probability = 0.0\n        self.self_adaptive_parameter_control_probability = 0.0\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 1.0\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def crossover(self, x1, x2):\n        return (x1 + x2) / 2\n\n    def mutation(self, x):\n        return self.levy_flight(x)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to change the individual lines of the selected solution with probability 1.", "configspace": "", "generation": 61, "fitness": 0.09165845706367153, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16305519236907717, 0.1743876288583719, 0.17411423402027615, 0.15960127117616507, 0.15856798036883868, 0.18349051070097921, 0.19279731496625663, 0.1334840537226606, 0.16587514881914234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04294138512829904, 0.06251624539770295, 0.039795185049219306, 0.03230365493486531, 0.03488961328828444, 0.04750961498063555, 0.046323498669941565, 0.036702682922564955, 0.042165266462980244, 0.027034958427760047, 0.03471028672177012, 0.03685375392663903, 0.04782202954996828, 0.02593998785753915, 0.025467016935500242, 0.02448457892353706, 0.039943773387177695, 0.02582016586916347, 0.24157056166500157, 0.24020540988678463, 0.17904672877366834, 0.31327096256436693, 0.20288961196800515, 0.1836716339597264, 0.1878753863970246, 0.25154003886342136, 0.2543065757752937, 0.08792100546487813, 0.0828020169784569, 0.07158109924173872, 0.08688599592331814, 0.06203069129924865, 0.057821633295139674, 0.07808911271047925, 0.0722989048079653, 0.0674883481168359, 0.10400205199146406, 0.1287463842790687, 0.11606015357911614, 0.09817774220548237, 0.09920263791169981, 0.09685757718979426, 0.10788953973345905, 0.12682819663667833, 0.11821950217449773, 9.999999999998899e-05, 0.000437956402132067, 9.999999999998899e-05, 0.00984547997366736, 0.04868593494143514, 0.0021551165533615357, 9.999999999998899e-05, 9.999999999998899e-05, 0.025910378111586363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02268573732311796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034776245114410576, 0.04443977278322275, 0.04122785905084314, 0.029049326216775584, 0.10551090715544997, 0.03937319837827602, 0.02785776254468797, 0.08091840340427592, 0.05027454592243508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008094101646473839, 9.999999999998899e-05, 9.999999999998899e-05, 0.005521425325047513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20246008028959606, 0.18640091243278334, 0.19136964993377437, 0.2188447210498654, 0.19690601942953168, 0.2152627431633909, 0.1884350222196305, 0.18602550167567122, 0.17933256561339583, 0.02758462547244922, 0.03788233181252876, 0.046814481840093514, 0.04268945275517744, 0.04066842025135231, 0.04029609525733702, 0.03985064005663774, 0.035248136964817434, 0.05429510593777409, 0.14920018802288249, 0.12921327867719978, 0.12420825546976244, 0.13971642659374106, 0.13503891171283688, 0.13596211408345005, 0.15052803258704173, 0.11131701188038734, 0.1323613986131169, 0.15299564224901296, 0.15900940346784498, 0.16325763951477001, 0.16122866659517565, 0.18303558249375507, 0.16143542076703976, 0.16168667279859927, 0.1769382489648842, 0.15230464067908855, 0.10289302262057265, 0.10332323777216623, 0.09442645741937872, 0.10219128756072682, 0.12935742732264555, 0.11127698100376382, 0.11084611798709809, 0.10690839960689191, 0.09876107876889562, 0.14192487846477508, 0.14871862731352026, 0.14145125171083306, 0.15794686504484312, 0.1538619857792375, 0.16401486244112107, 0.14595544689976725, 0.1524126490840657, 0.15539029504672253, 0.14062197650532438, 0.14249281572194905, 0.13505646743697575, 0.13441674817944183, 0.1482391353587451, 0.14423308423063042, 0.1523291877129821, 0.15008584789507073, 0.16052810259094297, 0.14403054761245293, 0.16177574846595855, 0.1827360362516689, 0.16353567464420926, 0.18293414025405286, 0.1484694301666043, 0.16992545634722667, 0.16593083521504326, 0.14155301019356903, 0.17544779927752663, 0.14854768531471163, 0.15943382738100786, 0.13356573750137468, 0.15152008826195873, 0.17266475272695747, 0.11609730597022916, 0.12761713395351104, 0.12641407239296965, 0.163732456232215, 0.18914610655707165, 0.17583289451146122, 0.17947303511508184, 0.19493266462916714, 0.1899160503217141, 0.1779288047280685, 0.17719202813284374, 0.19860802519427023, 0.05539211721909765, 0.041871116068366576, 0.042905714007421936, 0.05851372247986841, 0.05406171933197579, 0.049788173346782094, 0.05100434884323224, 0.04897097758287894, 0.06004852303988828]}, "mutation_prompt": null}
{"id": "f1a90abe-eaeb-4002-87b0-660c6fbb30df", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.levy_flight(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight and probability 0.1 to change the individual lines of the selected solution using mutation with levy flight.", "configspace": "", "generation": 62, "fitness": 0.12151203727504407, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16767656918606366, 0.15635213106237078, 0.1589664572875501, 0.1579655228825435, 0.16071465071971758, 0.15579411933947174, 0.22923569548722977, 0.17308699704737773, 0.19451702063090637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04629350592592507, 0.0555167653140306, 0.058732515266773255, 0.04097261746367198, 0.03939892363717412, 0.053683499226027886, 0.037597723681184636, 0.034878733603439516, 0.041600523179265325, 0.03112139338021791, 0.033950857305085846, 0.02973377094586427, 0.038588296471722794, 0.05174102889638921, 0.02426375244311274, 0.07843461761251724, 0.038186269081212254, 0.028644017652801668, 0.9998047723085209, 0.8678056105834635, 0.8932524295421667, 0.9728249163347528, 0.9201546035718482, 0.9638369766487578, 0.8815878037003312, 0.9686607929748676, 0.8836627230340163, 0.06336881308850584, 0.07714763500239552, 0.08765489623015388, 0.051978231327079794, 0.07864109180548273, 0.06165379607684596, 0.08710278665584392, 0.09646016115376133, 0.04507783188609793, 0.10574401126036259, 0.13037732256552825, 0.11013190778000848, 0.11215396051702087, 0.11487277480882563, 0.10515092517340252, 0.10063218160423582, 0.1035278555565734, 0.10156684588433074, 0.016679540902557743, 9.999999999998899e-05, 0.0010274269480640141, 0.00020597128912636098, 9.999999999998899e-05, 0.004644672396514005, 9.999999999998899e-05, 9.999999999998899e-05, 0.004387147720370521, 9.999999999998899e-05, 0.010478920330934116, 9.999999999998899e-05, 0.014929799391040777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00344654463398697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04503809423159566, 0.018819168734071523, 0.04641557592783996, 0.05257215772551349, 0.015452651886244895, 0.05123821409212337, 0.039355854194193296, 0.040495873417940365, 0.042371578725892145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18704328464180475, 0.19271295551705048, 0.1725177184107164, 0.18315134617898743, 0.19800903925378177, 0.1696730242070269, 0.2069437696334565, 0.19197103238997626, 0.22016551745964985, 0.03397826607361221, 0.04256395421677572, 0.038652332890369734, 0.0396494594928577, 0.033919198052685506, 0.04101093012133006, 0.04336840784738327, 0.058039044391844596, 0.04600445147421672, 0.1264108937343752, 0.12860991310012237, 0.12275413238524036, 0.14543015656745795, 0.1540398861246124, 0.1406155482565471, 0.14855010498484167, 0.14165809878557334, 0.12884900399280452, 0.15837848329232984, 0.15209283357858805, 0.16186607444105228, 0.1587004460280672, 0.1483080180935038, 0.16155855326943713, 0.1549556455531731, 0.17366632314326147, 0.15890480605373836, 0.10403301098924, 0.09204725110524137, 0.11868680945864984, 0.09912019908491143, 0.10863355884247172, 0.10594049312384846, 0.1387152782234673, 0.10097942802153903, 0.11714488697121683, 0.16236397323564922, 0.16047841354323122, 0.15447762020396638, 0.14819941385273327, 0.15088649290930933, 0.15962550485182692, 0.16109424845127618, 0.1477330243253433, 0.13997885021826584, 0.14042279624453424, 0.1519557267575321, 0.13826067818972587, 0.1394624840429256, 0.1455424783725373, 0.13606763011623502, 0.15430619837539705, 0.137858852407855, 0.1605247860131993, 0.16716986585649374, 0.1425394699610597, 0.23419410833992282, 0.21426447269575788, 0.15371968169113936, 0.16121235893377983, 0.15877203469475276, 0.14919009224559143, 0.1936592881161977, 0.2049387170204019, 0.1570629113623414, 0.1713449967985614, 0.1309488893257318, 0.1590983995556049, 0.17021767397562693, 0.12227310468838992, 0.15848907213929375, 0.14679149893584853, 0.17761477746516352, 0.17752693401002473, 0.16669687345508954, 0.18045845010161587, 0.21499935697802308, 0.17291676504831943, 0.17374040334536878, 0.1814839897015984, 0.17993244785193852, 0.04672097703110245, 0.04305094891478989, 0.047692196002845244, 0.0442168419602047, 0.049602476251465855, 0.05593638178565419, 0.06276619277679196, 0.06443628153231007, 0.05701755493749894]}, "mutation_prompt": null}
{"id": "14ef6c68-9c68-438f-9148-6339501b5b9b", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with a novel strategy to refine its self-adaptive parameter control by introducing a probability of 0.9 to change the individual lines of the selected solution using crossover with levy flight and a probability of 0.1 to change the individual lines of the selected solution.", "configspace": "", "generation": 63, "fitness": 0.12105901937166816, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16796828712411638, 0.17001546297351322, 0.18466274417758177, 0.16293807053830955, 0.17295678126809721, 0.18185342413420458, 0.17017370063462545, 0.1754755824028169, 0.1775211779980984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03532892467232995, 0.07369019192479687, 0.05168978286913972, 0.03170684232461185, 0.03974366751366054, 0.051124082371453716, 0.0364349310137575, 0.042861639108541016, 0.03364337905009429, 0.028845563772743166, 0.03825714435820027, 0.02905669154126822, 0.03181374358292466, 0.0322598911842239, 0.0585451830441589, 0.03646918773514152, 0.032699672893575005, 0.022739743759856212, 0.9998047723085209, 0.9359964333932799, 0.8878660228073643, 0.5890588405962812, 0.8582190718871432, 0.9459514590997175, 0.9846988283467923, 0.9681522437925499, 0.9455891279656076, 0.07442796882486857, 0.06935733875939354, 0.09128421069648907, 0.053592235166194824, 0.06114904559083567, 0.08645053755678078, 0.07857675417848164, 0.07165833039472691, 0.08093481162902771, 0.10148688858979638, 0.142203728431064, 0.12916688719161207, 0.1453731997649793, 0.12783177620850816, 0.08629747058312476, 0.13231498390057317, 0.1218374795521795, 0.1367558498885424, 0.012118179250680483, 0.013876549254717818, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002779805421109227, 0.01373346816465959, 9.999999999998899e-05, 0.012501510130889404, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001403393718720558, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010052492256489298, 9.999999999998899e-05, 0.009142777725503981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058111180588175326, 0.044973859788362436, 0.10647387657217822, 0.036670867265323426, 0.028592545198078967, 0.042533958116230175, 0.046170516591330646, 0.058091591926628494, 0.03383936820534983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005513223021083147, 9.999999999998899e-05, 0.005209794907133802, 0.003238531151081081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1671898456691826, 0.18263194681272044, 0.18436672140297006, 0.1935343346716114, 0.19092111719037508, 0.20273366739915655, 0.20714049263678525, 0.1901662516778161, 0.18657064036235493, 0.06198749692937655, 0.038736084247824154, 0.03749595967166608, 0.03946517649186898, 0.031459128744570464, 0.04101212538127397, 0.048909711342842055, 0.032392083539094174, 0.036058947856925094, 0.13019893290421625, 0.12823398135726838, 0.1440781357258576, 0.14913461206933043, 0.14127526248647648, 0.14302208455385335, 0.11570679573091114, 0.14008983744010983, 0.12433369399152927, 0.1607309962973713, 0.16081583714177994, 0.1708923046962505, 0.16103464456541827, 0.21541333418389674, 0.16613427432520655, 0.16029528274503757, 0.17366710658417361, 0.15791124492621456, 0.09783405840553461, 0.09365965852254465, 0.10492399906243421, 0.10632171932993262, 0.11475362134972478, 0.10966954224834824, 0.11079116782372367, 0.10733537655769998, 0.11530361984142001, 0.16162673749408019, 0.16230270769860655, 0.14617490587982485, 0.14232600967197595, 0.158621506665933, 0.1606968416821677, 0.16924345145192532, 0.17323683003218393, 0.15464837377048912, 0.1457817540280808, 0.1457531271324327, 0.13717246221482804, 0.13922199589518114, 0.14364119374598971, 0.13398976528014084, 0.13317830550740217, 0.1391358890971618, 0.1605084278214981, 0.1315074734439322, 0.16078450913540532, 0.16713365283438164, 0.2008602890510487, 0.15967798770443753, 0.16647635794587057, 0.14727617633904466, 0.15779757777717873, 0.19029430951243798, 0.14196586373476383, 0.1564466534424922, 0.12588910099468265, 0.17167822132316402, 0.23154478367981957, 0.14015140449380847, 0.1344862473233459, 0.13891852107695557, 0.11938334510162929, 0.17350880469736107, 0.19051058976447655, 0.19165795239983896, 0.18975302364989277, 0.17874602863220612, 0.18612320863158316, 0.17522671803780498, 0.18643334418250734, 0.179524230488449, 0.053364414545307604, 0.04446778349032998, 0.06228459877455539, 0.04866841122319787, 0.045438454571697595, 0.04788762679227898, 0.04286111797339087, 0.06192596480597623, 0.050210082320325866]}, "mutation_prompt": null}
{"id": "f5cf080f-14de-4ee1-821a-77f7001a077b", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.9\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        else:\n            x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with a novel strategy to refine its self-adaptive parameter control by introducing a probability of 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 64, "fitness": 0.1067346720405098, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.12.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.23162225573312767, 0.1767086887150896, 0.16434757062241856, 0.1615089419756126, 0.163570056259846, 0.16663914080166464, 0.17358286361801134, 0.1533882622354138, 0.1708459936346448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918293466927028, 0.04470652572280032, 0.047541835276946776, 0.034267040069798194, 0.05450633164708529, 0.05519801669579849, 0.04306197779458398, 0.03919093705982901, 0.05725210434348138, 0.02907230002761585, 0.031964660880533624, 0.03561334795300686, 0.04971819224440277, 0.03802937122192329, 0.04611861368488457, 0.029646481987206985, 0.03270207857567897, 0.042543653854677954, 0.5225054305906942, 0.18917023567654456, 0.11910096188413155, 0.3693783709446743, 0.6309143082354078, 0.8132776292314375, 0.8794561626355083, 0.6033297173884395, 0.49292118471740665, 0.07283014779648878, 0.0771739063044653, 0.07613116988718571, 0.07198602225229844, 0.06254994155072724, 0.0826554311713471, 0.058688173649954156, 0.055914487537395474, 0.0604191989817342, 0.11952326720687201, 0.1290702925004198, 0.12480645984393324, 0.13451021997178636, 0.11010887598525765, 0.11970125811508847, 0.12837837396214835, 0.13581106500733842, 0.12183658125676577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00217078189765485, 9.999999999998899e-05, 0.01846094711159496, 0.0021128829250245396, 9.999999999998899e-05, 0.003035843347829359, 0.011557659327538605, 0.027327529650106763, 9.999999999998899e-05, 0.007913384652214361, 0.006100904834933307, 0.026796691601871814, 0.009862756544026907, 9.999999999998899e-05, 0.001406454363027998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06708290260266081, 0.056360293234261394, 0.039918186444591774, 0.036030215171583, 0.0249377282509895, 0.08660665152989677, 0.06182440573441039, 0.035207146125746824, 0.06247551716323685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005410727218815525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007332050658755751, 9.999999999998899e-05, 0.18285297635712283, 0.20131289349872905, 0.20207096065281516, 0.1926156131611353, 0.18711723137718572, 0.19387739300283213, 0.19102845268549085, 0.21128642148295396, 0.209445841354993, 0.043766488134051706, 0.03733054669909941, 0.03512871495883041, 0.039855667904912795, 0.03917010518228725, 0.02982697620842012, 0.05445707415726808, 0.04866038394490302, 0.03952088014573585, 0.15467918716140427, 0.12946208216953525, 0.13456445968557873, 0.14647427152095538, 0.14122560178901533, 0.1266703237645801, 0.13143115885850243, 0.1306212773458394, 0.13546091080053524, 0.1714079848154515, 0.15511895501451967, 0.16423937208873418, 0.16390473529406624, 0.1608717449859869, 0.1676495517059362, 0.16222287651195932, 0.17414079374712543, 0.15770932953640981, 0.1345977758736202, 0.10243296613564123, 0.09804506281610681, 0.11092935633048784, 0.10305430695570161, 0.10561734915992549, 0.1106766717667359, 0.11687055649457267, 0.12805998994744772, 0.15442077907765128, 0.1565200810329792, 0.1486280549787785, 0.1609041017286672, 0.15550559657566332, 0.1751604478415597, 0.17149412241054818, 0.14099091357030613, 0.1632294434809235, 0.16637611311547695, 0.14425583015328813, 0.14885305283820327, 0.14667431418109167, 0.1450164445245542, 0.1434713752664667, 0.14699796382295405, 0.13888488618630312, 0.16074886978814773, 0.14616470336908405, 0.1608241698091708, 0.24153545105007102, 0.1638322124188487, 0.1670534017137133, 0.16400670025786834, 0.16138815536751083, 0.16342451107278488, 0.15052338077596428, 0.15361003399799866, 0.16415547449688306, 0.19098256681961134, 0.15111607994813803, 0.13937683123233968, 0.16004490618034473, 0.16927550338173458, 0.14667020544529785, 0.13914208752893753, 0.19869895807599613, 0.20273729739646673, 0.18557419960410593, 0.18599641502277187, 0.19061083858527894, 0.1883899778047875, 0.19123572989569182, 0.1751471580255053, 0.19809863279811113, 0.04747049010744964, 0.04844268093419035, 0.05190935618605019, 0.05501213500798696, 0.05215418327656007, 0.05924873998038005, 0.04809423126990564, 0.04814657534921629, 0.060288810823080574]}, "mutation_prompt": null}
{"id": "b462fe2d-3cf1-4569-9964-70107de08c0a", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\n# Novel Algorithm: Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with novel strategy to refine its self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution using mutation with levy flight and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with novel strategy to refine its self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution using mutation with levy flight and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 65, "fitness": 0.11977166201851173, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.18476707619731847, 0.18189162895386968, 0.16357772491786382, 0.19179655016108732, 0.15278755629138174, 0.1578972877961231, 0.18297445620404051, 0.183385740190676, 0.16208176360941107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04077152899249736, 0.037438532348156195, 0.040931610288255205, 0.041559640108543516, 0.03543506877112779, 0.0434992329202365, 0.047025828892588994, 0.043111726232022196, 0.03605856042479261, 0.03275412616768336, 0.03449968528198821, 0.029659406744478978, 0.02950137871777203, 0.030340978130244056, 0.029543324168218366, 0.022145541090522913, 0.029670718865249746, 0.035872447654693884, 0.9998047723085209, 0.988959374600716, 0.7335576523861547, 0.9245023866773228, 0.9149162759167311, 0.9528242215367525, 0.6865247019144207, 0.8964686792210255, 0.9814517231401881, 0.07453724638482928, 0.08313990094761703, 0.07462141042684522, 0.08615246422832801, 0.07586517229637679, 0.05287536580409391, 0.08636267377200513, 0.05035052043143984, 0.05460623634564232, 0.10508186298960664, 0.14240330866423645, 0.10489596435676007, 0.1169633280797232, 0.11508269315125286, 0.11435632700827825, 0.1018549355204117, 0.1408968795124762, 0.11203252917253359, 9.999999999998899e-05, 0.0002453682023495496, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037449541706405798, 0.0005652750293404507, 0.06177785449873352, 0.0003432401240548444, 0.010739597111843802, 9.999999999998899e-05, 0.007440606424479079, 0.005365453659195607, 9.999999999998899e-05, 0.012780411378902845, 9.999999999998899e-05, 9.999999999998899e-05, 0.008698661994731127, 0.01388826134272314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05836125444476059, 0.029294220130332005, 0.03921145134103987, 0.05915953202497293, 0.029613077692854706, 0.06244445515760089, 0.0285758079718742, 0.05003342790871246, 0.04379184549695858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012512257996763032, 9.999999999998899e-05, 9.999999999998899e-05, 0.005377954829820508, 0.0018324248649123076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17002417253965285, 0.17894111874482477, 0.1865789346404807, 0.2118070792818867, 0.1844214133146932, 0.18614054451760953, 0.18142797392088228, 0.17861130192078434, 0.1752144372355806, 0.055698053369533596, 0.042455360173564216, 0.04383544426755581, 0.040117273760705396, 0.040128385675401335, 0.03990672385879135, 0.0389135395154917, 0.034516704823609135, 0.051961273506914596, 0.15739294231607093, 0.13861200636678261, 0.15601296972024625, 0.1374736390293254, 0.13573439870374748, 0.15487640149069426, 0.12232068447171585, 0.15643375796792625, 0.12430524172365531, 0.16635618291297083, 0.14639019650336815, 0.16718511263047786, 0.16032926161513628, 0.16388449689840567, 0.1680066587486312, 0.16439881201326023, 0.18245095643656106, 0.15731372988333037, 0.1040068197154389, 0.09606100748581736, 0.09903245047452924, 0.10699545456386661, 0.10376447482642381, 0.10642912747778976, 0.10047235899021612, 0.10132642180855678, 0.12178029628269027, 0.17107877384242987, 0.1540413110337988, 0.16655503580343867, 0.13560665452356846, 0.15762370778688295, 0.13519416416137242, 0.16878987691672132, 0.15717136673101317, 0.19200655390142574, 0.12065346674526978, 0.15440014641356758, 0.14460383153092948, 0.1571980851455692, 0.15176618024196198, 0.13906181461876455, 0.1464789312999739, 0.1356330190657996, 0.1605084278214981, 0.1877695767767098, 0.15407466385531166, 0.1648860020829679, 0.16022357948050991, 0.14891538569087648, 0.15467576909434522, 0.1496549983055422, 0.16549749421116644, 0.17666059117742894, 0.15856243535130665, 0.1616342743679714, 0.16517095559945538, 0.12480259482676026, 0.13535385137438039, 0.13071562763108013, 0.13156329054603688, 0.17599948040655478, 0.1250899317058507, 0.1859363329792375, 0.19240507191296652, 0.1686869798743721, 0.18360922029578464, 0.19703424134462288, 0.17766763865344892, 0.1778558235513028, 0.18801043297900144, 0.17869081895785255, 0.043614192329107904, 0.05702103292494176, 0.04518716705946224, 0.04975575991953751, 0.04804161909031868, 0.041733453191225456, 0.052041060629425706, 0.04879156952267061, 0.05306401387668869]}, "mutation_prompt": null}
{"id": "44afdd05-f8b0-4544-b269-39d48ffc57f2", "solution": "import numpy as np\nimport random\n\nclass NADELF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.x_selected = np.random.uniform(-5.0, 5.0, dim)\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self):\n        x_new = self.mutation(self.x_selected)\n        x_new = self.crossover(self.x_selected, x_new)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution()\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "NADELF", "description": "Novel Adaptive Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Probability of 0.9 to Change Individual Lines of Selected Solution using Crossover with Levy Flight", "configspace": "", "generation": 66, "fitness": 0.09460011379264689, "feedback": "The algorithm NADELF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.11.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16984510879802361, 0.16222455877117314, 0.1399111399829861, 0.16133922720753435, 0.16145744931379813, 0.16300330832212728, 0.15227315003628605, 0.1511271884790354, 0.1800747458828439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06824155801076959, 0.05609733897819347, 0.04074244428944063, 0.03132277009507767, 0.035688804580800704, 0.05098229500195994, 0.04840732442052598, 0.04379524080276875, 0.0401973048163381, 0.027023090724411114, 0.041369663295454884, 0.02879843615705846, 0.02960002388849048, 0.03645280023965991, 0.030009814795382228, 0.03264286927860682, 0.018778663459071532, 0.02450009908049211, 0.45567985945622425, 0.08258852019865082, 0.11840096317687099, 0.4945976858959129, 0.08639435734005929, 0.07850927562542842, 0.06911842975154991, 0.7330956675357985, 0.9460100870103059, 0.06402051642749307, 0.060960791414961024, 0.06053782140307562, 0.06752890850168536, 0.05972036392648494, 0.07755659156863515, 0.08164748700934144, 0.0466189412803969, 0.06497114030430817, 0.13460686596505034, 0.1289258555090439, 0.09065136581505462, 0.12180960115410056, 0.11340154158364768, 0.10142176198803066, 0.11842858861803307, 0.09618486229108114, 0.11126718037041194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010353656871411654, 9.999999999998899e-05, 0.01704599822025865, 9.999999999998899e-05, 0.0014411572184479526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016321050427051342, 9.999999999998899e-05, 0.017942915615376975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042123835563568024, 0.0506688414534574, 0.04154524615686128, 0.011137022611010239, 0.02259545024692544, 0.044037292702565956, 0.04162655111125568, 0.07741578099396285, 0.04863929802142497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003196779745039069, 0.005010619783218262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1772631923718051, 0.1734405013834276, 0.20899867694938845, 0.16860824411713493, 0.17518508650577447, 0.2027295923160909, 0.196076919892882, 0.18259475818004245, 0.18573558130404566, 0.03361089122401517, 0.03674589514395088, 0.040978192662917134, 0.03629488755606303, 0.03729877748771082, 0.048591586297409006, 0.036646434030660036, 0.0483902730804584, 0.05203242597926927, 0.15030298491137495, 0.11787550790845525, 0.12660382331469522, 0.14049470757082727, 0.14623317073405084, 0.13713562455070583, 0.11574816446197822, 0.12888602827518003, 0.11592061361605888, 0.1472150523425364, 0.14777103776679668, 0.1786995406991646, 0.16304019127183944, 0.1678115182591633, 0.17161476075507542, 0.16877895488878947, 0.1736786390469206, 0.17256758794519989, 0.09919355391803397, 0.1032956645681945, 0.11083755992082167, 0.09312916203171295, 0.1015919002404646, 0.10162402297246786, 0.10239270000391065, 0.15097363228709781, 0.1008344675780738, 0.13291437656186422, 0.1459486167030385, 0.1350855621097411, 0.13144149775868041, 0.1386553476037483, 0.17062359083811374, 0.16095212577112838, 0.15405313405053134, 0.14077166236124683, 0.13266843659192418, 0.1584187154204999, 0.12339387450653061, 0.15474724930648676, 0.1489606835731071, 0.13089674223285386, 0.13837045135768655, 0.1376138920198764, 0.1605411442049004, 0.16100625983302597, 0.15706245936319851, 0.14294024276719774, 0.1538320755106879, 0.2049778006557902, 0.16216677029452276, 0.2066899065561595, 0.16646491506482164, 0.18712486875166512, 0.1456254518820449, 0.16681342837085744, 0.14887656196545218, 0.12449501206344049, 0.10970865722383494, 0.13628229572774286, 0.16288747685852523, 0.1436072007207504, 0.1245294985761306, 0.19018371791155908, 0.18542537781668178, 0.18037282856942183, 0.18638925077041635, 0.19101996687098777, 0.17389159654618414, 0.17959241068274456, 0.17708026683822864, 0.17386555392513858, 0.05944808973951332, 0.04834772669997489, 0.04700233823318445, 0.054685368360551045, 0.0453386718403912, 0.04246571587177972, 0.05081604705290521, 0.05968243219278868, 0.06503379923705177]}, "mutation_prompt": null}
{"id": "a0a8be4f-8890-47b8-84eb-e90f4a44eed4", "solution": "import numpy as np\nimport random\n\nclass BBOB_Solver:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\n# Description: Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.\n\n# Code:", "name": "BBOB_Solver", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 67, "fitness": 0.1212636048893281, "feedback": "The algorithm BBOB_Solver got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16616537555106992, 0.18423196235589445, 0.15509594714319574, 0.17603243313626005, 0.16400813037476514, 0.14900928092514787, 0.169307286629241, 0.16623165879199364, 0.15653144192134438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0471759104492232, 0.04707321010731358, 0.03712603415672766, 0.04293463489232996, 0.04076941043273341, 0.055678792267338184, 0.04588111538428585, 0.05829558407939617, 0.06162491843075846, 0.029355920979288963, 0.03598476957258445, 0.027094303752767, 0.03149542988137677, 0.03204203366277669, 0.06389401194443767, 0.022698033608391954, 0.0294060268985451, 0.02215395199576975, 0.9533381207626908, 0.9969212778749278, 0.9437016436351273, 0.9405097679060225, 0.997509999513166, 0.9958040408537423, 0.909799646874548, 0.9307572985840408, 0.9044514366506741, 0.06252334327931108, 0.060414898097378544, 0.05496160888385149, 0.05831880128278355, 0.07563496122174096, 0.09872689437931226, 0.08933431747215215, 0.07886401448924407, 0.058272143773960616, 0.10789877011873272, 0.12330300482765555, 0.1130564890232586, 0.12897842701650875, 0.12809109546654796, 0.10142498129339006, 0.11274149881169815, 0.11254612888831128, 0.11784386611240172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013654088818421228, 0.004019219180038447, 0.012883041981460508, 0.03619351167443052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030831012153793247, 0.0008615174462270891, 9.999999999998899e-05, 0.020472666368188563, 9.999999999998899e-05, 0.024255401874982985, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05166610226586432, 0.03368175070378254, 0.026816848077458544, 0.07570699462244102, 0.023465328361954363, 0.040550269413543893, 0.04557423158309959, 0.022387686924793204, 0.04402472519095613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0054846801211547724, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014500633137982666, 9.999999999998899e-05, 0.0029296225157491307, 0.00852470844174913, 9.999999999998899e-05, 0.17677783642997835, 0.18938704090916347, 0.195102391592624, 0.21793645311944154, 0.18133991102204383, 0.19340876767983384, 0.18011422086768836, 0.17169561296976388, 0.19051773125310068, 0.03762054834995521, 0.03559928299038617, 0.03784865114583846, 0.055349313800351574, 0.03555982292315496, 0.03075154810830738, 0.04558893620077176, 0.041642472109580386, 0.04454969891978233, 0.13341232016853277, 0.11471551018312198, 0.1233020527843035, 0.1375200664382914, 0.15090308306594014, 0.12425461698085927, 0.1363481388887321, 0.13640093415930388, 0.13053243593135555, 0.1678507902576183, 0.17315340129241452, 0.1632933069849679, 0.15884347968011547, 0.1720115616566149, 0.17238439579098253, 0.16568451680930196, 0.17367466470037307, 0.165179338792107, 0.1036967642807467, 0.11397681018698003, 0.10987427618967505, 0.10744929931254088, 0.10438423539272679, 0.11302024930558985, 0.10686129399931377, 0.10556847636696542, 0.10467711474277652, 0.16217665028034567, 0.15322693146700872, 0.14844524916819468, 0.1752042343597534, 0.16132509821763485, 0.15685376623264669, 0.15427338241591004, 0.16429350777725227, 0.14708877121663266, 0.12224637075348943, 0.14876165651560036, 0.13745697702461745, 0.13653166289601726, 0.13624588733694032, 0.14844938349986714, 0.14487949577235792, 0.13828289440840968, 0.16052172760779826, 0.1392408454181443, 0.15495819868304483, 0.15638368966788108, 0.16333711337974377, 0.15888070477293126, 0.1575034427236789, 0.1516996612266428, 0.15394221638304806, 0.18534024930309545, 0.1386307605687518, 0.12609554844815307, 0.14342715559869723, 0.1352861055274952, 0.13721346117677335, 0.15213868600614766, 0.14139405795340987, 0.15127188415238035, 0.14945102819845557, 0.19063161581752852, 0.18074354311317453, 0.16235215730834784, 0.174521845185597, 0.17529318115792014, 0.18019376076302074, 0.17824269087278133, 0.17095753141820902, 0.1791396718499818, 0.056281520745917635, 0.06331815258673268, 0.04978913846756694, 0.05644141080188092, 0.05939229739951368, 0.04388836909877536, 0.051278521597097226, 0.05441775632944956, 0.041174103256379935]}, "mutation_prompt": null}
{"id": "02f850c2-4f3f-4820-98b7-97b390f41d06", "solution": "import numpy as np\nimport random\n\nclass ADMDFR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.68\n        self.mutation_probability = 0.32\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.32\n        self.reflected_points = 10\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def reflect(self, x):\n        reflected_point = x + np.random.uniform(-1.0, 1.0, self.dim)\n        return reflected_point\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                for _ in range(self.reflected_points):\n                    x_new = self.reflect(x_new)\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDFR", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Reflected Points, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.32 to change the individual lines of the selected solution and probability 0.68 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 68, "fitness": 0.12023898819208018, "feedback": "The algorithm ADMDFR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.16.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.20721992089625696, 0.17905181287551242, 0.21085390993827602, 0.15789584425643877, 0.16543325471838144, 0.1760848291892949, 0.171088967220133, 0.17158190757367064, 0.17022177630555257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04759414247145832, 0.051669268093951004, 0.03669790739134182, 0.04410829993812859, 0.03596120894847732, 0.04919234134817285, 0.052399510833560425, 0.054139734339687995, 0.043251102628837135, 0.03738156721600239, 0.033845194479219964, 0.03208041197312106, 0.03061941685376879, 0.028732417555420775, 0.025628414891868845, 0.033116203153545576, 0.030015548664339642, 0.023312807744998998, 0.5885742407679699, 0.7801613502932331, 0.8979326055047849, 0.9552588193273442, 0.8735908504671591, 0.7700475498519157, 0.827232413677524, 0.892351583642574, 0.8606691761754093, 0.07039884393102513, 0.09389967493054374, 0.06106311477374038, 0.08571490085449618, 0.05406338464720006, 0.07345530726959892, 0.07639694330706026, 0.09578883777695812, 0.07911075014426605, 0.11044338376492358, 0.11494553032348376, 0.12131365671939454, 0.11360307805357606, 0.12252553348382389, 0.1121769007413681, 0.15023762717473255, 0.1317976564577461, 0.14260062372737825, 0.006874392256094097, 9.999999999998899e-05, 0.0098460673282309, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011340315377614818, 9.999999999998899e-05, 0.0023545849052263312, 0.003438051565349043, 0.004540530294797618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03169793779005181, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07207802555986453, 0.04150509868692931, 0.05080075747711399, 0.08278883811407045, 0.0571538475197354, 0.04431575282793199, 0.0705521538303645, 0.044488089552000565, 0.04714036240770203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016974015643722584, 9.999999999998899e-05, 0.0003845981567049961, 9.999999999998899e-05, 0.18617120776265306, 0.1868527818080814, 0.19969694601593757, 0.17932497549411475, 0.18446922103128638, 0.19073606914198726, 0.17423580863056143, 0.19538221281753054, 0.19443425535976144, 0.05467862640469279, 0.04360870871140976, 0.03540216117007544, 0.04187932565964425, 0.03248282910415767, 0.04605093491585399, 0.08799546435654615, 0.039785192965437255, 0.044710556172704696, 0.14829383513370853, 0.14285515605638943, 0.13957894849328534, 0.13746663820405558, 0.19810072373495247, 0.1293495078015936, 0.11437140570852722, 0.12997597884927914, 0.12191635871623152, 0.1841462425486019, 0.17690491431791866, 0.17936531174817305, 0.16560772288377634, 0.16538141801295403, 0.1884041939113026, 0.17140726809866047, 0.17365836726952688, 0.15539097832698934, 0.12091992306512678, 0.09738797757838091, 0.10000415494880144, 0.12618145207873654, 0.09844989050769415, 0.10490168826226176, 0.11908343445165814, 0.14726735361675403, 0.10787259672439087, 0.1586897936144862, 0.1676224915003477, 0.15553352394874276, 0.1655625106390759, 0.15215081939373287, 0.1636041736700734, 0.16435710960978378, 0.17262047677197845, 0.14961186351068678, 0.1397873292834665, 0.1497244339023237, 0.14412707175861272, 0.14058849359513848, 0.14999476810085144, 0.14125805306645944, 0.14921285065488887, 0.12722253887808566, 0.1605084278214981, 0.1676396408899291, 0.1436487200135863, 0.15080578055668026, 0.1838536293733085, 0.19833131243435498, 0.15812074441590251, 0.1461118131180379, 0.1557368922544019, 0.22890988564534842, 0.15052129280699877, 0.19690324381767454, 0.16359798154042304, 0.21228263732337038, 0.12774850154190875, 0.1469632131131089, 0.17328419587265853, 0.14659799738290535, 0.16616773639577098, 0.17364752280883278, 0.19964748276546207, 0.1704938697569527, 0.17262684847157417, 0.1888799684729192, 0.18000174444296535, 0.18462073336105922, 0.20364940646344654, 0.19065475435859336, 0.053584692512705256, 0.048169509796236354, 0.04603908293903203, 0.04669632935948809, 0.047523435346611076, 0.05671780484355715, 0.05136448469873034, 0.05765297126976188, 0.03781322177760904]}, "mutation_prompt": null}
{"id": "71398b7f-1ccc-455c-afaf-dfd20243aa34", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.levy_flight(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\nclass MADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.05\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.levy_flight(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight and a probability of 0.05 to change the individual lines of the selected solution using levy flight.", "configspace": "", "generation": 69, "fitness": 0.12239938577042074, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16514173955180778, 0.17589489364979127, 0.15942583053901394, 0.17395875823682527, 0.16582909497667553, 0.19044545829815773, 0.19757017315044545, 0.17252297751970058, 0.15733751886434855, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04390602684820788, 0.038881674138368405, 0.040282093501832095, 0.030809128364077565, 0.03695334390391092, 0.034955085775310035, 0.034956318745582804, 0.060186885019862135, 0.03855343885078888, 0.029001364537373453, 0.0254022283017592, 0.030542251355425876, 0.028995844704852614, 0.05247772409635476, 0.023021203930979395, 0.023944952517022444, 0.02273138651196982, 0.02834769612207111, 0.9998047723085209, 0.9156505329994212, 0.9826867394605541, 0.9927302822050772, 0.9625516069766158, 0.8768874333672164, 0.9907651700498888, 0.9027009932073191, 0.7616661169362874, 0.07644775989447006, 0.07544800777185356, 0.08757741726290147, 0.06223861925518526, 0.10478216694913045, 0.09761059228810665, 0.05872338518661524, 0.08779709395362134, 0.0797473103565306, 0.10210369222632909, 0.1302205197892583, 0.11580850565017464, 0.12817949364741654, 0.11468515313196381, 0.10312470331844092, 0.12470326000251042, 0.11500838283102988, 0.12813191280610592, 0.0068210880372294724, 0.023813848056262965, 0.005327119928157487, 0.0011129039398918295, 0.01697820082899837, 0.004702984151401135, 9.999999999998899e-05, 9.999999999998899e-05, 0.020663460809070555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0286270281415969, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010069768005066537, 0.017812958858952288, 0.0032603058053058964, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0494430504638429, 0.07770584909235478, 0.10246011601546712, 0.05149918985464197, 0.024381240242235758, 0.023040723989369183, 0.045537584766148886, 0.0853316076179641, 0.05021349918831308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005050473724114046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00886549871309128, 0.17490973589747227, 0.18720962343112146, 0.1870821667305399, 0.21890970264427234, 0.18958149549119352, 0.19438017483427306, 0.1979544532218398, 0.1879865627252738, 0.16905525932679577, 0.0373654163776147, 0.036350446222136124, 0.04214969901747789, 0.039079873058326164, 0.03906885663315074, 0.03417483649044495, 0.04643490035859199, 0.03240193269729752, 0.0427466730161441, 0.14268862507010416, 0.12816093518120253, 0.15341402245679514, 0.15211472973028717, 0.14201788886181654, 0.14566458075387667, 0.14154178106495507, 0.1408198723874653, 0.13666484522287226, 0.15293912101859186, 0.1698581654387319, 0.16418170550164468, 0.15571658522245868, 0.1699816879421855, 0.16138524415852062, 0.16553835123052507, 0.17698205136042577, 0.1557233498131052, 0.10289995264984775, 0.1016684650565679, 0.10866388685712558, 0.11123239369629423, 0.1000112713977187, 0.10106194684983816, 0.10973427364457233, 0.09966865727934815, 0.10541197050881945, 0.1499679877732104, 0.15143025680344602, 0.1467454460095834, 0.14981423777294678, 0.16180599495057613, 0.14668217035944198, 0.16845666501194534, 0.16858877710437625, 0.13924934103457476, 0.12579071847469026, 0.14397020444878106, 0.13929913948125394, 0.1443789927914848, 0.1500924418906756, 0.13672883367573485, 0.12204873480427902, 0.15581230046346684, 0.1605084278214981, 0.15584153205407147, 0.16857889275274918, 0.15229630014134599, 0.15546610094493085, 0.1909536514600212, 0.18581206311688647, 0.16138900197914152, 0.15795417069783468, 0.16884717662813564, 0.21463505492199697, 0.1790536076095528, 0.12179963913167335, 0.150694467373921, 0.13719127391044073, 0.16451350141024157, 0.12936736355118827, 0.1776073432661084, 0.15595909390132434, 0.1707943379041642, 0.18076585083025676, 0.17298114506776496, 0.17784728721769028, 0.16934168092229707, 0.17833570891188444, 0.19906301412787308, 0.17765441552307581, 0.20614589379714998, 0.05175696509786354, 0.04654983031027038, 0.042108928392845746, 0.04112529664881004, 0.04486926773859701, 0.05646268341302052, 0.046862840317376864, 0.04753283979624934, 0.06853784147051811]}, "mutation_prompt": null}
{"id": "6db06856-ca4a-4498-b75e-211300ef8d8c", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 1.0\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = self.crossover(x[index], self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence.').", "error": "ValueError('setting an array element with a sequence.')", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {}, "mutation_prompt": null}
{"id": "4fd52929-900f-4f71-96fa-59fb94f25a5d", "solution": "import numpy as np\nimport random\n\nclass AMDFL:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.x_selected = np.random.uniform(-5.0, 5.0, dim)\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self):\n        x_new = self.mutation(self.x_selected)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        self.x_selected = x_new\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution()\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "AMDFL", "description": "Novel Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control (AMDFL) that incorporates a novel strategy to refine the selected solution by changing the individual lines of the selected solution with probability 1 and using crossover with levy flight with probability 0.", "configspace": "", "generation": 71, "fitness": 0.09026332582594304, "feedback": "The algorithm AMDFL got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.17987506779133566, 0.17527406791418165, 0.16249504904545098, 0.16991901473120974, 0.17639370471959426, 0.19811238258978914, 0.18308210755360443, 0.1542617444635449, 0.18420221614253274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04591842387012679, 0.03706201490627159, 0.03826033729575884, 0.04003907395007411, 0.0433742705863307, 0.056109894675203, 0.048564611450155115, 0.042179645079925665, 0.035849070808600114, 0.026415447860164254, 0.0322621442739357, 0.035123176640356024, 0.028849442622499, 0.030361795401143143, 0.03795598266278444, 0.06781648512757854, 0.030695088661851888, 0.028021402391172345, 0.1123062471575278, 0.1499024947338201, 0.11843569448507874, 0.18754329276750403, 0.1924853137632393, 0.12621256435122852, 0.10614936571245759, 0.19367870907868923, 0.15319306300708901, 0.08051290059704075, 0.0637390317601243, 0.055135099346035, 0.08355807900199597, 0.059847019260779066, 0.062356342126928976, 0.05034044721789832, 0.08922199728233826, 0.07025747541207528, 0.11701736688686615, 0.19233455209038042, 0.1054114820099954, 0.1181721051986615, 0.1172656088869668, 0.08245629173833835, 0.12142765274050726, 0.11878112270022179, 0.11470793269722812, 0.04171753263502742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014364221922189113, 0.017729074109462672, 9.999999999998899e-05, 0.0003004205967310769, 0.00891356315733971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013102799980786228, 0.015012958716042024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02570581426426577, 0.03980130533522375, 0.03507567922457033, 0.012471887182214925, 0.014306569407117387, 0.03779038629635756, 0.04431047944723343, 0.014180344160679259, 0.02755621614859083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0052180475005234594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19922136874271978, 0.20012962016904967, 0.21564717028943625, 0.2156659686339929, 0.17890942178464941, 0.18130357127811936, 0.19478583852811993, 0.1973023917104102, 0.21543478195898746, 0.04234766344430119, 0.036212459225550275, 0.04602983991868381, 0.0411060915384196, 0.03695165592803873, 0.035532417139333305, 0.05373191069821992, 0.0355665782682163, 0.04540580386114512, 0.13045330330247362, 0.12466121370217642, 0.12662623162572617, 0.14266030696903764, 0.13662091758036188, 0.12796543591928422, 0.13656106636412846, 0.1393443960752353, 0.12932570019668432, 0.16845225889969828, 0.1708051570665362, 0.16805691117991883, 0.15772387426905554, 0.1618160926431581, 0.1770081141507912, 0.15931572238867686, 0.17367356778577436, 0.1660721974633097, 0.13104569319034876, 0.1283059644639728, 0.1109476173752133, 0.10056938093412049, 0.10960981093791289, 0.11304129078108671, 0.12836823504294392, 0.14250382511342286, 0.12146618236475393, 0.15303146170158544, 0.1477002784506991, 0.15167312427564283, 0.15057623043300117, 0.15952950301512991, 0.17466530217381837, 0.15920614848683268, 0.161664564712649, 0.15785618256057354, 0.14357783631993537, 0.13765854959347812, 0.15602225209870935, 0.12279018726136781, 0.14779730301953875, 0.1387785461492922, 0.1270496794592536, 0.1448112323643589, 0.1605411442049004, 0.20215512964380256, 0.15904832544464387, 0.16315696123261425, 0.2032788176888649, 0.19078186672885245, 0.15604470229910217, 0.23055104262890225, 0.15526656218525536, 0.18668657813734446, 0.16698893413986238, 0.15661900441470877, 0.1236060434509727, 0.15268367055152487, 0.13117473996190843, 0.16733169946950333, 0.2184129346966106, 0.17713530704537683, 0.12298466608316139, 0.18327748452137116, 0.17944252239421454, 0.17259257183840437, 0.16887632951910692, 0.17435976403700848, 0.17938304824735185, 0.17480999651082785, 0.18319879828934438, 0.17349800505702784, 0.04969126672396085, 0.049441253343452285, 0.04596559789708221, 0.06743772921129387, 0.050494636582049, 0.05570391526600471, 0.0465748791660211, 0.06031612375669826, 0.06561270774495764]}, "mutation_prompt": null}
{"id": "b9bb4034-fdcf-4f5e-a185-fbbf1c7ee97d", "solution": "import numpy as np\nimport random\n\nclass AMDFF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.05\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def novel_crossover(self, x1, x2):\n        x_new = np.zeros(self.dim)\n        for i in range(self.dim):\n            if random.random() < 0.5:\n                x_new[i] = x1[i]\n            else:\n                x_new[i] = x2[i]\n        return x_new + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "AMDFF", "description": "Novel Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Improved Strategy (AMDFF) that introduces a novel crossover operator and a probability of 0.05 to change the individual lines of the selected solution using Levy flight.", "configspace": "", "generation": 72, "fitness": 0.1218192033441395, "feedback": "The algorithm AMDFF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.17258076267180167, 0.17363130366945156, 0.14343370224286867, 0.17086765745985522, 0.16135197737920803, 0.1661294559830936, 0.16415649655534637, 0.14155370290172942, 0.18589730058237353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07947234652879576, 0.063487911121202, 0.053486147086240665, 0.04211021218420141, 0.04010364343865025, 0.036053281039178375, 0.03165347396442231, 0.039682253894830155, 0.04984445245945168, 0.0204369351763376, 0.02282367536971719, 0.03483207888923756, 0.029027391144603842, 0.03391489161881278, 0.059004591797804595, 0.041859029731667, 0.04637504510274082, 0.028728547734535148, 0.9579263939174714, 0.9799943081254204, 0.8927791728922907, 0.8907027813974986, 0.931507589416709, 0.9191171942540496, 0.9859951404914502, 0.9919198040177085, 0.9351089173267645, 0.10529820211212082, 0.07685069779373066, 0.05245694230455156, 0.07186856613288584, 0.10538237042876186, 0.0550376367993467, 0.07127188308391474, 0.05120911714042453, 0.06358441145493976, 0.12237802191712222, 0.1424605343854255, 0.10461250674041112, 0.11583184203862407, 0.08698407635857242, 0.10528720051893048, 0.1159860559130631, 0.1370657054416895, 0.1127353270829774, 9.999999999998899e-05, 0.026042495966495327, 9.999999999998899e-05, 0.006803201899383549, 0.006077159555994194, 9.999999999998899e-05, 0.001432876185412213, 0.004694429450041171, 0.027490872275862444, 9.999999999998899e-05, 0.005497024060070577, 0.00017335957061515028, 9.999999999998899e-05, 0.0005865900677254343, 0.00020544996101967694, 9.999999999998899e-05, 0.00908262411904015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02975169962187918, 0.020400936774898404, 0.045369693407703915, 0.03144090726598281, 0.039437405867580266, 0.02383191725109135, 0.055415996602974915, 0.04315170379535993, 0.04290803078728456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009692667899305563, 9.999999999998899e-05, 0.2012799545683439, 0.18083184520878826, 0.20668960612633236, 0.21985776738836638, 0.18160207918321358, 0.1838309234773995, 0.1970722495987669, 0.17310547264818377, 0.22747658643817226, 0.0351141171679612, 0.029081225575254388, 0.032569387616774526, 0.04644738687901406, 0.04128402386319174, 0.03338035642257853, 0.03716673264406001, 0.04143186511939401, 0.03789907410858773, 0.16116504289550881, 0.12494675285103418, 0.14905382376176313, 0.15438160963211156, 0.1513645147759506, 0.1285199731109169, 0.11769962310440973, 0.13717008348462878, 0.12710746815511065, 0.15652629899600468, 0.15083628008381234, 0.1630998885480447, 0.1690753574535383, 0.21588335731719221, 0.16945884212418927, 0.1736073666709793, 0.1813379317444035, 0.1597729967244551, 0.09104718808627388, 0.11340782556867457, 0.09384098173255317, 0.10264112784322754, 0.12148628336192036, 0.1000258651980992, 0.10598551254565192, 0.10593721461068384, 0.10179520370312489, 0.15246069473569734, 0.1487985580518114, 0.19114715568973428, 0.14170727295874674, 0.1377585072448908, 0.14252173225658693, 0.1789053741955966, 0.13988549182467724, 0.14394175351902527, 0.12469210528465247, 0.1231963261911807, 0.13383247125867714, 0.08004271997999113, 0.1404116755008854, 0.14105148978252802, 0.14668479431210513, 0.13843773494485834, 0.16052172760779826, 0.1659617057233731, 0.20126317909452418, 0.14400117673243096, 0.1642737790374762, 0.16101494820416506, 0.1796311795991925, 0.15160630054125068, 0.20456373695713226, 0.14620786961552146, 0.12789354011322707, 0.1350408792787957, 0.17144674021163897, 0.18313986679474614, 0.2649266341168174, 0.14416004968722862, 0.1574533587550453, 0.1506248918317955, 0.11629978213171255, 0.17897055468678424, 0.17961406682444225, 0.18269740024314718, 0.17246391106912562, 0.17343805830905656, 0.18691469227478563, 0.18457118091254632, 0.18551558467730667, 0.17911810411232587, 0.048478292345285445, 0.044274755341648264, 0.059238349933184, 0.04529449786509432, 0.04608724737203007, 0.046378537568111056, 0.07055255209066269, 0.04391956893152671, 0.06908058629217562]}, "mutation_prompt": null}
{"id": "7a67f6d5-c91a-4681-a0e0-5ff01b83ebe8", "solution": "import numpy as np\nimport random\n\nclass NADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.0\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x\n\n    def update_selected_solution(self, x):\n        x_new = self.crossover(x, self.levy_flight(x))\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "NADMDF", "description": "Novel Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control using a novel strategy to refine the selected solution by introducing a probability of 1 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 73, "fitness": 0.08935621080226958, "feedback": "The algorithm NADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.16332234751288455, 0.17092262870775354, 0.15303776139926362, 0.1778068845382319, 0.1578195617754936, 0.1584557383717573, 0.18079929594341027, 0.15750439552103035, 0.16087176304798645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042559103224429795, 0.04597759165808979, 0.04436925387747992, 0.03996060371463139, 0.04009676092924441, 0.04750961498063555, 0.04374520485640676, 0.04110878775527893, 0.045771294377412564, 0.026404252799086536, 0.03471028672177012, 0.03745129871370645, 0.0606294676358915, 0.026788848862154935, 0.021218882609662093, 0.02448457892353706, 0.039925888505773055, 0.027726793982779774, 0.1421487921685961, 0.2540338501298084, 0.20784433378213596, 0.174025019682156, 0.16486306793359962, 0.12856636713418323, 0.14887883552747427, 0.12967235088427476, 0.1527008050926646, 0.08792100546487813, 0.07643392563729101, 0.08013422361467115, 0.11623674597258649, 0.06561098700812329, 0.05497936594044772, 0.07676477384234281, 0.0815219356361202, 0.05536049824339839, 0.12296471527162811, 0.10465852011186527, 0.11640071778234307, 0.09995140227813026, 0.12042861145157135, 0.09370123814076303, 0.08245459663582766, 0.10931785621963241, 0.11984218877789932, 9.999999999998899e-05, 0.000991512625082236, 9.999999999998899e-05, 0.009856081529254657, 0.04868593494143514, 0.0021551165533615357, 9.999999999998899e-05, 9.999999999998899e-05, 0.025910378111586363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02268573732311796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039944932405838296, 0.0619360610210008, 0.04087823009398506, 0.039414377655084376, 0.09675387823033965, 0.03937319837827602, 0.031343185113349326, 0.08091840340427592, 0.04370742634786873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008094101646473839, 9.999999999998899e-05, 0.0002969694171515158, 0.005521425325047513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20277439650745477, 0.1895982602046712, 0.20011057712161984, 0.21885092099975678, 0.19834973937327416, 0.2152809639398281, 0.186197459573066, 0.1794651581660306, 0.17934569347610962, 0.026073469878085453, 0.0391835097694595, 0.046853601220718355, 0.0424444784497624, 0.04060967531805382, 0.039331457201763675, 0.04040731995689262, 0.04349949082068194, 0.041140340392670116, 0.11426893423367368, 0.12940399355508037, 0.12255821525994193, 0.13971613512024084, 0.1234892375047133, 0.1361707903663384, 0.15813401727111343, 0.1282761232673323, 0.13236995476883318, 0.14879219905455976, 0.1604071287405463, 0.16374163844430745, 0.15821163473114708, 0.1632967254589135, 0.16132797067606208, 0.16116710222452402, 0.17694377514258153, 0.16211579264734843, 0.11080830855606072, 0.10760515106448276, 0.11083109966881877, 0.10899190022220118, 0.13342987625872904, 0.11093215516199273, 0.14190182373825266, 0.10690839960689191, 0.10240175912690552, 0.13994083898210996, 0.1474834032413027, 0.14165593093748174, 0.16175811836802334, 0.179976312326536, 0.16380585244010093, 0.14538602248933474, 0.13982929559179613, 0.15420793319167592, 0.13362510813822426, 0.1405841583433095, 0.14405943361001305, 0.1325637304200078, 0.14717150443537885, 0.14076969797044603, 0.10077469459062449, 0.14657621465520754, 0.1605084278214981, 0.13969217796306332, 0.15522540044181465, 0.22083291224807178, 0.16318913744365815, 0.16501876941420446, 0.16616030782038738, 0.19445687429953895, 0.16593083521504326, 0.1415920884460522, 0.1244045686769123, 0.16445731584387724, 0.16012942180476963, 0.12372339332559967, 0.15400870750433293, 0.172683285739898, 0.18089653229752023, 0.1259607954690095, 0.13365241282695584, 0.17341374127652032, 0.17823465362091906, 0.17583609261366473, 0.1672014606002158, 0.19524580492166055, 0.20369305577082664, 0.1767519188060227, 0.16685261842180876, 0.18067889451092156, 0.0553766568002666, 0.054199865339654596, 0.04190281084427139, 0.05171773748422459, 0.054061756452092546, 0.05089812972383201, 0.050642171514955536, 0.04635324152545095, 0.06010838305492505]}, "mutation_prompt": null}
{"id": "a42c15e4-c875-4c29-a641-e54220fdb45d", "solution": "import numpy as np\nimport random\n\nclass ADMDF_refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n            if random.random() < 0.5:\n                x_new = self.crossover(x_new, self.x_best)\n            else:\n                x_new = self.crossover(x_new, self.levy_flight(self.x_best))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Novel Strategy to Refine the Selection of the Best Solution using Probability 2", "configspace": "", "generation": 74, "fitness": 0.1214737261645323, "feedback": "The algorithm ADMDF_refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.20510326905225285, 0.1720889004101831, 0.17662969585290644, 0.1714566775598776, 0.14508983766684502, 0.17361580412017485, 0.2297471902773991, 0.15762001198210707, 0.189825041546827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041349954356463936, 0.03472539106380268, 0.04096863401250428, 0.04173621271189021, 0.043646130998685084, 0.034868371449097824, 0.042308422489569564, 0.04381890804172506, 0.04137484276335812, 0.028861720444745664, 0.034160195510359315, 0.030405445939358455, 0.03389728505178924, 0.029253316839163768, 0.03211585463290301, 0.03258599635926207, 0.030032595960882258, 0.03762744870703427, 0.7819913893949957, 0.9887321995106604, 0.864476501759926, 0.8895997030313009, 0.8981168977165429, 0.9969515417506081, 0.9240921049853473, 0.9539626830405552, 0.8109751194226666, 0.0639115753163958, 0.08191093393803772, 0.08785813346984306, 0.07677505224756387, 0.07188081849986339, 0.06401416862222309, 0.05490458026783995, 0.06184690609633636, 0.07200574813260407, 0.13320789239588282, 0.13405596159329614, 0.0991202963484662, 0.1097307607628294, 0.0869557363843545, 0.12502335504948392, 0.1366449063902737, 0.12334712357110511, 0.11608518828496395, 9.999999999998899e-05, 0.010847574360466017, 9.999999999998899e-05, 9.999999999998899e-05, 0.07294799280186204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010741845547412643, 0.0036798492642541314, 0.005856904119624584, 9.999999999998899e-05, 9.999999999998899e-05, 0.008517469928275734, 0.02144718983831284, 0.00015242362738321358, 0.0011105204534658242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0625971710267531, 0.031405934593436324, 0.04784261376674259, 0.013035470059474918, 0.07722608164355083, 0.028354588370752554, 0.021166095594624124, 0.06755468010549526, 0.030638990227111362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17507616552097205, 0.19479329094797826, 0.17978381965836432, 0.17736189587035112, 0.1884411600611111, 0.19696322987935933, 0.18305696995902032, 0.18994871517138034, 0.19248008812102513, 0.03891967867352286, 0.04610767814965544, 0.03074102029080461, 0.04020318551097679, 0.04284553631316268, 0.047450453622058686, 0.04020443423932285, 0.04549405921241434, 0.03463192239066937, 0.1549683802405698, 0.13124108788695998, 0.1211017432000201, 0.15429292882628975, 0.1496747986176944, 0.1382906372946867, 0.13787514456834538, 0.13683327769237608, 0.17648476078567343, 0.1670533219176592, 0.17429764199193265, 0.16123029479685647, 0.14765290315264412, 0.15327592060964834, 0.1628280089376407, 0.17515228722433462, 0.17805436212447256, 0.15794883645683166, 0.10382104528451053, 0.09843467275370332, 0.10431275975421561, 0.09319806691475752, 0.1336261488980388, 0.10056829594408667, 0.12043299217934256, 0.10117247303862387, 0.10956539169569501, 0.1686596105388336, 0.15846572209222465, 0.16093120118772164, 0.144636946200698, 0.1459070467052943, 0.16545380433085122, 0.15168182657350482, 0.14362380907233452, 0.16359011395251433, 0.1390531798312682, 0.14385841966942337, 0.14541866925813207, 0.14972209742231368, 0.14735867003237269, 0.14241046989870376, 0.14733662562564043, 0.15019963033944328, 0.16050917576525392, 0.20265390144905016, 0.15842104493306453, 0.1480698237427358, 0.21473602961260863, 0.21693152133769977, 0.16035193206472975, 0.14617228744937583, 0.15446426864006224, 0.16119200042801818, 0.16128598565426233, 0.1634252778361449, 0.12203493361164164, 0.13843830916083955, 0.13408635358412935, 0.11674469724699377, 0.22118901729717766, 0.19382523705395893, 0.16072053232033434, 0.18497189280471404, 0.18179140081122214, 0.18038104222898144, 0.18133692378079547, 0.20470981403095034, 0.1806277987176078, 0.17721513647235843, 0.18983631342024776, 0.18721376465395412, 0.045522787037516665, 0.04027422804124492, 0.05473602633811947, 0.06877966774265731, 0.05966075734752463, 0.054974269725843405, 0.05089353359604887, 0.04777959830079759, 0.053454409075143094]}, "mutation_prompt": null}
{"id": "e583ca66-6d97-4e20-b6e6-854f73ac7f3e", "solution": "import numpy as np\nimport random\n\nclass ADMDF_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_Refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with a novel strategy to refine the selected solution by changing its individual lines with a probability of 1.", "configspace": "", "generation": 75, "fitness": 0.09173487758702192, "feedback": "The algorithm ADMDF_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.17794427844815075, 0.16498676854757255, 0.16089442794027087, 0.1715319448241971, 0.16989609441254505, 0.17828155367933918, 0.17610116680325916, 0.17282536045371033, 0.15991025648096036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0400837667959264, 0.059360331765140883, 0.04136172860316023, 0.04439295878408689, 0.038607936363274864, 0.03676044541444701, 0.06302763271009082, 0.03655956180745723, 0.05626979171999569, 0.023954207152317886, 0.03192094902328024, 0.038351552344001005, 0.02954703864085717, 0.033215952473112154, 0.029805895359709567, 0.04104297436355264, 0.03419275744912298, 0.03345337493211753, 0.24709299178017463, 0.12562964260019993, 0.10038907751866222, 0.09905867105780963, 0.15240773591975998, 0.10005753122683414, 0.09394502619616707, 0.14076173329631858, 0.12065242114396513, 0.09489215378028637, 0.06940746685907884, 0.08255992629903397, 0.07507427819432344, 0.05398835600779606, 0.04925676003908919, 0.06322507204261552, 0.09561342155897978, 0.08681016913884887, 0.12792794735423174, 0.10972790492804507, 0.14711932882938183, 0.12664738527036445, 0.09128473800618431, 0.15194710061121697, 0.10703148082921321, 0.11146595327794839, 0.11185640474868741, 9.999999999998899e-05, 9.999999999998899e-05, 0.005716754482081865, 0.00011168386955029419, 0.043847762305831206, 9.999999999998899e-05, 0.0005046487297051261, 0.03393747808706671, 9.999999999998899e-05, 9.999999999998899e-05, 0.00448678591073326, 9.999999999998899e-05, 9.999999999998899e-05, 0.009101788749407369, 0.01907560466136815, 0.004866109463700585, 9.999999999998899e-05, 0.0010131945158514677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03325527930274674, 0.049351444365297925, 0.05541334022605027, 0.03882374052890103, 0.081870314142513, 0.037489181452318054, 0.04681642068232472, 0.05655109192782293, 0.02791510717747603, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005079495041739768, 9.999999999998899e-05, 0.0050963504298368045, 0.0018733477423229505, 0.005244951256380248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22571780122610363, 0.1894612794797621, 0.20889292347125643, 0.21591902408189922, 0.18233355494453818, 0.18610801614658856, 0.20638219799112034, 0.2016533518513005, 0.21185026011712893, 0.06031357029069295, 0.04615820924259095, 0.03880966191757884, 0.03682534137983162, 0.043288019043635884, 0.034810427002707756, 0.04017491889256852, 0.04858267714424269, 0.050223475321389155, 0.13938670108993978, 0.12643661647088034, 0.18938393896515393, 0.1709926437606868, 0.13770166018509045, 0.13629858086883373, 0.13784651138703918, 0.15052316335016347, 0.1425685541805588, 0.17343016872122186, 0.1736999105465742, 0.16127244897309578, 0.15604802864234024, 0.16120815952029588, 0.17831831070651127, 0.1644683314012111, 0.17366468935827428, 0.1648178225643493, 0.11591050621843424, 0.11194189505250796, 0.11286362448243836, 0.10224755614088188, 0.11407495888467434, 0.11885503332104563, 0.12283904871830087, 0.11264031957719745, 0.12739178951534413, 0.1636681307283363, 0.16155830025263496, 0.18944269429470229, 0.1569020497198298, 0.144560012119746, 0.15333882542468857, 0.14468029231854163, 0.17153878202459416, 0.15350948839610956, 0.1295911012447648, 0.14242257463814545, 0.15046685836425533, 0.14553874138674205, 0.14317898822421282, 0.14557893952039247, 0.16010625552183066, 0.15558680047384676, 0.1605084278214981, 0.1671070849631402, 0.17726105337076092, 0.17088669459034822, 0.1502272336338445, 0.16282485568627603, 0.13887679644431572, 0.2310716818519044, 0.18699896042074882, 0.167231863297983, 0.16130069380257306, 0.15094021461907325, 0.21808005560348387, 0.17534322983654005, 0.1441992104332538, 0.17221899433607546, 0.12337650155354318, 0.15278010150958565, 0.16611364839631348, 0.18385461712329398, 0.19722617980802293, 0.18496175373416968, 0.17549992733680342, 0.17513378496691745, 0.2031941595742638, 0.17689852464010858, 0.19564737858555126, 0.20432766769770638, 0.059590388124714955, 0.05183443438054691, 0.052212769950063964, 0.04978091926699124, 0.05939783241193308, 0.052719938321432736, 0.04677542240317456, 0.04952832521132422, 0.051244455429201086]}, "mutation_prompt": null}
{"id": "7d9ce89a-918f-473a-9761-a07204aea687", "solution": "import numpy as np\nimport random\n\nclass ADMDF_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.0\n        self.mutation_probability = 0.0\n        self.levy_flight_probability = 0.0\n        self.self_adaptive_parameter_control_probability = 0.0\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.x_selected = np.random.uniform(-5.0, 5.0, dim)\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def crossover(self, x1, x2):\n        return (x1 + x2) / 2\n\n    def mutation(self, x):\n        return self.levy_flight(x)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            self.x_selected = self.update_selected_solution(self.x_best)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_Refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to change the individual lines of the selected solution with probability 1.", "configspace": "", "generation": 76, "fitness": 0.0910777071754344, "feedback": "The algorithm ADMDF_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.17285310060696013, 0.1515786168619443, 0.14806549067719665, 0.2036780129475736, 0.1687757876267275, 0.16123218078792778, 0.17782613460354135, 0.16127572363927267, 0.15616257040622172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03850412167702777, 0.04118537016454871, 0.03625755334668901, 0.044129434255625544, 0.033972447471113054, 0.034126434746992174, 0.04958325712352307, 0.03836553730846737, 0.04343093006050203, 0.02061535891622357, 0.03624554655830747, 0.02884539893122251, 0.03243011356666503, 0.03772324455539622, 0.019047837860600714, 0.020711644250166472, 0.027130899767978778, 0.03591618411570763, 0.3158773849351927, 0.20800026071802413, 0.23423369369802893, 0.16883798979967068, 0.19045166389484114, 0.23659905889313715, 0.24211348070704897, 0.1859498428706189, 0.260026759166889, 0.09212046675105501, 0.0657059348157254, 0.06306764636064288, 0.07353554181955024, 0.07196413875546803, 0.0762128479194204, 0.06438904698025194, 0.06579739929638251, 0.039163095015934735, 0.10096348754874562, 0.19326062674858813, 0.09640341120815044, 0.11142382062597445, 0.1198706448214143, 0.09015468305259167, 0.12572094271199785, 0.11584989703231496, 0.11317427646826894, 0.02834928752545407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01661892427885847, 0.0001916716152089437, 0.016973815469615516, 9.999999999998899e-05, 0.00314209013483302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011437821819229255, 0.03531452418022185, 9.999999999998899e-05, 0.0030558179381452444, 0.007056893296241706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048285588192810924, 0.029646838099738337, 0.03493252204522146, 0.0474971848193152, 0.09686849210230752, 0.027355441662772484, 0.04343369862151214, 0.04326444858235334, 0.05021467167891225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032671760335335476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17744475173084506, 0.19211566336569674, 0.17079544461620733, 0.17433299981311212, 0.1891523008103302, 0.1905019788745188, 0.17662033443213587, 0.1730937618659698, 0.18873318910182646, 0.03165105260416079, 0.04069099022388922, 0.035223744199877394, 0.04267965650712413, 0.03990478634675487, 0.039189760876433, 0.037933887867122595, 0.036157314445408484, 0.05568337147303992, 0.1615108254937484, 0.15156915213108058, 0.12466220877841239, 0.13996681366944796, 0.13487165189503736, 0.1636520878382145, 0.1456976996250383, 0.14680174952040015, 0.12758056433563925, 0.14367338552729436, 0.16482134076398014, 0.16144742690395908, 0.1565887146930388, 0.15820516949381147, 0.17408590224329967, 0.14899317143434399, 0.17366805239844585, 0.15925926423876424, 0.10667336185829668, 0.11194680482565578, 0.11237899197575885, 0.1141420327619409, 0.09418053182026109, 0.1118179319053888, 0.09588670675129929, 0.10993456310541083, 0.11600294085695417, 0.1755401481836345, 0.14852843335594657, 0.16489954437252585, 0.154948169345693, 0.14341241421156026, 0.1432623005633331, 0.1812359921049248, 0.14419351301350014, 0.1457258622689631, 0.13369542860612837, 0.14008828024577924, 0.11001550074191668, 0.1261850372506409, 0.14135891008888446, 0.13864587480836055, 0.13188169843482778, 0.15675274942560136, 0.16055503102491853, 0.15248254020220608, 0.16057011194657367, 0.16097952422125472, 0.1630824751258919, 0.1359929791199449, 0.14290398171977647, 0.17710449810943774, 0.16389851002780964, 0.17451804752391942, 0.16053653625324937, 0.15610966459217346, 0.18707037856625952, 0.12189366201876584, 0.107015065671073, 0.1965707007285722, 0.16081652659028134, 0.14500861794590258, 0.1555462121301594, 0.17367801056935095, 0.1803206760357805, 0.1822572655168535, 0.19247646312777034, 0.1863887206184085, 0.18400389685578944, 0.1807028969160871, 0.18748068165957055, 0.1848740080385678, 0.04344968459707621, 0.06080656098439363, 0.040722735790509446, 0.05410390065795567, 0.05847846798801237, 0.05036607800909221, 0.04433498379508982, 0.059910652824066934, 0.051636225823352255]}, "mutation_prompt": null}
{"id": "e4b34db4-d9dc-44ed-9366-045372abd19d", "solution": "import numpy as np\nimport random\n\nclass ADMDF_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.0\n        self.mutation_probability = 0.0\n        self.levy_flight_probability = 0.0\n        self.self_adaptive_parameter_control_probability = 0.0\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def crossover(self, x1, x2):\n        return (x1 + x2) / 2\n\n    def mutation(self, x):\n        return self.levy_flight(x)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_Refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Probability 1 to Refine its Strategy.", "configspace": "", "generation": 77, "fitness": 0.09070228326600428, "feedback": "The algorithm ADMDF_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.1878473869698024, 0.1722372669515484, 0.17414866407053764, 0.19473048169305185, 0.1660613559476104, 0.15925149668320715, 0.18144727490836066, 0.1326942208905113, 0.1682758208772117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04294138512829904, 0.0624679923374597, 0.042010776833704244, 0.04185025125641928, 0.03488613679902952, 0.04750961498063555, 0.04329216403872305, 0.036335768495320164, 0.042348091495550744, 0.02742016064536945, 0.03471028672177012, 0.03685375392663903, 0.04782202954996828, 0.027027797519320274, 0.021792036495135836, 0.02448457892353706, 0.0407610768795883, 0.02582045289976287, 0.2220417029218099, 0.1793630678120569, 0.24127106070124416, 0.31456770913231913, 0.19407016992815485, 0.20109136673238115, 0.17557688037897567, 0.21202214465101354, 0.19216495000939027, 0.08792100546487813, 0.0932056131088389, 0.0711853486466576, 0.08700644893115317, 0.06209346459816989, 0.052551552517967504, 0.07808911271047925, 0.07226045046510121, 0.0674883481168359, 0.10400205199146406, 0.08774686804903598, 0.14084060623133465, 0.0981886812420073, 0.0980501071649027, 0.09685757718979426, 0.10279943375217604, 0.10956051001572864, 0.10580910312979519, 9.999999999998899e-05, 0.000437956402132067, 9.999999999998899e-05, 0.00984547997366736, 0.05040696396376876, 0.0021551165533615357, 9.999999999998899e-05, 9.999999999998899e-05, 0.025910378111586363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02268573732311796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027300105329153168, 0.04443977278322275, 0.05061554291285808, 0.03174548076843653, 0.09675387823033965, 0.040083046421188206, 0.03741906150162089, 0.08091840340427592, 0.03644778982928909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008094101646473839, 9.999999999998899e-05, 9.999999999998899e-05, 0.005521425325047513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2031618677198237, 0.18640186550025095, 0.18304041941303617, 0.21884484962407658, 0.19632961209590494, 0.2158190861881052, 0.18562888513492548, 0.1795507777608487, 0.17910157721727904, 0.036985538231804616, 0.03788233181252876, 0.04681390912000638, 0.04076847926980132, 0.04060967531805382, 0.040593668958414986, 0.03969371832172586, 0.03524781872589189, 0.05428127991674192, 0.11393158742600373, 0.11432477122680063, 0.14344141320613313, 0.13971935820415315, 0.13499964223100103, 0.1384491485190067, 0.15053369182236165, 0.11484607764072097, 0.1323030111601574, 0.15724497207777366, 0.1586973822936114, 0.17652584785719572, 0.1563403900345426, 0.18297860414328337, 0.16130654567379643, 0.16178207996161909, 0.1769382489648842, 0.15587212297293263, 0.11277360292952887, 0.10332298575241117, 0.09821473195531794, 0.10278625927829221, 0.12938189756880925, 0.11126948487011634, 0.11084611798709809, 0.10691783286711054, 0.09872803663735463, 0.13976240737616175, 0.1487829101213134, 0.14191290777417798, 0.1581845093514359, 0.1535533785307469, 0.16400973960330045, 0.14917540228295478, 0.13994106353078184, 0.1536504049427001, 0.14067034118424326, 0.12908663492932537, 0.13130065477578245, 0.13441674817944183, 0.14717150443537885, 0.13795581810500956, 0.1523291877129821, 0.1423383254384073, 0.1605084278214981, 0.1448975982333679, 0.16177574846595855, 0.1827279232824226, 0.16353567464420926, 0.17081256890568053, 0.14838446964197138, 0.1690380298478763, 0.16602592234317703, 0.1414921352845575, 0.17544779927752663, 0.14854768531471163, 0.15921989232069156, 0.1274878116949827, 0.15143044987407173, 0.172720608755218, 0.11878171030098639, 0.1273112390493829, 0.126418617745924, 0.1642719115114809, 0.17777716514080055, 0.1758451459302096, 0.17950217652475609, 0.19399759537310168, 0.18491593193637268, 0.1792583778577891, 0.17707093854497125, 0.19860802519427023, 0.05539211721909765, 0.04188175674166761, 0.042905714007421936, 0.05904405895654241, 0.05406171933197579, 0.0498553456603098, 0.05073867641895724, 0.06012579342768132, 0.06016937901864372]}, "mutation_prompt": null}
{"id": "f28ab0bf-6ae9-45b3-bffc-7d929e2ba010", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 78, "fitness": 0.12172089483061908, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.18604532613747082, 0.16965722349912427, 0.16275893529947838, 0.17360885061707454, 0.16547063161509323, 0.19160065675687465, 0.1728562131207083, 0.15127859556064327, 0.20700131399614108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041606248271998214, 0.07712312012320366, 0.039756356974005036, 0.06324954302814789, 0.03166259675056993, 0.03836699568518687, 0.044418185498324436, 0.046736619088986076, 0.061537514611583743, 0.03271813891956832, 0.023279534098153087, 0.02606732315805982, 0.03178294765500944, 0.026600307436105308, 0.02564771379089037, 0.030401489071386845, 0.03160398582059443, 0.029440586566940485, 0.9998047723085209, 0.9545474539415704, 0.9805326499355292, 0.9753771314041891, 0.9975208652786112, 0.7993312712729295, 0.9965237092895506, 0.8524615545030911, 0.9620950777128111, 0.09042416633424033, 0.0773831688070804, 0.0881415623623365, 0.06279589406470654, 0.048590509430556095, 0.06687044193726865, 0.0942323963219418, 0.058097474189809484, 0.08416493014142257, 0.11658867227615355, 0.10607571918782455, 0.10647992247048865, 0.10350943419780756, 0.11147223746839352, 0.12624677931134043, 0.10048890314394576, 0.11099662551726486, 0.12398668109139777, 0.010941429879519848, 9.999999999998899e-05, 0.017898627322583294, 9.999999999998899e-05, 9.999999999998899e-05, 0.013417891364230439, 9.999999999998899e-05, 0.005248760974754241, 9.999999999998899e-05, 0.0002919941567645079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03852491974824901, 0.03589103812219441, 0.029233653259895243, 0.035983776942473344, 0.030446211311641158, 0.006479402301798665, 0.061281591479293795, 0.053378773004303715, 0.0212667631225133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19423714264779757, 0.16989272392107446, 0.1789916334403011, 0.18261933334833347, 0.17000406123052092, 0.2083850790174956, 0.18440918008565788, 0.19134975107547436, 0.17460411368455264, 0.0364440908966881, 0.05247381407639751, 0.04362791108655961, 0.04880378943457653, 0.03820398661430646, 0.04270613512686927, 0.041794826496779014, 0.04233564162462622, 0.05254687100698607, 0.13760638736684927, 0.12012390652556915, 0.1218570276583727, 0.1374736390293254, 0.14964792966436802, 0.12799221827534168, 0.13517137408368685, 0.13771121487070614, 0.13549517129576127, 0.1738394855108094, 0.17109932381278925, 0.16241866099406865, 0.15531818321281843, 0.16164817151104216, 0.16156504388712534, 0.19917135012240128, 0.17366014200843471, 0.20425088059682606, 0.10039341201394947, 0.12383662343378588, 0.09439950886878723, 0.10723742570395989, 0.11765249728186877, 0.11310602027864458, 0.10081626280991274, 0.11612208963282067, 0.10960635297509724, 0.16380676040617814, 0.13658299672888463, 0.15461201045472894, 0.14307517327534203, 0.16666025907390414, 0.1643601959755544, 0.16959189163618793, 0.18607634565194042, 0.1506446189309274, 0.12966287648686903, 0.14902532672855617, 0.14173905373447448, 0.14895086721686857, 0.14661230835054684, 0.12866626956936722, 0.1451588848351586, 0.14174274534914422, 0.1605247860131993, 0.19753966618291363, 0.15554050948627096, 0.1544315498065385, 0.21420665183222043, 0.16053467203760574, 0.1508813990730712, 0.1429159435453966, 0.1401525086184634, 0.16797237770662155, 0.14322742083275553, 0.13705981794071953, 0.1121282775898278, 0.1500194526047799, 0.2031193916623557, 0.16062444563509526, 0.14713960636693302, 0.12892947856052306, 0.15554060066895892, 0.19969040100221602, 0.181486544251392, 0.18761159143945472, 0.18003451782906854, 0.16833835657586083, 0.17745528042383374, 0.18154246815867559, 0.17816716899518703, 0.1786509439263293, 0.05072245189893221, 0.054329158426738244, 0.0455947484968221, 0.050097710106706606, 0.05379351351363171, 0.0527464320393779, 0.04912220277866797, 0.05448398867228332, 0.05353648602722516]}, "mutation_prompt": null}
{"id": "d9698aa4-f5c0-42b0-86e1-b9df5dc1f5a1", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.0\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.0\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.x_selected = np.random.uniform(-5.0, 5.0, dim)\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self):\n        x_new = self.crossover(self.x_selected, self.levy_flight(self.x_selected))\n        self.x_selected = x_new\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution()\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control, modified to handle BBOB test suite and refined with a novel strategy to change the individual lines of the selected solution with probability 1 using crossover with levy flight.", "configspace": "", "generation": 79, "fitness": 0.08766317745822988, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.1815277247388538, 0.1672758974786953, 0.1600221464459417, 0.1542180924266957, 0.15748227148523186, 0.1893980328308319, 0.1717949332339156, 0.16885413558370488, 0.21243308307112907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06335718924522393, 0.05321146772578267, 0.049238963740610986, 0.04295688374603235, 0.03701812294925144, 0.05201004096506745, 0.04986046135226918, 0.04208292673684533, 0.037394527816717704, 0.023817010422106377, 0.03631978980949391, 0.03123599114857245, 0.032972146395296886, 0.05056493144339258, 0.033792362068568615, 0.032627292743721226, 0.0307151795675199, 0.03048746626910326, 0.09915756163208356, 0.07510373753861843, 0.07301020766961774, 0.08277532785470998, 0.07613975274565254, 0.0840022506302257, 0.08340109798306772, 0.07617460709983292, 0.07770205377618422, 0.0660181498313619, 0.06776555481206492, 0.07988629596156516, 0.06261605247755742, 0.09100973108810428, 0.08763317225878675, 0.08804773358420537, 0.05895367870507584, 0.0708865053039659, 0.11528745353478242, 0.13970741077838122, 0.11474673151656356, 0.12436921120554745, 0.1128931587749783, 0.0945699307420158, 0.12114010605010395, 0.12478162582702135, 0.13375263137949311, 0.019337651655259136, 0.01776582683691763, 9.999999999998899e-05, 9.999999999998899e-05, 0.002005174934223808, 0.014825357642390236, 9.999999999998899e-05, 0.0010701056687546506, 0.0006938833460464755, 9.999999999998899e-05, 0.008165074535999128, 9.999999999998899e-05, 9.999999999998899e-05, 0.019446555786568398, 0.023106540318895363, 9.999999999998899e-05, 9.999999999998899e-05, 0.017046581148293827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036239207048222255, 0.04510379169993217, 0.03792231795431, 0.04987745211662864, 0.07830927772851026, 0.03765356408979592, 0.025758634988581774, 0.06689700261514919, 0.038485543261980615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013297674213835764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009292943635684114, 9.999999999998899e-05, 9.999999999998899e-05, 0.17291013095192798, 0.17615402101194155, 0.17524684775262445, 0.1985638841847126, 0.2202629892522645, 0.19358606157968739, 0.18150231396210426, 0.1833672186649593, 0.1866132115134138, 0.0326699905905824, 0.045022799347725906, 0.033206285333983954, 0.04152379971470199, 0.04014856894669061, 0.04010302136344801, 0.046264961390376835, 0.044110178329887506, 0.04698384347735285, 0.12892068219002573, 0.13312686023141074, 0.1537074274250635, 0.1536365876757122, 0.14056504450729823, 0.1358795508969981, 0.12349302206402712, 0.12551407100584622, 0.12419550066846041, 0.1589023977059829, 0.17443415484419478, 0.16146320771530787, 0.16811405485828634, 0.18136263994952273, 0.1629658190810167, 0.1700715379956519, 0.17610364079618646, 0.1984511476453339, 0.10119421645676407, 0.10649701758025476, 0.10441082868323992, 0.11628734341016256, 0.12949844429116986, 0.10125266885381501, 0.10729216269603625, 0.12391592005577046, 0.1156246669762595, 0.16978794931645558, 0.15605587052632564, 0.1439938440252967, 0.15596561918147567, 0.1508906175089071, 0.169245308959739, 0.14616641652940376, 0.15632208937107084, 0.1603288995631139, 0.14543468819806493, 0.1124193972101335, 0.1347569981181972, 0.13636617075824464, 0.1571775447964323, 0.14040171734082418, 0.1365634491647032, 0.14387210435979692, 0.1605411442049004, 0.13687795011784198, 0.14922629100412832, 0.18373548748802182, 0.18123474512317983, 0.18369517523174783, 0.21731916979027865, 0.22647895804629614, 0.14861734851455854, 0.18691091436277318, 0.15131993913737352, 0.16465631322334662, 0.18987397843540155, 0.14569997516444688, 0.11487323988691134, 0.1720880376014402, 0.13299472915774768, 0.16664237637780266, 0.1623418292752845, 0.16680633582630067, 0.1794450771384538, 0.1690943567588411, 0.1832490497033321, 0.1760885584772619, 0.18958287929271678, 0.17779667878699057, 0.17835632692188974, 0.18242860382252124, 0.05215493355719503, 0.05119487448212934, 0.05830484993959528, 0.04874162812837135, 0.0547993428468222, 0.06694840666940605, 0.04288849073323875, 0.045864275213085004, 0.056771575343980474]}, "mutation_prompt": null}
{"id": "0f24adf9-7274-403b-8fb5-3bdd55ba0e25", "solution": "import numpy as np\nimport random\n\nclass ADMDF_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        x_new = self.crossover(x, x_new)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_Refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with a Novel Strategy to Refine the Selected Solution using Crossover with Levy Flight", "configspace": "", "generation": 80, "fitness": 0.10626539973488149, "feedback": "The algorithm ADMDF_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.12.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.17056829307562915, 0.17752657867421784, 0.13595889160583086, 0.1471545627493429, 0.16020123674358233, 0.15933904668782106, 0.16272724795108007, 0.14018861951986805, 0.20270908671720334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0760117060400648, 0.054249712490756274, 0.039726241072802426, 0.04023116304834762, 0.0429050311143474, 0.05416357137378358, 0.041108611902404446, 0.05163994881757494, 0.04842449289819584, 0.04344054396629671, 0.0337048984117726, 0.0438563149674015, 0.02972843245432799, 0.03657526322782956, 0.022659774937847987, 0.04009019231170152, 0.021347908480492284, 0.020897915966823555, 0.3641825366187278, 0.254926908405811, 0.7244512378889276, 0.2386972738074864, 0.6667052810048039, 0.9930251962025699, 0.27488588908201317, 0.8763035681318021, 0.13888073804200507, 0.08469983710352369, 0.07311838224406497, 0.06972204910360214, 0.07046652212006943, 0.07617074150639669, 0.08398487534397758, 0.07092860529352696, 0.050221077106260226, 0.05041802230374304, 0.1242958824451067, 0.15983191336104408, 0.11741379959315634, 0.12586491616862894, 0.1167915904222111, 0.10628118193600744, 0.1269357818668182, 0.11838614410224946, 0.12444691508013273, 9.999999999998899e-05, 0.03096670188479478, 9.999999999998899e-05, 0.004475792068676876, 0.05702638087728906, 9.999999999998899e-05, 0.0019244598127104995, 9.999999999998899e-05, 0.004818146762756825, 9.999999999998899e-05, 0.001683931809985717, 9.999999999998899e-05, 9.999999999998899e-05, 0.03605165338691718, 0.020087801321751475, 9.999999999998899e-05, 0.006564729640205047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05661229205441998, 0.07953722928221629, 0.03291806326385138, 0.04410829456504539, 0.02364508274657673, 0.038480507560349375, 0.05953249663221938, 0.07830169691272293, 0.05319530391018712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002642397112953443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21773060579156323, 0.19731976026793452, 0.19807202504178778, 0.2125313625265871, 0.200010522732461, 0.18840860460091957, 0.1813097057971892, 0.19398810214623996, 0.1996468410586939, 0.03297639086600468, 0.04799882272853351, 0.0440458716381269, 0.04045205120682749, 0.03783273757140526, 0.06408902946103268, 0.04281340555757729, 0.041608939234100806, 0.0481938464328201, 0.15985998477948216, 0.12603423013872084, 0.17224662061690266, 0.15553156097875886, 0.15266645715864646, 0.13687044385036296, 0.14398577844975657, 0.15087571123250532, 0.1532539324148462, 0.16239227479570528, 0.16597871186708002, 0.16399239883340033, 0.1623039636156236, 0.1626246076561365, 0.17351270609677216, 0.17129786451615492, 0.1815560585685635, 0.15326197334232328, 0.11231671175666891, 0.13114541934157609, 0.13597154895265973, 0.10913066048060338, 0.12125301395350707, 0.10532311366215963, 0.10864884545980746, 0.14718030364334878, 0.12751275926672567, 0.14857336715442349, 0.1547031455275123, 0.16757585006536269, 0.1582428094866205, 0.15636962379982178, 0.14075899484766652, 0.15287876926019017, 0.16860920641767463, 0.16093576247827546, 0.12826543295429815, 0.15981967637136696, 0.13098959619152173, 0.15641122287456144, 0.13883210485143704, 0.1365852162159672, 0.1312724942799821, 0.14676487267205285, 0.16051832940619093, 0.15637202296953678, 0.16847905680807684, 0.17323876622271694, 0.16563379249285937, 0.17061787578185628, 0.15759447615623723, 0.20159926883234391, 0.1843746801801367, 0.16494014147426572, 0.18756634657518378, 0.14815388224165904, 0.17918560460345712, 0.12216435755388577, 0.13817054960420305, 0.14260432357612385, 0.1363307999714065, 0.1414805841758089, 0.1195282116781422, 0.19244332567316025, 0.18701807682385274, 0.17872505184382936, 0.18646672288541466, 0.17807399386994072, 0.1854687854598286, 0.17949829882495794, 0.1838128418997398, 0.19961478804607335, 0.04514276232307746, 0.04244055111946965, 0.05995602998079863, 0.04885686651511001, 0.0508360631490401, 0.0525061079701683, 0.06664326955573119, 0.05306258482946413, 0.05471761102566974]}, "mutation_prompt": null}
{"id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 81, "fitness": 0.12388981595697271, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "609a0ae5-4e20-41d3-9c71-679e3c93b7ea", "metadata": {"aucs": [0.1816014663176797, 0.20809540410956817, 0.2039081591149592, 0.17472020272643962, 0.20713340674044067, 0.15930521598804115, 0.1701656359349557, 0.16330095907749342, 0.15062180580985374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039269255323499785, 0.05369042885329467, 0.042011449165082704, 0.04370769874452329, 0.03152232822790979, 0.03482655423043712, 0.0443339268774926, 0.04209212943141227, 0.041973079139012826, 0.02488120829407181, 0.026724375486000262, 0.03501054416305327, 0.02907922677864405, 0.052517526609578424, 0.06256920497832197, 0.03085316384429493, 0.04080696661722982, 0.03791757720573241, 0.9998047723085209, 0.9872853607403684, 0.8729323363614951, 0.9087989729320145, 0.9352316401930383, 0.9656439936622955, 0.9255866377015687, 0.9998012339801572, 0.9804879687449514, 0.0936694790380328, 0.06725536413907773, 0.08791581800680814, 0.052283723539842675, 0.05861744278275638, 0.0877019164875088, 0.08732592475130219, 0.08427017413963134, 0.06814390441066787, 0.11155741858919888, 0.11123112819921221, 0.1147592996906085, 0.09948034507768955, 0.11652915398372965, 0.09904409151529703, 0.11547840425464184, 0.14457102012400014, 0.1323104969378608, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010136350602607869, 0.0126299534561789, 9.999999999998899e-05, 0.012054510291900411, 0.00029407297980577063, 9.999999999998899e-05, 0.002385190954482641, 9.999999999998899e-05, 0.03589954379073246, 9.999999999998899e-05, 0.024194186969065723, 0.01839071061535902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06161706845659787, 0.04304751935705187, 0.025321880901955085, 0.03913228720278128, 0.06382111034600746, 0.03169299455065899, 0.0634630155550332, 0.042167137664887, 0.04096270505767152, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012622711905520223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20726187797514573, 0.23270017757564065, 0.17331732424356583, 0.18903893850569553, 0.1885365657654815, 0.2138386925823853, 0.1807949757512295, 0.23142377603805142, 0.19772200427631959, 0.056687656249977736, 0.05247381407639751, 0.04200498156398336, 0.0381861369256532, 0.03950660054584587, 0.029974513129785163, 0.03964441039965039, 0.035038135892767386, 0.04718370329091082, 0.13921467974574975, 0.12335645198361522, 0.12860081455988204, 0.1424980085768588, 0.13486117674242504, 0.14984859053131439, 0.11863117778345389, 0.14225252990276827, 0.1160534175368313, 0.1543458689584244, 0.1590444771547973, 0.16631951841782533, 0.15520072390072437, 0.15877797625180212, 0.16813446452374248, 0.19188911241186102, 0.17366554015949054, 0.20281664924363574, 0.10399912018241997, 0.09524053800268562, 0.09987268409038408, 0.11148072124660302, 0.10473132304350696, 0.10552504315447098, 0.10078128308150458, 0.1517167597850012, 0.10749429537346711, 0.16810964086398794, 0.16069900344781873, 0.15405678215046303, 0.14843665566452036, 0.14948238608390052, 0.14388255669498973, 0.14525476950954674, 0.15922139274614633, 0.15453123022600868, 0.11188192916447093, 0.1448965439251324, 0.13795661506666768, 0.13813141766603354, 0.13799007847836187, 0.14627564893061207, 0.14265909132463583, 0.14307842431210593, 0.16051569105235408, 0.20079502820310424, 0.16495979819946804, 0.19901098650974003, 0.1646766234117526, 0.14639213059195189, 0.15429573500063576, 0.1513654516008781, 0.1527822529304831, 0.16862529478351407, 0.13965867703412638, 0.19718140404067042, 0.1766992526555523, 0.1507928954584229, 0.12978751825955914, 0.16106609089465818, 0.14109997016550424, 0.1837738633985716, 0.1523368733913001, 0.17915603050157403, 0.17932816969129928, 0.18401766577615797, 0.1909545379662413, 0.20064744929754508, 0.17646285898939584, 0.18403657716823163, 0.17186710904056657, 0.18245184878105214, 0.04335133792811319, 0.05401279153977123, 0.04906238777550809, 0.04677311193364053, 0.04896585222742156, 0.04825397877528015, 0.05112350085580597, 0.04992554406551952, 0.05107268668200127]}, "mutation_prompt": null}
{"id": "3d3aa8cb-f72c-41f2-9dbc-c9cad74a5848", "solution": "import numpy as np\nimport random\n\nclass ADMDF_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.0\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.0\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        return self.levy_flight(x)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        x_new = self.crossover(x, x_new)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF_Refined", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight, modified to follow the probability 1 to change the individual lines of the selected solution to refine its strategy.", "configspace": "", "generation": 82, "fitness": 0.11968750333610344, "feedback": "The algorithm ADMDF_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.16551819530245504, 0.14417905252730612, 0.1534375041379259, 0.18981159828392258, 0.17933987063198986, 0.13638610860500755, 0.1701045794933096, 0.16308364136536146, 0.16059934260345676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06479829149569938, 0.05995152616751587, 0.038635121314512744, 0.04309825916484955, 0.029269115287385072, 0.04926005337706152, 0.049254540276240766, 0.0446722421357596, 0.04164933991734632, 0.022159833294976283, 0.028600031213130928, 0.0286075291003155, 0.024215941747744774, 0.052277850332116405, 0.021191967810532564, 0.03511794644056243, 0.042864695331735314, 0.025718859809777173, 0.935333566735275, 0.998640947454288, 0.8410141822058188, 0.8016732600510603, 0.9569524916231771, 0.9617946734707643, 0.9871440639613911, 0.9075085362979353, 0.8375545697023781, 0.07715715430800596, 0.0758275231799238, 0.0952341125870102, 0.053762424569179124, 0.08127491600030301, 0.08984937323057018, 0.0843989771519209, 0.07102824311654365, 0.07831503761976255, 0.11790053380566101, 0.12320487130847757, 0.0999522157173296, 0.12382846367878142, 0.12778621722394778, 0.10803170781683635, 0.09209445202695665, 0.1660437194598935, 0.1302439202209844, 0.019408115996345843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017737862609949695, 9.999999999998899e-05, 0.0035120947001593406, 9.999999999998899e-05, 0.0250115992738541, 9.999999999998899e-05, 0.001683815642947395, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006355661679610103, 0.010648511796743865, 0.004782567244060232, 9.999999999998899e-05, 0.0028591349977886704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04168258219705534, 0.0495854327039682, 0.03396102812411095, 0.045388339402583355, 0.016057111704513405, 0.038977375967981565, 0.04746966182408996, 0.02035718455832336, 0.022246350986399155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005184359174084441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005803592299165383, 9.999999999998899e-05, 0.1925131788836959, 0.192779429090156, 0.16485066916845803, 0.2055422021877208, 0.18249678129336, 0.18255272628939023, 0.21885899532798636, 0.18022573004497122, 0.1892317298353522, 0.036728282918712885, 0.030316563939848717, 0.02971943637799812, 0.04169529213219525, 0.036101333502900346, 0.03998507218088265, 0.03652997581463313, 0.042837580682622556, 0.051794263534583496, 0.13059929813766635, 0.12689773638817237, 0.12466702567387988, 0.1409735836597521, 0.13486954408425822, 0.1347258316812575, 0.15826156825891702, 0.13998107163128426, 0.13038971050134185, 0.16565199708325873, 0.15819501122400148, 0.16513253023023133, 0.16341335654753597, 0.17156226114457696, 0.1613134878320085, 0.1711979586971284, 0.17366152346300912, 0.16457249641000127, 0.11717160103460833, 0.10215251170734996, 0.10453728889933467, 0.10932675305560169, 0.11594626660312768, 0.10741245878956529, 0.1202346219065954, 0.10425711194676135, 0.12837578459275834, 0.16005881307086622, 0.14269438755456465, 0.144783962122786, 0.15545919809182163, 0.15711302148806483, 0.15638877967708598, 0.14698892535019337, 0.1459805402770188, 0.15399733708693852, 0.1391989080481324, 0.1371956403388096, 0.12376514329279376, 0.13294345882032121, 0.141089169529231, 0.13383789740687302, 0.10564588720047374, 0.1353397225498153, 0.1605084278214981, 0.1663664188491597, 0.14176588693109027, 0.1491721183152417, 0.1603112953968353, 0.16899831778004604, 0.15643410332659335, 0.14579993035328787, 0.16618568854276927, 0.14180346456518433, 0.16910854747638082, 0.1359662867925917, 0.1496764444433447, 0.14469258107952132, 0.13673650778669866, 0.14901266548054626, 0.14695272877768306, 0.16601926941279832, 0.12082089607364321, 0.17480600248853495, 0.18010814857859792, 0.18022684480477325, 0.18600330304928936, 0.1796440985806368, 0.17307563883922394, 0.192165982577165, 0.20024678985283872, 0.2056488688187883, 0.05975194631593783, 0.05314379693031457, 0.05220399102570905, 0.057799971417664686, 0.06012147267458312, 0.05185380091956082, 0.07484744162937185, 0.047242276837958674, 0.049912860692977845]}, "mutation_prompt": null}
{"id": "ebe8dc70-e052-4da5-9078-8a287b106452", "solution": "import numpy as np\nimport random\n\nclass AdaptiveMultiDirectionalDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "AdaptiveMultiDirectionalDifferentialEvolution", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 83, "fitness": 0.12009662927347085, "feedback": "The algorithm AdaptiveMultiDirectionalDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.16074582777513624, 0.1725780031844668, 0.15580681684991682, 0.16769375642566486, 0.16019111709411205, 0.19620165344797325, 0.16583791081831, 0.18001202945823258, 0.17371429012826123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04191064158471114, 0.06585655307843319, 0.03806905317556697, 0.04043033309434263, 0.042320157269329695, 0.05067664412158579, 0.044278328435062964, 0.03739868260296442, 0.03809060453909319, 0.030231551873189155, 0.02181133606322405, 0.027853745852434608, 0.027510891581495667, 0.021651275907980883, 0.03016064338799629, 0.03016044258822692, 0.022891492140643455, 0.031060967621023505, 0.8632956029881216, 0.9310705306775187, 0.9825967368497404, 0.8936542563189445, 0.8915410919893726, 0.9012899256982623, 0.9356406077238479, 0.9001321153810427, 0.8956910829836838, 0.09060152243599606, 0.07403177056389199, 0.05965598271861605, 0.0659974620986179, 0.07554280371994704, 0.08228226639617764, 0.088320985873789, 0.060644913109290655, 0.0826268632411582, 0.13983459825300615, 0.14324975036126342, 0.09712175137714674, 0.10829210536759859, 0.13036151779425798, 0.12760215162955213, 0.09170003892229472, 0.1021541022325444, 0.10296976520029799, 9.999999999998899e-05, 0.0006294145789783601, 0.017943535549638012, 9.999999999998899e-05, 0.055793964544043395, 0.002105332349855993, 9.999999999998899e-05, 0.0011355239786431381, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013678500063422638, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024059514176048236, 0.000649257606027076, 0.015565011930893546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05269815599920169, 0.030627754009433183, 0.05035299507754243, 0.021671295793079803, 0.026472203286100005, 0.04320946324123254, 0.035793340479211344, 0.05758144310531765, 0.030738975073068886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001375890235798538, 9.999999999998899e-05, 0.008537754834999745, 9.999999999998899e-05, 0.19110003856277658, 0.25572827532534625, 0.18925732698000897, 0.2234855929237547, 0.19314254549560816, 0.20721361725160659, 0.1736280506274721, 0.17622212409116378, 0.19397767865175342, 0.036239672496055975, 0.04005452509238183, 0.04888749765263167, 0.0326449029307474, 0.03540299899068866, 0.03825566792495816, 0.04576988023763484, 0.037118518496423114, 0.050805706766470005, 0.13453688524753893, 0.11752751483083124, 0.12557693213925236, 0.14922383488634516, 0.13997869673826457, 0.12090597906315892, 0.13213177260433817, 0.12690032442786436, 0.13775068445162653, 0.17368175737081692, 0.15490650777936843, 0.16122079742053996, 0.15671896787052741, 0.17458683913220807, 0.16906511424054205, 0.18273745045618128, 0.17366118744300785, 0.14827232566178716, 0.10765527827357235, 0.11940118536378508, 0.09449849696648471, 0.09323440218543133, 0.09043729562605896, 0.10914322488456107, 0.0962487520753681, 0.09966880649584364, 0.10373455271346843, 0.16187993883251073, 0.1464285919332584, 0.14640461235645197, 0.1472616060069193, 0.167771895616169, 0.15920740135506517, 0.14490903378012532, 0.1587774594613004, 0.15457986592422734, 0.1325867610291962, 0.1600082365101413, 0.13734555169807594, 0.14900023435938914, 0.15112224214663694, 0.1500600212317882, 0.11630890615276257, 0.13964305146864553, 0.1605084278214981, 0.1734797712499292, 0.12416177960334496, 0.14946406366805653, 0.16392589289824244, 0.15640024925263118, 0.15193049670791647, 0.16278870266543888, 0.18048686677176862, 0.15762435081331727, 0.1462400601054371, 0.15398290086786315, 0.1336299798444014, 0.15090988726504007, 0.1278305789004045, 0.16192349090466396, 0.12530859289263518, 0.19300793985574904, 0.13034656895217778, 0.19964290844571275, 0.19121162906165579, 0.1988434342701998, 0.17556870350321718, 0.19373894942560943, 0.18180485997479334, 0.17155142590778072, 0.17887607104376424, 0.20557692574402797, 0.044414963984461764, 0.05197059007154714, 0.05596145034053446, 0.05699403935822667, 0.05289675531985483, 0.04778538359937812, 0.04820846168854642, 0.056573098658042054, 0.05293799821723877]}, "mutation_prompt": null}
{"id": "bd9eb55a-2857-4530-a50e-76c74249f710", "solution": "import numpy as np\nimport random\n\nclass AMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.4\n        self.mutation_probability = 0.6\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < 0.6:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        else:\n            x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "AMDF", "description": "Novel Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control using a probability of 0.6 to change the individual lines of the selected solution and probability 0.4 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 84, "fitness": 0.11243585059631471, "feedback": "The algorithm AMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.15.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.17109213286919334, 0.19234436730764415, 0.1808132505594804, 0.18914577665747323, 0.16334753687816084, 0.16311294915817365, 0.22795657792055413, 0.17588447388205164, 0.14427905684393993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03956080965264486, 0.047231216562403255, 0.038504626742310366, 0.04494156188651954, 0.0358764471234021, 0.030735847653187043, 0.03947749642062848, 0.03834302463708028, 0.05976120920640182, 0.03818490406841779, 0.04489570560282352, 0.025792013575144823, 0.026024648372959147, 0.030372134017497943, 0.031820125369036556, 0.028527630988694708, 0.038076153504917776, 0.03024374238087424, 0.5497733363789067, 0.2780722634609357, 0.83382729561402, 0.5324661094408711, 0.9864938642124503, 0.95533461669097, 0.9636905113443534, 0.8342555934918776, 0.15262847850221628, 0.06490279828764944, 0.0891306637565289, 0.06854088545302384, 0.0701598258427446, 0.08234571741226593, 0.062405738927508225, 0.0846324095664639, 0.096260423950838, 0.07509366912269266, 0.1160457227181978, 0.1313309249234278, 0.10502264831359642, 0.10757109423099032, 0.12736716768669198, 0.09443471229416822, 0.13009193915321737, 0.12199758464806987, 0.12880808489805617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011340288870688164, 9.999999999998899e-05, 0.0027304031764695536, 9.999999999998899e-05, 9.999999999998899e-05, 0.012335167401390956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013070829288726604, 9.999999999998899e-05, 9.999999999998899e-05, 0.015468394730916546, 0.003395462558359985, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030240756905366983, 0.06565917621650863, 0.04037039584491653, 0.03786694936922119, 0.07643022960796242, 0.04854292016841011, 0.04097530217824552, 0.03961872004098077, 0.06396145636018558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006284649724924152, 0.015684592212212745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1794124371294321, 0.17982626595526763, 0.18266831079733536, 0.1838285635098399, 0.17867579372462805, 0.18529296613752877, 0.18802690663689958, 0.21432103897614074, 0.1849973971382246, 0.03998700066685579, 0.03815358083012599, 0.0431193662926187, 0.03673587368121933, 0.04039454518733909, 0.03509122375454976, 0.07522832461082762, 0.03933925534420413, 0.051343034907758045, 0.13754897123809406, 0.14422846984303705, 0.12651022040534388, 0.13746115934343284, 0.14720791873620276, 0.13317317813416885, 0.1319184306266319, 0.14571049855179696, 0.14035610278285038, 0.16739475704897688, 0.1669117295356456, 0.16247011409887113, 0.16519928780730464, 0.21493626392909304, 0.17617138155721768, 0.16301289166498578, 0.18223732545692128, 0.15817612940856962, 0.10408621428671272, 0.11164032051868411, 0.10848229836640344, 0.10687656535492951, 0.14561413174205995, 0.11269348529470535, 0.14158493751911005, 0.11456046757682958, 0.09475453474732198, 0.16015727312227845, 0.1565126730184817, 0.16650221177674152, 0.15962240687659435, 0.15776294412353387, 0.17804320179079003, 0.16001693668875472, 0.15325486693738422, 0.15016873817223786, 0.1380845364415314, 0.14321188354983605, 0.13391987602195055, 0.1292080646963033, 0.1566854060304187, 0.1216305734049713, 0.12334326569268617, 0.15340838637130527, 0.1605247860131993, 0.1470235999805154, 0.15179325394776155, 0.19033960553341467, 0.14219119963752513, 0.21194499701632508, 0.1668740131416554, 0.1609944766314687, 0.17612456337897997, 0.1549187299346899, 0.19745354565754947, 0.12556568754534236, 0.14508110129450436, 0.149121294961157, 0.16660637123618594, 0.1508014364266015, 0.18788258170702277, 0.1682430704007607, 0.16397543098804201, 0.17350772343768217, 0.17204788635214407, 0.1814939026079212, 0.1873702770056368, 0.1692888556293961, 0.17566812699838574, 0.1810770362783093, 0.17620662642094853, 0.18744679472255632, 0.04615203518899147, 0.047256843389806846, 0.05313128581801008, 0.0588203394590755, 0.05225608927693359, 0.05790191800114064, 0.05672762924092001, 0.04933405170077676, 0.04670471143393096]}, "mutation_prompt": null}
{"id": "39ed73f6-85cd-4309-af99-a98056962bd3", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\n# Description: Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.\n# Code: ", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 85, "fitness": 0.12240577384422133, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.15408576359711168, 0.18360015272255226, 0.18585778635540684, 0.17407737587986705, 0.19158319535916313, 0.1593017347249719, 0.1818676654675584, 0.18048847776148136, 0.1583779728460709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03421903742758914, 0.06361679071407922, 0.04474644771842473, 0.04829353218785759, 0.03591546794986422, 0.04393291957478418, 0.03361386020052848, 0.056083051918692894, 0.04314731403414784, 0.037634738053360484, 0.033410991671880774, 0.028581652020171378, 0.03431272677007691, 0.038732011246791265, 0.02009909175108915, 0.024297686286221643, 0.02223702362877089, 0.02855575599014848, 0.9998047723085209, 0.9957485981701552, 0.7033283559141668, 0.9067248828063587, 0.9769554517178726, 0.9976999690448513, 0.9966104542427245, 0.9918600714615404, 0.8665694185236207, 0.0663072977114798, 0.08610193846074654, 0.05791054713808175, 0.07985904091372942, 0.06278146040438037, 0.05695036955249211, 0.0490046550333767, 0.12744711965830102, 0.0888657344845818, 0.11038244857227708, 0.09504909807287654, 0.10515495814252596, 0.1388502226435927, 0.12621995133873387, 0.1038328102564463, 0.099666796964192, 0.14613279045299954, 0.11646533873554965, 9.999999999998899e-05, 9.999999999998899e-05, 0.017958504958656363, 9.999999999998899e-05, 0.003927110800857503, 9.999999999998899e-05, 0.012885028351753869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011719336063072627, 0.00016856577689172703, 9.999999999998899e-05, 0.011876138764226218, 0.0014865595422394184, 0.024126850572557146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057757686899641114, 0.0517755691020213, 0.03988091095122859, 0.08069106933933035, 0.035357950940248295, 0.06387821653922443, 0.037639528233036956, 0.04276705816996751, 0.04261377319823645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005342758262384839, 0.0012252313645051416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16772259797525657, 0.19294324991601575, 0.1806480328100457, 0.22087440908337597, 0.179800233723449, 0.2115664331614766, 0.1808591719556144, 0.1744231135691915, 0.1889567682945531, 0.04526768398792358, 0.051781870610044134, 0.04004019204629039, 0.04041546399912899, 0.03882635284957958, 0.036413403341872486, 0.04705597339011525, 0.04440709625638484, 0.039012022865630214, 0.1558793173072368, 0.14816277270135902, 0.14807734923497173, 0.1393001625657485, 0.14596437388899708, 0.12154432654078395, 0.12498823094141298, 0.1321389555061513, 0.17078662760354346, 0.14596846073209524, 0.17207941675985672, 0.16300174168464987, 0.1708646785742598, 0.15451429880307566, 0.16152508573904512, 0.17195193164850975, 0.17365836726952688, 0.16638387324312665, 0.12155026502665056, 0.1026699466631007, 0.1060493663148232, 0.09267137042115792, 0.09722214908018156, 0.10863686494948632, 0.11301503599737495, 0.09979021491769524, 0.11636515224306931, 0.14838659915202534, 0.15670403046764736, 0.1672313388515526, 0.17553841708471773, 0.1438439463306479, 0.17879106043021242, 0.15144168561746596, 0.14437644342249656, 0.1480615818069898, 0.12011463720818616, 0.14034859989376547, 0.13040512760981748, 0.12428393740291943, 0.1407255523660742, 0.14515130378148078, 0.1454138712755434, 0.14550774605868577, 0.1605463870851761, 0.12302882586038955, 0.16122001496542848, 0.15932675432037535, 0.22550944863948075, 0.1514075051494318, 0.14834877987088202, 0.15356496133020014, 0.1604896776849042, 0.14789007869430315, 0.1629581398621296, 0.1969100812595671, 0.1529065464747389, 0.13869274811323573, 0.15258823749207873, 0.14548967354859765, 0.1466625367959652, 0.18606109592542763, 0.15586441400545004, 0.21427757048527696, 0.20235498089388104, 0.17637302048320724, 0.17850051197625505, 0.2152471322889481, 0.1746485409163666, 0.18122241194478317, 0.18717115115432703, 0.17484272055456607, 0.05018155804692903, 0.06242001564826638, 0.055998574325027195, 0.05198670390912452, 0.04250430014951978, 0.04460108585781686, 0.0451099486958465, 0.04945244084424316, 0.0507556657306788]}, "mutation_prompt": null}
{"id": "9a59a680-0fe1-44d4-bcba-682a0dc4b41c", "solution": "import numpy as np\nimport random\n\nclass AMDLC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.05\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < 0.05:\n                self.crossover_probability = np.random.uniform(0.1, 0.9)\n                self.mutation_probability = np.random.uniform(0.1, 0.9)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "AMDLC", "description": "A Novel Metaheuristic Algorithm, \"Adaptive Multi-Directional Differential Evolution with Levy Flights and Crossover with Probability Control\" (AMDLC), that uses a probability control mechanism to adaptively change the probability of crossover and mutation operations to refine its strategy.", "configspace": "", "generation": 86, "fitness": 0.12180239782125116, "feedback": "The algorithm AMDLC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.15632544042267604, 0.15305123131408416, 0.17828136134472805, 0.17126535037297197, 0.15235239644621634, 0.16248571891769747, 0.15483773233012654, 0.1694843517758574, 0.1554632623402542, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04060711497149405, 0.03800312627414604, 0.04078539608748266, 0.04467341103293487, 0.035786847126156096, 0.03152424106037033, 0.0406669436517233, 0.048663027611705933, 0.036266918289557415, 0.02958887312206937, 0.03011347811235232, 0.02874418348003127, 0.03323190759454575, 0.02773206260991734, 0.03354602878066182, 0.048277374461078715, 0.0367866623418458, 0.05154054621817683, 0.9715771016650833, 0.9902014768034276, 0.8830394646620439, 0.9452165789690394, 0.9159813820718381, 0.9384946706091214, 0.9605451734522332, 0.9825289123458495, 0.9052138280247217, 0.07142125493574836, 0.08103148494276324, 0.0672075344677372, 0.07455589883973002, 0.0577716068953934, 0.07980297336600983, 0.08692458203452968, 0.05524699728272442, 0.057765712868151464, 0.12440364303266538, 0.16033654143278364, 0.09807418199252549, 0.11533977361160364, 0.10809387258370384, 0.11616258293252035, 0.1337568357633785, 0.10500952514284634, 0.11690812726651711, 0.008402341292869875, 0.001127090783197282, 9.999999999998899e-05, 0.004984781391318416, 0.0001137706353432355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025273251018797183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007501484015402848, 0.0012656855909161102, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036704040363994106, 0.03138994707870302, 0.03861343603103029, 0.036444370633290424, 0.017385065772553054, 0.028505275257050156, 0.050176662291513296, 0.03599712317016035, 0.03186214308779767, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025674611263130087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1953552263847449, 0.1948622101648363, 0.18289460785130274, 0.16978414672551168, 0.1758020443515994, 0.18947907473414216, 0.20688676680402807, 0.19879313751965122, 0.20308191779889417, 0.03289778021994405, 0.04687203191053524, 0.0402913144162419, 0.04022081615833972, 0.04113008234672233, 0.05083066907688483, 0.045433627971858015, 0.05333070625784453, 0.04927574364376419, 0.12966902416662507, 0.12747930979136546, 0.17041713107208978, 0.1374736390293254, 0.14991391530762443, 0.1437114504215078, 0.1350464834702052, 0.13221796054678414, 0.13339502401683567, 0.1523884757599313, 0.16062793693227995, 0.1704853920903976, 0.1662853319217198, 0.1507592680932266, 0.17105027232226877, 0.19877810381804506, 0.17365931772212573, 0.159428785045296, 0.08779314753359946, 0.1076243379476104, 0.09359966730050762, 0.11158813511518506, 0.10286446687703588, 0.11014978544503318, 0.10794853914190805, 0.1180973594450988, 0.09843409461412744, 0.14826020040152466, 0.1657564917465525, 0.19105093664627726, 0.17557989600877422, 0.1461491069113907, 0.1577681415641322, 0.15518965444869026, 0.14734656994164708, 0.1480970669643702, 0.135301954944677, 0.15288359099819027, 0.12747838883852314, 0.12975646095989357, 0.14613077750218795, 0.15021671524778135, 0.13888379017577812, 0.13789820142711617, 0.1606955049833585, 0.16692737816517433, 0.15283416911704628, 0.1612573635923651, 0.2126460477347053, 0.231939403319664, 0.1444164268308512, 0.2304894383217274, 0.14185482722782183, 0.158715051987106, 0.15641633188570525, 0.16088131842471243, 0.12926428551774638, 0.11242096893918552, 0.10585416036380424, 0.15629473166310748, 0.11967388660886957, 0.1876397498659318, 0.22445954631478937, 0.1922758737307545, 0.18693379920608888, 0.18719616710708897, 0.18671809099043168, 0.18108872870168868, 0.1932009285807289, 0.1871982423532006, 0.1921878502818467, 0.17493877169521088, 0.0493880242898016, 0.05008917144956582, 0.04835759588760136, 0.0499034847669062, 0.04827561655607149, 0.054788870868540784, 0.04146995061367309, 0.051790103083876216, 0.05136922872558858]}, "mutation_prompt": null}
{"id": "347e3a40-e7a5-4888-bdd3-8cd16fd69f56", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.9\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        else:\n            x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.9\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        else:\n            x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\n    def novel_heuristic(self, x):\n        x_new = self.mutation(x)\n        index1 = random.randint(0, self.dim - 1)\n        index2 = random.randint(0, self.dim - 1)\n        if index1!= index2:\n            x_new[index1], x_new[index2] = x_new[index2], x_new[index1]\n        return x_new\n\n    def novel_heuristic2(self, x):\n        x_new = self.mutation(x)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def novel_heuristic3(self, x):\n        x_new = self.mutation(x)\n        index1 = random.randint(0, self.dim - 1)\n        index2 = random.randint(0, self.dim - 1)\n        if index1!= index2:\n            x_new[index1], x_new[index2] = x_new[index2], x_new[index1]\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def novel_heuristic4(self, x):\n        x_new = self.mutation(x)\n        index1 = random.randint(0, self.dim - 1)\n        index2 = random.randint(0, self.dim - 1)\n        if index1!= index2:\n            x_new[index1], x_new[index2] = x_new[index2], x_new[index1]\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def novel_heuristic5(self, x):\n        x_new = self.mutation(x)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        index1 = random.randint(0, self.dim - 1)\n        index2 = random.randint(0, self.dim - 1)\n        if index1!= index2:\n            x_new[index1], x_new[index2] = x_new[index2], x_new[index1]\n        return x_new\n\n    def novel_heuristic6(self, x):\n        x_new = self.mutation(x)\n        index1 = random.randint(0, self.dim - 1)\n        index2 = random.randint(0, self.dim - 1)\n        if index1!= index2:\n            x_new[index1], x_new[index2] = x_new[index2], x_new[index1]\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def novel_heuristic7(self, x):\n        x_new = self.mutation(x)\n        index1 = random.randint(0, self.dim - 1)\n        index2 = random.randint(0, self.dim - 1)\n        if index1!= index2:\n            x_new[index1], x_new[index2] = x_new[index2], x_new[index1]\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def novel_heuristic8(self, x):\n        x_new = self.mutation(x)\n        index1 = random.randint(0, self.dim - 1)\n        index2 = random.randint(0, self.dim - 1)\n        if index1!= index2:\n            x_new[index1], x_new[index2] = x_new[index2], x_new[index1]\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def novel_heuristic9(self, x):\n        x_new = self.mutation(x)\n        index1 = random.randint(0, self.dim - 1)\n        index2 = random.randint(0, self.dim - 1)\n        if index1!= index2:\n            x_new[index1], x_new[index2] = x_new[index2], x_new[index1]\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def novel_heuristic10(self, x):\n        x_new = self.mutation(x)\n        index1 = random.randint(0, self.dim - 1)\n        index2 = random.randint(0, self.dim - 1)\n        if index1!= index2:\n            x_new[index1], x_new[index2] = x_new[index2], x_new[index1]\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.novel_heuristic10(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\n# Description: Novel Metaheuristic Algorithm with 10 novel heuristics to solve black box optimization problems.\n# Code:", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 87, "fitness": 0.10871239164386948, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.177461016854925, 0.152660253094556, 0.17412335242944643, 0.17297968111752104, 0.15828874407455573, 0.17221856170391225, 0.20292041821054418, 0.14870949863261973, 0.1756704467161324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06905758690662112, 0.04360315418934113, 0.03943865325120821, 0.04313637365339251, 0.03533146117913932, 0.048561507460340936, 0.04728635187860131, 0.04006714054347227, 0.037428574661645286, 0.03501791982457003, 0.03481491842876172, 0.03392269034241924, 0.037320896184743435, 0.03689992636392614, 0.05010520596310486, 0.03596195674644709, 0.021042786331882057, 0.023869957783187234, 0.13079888741410017, 0.11816491910661009, 0.19343474997223453, 0.9939052935418895, 0.17594213079113596, 0.7272171166168803, 0.8231747422734066, 0.9998, 0.7837584470233822, 0.06265319770192002, 0.07409762860299818, 0.09970386744270288, 0.10404188239731449, 0.07852521734890194, 0.08920075670483762, 0.042580092576499196, 0.08757871786045013, 0.06378204679127863, 0.1195247334907037, 0.11785195514557256, 0.1476763673865753, 0.12176704554793927, 0.12713186570765556, 0.12627503150812225, 0.13401882756777928, 0.14645126001510256, 0.1253011215120874, 0.020505447429304713, 0.00043089057871548153, 0.0183291167246854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005549061053276794, 0.009705446102438842, 0.003048987280242166, 0.015225070521789896, 0.04445475658751963, 9.999999999998899e-05, 0.024673137036919424, 0.003378045264345708, 0.011821311164206816, 0.0023366735637557756, 9.999999999998899e-05, 0.004721047375768617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06523421132299156, 0.04484898689490513, 0.06079117125379385, 0.03786420916512456, 0.007755209193930801, 0.07015253812246225, 0.07431486690389133, 0.049461130763716166, 0.03675138083563634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1939438206348233, 0.19821639720768025, 0.18381888802302415, 0.19302445472640606, 0.18143332162005477, 0.19626190180455316, 0.1892516061306484, 0.18292531832509673, 0.2022793852587561, 0.0340671998651082, 0.046100787912360275, 0.04040696781369768, 0.04394787906166475, 0.03923185857603162, 0.037316929575997526, 0.04406668551592552, 0.03581232810687762, 0.047282341400271655, 0.13735926134778964, 0.12552074859845852, 0.1371837416783619, 0.14930141325323198, 0.14549424481652184, 0.13764208918952936, 0.1363471573829227, 0.13110963319889601, 0.12331233354233662, 0.16724008109421684, 0.16076646354872337, 0.16539577219042567, 0.16103490003883802, 0.15498765409440352, 0.16145258785351868, 0.1827857882158388, 0.17371167238136187, 0.17422816505194294, 0.09236017441720146, 0.10565918446858491, 0.10840957050873312, 0.10385807336718222, 0.10840488315559327, 0.11137237496580188, 0.09993860554973144, 0.11827185369525484, 0.10558186941105707, 0.19622786634709932, 0.14637811932886502, 0.18070491808886768, 0.1620325887742864, 0.16461093743088584, 0.15984429336944883, 0.15207557460996612, 0.15750593574196792, 0.1819371054605775, 0.1526202147856347, 0.14095316638153033, 0.16147134902584892, 0.14597671729065365, 0.14881230472462104, 0.15549252370886446, 0.14331811788656323, 0.14108441154647444, 0.16295368512729969, 0.1832910775957135, 0.1475270115355075, 0.24326996664587153, 0.1850708295094512, 0.16605604821107267, 0.2633941802426547, 0.1550389940880037, 0.1924840723538641, 0.16432507392865792, 0.18447165621688277, 0.1367333177352701, 0.15849154398305032, 0.14041541862477802, 0.13899910479663702, 0.1725238530634139, 0.15851459689782754, 0.16728731918260276, 0.136197735785634, 0.19905181655901516, 0.1855619058606155, 0.1717436583692039, 0.1800607485533834, 0.17220065254092332, 0.17161407713862953, 0.1816315886351284, 0.17960685762533268, 0.19391175084977696, 0.053305182492751735, 0.043384241172335525, 0.050990394722373655, 0.054004698439103827, 0.05051207114406675, 0.05599884456493587, 0.043787458878652985, 0.04550361564033134, 0.055087401572944894]}, "mutation_prompt": null}
{"id": "102b61cd-a06d-4712-b333-ad160d60aeb8", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.0\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 1.0\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 1 to change the individual lines of the selected solution and probability 0 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 88, "fitness": 0.09464546791416219, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.16625070472883452, 0.18160596786501348, 0.18416104285242996, 0.15912021053267, 0.17258039208854603, 0.16397865639090958, 0.17747427758819811, 0.18143358763647188, 0.20162104233176203, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04309738149968523, 0.043472162693342975, 0.04618106307781544, 0.04218101416781517, 0.04126040534657127, 0.04242673890315041, 0.04855470988582933, 0.04803387989776842, 0.04208241559350667, 0.03996360491825668, 0.025048729447942564, 0.036893162448005, 0.024406362510422497, 0.043294461778492055, 0.0234629509183355, 0.07299803814754358, 0.04062774941291558, 0.0297364835177516, 0.12884918239839338, 0.19024085298704518, 0.1343486884370384, 0.10592304868837366, 0.13576029327714245, 0.10128464434667117, 0.12189039760507125, 0.11680445283447771, 0.16886689941009758, 0.10468857796795561, 0.08210906249664929, 0.07802238890516144, 0.07424132071844125, 0.06043990729419202, 0.07814991881749667, 0.06729726405388814, 0.1241764545648466, 0.07000338856052712, 0.1279282499585459, 0.16039988577044118, 0.12606876619979646, 0.1396799428447928, 0.12078136271639162, 0.12419969143207055, 0.12058461951968824, 0.10712193207686271, 0.11212220474146306, 0.035221659472326805, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010651528647190878, 0.05325061633596395, 0.014411611363790322, 0.04646463883481122, 0.008093256146696648, 0.0009789947638085827, 0.0012228505557413394, 0.0027376644839453013, 9.999999999998899e-05, 0.001180283998300169, 0.0009893278418239282, 0.018923086273423873, 0.0020630697789046915, 9.999999999998899e-05, 0.01938963877569677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035205001339508435, 0.07547907783590435, 0.06136647921381777, 0.03515345954719107, 0.07033897272203427, 0.05904517145067767, 0.03995609510670184, 0.04226280040714514, 0.07087702904836335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006153374981954007, 0.01442599284115953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013909666585098401, 9.999999999998899e-05, 0.23695039850925836, 0.19326408379574467, 0.2088081788958842, 0.23122716423035128, 0.20279224306538612, 0.17882257483736252, 0.2327631124891263, 0.19099542591578245, 0.20017109208389472, 0.041411796580439475, 0.04022553965253006, 0.049321535069875466, 0.051256992162877935, 0.04041052603430728, 0.0679690911463886, 0.06395526292496712, 0.03423288632941057, 0.05600998790749434, 0.1270027889670844, 0.14196677767731636, 0.1654542375524123, 0.15230065602003584, 0.1380994853996692, 0.1334806264585523, 0.13876322142908615, 0.1416952458408901, 0.16405595880507695, 0.16455699033959104, 0.16651868918871748, 0.16803368146526754, 0.15814487818850342, 0.16000201085154697, 0.1766757411131764, 0.15528196967272834, 0.1820443979967612, 0.1622366389703861, 0.10545532025808535, 0.10616671947818923, 0.1129406748156565, 0.10535970086336333, 0.112232567750711, 0.10905339061738428, 0.12525432334274134, 0.09984173753851933, 0.13610012882221234, 0.16979517019895374, 0.15299226157300128, 0.18949600791282206, 0.17759301095128233, 0.16237852064625202, 0.15194875265552965, 0.15829638320581074, 0.1689008010994426, 0.14906427969290004, 0.1402355242566108, 0.14809237431532385, 0.15678161072649532, 0.14359852065218548, 0.14846702496754582, 0.1339199502216195, 0.15283465855582323, 0.15082106458128786, 0.1605084278214981, 0.16031175419107946, 0.14400789423441784, 0.24218208119530216, 0.18828175392715774, 0.2105599212210323, 0.2134905471172477, 0.23020061082197607, 0.16475334220640048, 0.1591786717531184, 0.2021700815203329, 0.16718132904875782, 0.15534979150259332, 0.15397525849236282, 0.1763144754105057, 0.1612780515296387, 0.16207337584050963, 0.19799689612512572, 0.12878519166350888, 0.17706548900306407, 0.20122024427182894, 0.177003795967555, 0.18101809085860665, 0.17637868279654867, 0.17522406410026836, 0.1807909790817006, 0.19650310609174382, 0.18175487111880462, 0.060991306322844, 0.053286925882356284, 0.060368872554716124, 0.05285839864805619, 0.044600344661144264, 0.053046687330313924, 0.0609291371838806, 0.05450801298768615, 0.05495467033469925]}, "mutation_prompt": null}
{"id": "c8dc70c2-438c-40ac-8a32-57d2ae4e20cd", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.0\n        self.mutation_probability = 0.0\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.0\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def crossover(self, x1, x2):\n        return (x1 + x2) / 2\n\n    def mutation(self, x):\n        return self.levy_flight(x)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to change the individual lines of the selected solution with probability 1.", "configspace": "", "generation": 89, "fitness": 0.09058922279020955, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.16305519236907717, 0.1709263047726054, 0.174125560045153, 0.16820104676188208, 0.15931387426101373, 0.15926587912881296, 0.18027021435179047, 0.1326881892347621, 0.16620756971105255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04295054926368136, 0.06246798878265558, 0.039802690592868784, 0.03192586746862236, 0.035182373226302466, 0.04750961498063555, 0.046323498669941565, 0.03633602598218655, 0.04252079322703339, 0.027034958427760047, 0.03477309244305904, 0.03685375392663903, 0.04782202954996828, 0.02761914704889623, 0.030529688240440334, 0.025933250018774, 0.04014187673344327, 0.032270719908598755, 0.19228044256880994, 0.22971872989151954, 0.20568906435839085, 0.2478376190349697, 0.18083842413138407, 0.20837981725563703, 0.16077761030359894, 0.2431278981480529, 0.18822600634430586, 0.08792100546487813, 0.0828020169784569, 0.07141003091435671, 0.08699516777458016, 0.06203103893388051, 0.05628577378286481, 0.07808911271047925, 0.07229805273805723, 0.0674883481168359, 0.10423181138370097, 0.1287463842790687, 0.14084060623133465, 0.10021266717086841, 0.0980501071649027, 0.1250055880838925, 0.08927012471106477, 0.12610307304811819, 0.11821950217449773, 9.999999999998899e-05, 0.000437956402132067, 9.999999999998899e-05, 0.00984547997366736, 0.04868593494143514, 0.0021551165533615357, 9.999999999998899e-05, 9.999999999998899e-05, 0.025910378111586363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0043341737737813135, 0.02268573732311796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02769978309449983, 0.03978261615931056, 0.04122785905084314, 0.033954495819331854, 0.09675387823033965, 0.039797802790813686, 0.030014401269016555, 0.08091840340427592, 0.03968285634036439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008094101646473839, 9.999999999998899e-05, 9.999999999998899e-05, 0.005521425325047513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20715488491757506, 0.18675003213686048, 0.18304041941303617, 0.21884444537641323, 0.1963895453944522, 0.21578298261206375, 0.18768475647111982, 0.17987003430525417, 0.17991968682115345, 0.034892920577328956, 0.03467145571105046, 0.046814481840093514, 0.047087198172772515, 0.04153025476829786, 0.04029312631047921, 0.0405395080653167, 0.035539459123400396, 0.05428445501475021, 0.13901303830606704, 0.11435420909058702, 0.14334082573230134, 0.15865634854410637, 0.1354660730751115, 0.1359451051846451, 0.15060418544965926, 0.1320060941683585, 0.13457754622275375, 0.14793380859067018, 0.15881684811091568, 0.16325326264922846, 0.15633927427250527, 0.18363532005642835, 0.16143384980635633, 0.16168517745658506, 0.1769382489648842, 0.1587452537391988, 0.10230066343050226, 0.10332298575241117, 0.10086451459663182, 0.10219277942794214, 0.12997644020021604, 0.11126948487011634, 0.11084642687068968, 0.10690839960689191, 0.1001405902703929, 0.1424020506627487, 0.14861029473431187, 0.1414564585404381, 0.15745386341838608, 0.15355309670776185, 0.15605229193823156, 0.14884447989817018, 0.13855832989744488, 0.15538863293545713, 0.14062197650532438, 0.1309060260418773, 0.1313241169137047, 0.13441674817944183, 0.14717150443537885, 0.14423308423063042, 0.1523291877129821, 0.14206076214242402, 0.1605084278214981, 0.1448975982333679, 0.16177574846595855, 0.18345599333804463, 0.16353567464420926, 0.17081256890568053, 0.14838413165406616, 0.1699442511274143, 0.16610544305290353, 0.14172465724067296, 0.17544779927752663, 0.14854768531471163, 0.15942575027100137, 0.13356295841326704, 0.15130845110277624, 0.17266909673130104, 0.11580111554841965, 0.12746360329372897, 0.1264141369860068, 0.1713264360226171, 0.1777774395523244, 0.1766631090277977, 0.17947333194009207, 0.19401117354976483, 0.18701029304755135, 0.17793155051410936, 0.1771167151454225, 0.1737559349256298, 0.05540319136721883, 0.045575561444412105, 0.044046281310715085, 0.058328782166954474, 0.05406171933197579, 0.057476799350899666, 0.05242318621713016, 0.0489692584113971, 0.0601667885288476]}, "mutation_prompt": null}
{"id": "51ea3cb1-20b6-4306-a903-aa9fc13ef76a", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\n# Novel Algorithm: Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight, and an additional strategy to refine the search by introducing a probability of 0.05 to apply the Levy flight mutation to the best solution found so far.\nclass ADMDF_Novel:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n        self.probability_refine_search = 0.05\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def refine_search(self):\n        if random.random() < self.probability_refine_search:\n            return self.levy_flight(self.x_best)\n        else:\n            return self.x_best\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            self.x_best = self.refine_search()\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 90, "fitness": 0.1183667713514648, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.1714844288483326, 0.1556574177424085, 0.16333618319208054, 0.17553387992829972, 0.16564119084311546, 0.16083819935603494, 0.20684536305317325, 0.15797415516991664, 0.18326423751555454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04089299666973856, 0.04324941902693935, 0.036054054499300214, 0.03875076843213665, 0.04621211192281316, 0.04380051230745918, 0.04860380729495539, 0.04605546200649291, 0.0386765309587801, 0.022955171878877634, 0.030583407138423224, 0.021213972866088615, 0.025177328679079625, 0.03695036410677455, 0.06339466800925642, 0.02243840724445323, 0.028987751077118262, 0.050113249934910176, 0.9867011521117717, 0.7495230301540408, 0.8680449775788758, 0.929728766293225, 0.8215034468495416, 0.8152220614898383, 0.8081512761328642, 0.8663319358908534, 0.7978327672513912, 0.06593222584225755, 0.07757315852680802, 0.0609848900599782, 0.05266120368184257, 0.08350102639932555, 0.07579713350410455, 0.06797363792628708, 0.07675528701719636, 0.062170610073894905, 0.10575687975133319, 0.1002151139984453, 0.11937831914374675, 0.11170957758497646, 0.08839330664484768, 0.098556241128397, 0.10340465616531713, 0.09274072147369095, 0.12361781740866062, 9.999999999998899e-05, 0.019460763103827272, 0.009478369130087594, 0.00341832662577779, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0052262746554286865, 0.03865439048425323, 9.999999999998899e-05, 0.0033371008277408576, 0.003333525149917138, 0.0007132841121597622, 0.00016775169086380437, 9.999999999998899e-05, 9.999999999998899e-05, 0.017795592362979562, 0.0026929702293080338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09229413583847546, 0.049923018096190375, 0.05639510171853612, 0.04026855763550807, 0.031484798203257336, 0.06347203561331449, 0.06365394258358015, 0.029978038041669652, 0.06867520023774121, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01232724769959459, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23840401296947988, 0.18259317538289566, 0.1910058649381018, 0.21924354065960094, 0.22474992797226068, 0.19648336571005176, 0.18515626669761065, 0.16423963360807337, 0.17866468824712844, 0.03263486977455832, 0.0320173313515979, 0.03508592094209384, 0.04844997890067093, 0.0391323773648925, 0.04633901170855603, 0.04507955000804009, 0.035169072863977635, 0.0468954112754173, 0.1368158368302267, 0.12941054475918246, 0.13389261358561688, 0.13747312960458824, 0.13576361444827145, 0.15099926536137087, 0.1264612867892303, 0.13445297429009062, 0.13067841071852904, 0.16396146566973968, 0.16287062501692284, 0.16781903990171432, 0.16072481885688772, 0.16184574811845764, 0.1767944740435209, 0.1563179683901088, 0.1736695100015413, 0.14920598942037544, 0.10372254266435688, 0.09585315465885924, 0.10703032014645342, 0.10783796821240887, 0.14615323842750805, 0.0975658526866966, 0.11248879323911731, 0.11215335397849335, 0.11204987505833319, 0.14407103891276507, 0.14635213966938732, 0.16983637500329696, 0.14340183308557075, 0.15395928722230123, 0.15546988031878684, 0.16118924464552709, 0.16470268459526938, 0.15794756349673877, 0.12118558789782818, 0.15364428107866857, 0.140227484808625, 0.09861399868980913, 0.14344183027186586, 0.14198884431696757, 0.14734205889204355, 0.14438221192974, 0.1605084278214981, 0.1754656164132069, 0.1575537298917581, 0.20461375028389062, 0.2145612439111061, 0.15875877434865693, 0.1879736022136248, 0.1722742347387084, 0.13634383653709514, 0.12540219129266605, 0.13990154238814134, 0.14443945848281292, 0.18640557542393932, 0.13220898383171953, 0.16419986272696696, 0.11470540957175657, 0.1618312886779375, 0.1633011600379758, 0.17943002654218543, 0.18171626530620255, 0.19144809726940415, 0.1828514381800339, 0.1894566488143108, 0.1911164774698485, 0.18005812234941299, 0.18400725480947389, 0.1880398076667531, 0.1753437961453983, 0.0502488190478807, 0.06104571895114863, 0.05728022608796657, 0.050687872496448794, 0.04232141861486238, 0.04082262355858657, 0.04906179680150469, 0.04983090659752287, 0.057097162698953485]}, "mutation_prompt": null}
{"id": "e2e02853-86de-40c6-bb6f-ace02769700f", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\nclass NovelAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n        self.probability_change_individual_lines_refined = 0.3\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines_refined:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\n# NovelAlgorithm: Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.3 to change the individual lines of the selected solution.", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 91, "fitness": 0.12051898481512513, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.14670127959388357, 0.16669248098210587, 0.16418352329130703, 0.1757023340135977, 0.1908040650283912, 0.20196255683046715, 0.16208985546561183, 0.15726110693370887, 0.2071559976774503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045503303567903663, 0.0475215536003567, 0.04388011929326763, 0.04135202213388689, 0.03321331564298269, 0.0512745908720319, 0.036632338029177536, 0.034619900155643646, 0.0397313831374142, 0.03545979607965177, 0.053192600873524176, 0.028782358700260247, 0.020806507579715805, 0.029419862387983997, 0.029729690984653834, 0.03045146015330702, 0.030564417002456823, 0.03518689616962167, 0.9998047723085209, 0.9211075319445234, 0.9725330132727942, 0.9592537163616676, 0.8998128269620658, 0.9895910861066369, 0.7306343738623818, 0.8638098260047198, 0.9063013767384824, 0.07003627086568098, 0.08335682255980104, 0.050395954854699276, 0.06277922287531401, 0.13129006570803614, 0.08063758218738237, 0.09082207395871789, 0.05742135667730197, 0.0594148928488506, 0.11952684863358576, 0.12434907613992185, 0.14916648337250993, 0.140286846234708, 0.11387683305927343, 0.11667423023210233, 0.12256859242972118, 0.11465358026784034, 0.10049519703036891, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011424775835026102, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032998493262464956, 9.999999999998899e-05, 0.0011308600090825793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03422116068346326, 0.01302927614384175, 0.021348627460066938, 9.999999999998899e-05, 0.0020555532727183357, 0.0004939926491688285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027389927406712533, 0.04176756765952083, 0.030634291918550716, 0.04132520984641219, 0.0830721120325596, 0.035531143146011135, 0.022703721511767805, 0.052129605549585345, 0.03348364491963385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008468174070996648, 9.999999999998899e-05, 0.193340979240467, 0.16658108510843217, 0.21619945151622877, 0.20705254707081833, 0.18084007858493378, 0.19571571800847576, 0.17389096440065843, 0.1817067047885107, 0.20645584726451438, 0.05706429416207104, 0.03639886551551352, 0.03917110849085803, 0.0608452540699691, 0.03952937349966634, 0.04987360894092252, 0.05265447529101308, 0.04415199631910305, 0.04407438525387131, 0.13672891230309014, 0.1277477361078272, 0.128303439221099, 0.13750423833686853, 0.13997046146572634, 0.1379696967339411, 0.12461113986132077, 0.14957573501265453, 0.12529930187995908, 0.16720168154105797, 0.16600006627926722, 0.16427791845427386, 0.15716429427009626, 0.2155987540126224, 0.16801026525335416, 0.161161238883342, 0.17701761298361285, 0.15383786969602842, 0.10194560805510211, 0.11553705846794782, 0.1557997509038489, 0.10788447734879048, 0.1015990489409705, 0.10624085245051906, 0.11660733397554668, 0.10841845980828124, 0.10478461484515078, 0.14909077795362768, 0.17250100275889524, 0.1483855350951595, 0.1467809514166727, 0.15149486737237727, 0.1784936786915996, 0.14886566094976839, 0.15477972190228828, 0.1431973501769428, 0.12528343642981976, 0.15060566492568106, 0.14157194221395364, 0.13755603511363967, 0.14396155454094972, 0.11253123654734665, 0.13814939826764472, 0.14413904216967, 0.1605084278214981, 0.1519986905994749, 0.1518419233800372, 0.1346693851072479, 0.16885341235820484, 0.16059220196153168, 0.14803663049863958, 0.1554274657285274, 0.16585817056763386, 0.13564799284836349, 0.14857079353427505, 0.18561535178575073, 0.11754157075168936, 0.1400212917602992, 0.13817013285358948, 0.1619581978869724, 0.1479013759631096, 0.11911321852709422, 0.11582916855217895, 0.19984807153875572, 0.19099883507936488, 0.1748889803880187, 0.1815767700629628, 0.19871814477061844, 0.1757935756565615, 0.16757718601391136, 0.1852688474974501, 0.17616938350060118, 0.043556281528549845, 0.0426298927094475, 0.05055711198085833, 0.05216552632049665, 0.05932177989278242, 0.04734248790741802, 0.05163424061804944, 0.053590713962008873, 0.05437236214087848]}, "mutation_prompt": null}
{"id": "4a7eafb7-4eca-4c90-b999-52c0239c79d1", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        index = random.randint(0, self.dim - 1)\n        x_new[index] = np.random.uniform(-5.0, 5.0)\n        x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to change the individual lines of the selected solution with probability 1 and crossover with levy flight.", "configspace": "", "generation": 92, "fitness": 0.12117895777222465, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.16812681421146047, 0.16196122670709923, 0.17514093315878576, 0.18025752797380412, 0.15392033593678278, 0.1447692398555741, 0.2298656214555218, 0.15010093512729195, 0.15306552462131218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04403169282108432, 0.03730767407221269, 0.04017558891299777, 0.029183693404987388, 0.04524211368372655, 0.03516689529357386, 0.04688162557696174, 0.03688110375976161, 0.042608229509561335, 0.0324836373046139, 0.052152904797235, 0.03036894883532182, 0.040966110443842574, 0.04848485865148, 0.03328383669003088, 0.027566006836089785, 0.020055691038596724, 0.03025354663272517, 0.9998047748540326, 0.9462312478328936, 0.9454581825010178, 0.9141392035336249, 0.9885611388953196, 0.9151231288450578, 0.9887912120147363, 0.8725113561127182, 0.9442833474695896, 0.06388483065763817, 0.06087961712781309, 0.08312848760462399, 0.07314568646998831, 0.05928014535680959, 0.05341362386632642, 0.04432628060221011, 0.0693209045170281, 0.05623826447791502, 0.1326040382051411, 0.11681676792725282, 0.12288080473989427, 0.11137767500051954, 0.1033090788584099, 0.09480744724569756, 0.1427928498283929, 0.12266689674957054, 0.11137328088266807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00030241618788673374, 0.0029749004956629577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005636977641540031, 9.999999999998899e-05, 0.000430811165900713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03742294804714763, 0.04167389300719371, 0.05709546637470575, 0.03508244086784906, 0.04040982861583775, 0.047731103411890796, 0.04297591071161422, 0.06358515295819311, 0.029773517505730873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002351810710926605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17330742110818287, 0.1718743225394248, 0.17963042990090583, 0.21265143326416402, 0.1850543099329771, 0.2152384382515521, 0.19231473878401584, 0.1913292883346398, 0.18529470222499111, 0.035467432802151366, 0.0454720972754854, 0.05010096052084578, 0.052111942543638934, 0.04081396913563806, 0.04303148620252173, 0.04787200349453635, 0.038001637504525565, 0.051309644794021, 0.12410296573913948, 0.11816013064701314, 0.14451348854286095, 0.13746623594786456, 0.15553268999579217, 0.13668197531779347, 0.10828193696735722, 0.14599070136389858, 0.1695956787630234, 0.1740023700829041, 0.168291640138296, 0.16539825967938881, 0.16762660751922998, 0.16209731568248065, 0.1613819633045912, 0.17534646588508962, 0.1736687113526164, 0.15917137268714576, 0.10201152621427212, 0.09465947355635218, 0.11116591228548112, 0.1132302185829187, 0.09816116135904718, 0.1064502533592322, 0.10879696520595894, 0.12221253497059936, 0.1005923305434866, 0.15332246448636777, 0.17619856370822184, 0.16419984343196414, 0.15787411869887802, 0.150757080977322, 0.15045794294756287, 0.1727920849956499, 0.14854678745482308, 0.14261652737100483, 0.1454903762755504, 0.1266530385553346, 0.14289413586144506, 0.13886739760172173, 0.14776983285401324, 0.14961448567898206, 0.11500869206825626, 0.1376411723895824, 0.1605084278214981, 0.16575134562701965, 0.18092117612870517, 0.19321300974703726, 0.18014104259139552, 0.1495670364984284, 0.15369202380150349, 0.15138850338508925, 0.16562552467409408, 0.1515883288651928, 0.12363518590885136, 0.1537830557793055, 0.189884994484536, 0.1062265231767866, 0.13953423648796948, 0.14817675004640385, 0.15409275564643543, 0.14608449360407427, 0.12729431661716117, 0.18233216572705802, 0.17815226614936086, 0.1840068826142327, 0.18261214384712088, 0.197131406319075, 0.16676613543472518, 0.19895185893878775, 0.17987254697903865, 0.2060625800566468, 0.048758248824059436, 0.06181360043845929, 0.05876727144679739, 0.0675893211195846, 0.04299487666847979, 0.047434704666232785, 0.050294551059846704, 0.06488025903726025, 0.04127050136596677]}, "mutation_prompt": null}
{"id": "18286ef3-723b-4499-963f-d11489e6f0a3", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 1.0\n        self.mutation_probability = 0.0\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.0\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def crossover(self, x1, x2):\n        return (x1 + x2) / 2\n\n    def update_selected_solution(self, x):\n        x_new = self.levy_flight(x)\n        x_new = self.crossover(x, x_new)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights and Self-Adaptive Parameter Control with Crossover and Mutation, modified to handle BBOB test suite with a refined strategy to change the individual lines of the selected solution using crossover with levy flight with probability 1.", "configspace": "", "generation": 93, "fitness": 0.11983111399100449, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.16551669083321852, 0.14624023262792396, 0.1534371909299811, 0.18981151371898763, 0.17933436635122413, 0.1363796578135501, 0.17010447287497266, 0.16307358863382693, 0.16059934260345676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06479829149569938, 0.05995152616751587, 0.038635121314512744, 0.04309818677332644, 0.02926900338868177, 0.04925704291273292, 0.0492536904832912, 0.044671454384269005, 0.041648028526545255, 0.022157142610788827, 0.028599456361388942, 0.029014998443575468, 0.024215941747744774, 0.052277850332116405, 0.021191842009868234, 0.03511830133159222, 0.042864695331735314, 0.025718859809777173, 0.935333566735275, 0.998640947454288, 0.8410155627128724, 0.8016768728649248, 0.9569524916231771, 0.9618182937793718, 0.9871440639613911, 0.9075085362979353, 0.8375545697023781, 0.07715715430800596, 0.0758275231799238, 0.0952341125870102, 0.053762424569179124, 0.08127491600030301, 0.08984761816924658, 0.0843926939154952, 0.07102824311654365, 0.07830946994791754, 0.11790053380566101, 0.12320487130847757, 0.09995217324637651, 0.12755597781557138, 0.12778402671623734, 0.10803170781683635, 0.09362654826117467, 0.1660437194598935, 0.13024309375225984, 0.019408115996345843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017737862609949695, 9.999999999998899e-05, 0.0035120947001593406, 9.999999999998899e-05, 0.0250115992738541, 9.999999999998899e-05, 0.001683815642947395, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006355661679610103, 0.010648511796743865, 0.004782567244060232, 9.999999999998899e-05, 0.0028591349977886704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04168258219705534, 0.04958213133194933, 0.03395740477779241, 0.045388339402583355, 0.0187542169033742, 0.038977375967981565, 0.04746966182408996, 0.020684509710953036, 0.022245660874144924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005184359174084441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005803592299165383, 9.999999999998899e-05, 0.1925131788836959, 0.1927779788714694, 0.16484973657708069, 0.2055420998455737, 0.18249678129336, 0.18255237421847204, 0.21885729108231333, 0.18022573004497122, 0.18923095203459583, 0.036728282918712885, 0.030316563939848717, 0.02971723917672442, 0.04169529213219525, 0.03610125923830598, 0.03998507218088265, 0.036529601796142064, 0.042837580682622556, 0.05179225352047667, 0.13059887383044222, 0.1268976792153138, 0.12466702567387988, 0.14096965265018846, 0.13486954408425822, 0.13472349081676294, 0.1582660740359666, 0.13997999796562166, 0.13038971050134185, 0.16564970079840025, 0.15819332805773323, 0.16513253023023133, 0.16341165175541117, 0.1715634179888439, 0.16130960888238588, 0.17119696582374566, 0.17366152346300912, 0.16457249641000127, 0.12427098641055323, 0.10215287234772075, 0.10453592718666938, 0.10932651327419352, 0.11594592206098042, 0.10989148185058562, 0.12022732849544404, 0.10425326722497508, 0.12837578459275834, 0.16005868592463035, 0.1427209460608272, 0.144783962122786, 0.15545919809182163, 0.15710979104402212, 0.1563861181302003, 0.14698592198721927, 0.1459805402770188, 0.15399733708693852, 0.1391989080481324, 0.1371956403388096, 0.12375411355543764, 0.13294345882032121, 0.141089169529231, 0.13383789740687302, 0.10564588720047374, 0.1353397225498153, 0.1605084278214981, 0.1663664188491597, 0.14175787682584873, 0.14916957436580447, 0.1603112953968353, 0.1689974488341548, 0.15643293991306617, 0.14579553889252006, 0.16618568854276927, 0.14180346456518433, 0.16909984920979204, 0.13596221623462246, 0.1496763175500786, 0.14469258107952132, 0.14670947717224303, 0.14901266548054626, 0.14695254243681788, 0.16663728309226933, 0.12082089607364321, 0.17491964688137596, 0.18010814857859792, 0.18024742206656696, 0.18600330304928936, 0.1796440985806368, 0.17307433959766227, 0.192165982577165, 0.20024695182297503, 0.2056473393348236, 0.059788484746907344, 0.053143590825885934, 0.05222443706193558, 0.057799971417664686, 0.06012147267458312, 0.05185380091956082, 0.07484667691106783, 0.047242012753135, 0.04991121186832992]}, "mutation_prompt": null}
{"id": "56173495-aeba-4243-97f8-b7c080953dcf", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 94, "fitness": 0.12020513966563179, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.180750742686288, 0.17305771957464045, 0.16145620431920782, 0.16834469087501092, 0.2058295304170672, 0.16715658501891417, 0.22901841742488682, 0.14384557335745451, 0.18471523791484368, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03863420355186242, 0.04247159044451032, 0.04697189055939721, 0.042550099531883046, 0.04026544919233421, 0.050165141385334566, 0.049681293599135645, 0.05150427481085751, 0.049849084056694526, 0.024468679963370987, 0.02785017112310939, 0.029521149159576043, 0.0215853767679951, 0.026964698299699386, 0.04726934858264653, 0.028248088246700664, 0.025758309763577403, 0.02649603654892929, 0.9998047723085209, 0.9828362912437052, 0.8652496903991648, 0.985855578165815, 0.8949852447086162, 0.8858911767462653, 0.7522565164221795, 0.9764647311280438, 0.6748186741837838, 0.08095662129336922, 0.0641967785656058, 0.06543509002178394, 0.08687136820080121, 0.05862411686116864, 0.048740304596611383, 0.06776458426591803, 0.05294781842099605, 0.06588228169412047, 0.1091043943218648, 0.13101840346758198, 0.1487497466222759, 0.13606508621543745, 0.11481564667049082, 0.1155661878634392, 0.11357843932924683, 0.1140285355681614, 0.10995413099048423, 9.999999999998899e-05, 0.02516647313945619, 0.0009949740444313848, 0.015448334489000293, 0.05608456906923298, 0.0005604684691199457, 9.999999999998899e-05, 0.003443812337088792, 0.019416868502957207, 0.0007513089066435441, 9.999999999998899e-05, 0.01306152685117834, 9.999999999998899e-05, 9.999999999998899e-05, 0.00017453740488859726, 0.02415133653492396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06681801145694555, 0.017390235800806342, 0.0513041567512138, 0.0231618686111027, 0.035172346261592824, 0.06258216252235849, 0.036754244717437934, 0.022266872939243676, 0.03990633085213324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00047808591072040496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17194460887398233, 0.19120485881741456, 0.20186072741654482, 0.17872547343627865, 0.19670278956715515, 0.18225494154663824, 0.17343196758780943, 0.17777531622875975, 0.18353335418646255, 0.055813466415656654, 0.04517223679587512, 0.050366292995578044, 0.03342435066216565, 0.03527853116277424, 0.07085516705042971, 0.04025677412149253, 0.04434518288304301, 0.038031862988112564, 0.13034513332421505, 0.13214703560252894, 0.17548247536267592, 0.1374736390293254, 0.1375753129256473, 0.1325639927689365, 0.1343896040759215, 0.13118527958667314, 0.13784407154715117, 0.15735396272598068, 0.1733423195820073, 0.1630294405610221, 0.16092812133562673, 0.16102859890925558, 0.16442160810620976, 0.19023054102063475, 0.17367318028934586, 0.15478334713370256, 0.08710869221836293, 0.09022319602176099, 0.10351782617898075, 0.10549562995170203, 0.14628502648615505, 0.10133084183146734, 0.13669368201656484, 0.10658933101769386, 0.12471791845471869, 0.1477032805657802, 0.15293253783813165, 0.1601991535121271, 0.1483296473531831, 0.14654840189109197, 0.1785120714256333, 0.1571106450858495, 0.14168547291707945, 0.15398914999511704, 0.13635279985742477, 0.15491296325469905, 0.13035985683021134, 0.1487728125093004, 0.14830257457150986, 0.1381373245041132, 0.13393248692905035, 0.14486387948671287, 0.1605084278214981, 0.205435326382303, 0.16925818791336955, 0.15974978780414217, 0.1493367831532123, 0.16252573003994986, 0.16249252937190484, 0.13923149050275951, 0.18311438880882147, 0.14838088336754096, 0.13025842902499973, 0.19490281565695866, 0.14700480979595265, 0.1464067901716124, 0.1427833946559991, 0.1596177848118694, 0.15653818618827375, 0.14121689568300677, 0.12875884083360722, 0.17492844978918143, 0.1899462000774087, 0.17898946820220496, 0.18170763697314563, 0.21516412761510884, 0.18168361023684998, 0.18041905924481128, 0.18708868378986132, 0.1894246502999568, 0.05796135385786527, 0.049390990411294466, 0.03916339732039409, 0.05154542376795357, 0.0461156889635822, 0.05183835208195631, 0.0443145337131895, 0.056244319951248456, 0.05129964714136659]}, "mutation_prompt": null}
{"id": "e1b89a61-2e01-4f7e-a33c-2b1b73ae85e9", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 1.0\n        self.mutation_probability = 0.0\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.0\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def crossover(self, x1, x2):\n        return (x1 + x2) / 2\n\n    def update_selected_solution(self, x):\n        x_new = self.levy_flight(x)\n        x_new = self.crossover(x, x_new)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to change the individual lines of the selected solution using crossover with levy flight with probability 1.", "configspace": "", "generation": 95, "fitness": 0.11983111399100449, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.16551669083321852, 0.14624023262792396, 0.1534371909299811, 0.18981151371898763, 0.17933436635122413, 0.1363796578135501, 0.17010447287497266, 0.16307358863382693, 0.16059934260345676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06479829149569938, 0.05995152616751587, 0.038635121314512744, 0.04309818677332644, 0.02926900338868177, 0.04925704291273292, 0.0492536904832912, 0.044671454384269005, 0.041648028526545255, 0.022157142610788827, 0.028599456361388942, 0.029014998443575468, 0.024215941747744774, 0.052277850332116405, 0.021191842009868234, 0.03511830133159222, 0.042864695331735314, 0.025718859809777173, 0.935333566735275, 0.998640947454288, 0.8410155627128724, 0.8016768728649248, 0.9569524916231771, 0.9618182937793718, 0.9871440639613911, 0.9075085362979353, 0.8375545697023781, 0.07715715430800596, 0.0758275231799238, 0.0952341125870102, 0.053762424569179124, 0.08127491600030301, 0.08984761816924658, 0.0843926939154952, 0.07102824311654365, 0.07830946994791754, 0.11790053380566101, 0.12320487130847757, 0.09995217324637651, 0.12755597781557138, 0.12778402671623734, 0.10803170781683635, 0.09362654826117467, 0.1660437194598935, 0.13024309375225984, 0.019408115996345843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017737862609949695, 9.999999999998899e-05, 0.0035120947001593406, 9.999999999998899e-05, 0.0250115992738541, 9.999999999998899e-05, 0.001683815642947395, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006355661679610103, 0.010648511796743865, 0.004782567244060232, 9.999999999998899e-05, 0.0028591349977886704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04168258219705534, 0.04958213133194933, 0.03395740477779241, 0.045388339402583355, 0.0187542169033742, 0.038977375967981565, 0.04746966182408996, 0.020684509710953036, 0.022245660874144924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005184359174084441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005803592299165383, 9.999999999998899e-05, 0.1925131788836959, 0.1927779788714694, 0.16484973657708069, 0.2055420998455737, 0.18249678129336, 0.18255237421847204, 0.21885729108231333, 0.18022573004497122, 0.18923095203459583, 0.036728282918712885, 0.030316563939848717, 0.02971723917672442, 0.04169529213219525, 0.03610125923830598, 0.03998507218088265, 0.036529601796142064, 0.042837580682622556, 0.05179225352047667, 0.13059887383044222, 0.1268976792153138, 0.12466702567387988, 0.14096965265018846, 0.13486954408425822, 0.13472349081676294, 0.1582660740359666, 0.13997999796562166, 0.13038971050134185, 0.16564970079840025, 0.15819332805773323, 0.16513253023023133, 0.16341165175541117, 0.1715634179888439, 0.16130960888238588, 0.17119696582374566, 0.17366152346300912, 0.16457249641000127, 0.12427098641055323, 0.10215287234772075, 0.10453592718666938, 0.10932651327419352, 0.11594592206098042, 0.10989148185058562, 0.12022732849544404, 0.10425326722497508, 0.12837578459275834, 0.16005868592463035, 0.1427209460608272, 0.144783962122786, 0.15545919809182163, 0.15710979104402212, 0.1563861181302003, 0.14698592198721927, 0.1459805402770188, 0.15399733708693852, 0.1391989080481324, 0.1371956403388096, 0.12375411355543764, 0.13294345882032121, 0.141089169529231, 0.13383789740687302, 0.10564588720047374, 0.1353397225498153, 0.1605084278214981, 0.1663664188491597, 0.14175787682584873, 0.14916957436580447, 0.1603112953968353, 0.1689974488341548, 0.15643293991306617, 0.14579553889252006, 0.16618568854276927, 0.14180346456518433, 0.16909984920979204, 0.13596221623462246, 0.1496763175500786, 0.14469258107952132, 0.14670947717224303, 0.14901266548054626, 0.14695254243681788, 0.16663728309226933, 0.12082089607364321, 0.17491964688137596, 0.18010814857859792, 0.18024742206656696, 0.18600330304928936, 0.1796440985806368, 0.17307433959766227, 0.192165982577165, 0.20024695182297503, 0.2056473393348236, 0.059788484746907344, 0.053143590825885934, 0.05222443706193558, 0.057799971417664686, 0.06012147267458312, 0.05185380091956082, 0.07484667691106783, 0.047242012753135, 0.04991121186832992]}, "mutation_prompt": null}
{"id": "84282d7d-8142-43ff-a870-ca34396dc2c7", "solution": "import numpy as np\nimport random\n\nclass BBOBLowFrequencyAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def low_frequency_selection(self, population):\n        selected_indices = np.random.choice(len(population), int(len(population) * 0.2), replace=False)\n        selected_population = population[selected_indices]\n        return selected_population\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            selected_population = self.low_frequency_selection(population)\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "BBOBLowFrequencyAdaptiveDifferentialEvolution", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 96, "fitness": 0.12286054552954032, "feedback": "The algorithm BBOBLowFrequencyAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.1788212393562424, 0.18267663511343013, 0.1905428591259377, 0.1861466384433379, 0.16387101785754699, 0.16303723164898543, 0.17060615033717186, 0.16002372229806205, 0.12920097772546724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06225574918359944, 0.03222599878449406, 0.04814916809379266, 0.03520789784473055, 0.03821616007615902, 0.04852448101928808, 0.04552917971901893, 0.05843357361278689, 0.043163449808603205, 0.031566301094360316, 0.03256479001766277, 0.03993392917549243, 0.03127381349220326, 0.026326734425402898, 0.033674829617877045, 0.02507476975793599, 0.04046197112569627, 0.05210332444920185, 0.7241667541918577, 0.995999304296319, 0.9800188396890585, 0.9916798383012101, 0.9515910623147349, 0.8933757094021554, 0.988854079734621, 0.9082010135577452, 0.9005424947282156, 0.0721721394462631, 0.08803664164896685, 0.08613546208891676, 0.07181981841286778, 0.08072215676443772, 0.06459971101264328, 0.05177387657513555, 0.06252998062383197, 0.05808050357704908, 0.12067067373858886, 0.11857561135178152, 0.09088637758792262, 0.10320358609978353, 0.14546079673233403, 0.12979999166731304, 0.102793009555045, 0.10050425967631327, 0.1237504211566578, 9.999999999998899e-05, 0.010935669232275402, 0.0019624602308238037, 9.999999999998899e-05, 0.030103667037954085, 9.999999999998899e-05, 0.02858603027090889, 9.999999999998899e-05, 0.0033020079791891144, 9.999999999998899e-05, 0.036927585911736616, 0.000589260694455862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00094458517740037, 9.999999999998899e-05, 0.01860560245993781, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05057519723747883, 0.03559086282124968, 0.04369307206073936, 0.0265881501580012, 0.0846300913607756, 0.03531927464552098, 0.05685254231978365, 0.04703742369125341, 0.04686053304781468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19650751141099698, 0.2025701305070443, 0.17928551494216494, 0.19410728738841687, 0.18703500902323666, 0.1955011996417566, 0.2053450256098598, 0.19006061076858938, 0.17435391541019218, 0.04158944674693721, 0.05229284013315938, 0.039857455014953524, 0.035140873207239354, 0.04546153555504495, 0.032946635650722755, 0.07059762903380651, 0.045511095655969225, 0.04925897434306148, 0.15735858885439757, 0.11948865267513087, 0.11816301464390433, 0.14488259786444524, 0.13485432251042861, 0.1499718011816169, 0.17352105334607526, 0.14938191508672094, 0.1294428499303707, 0.15989252556612066, 0.17392678617035728, 0.16122588015371386, 0.1642757252914524, 0.15854429085518784, 0.16134569538601373, 0.17512031333643951, 0.17366814759375027, 0.20435478644412264, 0.10405421583400531, 0.10011772692164145, 0.09489978976976943, 0.10499885267893028, 0.14652287597807623, 0.12640300518160308, 0.1119132250024455, 0.11178053406466693, 0.11297174616752126, 0.15178195872778688, 0.1631930057732578, 0.14049535190092943, 0.14604512571882733, 0.16256472701399338, 0.13918333268668626, 0.16058264558014967, 0.1457509032877763, 0.16026573021094226, 0.14116448142298, 0.15140387364343766, 0.13112239391400526, 0.1265176388696937, 0.1453553729818876, 0.1390479705316593, 0.13336290122904515, 0.1507740672624006, 0.1605084278214981, 0.1720201359844139, 0.16546419234334897, 0.14699598806467906, 0.2867583806761681, 0.13107235019725727, 0.15825610903944676, 0.14757638754158886, 0.19591518370506755, 0.1637896330590849, 0.11645020615986501, 0.11700310611390508, 0.15609626142865984, 0.16639385621739133, 0.17084513086417807, 0.1319319171387755, 0.13814389324023413, 0.19547948972610452, 0.22127857711447108, 0.17525364567732016, 0.18185554815726002, 0.17641566908852746, 0.18534642952815927, 0.1822871997641382, 0.176371522492775, 0.1846683213846556, 0.18052894761894533, 0.1834469529876277, 0.04371952763332432, 0.06404195440218263, 0.07285866754002635, 0.04671363328689715, 0.06526766755752067, 0.047574019369695075, 0.05971379599541127, 0.047571816708397496, 0.05398747599063314]}, "mutation_prompt": null}
{"id": "7fa49a55-1ce1-47fe-a6ed-022e545e63f0", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.9\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        else:\n            x_new = self.crossover(x, self.levy_flight(x))\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 97, "fitness": 0.10856899101177431, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.13.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.1637669232711889, 0.15548129296116697, 0.14802789422300788, 0.17513788492342808, 0.15698231136623875, 0.1634250489258462, 0.16030379271881867, 0.16621313783801672, 0.19566577023463994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044053871585194804, 0.041043652587398505, 0.04346839628218535, 0.04101377765625369, 0.035830348984483895, 0.04744335329905225, 0.046996049218103186, 0.04132989007644372, 0.03720934071492743, 0.04148831118978469, 0.03367838432208481, 0.030020057104642506, 0.034974910545409466, 0.04221684227200362, 0.03072032742704922, 0.035841777570486566, 0.050457815154201335, 0.049629156368569016, 0.9735762271786916, 0.1284985575748666, 0.9522841867249648, 0.4824506370064099, 0.6554635896659544, 0.158817357732436, 0.22339729747797266, 0.16976834275238706, 0.9240127081933291, 0.09326133044293161, 0.062078560844483044, 0.08361457888055812, 0.08815580336898199, 0.0923610730036668, 0.0797287114973878, 0.08462322039762205, 0.07890825928399825, 0.08467461654368835, 0.14954241572538884, 0.12564689821271202, 0.12436988098759938, 0.11334621892016572, 0.14198519997575254, 0.1265026879921799, 0.11833211813359046, 0.1609554400898141, 0.1236099243058959, 0.0004862283501985143, 9.999999999998899e-05, 0.00010414953769943835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020015180524878273, 0.002186531948606407, 0.01998792174490882, 0.0060895254794013365, 0.0032046019731893916, 9.999999999998899e-05, 9.999999999998899e-05, 0.011106837590522112, 0.01220823062055676, 0.021240567758567308, 9.999999999998899e-05, 0.001906686261924917, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04442801065383517, 0.06634253939543377, 0.05078219855673671, 0.07422562166748103, 0.09490859489165648, 0.057396860897527935, 0.03970713990983277, 0.12805938162385133, 0.060594313841496605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005329992579823917, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1846933438909376, 0.197690379491674, 0.21859780953597485, 0.18795939636132453, 0.1866495997088179, 0.18092417223635637, 0.19480296067078784, 0.21084830437852886, 0.2041591933546637, 0.04666853430611895, 0.04060824634151672, 0.04367394867004626, 0.03881495593329398, 0.03055250285809108, 0.037489542516172314, 0.04363795200717191, 0.05586776341081001, 0.052892307814823125, 0.13172031475103085, 0.1361331002193239, 0.16324329669142612, 0.1484843195257739, 0.16615921334386674, 0.14016171099164, 0.14696305130348752, 0.13900968314708861, 0.1345064580039771, 0.16550097192758662, 0.1591559007500446, 0.16276099116662612, 0.15596559757534978, 0.1499718269861915, 0.17103352907492064, 0.15492161721034703, 0.17367726760139324, 0.17080317273788537, 0.13236026070496232, 0.10869984192591309, 0.10597179999280526, 0.10886198408672831, 0.12453324294599077, 0.10754600537979897, 0.10691714509306094, 0.12205825574559692, 0.09840642000586197, 0.1436016955851226, 0.16439124435057673, 0.17841935368522788, 0.16230628395090985, 0.15859104058746576, 0.1605756987575906, 0.15439461000208177, 0.1583045070707627, 0.1664591384289601, 0.14206688138730694, 0.1481600952542942, 0.14021260114221046, 0.14001363569199698, 0.14246877716805206, 0.14327909340780365, 0.1353799042945295, 0.1402406257938965, 0.1605084278214981, 0.17206857884414672, 0.16668537648747828, 0.18987157016750045, 0.201818596358873, 0.16416999795948928, 0.19341326157838612, 0.1462355270541369, 0.16966052701887857, 0.18117632573218223, 0.12888772913795232, 0.17188718727180274, 0.14856422705008532, 0.1506694540957496, 0.15274122306988613, 0.13781185884257596, 0.17112493466461987, 0.16091948483892937, 0.1566922114949284, 0.21648346250369443, 0.20044938455698746, 0.2016476027896198, 0.20040722138729106, 0.17892541271084805, 0.18553156746021293, 0.20206221970817617, 0.19367843252430972, 0.1858888382041548, 0.06021032003811544, 0.04956282789588273, 0.04019661843150535, 0.05227161817977033, 0.05632604707309552, 0.0648341433302454, 0.07642840157659192, 0.05540989786765027, 0.06587484881162842]}, "mutation_prompt": null}
{"id": "660b48ab-b574-4623-a158-b9a9c20ab19f", "solution": "import numpy as np\nimport random\n\nclass AdaptiveLevyCMAES:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)", "name": "AdaptiveLevyCMAES", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 98, "fitness": 0.12083643434223497, "feedback": "The algorithm AdaptiveLevyCMAES got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.16638691023050267, 0.16939988483239954, 0.15951205456195328, 0.20670696027382496, 0.2060137817084805, 0.17269655088547808, 0.1668363594787381, 0.15100000380030032, 0.16716207904792268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03835174913886763, 0.036265987399315414, 0.04006063853939634, 0.04308783114735548, 0.03685033273995775, 0.04367714551795021, 0.03822035659511114, 0.04964478561112751, 0.0446011445528367, 0.02231991911813913, 0.03491575820164494, 0.026550467671818456, 0.03536435534591309, 0.05194262394368687, 0.040283138152608644, 0.022176923804681836, 0.019252763142042606, 0.02363898695539579, 0.9998047723085209, 0.9872608581926082, 0.8621174545700219, 0.8461643589220582, 0.8396786345546264, 0.9314169022958609, 0.9978699917270106, 0.9681579337266463, 0.9814419980521225, 0.07139981359147984, 0.07419605467972856, 0.06315016173795229, 0.0674110872539817, 0.04550329501560335, 0.05577242025846685, 0.08647306595946991, 0.08317990823617805, 0.057032838401909425, 0.10737551947322721, 0.14336571399301412, 0.11583919375077023, 0.10613328288350621, 0.13621759238499076, 0.09030999409092588, 0.1190022151489859, 0.11777535529491945, 0.14052742244705319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003832389353144783, 0.01290670802056959, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009450456686453945, 0.008675686244280723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017880330881226092, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04442511531163784, 0.04170985608308131, 0.03319917157372332, 0.03981957981403572, 0.020718418299428776, 0.04485417099945155, 0.022004942058063026, 0.08626656127791432, 0.05410150890598542, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2068101984831603, 0.20245553747376943, 0.18063342542986371, 0.18187023866187657, 0.18792877301512356, 0.21203753786383572, 0.176878103026486, 0.17963774005733446, 0.18980226686847657, 0.0334462416504312, 0.042881078688447816, 0.0486025520083897, 0.03281632006439106, 0.03331720064314936, 0.0703384249013208, 0.0327915516023386, 0.03702671371016297, 0.04371430436851953, 0.11612191987766252, 0.12979115875360658, 0.1485262097032357, 0.1374793471039184, 0.14121129394791554, 0.1280095983115751, 0.14513173527230427, 0.13085374982720532, 0.13553276228729882, 0.17373890531499492, 0.1554763366407519, 0.16727492703371394, 0.16265167101997413, 0.1534575584747696, 0.17673210813384554, 0.16274429301995552, 0.17367770484189082, 0.16084741744578257, 0.08955271706996115, 0.09251000455430625, 0.10131465638249226, 0.09671229077363319, 0.1069279350657153, 0.11088399996583143, 0.12004005487407954, 0.10729366279628827, 0.10705576526575933, 0.13733000085452418, 0.14820418099394883, 0.13946711790113553, 0.177966537652389, 0.15161574226976426, 0.1564859464613586, 0.17071162637493742, 0.1428779213335245, 0.15077367356175964, 0.1367630297085618, 0.1423833828831752, 0.1423465399792565, 0.1368788022879669, 0.14575533104338434, 0.13775843286694578, 0.1415997658200726, 0.14429667417551484, 0.1605084278214981, 0.17691513406947912, 0.15440641322334392, 0.17144152211589103, 0.1525311072976303, 0.19789196377015716, 0.1532257216172238, 0.15468405094158588, 0.13968317611843561, 0.14185210676342086, 0.1847857501265192, 0.16268989125443856, 0.17063082958709597, 0.11336024782636156, 0.12158876790603279, 0.1612782334944599, 0.16123747853132941, 0.17017323309694932, 0.13716664089460096, 0.17596149767170477, 0.20457127225502558, 0.1833581058923136, 0.1785207650523889, 0.21487650069398223, 0.18067257920501156, 0.18921701471338814, 0.18737741549540632, 0.17753019421887506, 0.055731069231218844, 0.053139657845392874, 0.04792942756083862, 0.05670569525416436, 0.05122633620062167, 0.041557177024934555, 0.04326451661443731, 0.04781786761348117, 0.05367251463907563]}, "mutation_prompt": null}
{"id": "37b43683-3830-4b39-9876-dbc67d7ab240", "solution": "import numpy as np\nimport random\n\nclass ADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\nclass HybridADMDF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\nclass HybridADMDFWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 100\n        self.crossover_probability = 0.9\n        self.mutation_probability = 0.1\n        self.levy_flight_probability = 0.05\n        self.self_adaptive_parameter_control_probability = 0.05\n        self.sigma = 0.1\n        self.F = 0.5\n        self.x_best = np.random.uniform(-5.0, 5.0, dim)\n        self.f_best = float('inf')\n        self.probability_change_individual_lines = 0.1\n\n    def levy_flight(self, x):\n        sigma = 0.01\n        u = np.random.normal(0, sigma)\n        v = np.random.normal(0, sigma)\n        step_size = np.abs(u) / np.abs(v)\n        return x + step_size * (x - np.random.uniform(-5.0, 5.0, self.dim))\n\n    def self_adaptive_parameter_control(self):\n        self.sigma = np.random.uniform(0.01, 0.1)\n        self.F = np.random.uniform(0.1, 1.0)\n\n    def crossover(self, x1, x2):\n        if random.random() < self.crossover_probability:\n            return (x1 + x2) / 2\n        else:\n            return x1\n\n    def mutation(self, x):\n        if random.random() < self.mutation_probability:\n            return self.levy_flight(x)\n        else:\n            return x + np.random.uniform(-1.0, 1.0, self.dim)\n\n    def update_selected_solution(self, x):\n        x_new = self.mutation(x)\n        if random.random() < self.probability_change_individual_lines:\n            index = random.randint(0, self.dim - 1)\n            x_new[index] = np.random.uniform(-5.0, 5.0)\n        elif random.random() < 0.9:\n            x_new = self.crossover(x, self.levy_flight(x))\n        else:\n            x_new = self.update_selected_solution(x)\n        return x_new\n\n    def local_search(self, x):\n        x_new = x\n        for i in range(self.dim):\n            x_new[i] += np.random.uniform(-1.0, 1.0)\n            if func(x_new) < func(x):\n                x_new[i] = np.random.uniform(-5.0, 5.0)\n        return x_new\n\n    def optimize(self, func):\n        for _ in range(self.budget):\n            population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n            for i in range(self.population_size):\n                x_new = self.update_selected_solution(population[i])\n                x_new = self.local_search(x_new)\n                if func(x_new) < func(population[i]):\n                    population[i] = x_new\n            self.x_best = np.min(population, axis=0)\n            self.f_best = func(self.x_best)\n            if random.random() < self.self_adaptive_parameter_control_probability:\n                self.self_adaptive_parameter_control()\n        return self.x_best, self.f_best\n\n    def __call__(self, func):\n        return self.optimize(func)\n\n# Code to test the HybridADMDFWithLocalSearch algorithm\nif __name__ == \"__main__\":\n    budget = 1000\n    dim = 10\n    func = lambda x: x[0]**2 + x[1]**2\n    hybrid_admdf = HybridADMDFWithLocalSearch(budget, dim)\n    x_best, f_best = hybrid_admdf(func)\n    print(\"Best solution:\", x_best)\n    print(\"Best function value:\", f_best)", "name": "ADMDF", "description": "Adaptive Multi-Directional Differential Evolution with Levy Flights, Self-Adaptive Parameter Control, and Crossover with Levy Flight, modified to handle BBOB test suite with a refined strategy to reduce the probability of self-adaptive parameter control by introducing a probability of 0.1 to change the individual lines of the selected solution and probability 0.9 to change the individual lines of the selected solution using crossover with levy flight.", "configspace": "", "generation": 99, "fitness": 0.1235689250214725, "feedback": "The algorithm ADMDF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "c31144c5-1fc6-4032-8df5-90609bd280eb", "metadata": {"aucs": [0.16185277813549515, 0.1796356056266326, 0.18537598288922874, 0.1564326081966083, 0.1618112541616945, 0.16217849967780695, 0.1603285380214574, 0.1561392811331067, 0.16578571228938932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040050154090429224, 0.07384616247977815, 0.03526315773690458, 0.04127302062894067, 0.03573064854151731, 0.04376076213515023, 0.047413998280182335, 0.03692572261761218, 0.03815573448371501, 0.0263361281940101, 0.053737103547165876, 0.020451631590277297, 0.023511947458796256, 0.028558480222024785, 0.030749668569221122, 0.028331061614919384, 0.03410559679752001, 0.027502341527177343, 0.8996443422279704, 0.9909751946463048, 0.98908576841256, 0.9713663536773378, 0.9488320617049162, 0.9398097612603797, 0.962894208658777, 0.9918556447471422, 0.9812428788819834, 0.07537791115867098, 0.07806855632140419, 0.10371245580781274, 0.06858177652009834, 0.07569344138668477, 0.073832882049647, 0.08645504454135278, 0.08376732114219265, 0.05753966749271, 0.13117129940415995, 0.13351734619519406, 0.110610566630709, 0.09747185677804482, 0.1262265971198131, 0.10105898624671483, 0.11568391843902359, 0.10164799389018409, 0.15761917060106867, 9.999999999998899e-05, 0.01944221386971623, 0.0033264741922682806, 0.008110623171765252, 0.0038961441737206393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03586298006507549, 9.999999999998899e-05, 0.024010542251314604, 0.0007258982022169125, 0.0019194983681005695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026091732684753732, 0.03815130187867055, 0.049694582193464676, 0.05192375472344479, 0.015680921903502565, 0.051791038501403985, 0.06313112291609924, 0.05575891685619694, 0.07123684204110936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00852470844174913, 9.999999999998899e-05, 0.17973225179960428, 0.19111798322920215, 0.18391705812571613, 0.17557766423133803, 0.19059031770345813, 0.19593908236755864, 0.1811204930833965, 0.17706277721000785, 0.187390797733344, 0.05159283366002132, 0.03701836523252422, 0.05165348151596083, 0.03963294186563493, 0.043618219446142414, 0.07108060115670178, 0.05214766605019672, 0.039645943419851726, 0.0401992848678554, 0.12504402002776005, 0.12055272221641156, 0.14458540758954153, 0.13746487846082256, 0.1401157150978024, 0.12955325893482694, 0.1566378209102064, 0.1434822341959967, 0.11475120349368118, 0.159357544355768, 0.17088189108125185, 0.16122263693773675, 0.15662749374219476, 0.15978947002494426, 0.16798469121838422, 0.1746990534420535, 0.1736741986870145, 0.16482492460438825, 0.09233252640847767, 0.10475761749742374, 0.11714130586230354, 0.10598447725548998, 0.14624566971829245, 0.10726624476668367, 0.11687794122976924, 0.11177889201326197, 0.1274814440672415, 0.16289720350546144, 0.16432955316226505, 0.19088834374646824, 0.13529176168017054, 0.14871916854977119, 0.16180278993968256, 0.15345762011428743, 0.16506556199223377, 0.15559994455180182, 0.14689491471899396, 0.09504504058363383, 0.13592458718260136, 0.129261644835856, 0.1340259608843708, 0.14264243166589607, 0.14210211668334682, 0.12129184141251481, 0.16055999454085235, 0.13843012163671242, 0.14778500634028202, 0.16208101765090432, 0.14531475903972912, 0.1421554394743223, 0.14556364075949646, 0.15248672325408386, 0.1652692486707138, 0.16116760948091502, 0.18308692720950692, 0.13748673515201504, 0.14383646297508823, 0.1458550423022481, 0.15027850068022586, 0.22267425572792332, 0.2149634190558456, 0.18165729185351265, 0.16667248344600794, 0.1996421836183716, 0.19171137893976864, 0.16858433968829045, 0.19893329340788946, 0.19503492944164347, 0.19074003016811225, 0.1737199129700654, 0.18437441205280158, 0.2055012235204582, 0.05036677294973779, 0.05218486501816533, 0.04863387184455026, 0.05191011208470775, 0.05794257578478679, 0.04407399060957229, 0.049156035025872735, 0.05436158862336338, 0.05853219486772543]}, "mutation_prompt": null}
