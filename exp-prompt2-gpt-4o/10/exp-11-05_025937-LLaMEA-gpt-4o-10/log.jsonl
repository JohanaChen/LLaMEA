{"id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "A dynamic multi-swarm particle optimization leveraging adaptive exploration-exploitation balance for efficient search.", "configspace": "", "generation": 0, "fitness": 0.26876459504535144, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8239049675248243, 0.8204093691457087, 0.8355088040076538, 0.8299666679057591, 0.8161400678335301, 0.8282721433735332, 0.8169924701374343, 0.7980185114456165, 0.8239648307567436, 0.08110456168630242, 0.39371072859491707, 0.39430849227224496, 0.16826264718748185, 0.09161639049684833, 0.13151535950445103, 0.6247975978109348, 0.6374327784626551, 0.26571965796958785, 0.06902972464562918, 0.13932058971224381, 0.0755412376551523, 0.05548122503275921, 0.10737558794076008, 0.11628336471009948, 0.06763311670095751, 0.13862590891540927, 0.09015569663410006, 0.05663508575173004, 0.07050085314814791, 0.09401219610615685, 0.09339173604584905, 0.09060477501287845, 0.11149919413143816, 0.09480226839299466, 0.0913189341466425, 0.17678748577805603, 0.957427935321915, 0.9515287385727481, 0.9581406410355722, 0.9519818098095244, 0.9375279139990159, 0.9360582316035894, 0.9538487852666019, 0.9386069775609288, 0.9564035405952274, 0.20579868436182636, 0.5411949485506761, 0.2993220137652223, 0.5408993772551054, 0.736063542761216, 0.7487356825476315, 0.7682737753957498, 0.5703487152845351, 0.6615797451633953, 0.22685392276790417, 0.21686263569771713, 0.21569193027474953, 0.1938667344041245, 0.3225363859531327, 0.2170387331467788, 0.10734388365523628, 0.1260665733080758, 0.13461679110725622, 0.1677583629831595, 0.2855444132242163, 0.1567167792942542, 0.16852377867252455, 0.13962329306614196, 0.12877464711364717, 0.14083335899083926, 0.22722988288431656, 0.2432844752777853, 0.36175436543479567, 0.2174963927855269, 0.12156904293872162, 0.29619734847681034, 0.2230463038438235, 0.1320033554734824, 0.11911249840691995, 0.13095958981141853, 0.2826216560693303, 0.01312731431914893, 0.1696797448028825, 9.999999999998899e-05, 9.999999999998899e-05, 0.002436459190251483, 9.999999999998899e-05, 0.05277356471437966, 0.015028271070205101, 9.999999999998899e-05, 0.14890347394425518, 0.021465782014701285, 0.07798160892531847, 0.05273859621735555, 0.017341784592802778, 0.013123131664380394, 0.05929635252948884, 0.08981826959564365, 0.04323807834735416, 0.18145989100428206, 0.10933539476200693, 0.15885648616255565, 0.14592231192699368, 0.209920100152314, 0.11900930627103046, 0.3533538102511885, 0.13914355959735825, 0.06621412528275827, 0.18294818047036143, 0.016046995925759977, 0.08294791304277116, 0.09222504707260815, 0.13092576600028027, 0.17159328791722384, 0.07610497356704105, 0.061565679173173016, 0.08053626673863656, 0.5133138563297359, 0.5485016276530972, 0.5512816919970147, 0.5253097600461871, 0.5079464750424072, 0.5027122013637189, 0.5748197935533119, 0.5219089070281999, 0.5053050463822458, 0.09888007162366796, 0.06123056498789625, 0.06866206835569033, 0.06888244000807076, 0.1199648445997773, 0.13972618982001805, 0.08100103400046232, 0.06836886353830618, 0.07901239738103338, 0.22312605586223266, 0.2581464415818424, 0.22889659966586362, 0.19137970720846564, 0.28747463134918794, 0.22063085493332046, 0.1547316989764107, 0.29272246470522123, 0.20808932927193857, 0.3322979981995655, 0.25535563826368723, 0.3711420897790517, 0.21755161291235126, 0.28664123873824954, 0.2928459402748469, 0.23687294909426104, 0.2688982987138715, 0.23232597836451752, 0.14564189405753036, 0.23033454207492676, 0.3255272254718219, 0.16552443319748034, 0.19934086006082807, 0.2150280353529891, 0.1976700613376272, 0.18874002922488253, 0.14118801338871112, 0.17746844622058655, 0.24881780785601193, 0.20367901977904102, 0.23299485671439357, 0.25104078267602503, 0.20764902337017355, 0.26753900774153117, 0.21106966522527348, 0.18936655644098543, 0.17721905323491405, 0.1713302107575262, 0.17480628232539164, 0.19132035446883744, 0.19736600309460528, 0.19463803446645045, 0.16448511789423503, 0.17225426000075472, 0.18461959864408695, 0.12408838586119875, 0.17467226148796322, 0.18559734688219065, 0.8840864233539545, 0.1990424117200702, 0.1720227429134853, 0.14017819325547043, 0.16115503036110002, 0.8657465168823701, 0.6730839034347307, 0.2095153835924335, 0.07327626213342975, 0.5369786635879079, 0.15421097920018967, 0.15346266008324871, 0.10452654326053523, 0.104460325198232, 0.78832419728891, 0.23107447935162106, 0.2117953276922192, 0.251759123961417, 0.20003318227189737, 0.21776535825272414, 0.23096831812695695, 0.2241145546703247, 0.24420725772211838, 0.25098922457367545, 0.10851039977154453, 0.08811679236044478, 0.05479199070721896, 0.05894514177171006, 0.09614316312280025, 0.0747240681651099, 0.1033432189313429, 0.10389305931947779, 0.08115835410562444]}, "mutation_prompt": null}
{"id": "b7575056-5081-41ba-9b2a-feb51dd7d88f", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "A dynamic multi-swarm particle optimization leveraging adaptive exploration-exploitation balance for efficient search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.8239049675248243, 0.8204093691457087, 0.8355088040076538, 0.8299666679057591, 0.8161400678335301, 0.8282721433735332, 0.8169924701374343, 0.7980185114456165, 0.8239648307567436, 0.08110456168630242, 0.39371072859491707, 0.39430849227224496, 0.16826264718748185, 0.09161639049684833, 0.13151535950445103, 0.6247975978109348, 0.6374327784626551, 0.26571965796958785, 0.06902972464562918, 0.13932058971224381, 0.0755412376551523, 0.05548122503275921, 0.10737558794076008, 0.11628336471009948, 0.06763311670095751, 0.13862590891540927, 0.09015569663410006, 0.05663508575173004, 0.07050085314814791, 0.09401219610615685, 0.09339173604584905, 0.09060477501287845, 0.11149919413143816, 0.09480226839299466, 0.0913189341466425, 0.17678748577805603, 0.957427935321915, 0.9515287385727481, 0.9581406410355722, 0.9519818098095244, 0.9375279139990159, 0.9360582316035894, 0.9538487852666019, 0.9386069775609288, 0.9564035405952274, 0.20579868436182636, 0.5411949485506761, 0.2993220137652223, 0.5408993772551054, 0.736063542761216, 0.7487356825476315, 0.7682737753957498, 0.5703487152845351, 0.6615797451633953, 0.22685392276790417, 0.21686263569771713, 0.21569193027474953, 0.1938667344041245, 0.3225363859531327, 0.2170387331467788, 0.10734388365523628, 0.1260665733080758, 0.13461679110725622, 0.1677583629831595, 0.2855444132242163, 0.1567167792942542, 0.16852377867252455, 0.13962329306614196, 0.12877464711364717, 0.14083335899083926, 0.22722988288431656, 0.2432844752777853, 0.36175436543479567, 0.2174963927855269, 0.12156904293872162, 0.29619734847681034, 0.2230463038438235, 0.1320033554734824, 0.11911249840691995, 0.13095958981141853, 0.2826216560693303, 0.01312731431914893, 0.1696797448028825, 9.999999999998899e-05, 9.999999999998899e-05, 0.002436459190251483, 9.999999999998899e-05, 0.05277356471437966, 0.015028271070205101, 9.999999999998899e-05, 0.14890347394425518, 0.021465782014701285, 0.07798160892531847, 0.05273859621735555, 0.017341784592802778, 0.013123131664380394, 0.05929635252948884, 0.08981826959564365, 0.04323807834735416, 0.18145989100428206, 0.10933539476200693, 0.15885648616255565, 0.14592231192699368, 0.209920100152314, 0.11900930627103046, 0.3533538102511885, 0.13914355959735825, 0.06621412528275827, 0.18294818047036143, 0.016046995925759977, 0.08294791304277116, 0.09222504707260815, 0.13092576600028027, 0.17159328791722384, 0.07610497356704105, 0.061565679173173016, 0.08053626673863656, 0.5133138563297359, 0.5485016276530972, 0.5512816919970147, 0.5253097600461871, 0.5079464750424072, 0.5027122013637189, 0.5748197935533119, 0.5219089070281999, 0.5053050463822458, 0.09888007162366796, 0.06123056498789625, 0.06866206835569033, 0.06888244000807076, 0.1199648445997773, 0.13972618982001805, 0.08100103400046232, 0.06836886353830618, 0.07901239738103338, 0.22312605586223266, 0.2581464415818424, 0.22889659966586362, 0.19137970720846564, 0.28747463134918794, 0.22063085493332046, 0.1547316989764107, 0.29272246470522123, 0.20808932927193857, 0.3322979981995655, 0.25535563826368723, 0.3711420897790517, 0.21755161291235126, 0.28664123873824954, 0.2928459402748469, 0.23687294909426104, 0.2688982987138715, 0.23232597836451752, 0.14564189405753036, 0.23033454207492676, 0.3255272254718219, 0.16552443319748034, 0.19934086006082807, 0.2150280353529891, 0.1976700613376272, 0.18874002922488253, 0.14118801338871112, 0.17746844622058655, 0.24881780785601193, 0.20367901977904102, 0.23299485671439357, 0.25104078267602503, 0.20764902337017355, 0.26753900774153117, 0.21106966522527348, 0.18936655644098543, 0.17721905323491405, 0.1713302107575262, 0.17480628232539164, 0.19132035446883744, 0.19736600309460528, 0.19463803446645045, 0.16448511789423503, 0.17225426000075472, 0.18461959864408695, 0.12408838586119875, 0.17467226148796322, 0.18559734688219065, 0.8840864233539545, 0.1990424117200702, 0.1720227429134853, 0.14017819325547043, 0.16115503036110002, 0.8657465168823701, 0.6730839034347307, 0.2095153835924335, 0.07327626213342975, 0.5369786635879079, 0.15421097920018967, 0.15346266008324871, 0.10452654326053523, 0.104460325198232, 0.78832419728891, 0.23107447935162106, 0.2117953276922192, 0.251759123961417, 0.20003318227189737, 0.21776535825272414, 0.23096831812695695, 0.2241145546703247, 0.24420725772211838, 0.25098922457367545, 0.10851039977154453, 0.08811679236044478, 0.05479199070721896, 0.05894514177171006, 0.09614316312280025, 0.0747240681651099, 0.1033432189313429, 0.10389305931947779, 0.08115835410562444]}, "mutation_prompt": null}
{"id": "2d3fb2e1-2cb2-4a92-8e3f-c35be3adca54", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "A dynamic multi-swarm particle optimization leveraging adaptive exploration-exploitation balance for efficient search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.8239049675248243, 0.8204093691457087, 0.8355088040076538, 0.8299666679057591, 0.8161400678335301, 0.8282721433735332, 0.8169924701374343, 0.7980185114456165, 0.8239648307567436, 0.08110456168630242, 0.39371072859491707, 0.39430849227224496, 0.16826264718748185, 0.09161639049684833, 0.13151535950445103, 0.6247975978109348, 0.6374327784626551, 0.26571965796958785, 0.06902972464562918, 0.13932058971224381, 0.0755412376551523, 0.05548122503275921, 0.10737558794076008, 0.11628336471009948, 0.06763311670095751, 0.13862590891540927, 0.09015569663410006, 0.05663508575173004, 0.07050085314814791, 0.09401219610615685, 0.09339173604584905, 0.09060477501287845, 0.11149919413143816, 0.09480226839299466, 0.0913189341466425, 0.17678748577805603, 0.957427935321915, 0.9515287385727481, 0.9581406410355722, 0.9519818098095244, 0.9375279139990159, 0.9360582316035894, 0.9538487852666019, 0.9386069775609288, 0.9564035405952274, 0.20579868436182636, 0.5411949485506761, 0.2993220137652223, 0.5408993772551054, 0.736063542761216, 0.7487356825476315, 0.7682737753957498, 0.5703487152845351, 0.6615797451633953, 0.22685392276790417, 0.21686263569771713, 0.21569193027474953, 0.1938667344041245, 0.3225363859531327, 0.2170387331467788, 0.10734388365523628, 0.1260665733080758, 0.13461679110725622, 0.1677583629831595, 0.2855444132242163, 0.1567167792942542, 0.16852377867252455, 0.13962329306614196, 0.12877464711364717, 0.14083335899083926, 0.22722988288431656, 0.2432844752777853, 0.36175436543479567, 0.2174963927855269, 0.12156904293872162, 0.29619734847681034, 0.2230463038438235, 0.1320033554734824, 0.11911249840691995, 0.13095958981141853, 0.2826216560693303, 0.01312731431914893, 0.1696797448028825, 9.999999999998899e-05, 9.999999999998899e-05, 0.002436459190251483, 9.999999999998899e-05, 0.05277356471437966, 0.015028271070205101, 9.999999999998899e-05, 0.14890347394425518, 0.021465782014701285, 0.07798160892531847, 0.05273859621735555, 0.017341784592802778, 0.013123131664380394, 0.05929635252948884, 0.08981826959564365, 0.04323807834735416, 0.18145989100428206, 0.10933539476200693, 0.15885648616255565, 0.14592231192699368, 0.209920100152314, 0.11900930627103046, 0.3533538102511885, 0.13914355959735825, 0.06621412528275827, 0.18294818047036143, 0.016046995925759977, 0.08294791304277116, 0.09222504707260815, 0.13092576600028027, 0.17159328791722384, 0.07610497356704105, 0.061565679173173016, 0.08053626673863656, 0.5133138563297359, 0.5485016276530972, 0.5512816919970147, 0.5253097600461871, 0.5079464750424072, 0.5027122013637189, 0.5748197935533119, 0.5219089070281999, 0.5053050463822458, 0.09888007162366796, 0.06123056498789625, 0.06866206835569033, 0.06888244000807076, 0.1199648445997773, 0.13972618982001805, 0.08100103400046232, 0.06836886353830618, 0.07901239738103338, 0.22312605586223266, 0.2581464415818424, 0.22889659966586362, 0.19137970720846564, 0.28747463134918794, 0.22063085493332046, 0.1547316989764107, 0.29272246470522123, 0.20808932927193857, 0.3322979981995655, 0.25535563826368723, 0.3711420897790517, 0.21755161291235126, 0.28664123873824954, 0.2928459402748469, 0.23687294909426104, 0.2688982987138715, 0.23232597836451752, 0.14564189405753036, 0.23033454207492676, 0.3255272254718219, 0.16552443319748034, 0.19934086006082807, 0.2150280353529891, 0.1976700613376272, 0.18874002922488253, 0.14118801338871112, 0.17746844622058655, 0.24881780785601193, 0.20367901977904102, 0.23299485671439357, 0.25104078267602503, 0.20764902337017355, 0.26753900774153117, 0.21106966522527348, 0.18936655644098543, 0.17721905323491405, 0.1713302107575262, 0.17480628232539164, 0.19132035446883744, 0.19736600309460528, 0.19463803446645045, 0.16448511789423503, 0.17225426000075472, 0.18461959864408695, 0.12408838586119875, 0.17467226148796322, 0.18559734688219065, 0.8840864233539545, 0.1990424117200702, 0.1720227429134853, 0.14017819325547043, 0.16115503036110002, 0.8657465168823701, 0.6730839034347307, 0.2095153835924335, 0.07327626213342975, 0.5369786635879079, 0.15421097920018967, 0.15346266008324871, 0.10452654326053523, 0.104460325198232, 0.78832419728891, 0.23107447935162106, 0.2117953276922192, 0.251759123961417, 0.20003318227189737, 0.21776535825272414, 0.23096831812695695, 0.2241145546703247, 0.24420725772211838, 0.25098922457367545, 0.10851039977154453, 0.08811679236044478, 0.05479199070721896, 0.05894514177171006, 0.09614316312280025, 0.0747240681651099, 0.1033432189313429, 0.10389305931947779, 0.08115835410562444]}, "mutation_prompt": null}
{"id": "f3c1c932-cbc0-4024-8207-dc2bf24df963", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "A dynamic multi-swarm particle optimization leveraging adaptive exploration-exploitation balance for efficient search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.8239049675248243, 0.8204093691457087, 0.8355088040076538, 0.8299666679057591, 0.8161400678335301, 0.8282721433735332, 0.8169924701374343, 0.7980185114456165, 0.8239648307567436, 0.08110456168630242, 0.39371072859491707, 0.39430849227224496, 0.16826264718748185, 0.09161639049684833, 0.13151535950445103, 0.6247975978109348, 0.6374327784626551, 0.26571965796958785, 0.06902972464562918, 0.13932058971224381, 0.0755412376551523, 0.05548122503275921, 0.10737558794076008, 0.11628336471009948, 0.06763311670095751, 0.13862590891540927, 0.09015569663410006, 0.05663508575173004, 0.07050085314814791, 0.09401219610615685, 0.09339173604584905, 0.09060477501287845, 0.11149919413143816, 0.09480226839299466, 0.0913189341466425, 0.17678748577805603, 0.957427935321915, 0.9515287385727481, 0.9581406410355722, 0.9519818098095244, 0.9375279139990159, 0.9360582316035894, 0.9538487852666019, 0.9386069775609288, 0.9564035405952274, 0.20579868436182636, 0.5411949485506761, 0.2993220137652223, 0.5408993772551054, 0.736063542761216, 0.7487356825476315, 0.7682737753957498, 0.5703487152845351, 0.6615797451633953, 0.22685392276790417, 0.21686263569771713, 0.21569193027474953, 0.1938667344041245, 0.3225363859531327, 0.2170387331467788, 0.10734388365523628, 0.1260665733080758, 0.13461679110725622, 0.1677583629831595, 0.2855444132242163, 0.1567167792942542, 0.16852377867252455, 0.13962329306614196, 0.12877464711364717, 0.14083335899083926, 0.22722988288431656, 0.2432844752777853, 0.36175436543479567, 0.2174963927855269, 0.12156904293872162, 0.29619734847681034, 0.2230463038438235, 0.1320033554734824, 0.11911249840691995, 0.13095958981141853, 0.2826216560693303, 0.01312731431914893, 0.1696797448028825, 9.999999999998899e-05, 9.999999999998899e-05, 0.002436459190251483, 9.999999999998899e-05, 0.05277356471437966, 0.015028271070205101, 9.999999999998899e-05, 0.14890347394425518, 0.021465782014701285, 0.07798160892531847, 0.05273859621735555, 0.017341784592802778, 0.013123131664380394, 0.05929635252948884, 0.08981826959564365, 0.04323807834735416, 0.18145989100428206, 0.10933539476200693, 0.15885648616255565, 0.14592231192699368, 0.209920100152314, 0.11900930627103046, 0.3533538102511885, 0.13914355959735825, 0.06621412528275827, 0.18294818047036143, 0.016046995925759977, 0.08294791304277116, 0.09222504707260815, 0.13092576600028027, 0.17159328791722384, 0.07610497356704105, 0.061565679173173016, 0.08053626673863656, 0.5133138563297359, 0.5485016276530972, 0.5512816919970147, 0.5253097600461871, 0.5079464750424072, 0.5027122013637189, 0.5748197935533119, 0.5219089070281999, 0.5053050463822458, 0.09888007162366796, 0.06123056498789625, 0.06866206835569033, 0.06888244000807076, 0.1199648445997773, 0.13972618982001805, 0.08100103400046232, 0.06836886353830618, 0.07901239738103338, 0.22312605586223266, 0.2581464415818424, 0.22889659966586362, 0.19137970720846564, 0.28747463134918794, 0.22063085493332046, 0.1547316989764107, 0.29272246470522123, 0.20808932927193857, 0.3322979981995655, 0.25535563826368723, 0.3711420897790517, 0.21755161291235126, 0.28664123873824954, 0.2928459402748469, 0.23687294909426104, 0.2688982987138715, 0.23232597836451752, 0.14564189405753036, 0.23033454207492676, 0.3255272254718219, 0.16552443319748034, 0.19934086006082807, 0.2150280353529891, 0.1976700613376272, 0.18874002922488253, 0.14118801338871112, 0.17746844622058655, 0.24881780785601193, 0.20367901977904102, 0.23299485671439357, 0.25104078267602503, 0.20764902337017355, 0.26753900774153117, 0.21106966522527348, 0.18936655644098543, 0.17721905323491405, 0.1713302107575262, 0.17480628232539164, 0.19132035446883744, 0.19736600309460528, 0.19463803446645045, 0.16448511789423503, 0.17225426000075472, 0.18461959864408695, 0.12408838586119875, 0.17467226148796322, 0.18559734688219065, 0.8840864233539545, 0.1990424117200702, 0.1720227429134853, 0.14017819325547043, 0.16115503036110002, 0.8657465168823701, 0.6730839034347307, 0.2095153835924335, 0.07327626213342975, 0.5369786635879079, 0.15421097920018967, 0.15346266008324871, 0.10452654326053523, 0.104460325198232, 0.78832419728891, 0.23107447935162106, 0.2117953276922192, 0.251759123961417, 0.20003318227189737, 0.21776535825272414, 0.23096831812695695, 0.2241145546703247, 0.24420725772211838, 0.25098922457367545, 0.10851039977154453, 0.08811679236044478, 0.05479199070721896, 0.05894514177171006, 0.09614316312280025, 0.0747240681651099, 0.1033432189313429, 0.10389305931947779, 0.08115835410562444]}, "mutation_prompt": null}
{"id": "5925a3e8-4a0a-4423-9af5-40cb1b245463", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "A dynamic multi-swarm particle optimization leveraging adaptive exploration-exploitation balance for efficient search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.8239049675248243, 0.8204093691457087, 0.8355088040076538, 0.8299666679057591, 0.8161400678335301, 0.8282721433735332, 0.8169924701374343, 0.7980185114456165, 0.8239648307567436, 0.08110456168630242, 0.39371072859491707, 0.39430849227224496, 0.16826264718748185, 0.09161639049684833, 0.13151535950445103, 0.6247975978109348, 0.6374327784626551, 0.26571965796958785, 0.06902972464562918, 0.13932058971224381, 0.0755412376551523, 0.05548122503275921, 0.10737558794076008, 0.11628336471009948, 0.06763311670095751, 0.13862590891540927, 0.09015569663410006, 0.05663508575173004, 0.07050085314814791, 0.09401219610615685, 0.09339173604584905, 0.09060477501287845, 0.11149919413143816, 0.09480226839299466, 0.0913189341466425, 0.17678748577805603, 0.957427935321915, 0.9515287385727481, 0.9581406410355722, 0.9519818098095244, 0.9375279139990159, 0.9360582316035894, 0.9538487852666019, 0.9386069775609288, 0.9564035405952274, 0.20579868436182636, 0.5411949485506761, 0.2993220137652223, 0.5408993772551054, 0.736063542761216, 0.7487356825476315, 0.7682737753957498, 0.5703487152845351, 0.6615797451633953, 0.22685392276790417, 0.21686263569771713, 0.21569193027474953, 0.1938667344041245, 0.3225363859531327, 0.2170387331467788, 0.10734388365523628, 0.1260665733080758, 0.13461679110725622, 0.1677583629831595, 0.2855444132242163, 0.1567167792942542, 0.16852377867252455, 0.13962329306614196, 0.12877464711364717, 0.14083335899083926, 0.22722988288431656, 0.2432844752777853, 0.36175436543479567, 0.2174963927855269, 0.12156904293872162, 0.29619734847681034, 0.2230463038438235, 0.1320033554734824, 0.11911249840691995, 0.13095958981141853, 0.2826216560693303, 0.01312731431914893, 0.1696797448028825, 9.999999999998899e-05, 9.999999999998899e-05, 0.002436459190251483, 9.999999999998899e-05, 0.05277356471437966, 0.015028271070205101, 9.999999999998899e-05, 0.14890347394425518, 0.021465782014701285, 0.07798160892531847, 0.05273859621735555, 0.017341784592802778, 0.013123131664380394, 0.05929635252948884, 0.08981826959564365, 0.04323807834735416, 0.18145989100428206, 0.10933539476200693, 0.15885648616255565, 0.14592231192699368, 0.209920100152314, 0.11900930627103046, 0.3533538102511885, 0.13914355959735825, 0.06621412528275827, 0.18294818047036143, 0.016046995925759977, 0.08294791304277116, 0.09222504707260815, 0.13092576600028027, 0.17159328791722384, 0.07610497356704105, 0.061565679173173016, 0.08053626673863656, 0.5133138563297359, 0.5485016276530972, 0.5512816919970147, 0.5253097600461871, 0.5079464750424072, 0.5027122013637189, 0.5748197935533119, 0.5219089070281999, 0.5053050463822458, 0.09888007162366796, 0.06123056498789625, 0.06866206835569033, 0.06888244000807076, 0.1199648445997773, 0.13972618982001805, 0.08100103400046232, 0.06836886353830618, 0.07901239738103338, 0.22312605586223266, 0.2581464415818424, 0.22889659966586362, 0.19137970720846564, 0.28747463134918794, 0.22063085493332046, 0.1547316989764107, 0.29272246470522123, 0.20808932927193857, 0.3322979981995655, 0.25535563826368723, 0.3711420897790517, 0.21755161291235126, 0.28664123873824954, 0.2928459402748469, 0.23687294909426104, 0.2688982987138715, 0.23232597836451752, 0.14564189405753036, 0.23033454207492676, 0.3255272254718219, 0.16552443319748034, 0.19934086006082807, 0.2150280353529891, 0.1976700613376272, 0.18874002922488253, 0.14118801338871112, 0.17746844622058655, 0.24881780785601193, 0.20367901977904102, 0.23299485671439357, 0.25104078267602503, 0.20764902337017355, 0.26753900774153117, 0.21106966522527348, 0.18936655644098543, 0.17721905323491405, 0.1713302107575262, 0.17480628232539164, 0.19132035446883744, 0.19736600309460528, 0.19463803446645045, 0.16448511789423503, 0.17225426000075472, 0.18461959864408695, 0.12408838586119875, 0.17467226148796322, 0.18559734688219065, 0.8840864233539545, 0.1990424117200702, 0.1720227429134853, 0.14017819325547043, 0.16115503036110002, 0.8657465168823701, 0.6730839034347307, 0.2095153835924335, 0.07327626213342975, 0.5369786635879079, 0.15421097920018967, 0.15346266008324871, 0.10452654326053523, 0.104460325198232, 0.78832419728891, 0.23107447935162106, 0.2117953276922192, 0.251759123961417, 0.20003318227189737, 0.21776535825272414, 0.23096831812695695, 0.2241145546703247, 0.24420725772211838, 0.25098922457367545, 0.10851039977154453, 0.08811679236044478, 0.05479199070721896, 0.05894514177171006, 0.09614316312280025, 0.0747240681651099, 0.1033432189313429, 0.10389305931947779, 0.08115835410562444]}, "mutation_prompt": null}
{"id": "316efd6a-516a-4da9-920b-67efd109ac28", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "A dynamic multi-swarm particle optimization leveraging adaptive exploration-exploitation balance for efficient search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.8239049675248243, 0.8204093691457087, 0.8355088040076538, 0.8299666679057591, 0.8161400678335301, 0.8282721433735332, 0.8169924701374343, 0.7980185114456165, 0.8239648307567436, 0.08110456168630242, 0.39371072859491707, 0.39430849227224496, 0.16826264718748185, 0.09161639049684833, 0.13151535950445103, 0.6247975978109348, 0.6374327784626551, 0.26571965796958785, 0.06902972464562918, 0.13932058971224381, 0.0755412376551523, 0.05548122503275921, 0.10737558794076008, 0.11628336471009948, 0.06763311670095751, 0.13862590891540927, 0.09015569663410006, 0.05663508575173004, 0.07050085314814791, 0.09401219610615685, 0.09339173604584905, 0.09060477501287845, 0.11149919413143816, 0.09480226839299466, 0.0913189341466425, 0.17678748577805603, 0.957427935321915, 0.9515287385727481, 0.9581406410355722, 0.9519818098095244, 0.9375279139990159, 0.9360582316035894, 0.9538487852666019, 0.9386069775609288, 0.9564035405952274, 0.20579868436182636, 0.5411949485506761, 0.2993220137652223, 0.5408993772551054, 0.736063542761216, 0.7487356825476315, 0.7682737753957498, 0.5703487152845351, 0.6615797451633953, 0.22685392276790417, 0.21686263569771713, 0.21569193027474953, 0.1938667344041245, 0.3225363859531327, 0.2170387331467788, 0.10734388365523628, 0.1260665733080758, 0.13461679110725622, 0.1677583629831595, 0.2855444132242163, 0.1567167792942542, 0.16852377867252455, 0.13962329306614196, 0.12877464711364717, 0.14083335899083926, 0.22722988288431656, 0.2432844752777853, 0.36175436543479567, 0.2174963927855269, 0.12156904293872162, 0.29619734847681034, 0.2230463038438235, 0.1320033554734824, 0.11911249840691995, 0.13095958981141853, 0.2826216560693303, 0.01312731431914893, 0.1696797448028825, 9.999999999998899e-05, 9.999999999998899e-05, 0.002436459190251483, 9.999999999998899e-05, 0.05277356471437966, 0.015028271070205101, 9.999999999998899e-05, 0.14890347394425518, 0.021465782014701285, 0.07798160892531847, 0.05273859621735555, 0.017341784592802778, 0.013123131664380394, 0.05929635252948884, 0.08981826959564365, 0.04323807834735416, 0.18145989100428206, 0.10933539476200693, 0.15885648616255565, 0.14592231192699368, 0.209920100152314, 0.11900930627103046, 0.3533538102511885, 0.13914355959735825, 0.06621412528275827, 0.18294818047036143, 0.016046995925759977, 0.08294791304277116, 0.09222504707260815, 0.13092576600028027, 0.17159328791722384, 0.07610497356704105, 0.061565679173173016, 0.08053626673863656, 0.5133138563297359, 0.5485016276530972, 0.5512816919970147, 0.5253097600461871, 0.5079464750424072, 0.5027122013637189, 0.5748197935533119, 0.5219089070281999, 0.5053050463822458, 0.09888007162366796, 0.06123056498789625, 0.06866206835569033, 0.06888244000807076, 0.1199648445997773, 0.13972618982001805, 0.08100103400046232, 0.06836886353830618, 0.07901239738103338, 0.22312605586223266, 0.2581464415818424, 0.22889659966586362, 0.19137970720846564, 0.28747463134918794, 0.22063085493332046, 0.1547316989764107, 0.29272246470522123, 0.20808932927193857, 0.3322979981995655, 0.25535563826368723, 0.3711420897790517, 0.21755161291235126, 0.28664123873824954, 0.2928459402748469, 0.23687294909426104, 0.2688982987138715, 0.23232597836451752, 0.14564189405753036, 0.23033454207492676, 0.3255272254718219, 0.16552443319748034, 0.19934086006082807, 0.2150280353529891, 0.1976700613376272, 0.18874002922488253, 0.14118801338871112, 0.17746844622058655, 0.24881780785601193, 0.20367901977904102, 0.23299485671439357, 0.25104078267602503, 0.20764902337017355, 0.26753900774153117, 0.21106966522527348, 0.18936655644098543, 0.17721905323491405, 0.1713302107575262, 0.17480628232539164, 0.19132035446883744, 0.19736600309460528, 0.19463803446645045, 0.16448511789423503, 0.17225426000075472, 0.18461959864408695, 0.12408838586119875, 0.17467226148796322, 0.18559734688219065, 0.8840864233539545, 0.1990424117200702, 0.1720227429134853, 0.14017819325547043, 0.16115503036110002, 0.8657465168823701, 0.6730839034347307, 0.2095153835924335, 0.07327626213342975, 0.5369786635879079, 0.15421097920018967, 0.15346266008324871, 0.10452654326053523, 0.104460325198232, 0.78832419728891, 0.23107447935162106, 0.2117953276922192, 0.251759123961417, 0.20003318227189737, 0.21776535825272414, 0.23096831812695695, 0.2241145546703247, 0.24420725772211838, 0.25098922457367545, 0.10851039977154453, 0.08811679236044478, 0.05479199070721896, 0.05894514177171006, 0.09614316312280025, 0.0747240681651099, 0.1033432189313429, 0.10389305931947779, 0.08115835410562444]}, "mutation_prompt": null}
{"id": "70985228-52db-4bdc-bfc3-066616630a6b", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "A dynamic multi-swarm particle optimization leveraging adaptive exploration-exploitation balance for efficient search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.8239049675248243, 0.8204093691457087, 0.8355088040076538, 0.8299666679057591, 0.8161400678335301, 0.8282721433735332, 0.8169924701374343, 0.7980185114456165, 0.8239648307567436, 0.08110456168630242, 0.39371072859491707, 0.39430849227224496, 0.16826264718748185, 0.09161639049684833, 0.13151535950445103, 0.6247975978109348, 0.6374327784626551, 0.26571965796958785, 0.06902972464562918, 0.13932058971224381, 0.0755412376551523, 0.05548122503275921, 0.10737558794076008, 0.11628336471009948, 0.06763311670095751, 0.13862590891540927, 0.09015569663410006, 0.05663508575173004, 0.07050085314814791, 0.09401219610615685, 0.09339173604584905, 0.09060477501287845, 0.11149919413143816, 0.09480226839299466, 0.0913189341466425, 0.17678748577805603, 0.957427935321915, 0.9515287385727481, 0.9581406410355722, 0.9519818098095244, 0.9375279139990159, 0.9360582316035894, 0.9538487852666019, 0.9386069775609288, 0.9564035405952274, 0.20579868436182636, 0.5411949485506761, 0.2993220137652223, 0.5408993772551054, 0.736063542761216, 0.7487356825476315, 0.7682737753957498, 0.5703487152845351, 0.6615797451633953, 0.22685392276790417, 0.21686263569771713, 0.21569193027474953, 0.1938667344041245, 0.3225363859531327, 0.2170387331467788, 0.10734388365523628, 0.1260665733080758, 0.13461679110725622, 0.1677583629831595, 0.2855444132242163, 0.1567167792942542, 0.16852377867252455, 0.13962329306614196, 0.12877464711364717, 0.14083335899083926, 0.22722988288431656, 0.2432844752777853, 0.36175436543479567, 0.2174963927855269, 0.12156904293872162, 0.29619734847681034, 0.2230463038438235, 0.1320033554734824, 0.11911249840691995, 0.13095958981141853, 0.2826216560693303, 0.01312731431914893, 0.1696797448028825, 9.999999999998899e-05, 9.999999999998899e-05, 0.002436459190251483, 9.999999999998899e-05, 0.05277356471437966, 0.015028271070205101, 9.999999999998899e-05, 0.14890347394425518, 0.021465782014701285, 0.07798160892531847, 0.05273859621735555, 0.017341784592802778, 0.013123131664380394, 0.05929635252948884, 0.08981826959564365, 0.04323807834735416, 0.18145989100428206, 0.10933539476200693, 0.15885648616255565, 0.14592231192699368, 0.209920100152314, 0.11900930627103046, 0.3533538102511885, 0.13914355959735825, 0.06621412528275827, 0.18294818047036143, 0.016046995925759977, 0.08294791304277116, 0.09222504707260815, 0.13092576600028027, 0.17159328791722384, 0.07610497356704105, 0.061565679173173016, 0.08053626673863656, 0.5133138563297359, 0.5485016276530972, 0.5512816919970147, 0.5253097600461871, 0.5079464750424072, 0.5027122013637189, 0.5748197935533119, 0.5219089070281999, 0.5053050463822458, 0.09888007162366796, 0.06123056498789625, 0.06866206835569033, 0.06888244000807076, 0.1199648445997773, 0.13972618982001805, 0.08100103400046232, 0.06836886353830618, 0.07901239738103338, 0.22312605586223266, 0.2581464415818424, 0.22889659966586362, 0.19137970720846564, 0.28747463134918794, 0.22063085493332046, 0.1547316989764107, 0.29272246470522123, 0.20808932927193857, 0.3322979981995655, 0.25535563826368723, 0.3711420897790517, 0.21755161291235126, 0.28664123873824954, 0.2928459402748469, 0.23687294909426104, 0.2688982987138715, 0.23232597836451752, 0.14564189405753036, 0.23033454207492676, 0.3255272254718219, 0.16552443319748034, 0.19934086006082807, 0.2150280353529891, 0.1976700613376272, 0.18874002922488253, 0.14118801338871112, 0.17746844622058655, 0.24881780785601193, 0.20367901977904102, 0.23299485671439357, 0.25104078267602503, 0.20764902337017355, 0.26753900774153117, 0.21106966522527348, 0.18936655644098543, 0.17721905323491405, 0.1713302107575262, 0.17480628232539164, 0.19132035446883744, 0.19736600309460528, 0.19463803446645045, 0.16448511789423503, 0.17225426000075472, 0.18461959864408695, 0.12408838586119875, 0.17467226148796322, 0.18559734688219065, 0.8840864233539545, 0.1990424117200702, 0.1720227429134853, 0.14017819325547043, 0.16115503036110002, 0.8657465168823701, 0.6730839034347307, 0.2095153835924335, 0.07327626213342975, 0.5369786635879079, 0.15421097920018967, 0.15346266008324871, 0.10452654326053523, 0.104460325198232, 0.78832419728891, 0.23107447935162106, 0.2117953276922192, 0.251759123961417, 0.20003318227189737, 0.21776535825272414, 0.23096831812695695, 0.2241145546703247, 0.24420725772211838, 0.25098922457367545, 0.10851039977154453, 0.08811679236044478, 0.05479199070721896, 0.05894514177171006, 0.09614316312280025, 0.0747240681651099, 0.1033432189313429, 0.10389305931947779, 0.08115835410562444]}, "mutation_prompt": null}
{"id": "bf55b3cd-486a-4eba-a263-8886715963ad", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "A dynamic multi-swarm particle optimization leveraging adaptive exploration-exploitation balance for efficient search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.8239049675248243, 0.8204093691457087, 0.8355088040076538, 0.8299666679057591, 0.8161400678335301, 0.8282721433735332, 0.8169924701374343, 0.7980185114456165, 0.8239648307567436, 0.08110456168630242, 0.39371072859491707, 0.39430849227224496, 0.16826264718748185, 0.09161639049684833, 0.13151535950445103, 0.6247975978109348, 0.6374327784626551, 0.26571965796958785, 0.06902972464562918, 0.13932058971224381, 0.0755412376551523, 0.05548122503275921, 0.10737558794076008, 0.11628336471009948, 0.06763311670095751, 0.13862590891540927, 0.09015569663410006, 0.05663508575173004, 0.07050085314814791, 0.09401219610615685, 0.09339173604584905, 0.09060477501287845, 0.11149919413143816, 0.09480226839299466, 0.0913189341466425, 0.17678748577805603, 0.957427935321915, 0.9515287385727481, 0.9581406410355722, 0.9519818098095244, 0.9375279139990159, 0.9360582316035894, 0.9538487852666019, 0.9386069775609288, 0.9564035405952274, 0.20579868436182636, 0.5411949485506761, 0.2993220137652223, 0.5408993772551054, 0.736063542761216, 0.7487356825476315, 0.7682737753957498, 0.5703487152845351, 0.6615797451633953, 0.22685392276790417, 0.21686263569771713, 0.21569193027474953, 0.1938667344041245, 0.3225363859531327, 0.2170387331467788, 0.10734388365523628, 0.1260665733080758, 0.13461679110725622, 0.1677583629831595, 0.2855444132242163, 0.1567167792942542, 0.16852377867252455, 0.13962329306614196, 0.12877464711364717, 0.14083335899083926, 0.22722988288431656, 0.2432844752777853, 0.36175436543479567, 0.2174963927855269, 0.12156904293872162, 0.29619734847681034, 0.2230463038438235, 0.1320033554734824, 0.11911249840691995, 0.13095958981141853, 0.2826216560693303, 0.01312731431914893, 0.1696797448028825, 9.999999999998899e-05, 9.999999999998899e-05, 0.002436459190251483, 9.999999999998899e-05, 0.05277356471437966, 0.015028271070205101, 9.999999999998899e-05, 0.14890347394425518, 0.021465782014701285, 0.07798160892531847, 0.05273859621735555, 0.017341784592802778, 0.013123131664380394, 0.05929635252948884, 0.08981826959564365, 0.04323807834735416, 0.18145989100428206, 0.10933539476200693, 0.15885648616255565, 0.14592231192699368, 0.209920100152314, 0.11900930627103046, 0.3533538102511885, 0.13914355959735825, 0.06621412528275827, 0.18294818047036143, 0.016046995925759977, 0.08294791304277116, 0.09222504707260815, 0.13092576600028027, 0.17159328791722384, 0.07610497356704105, 0.061565679173173016, 0.08053626673863656, 0.5133138563297359, 0.5485016276530972, 0.5512816919970147, 0.5253097600461871, 0.5079464750424072, 0.5027122013637189, 0.5748197935533119, 0.5219089070281999, 0.5053050463822458, 0.09888007162366796, 0.06123056498789625, 0.06866206835569033, 0.06888244000807076, 0.1199648445997773, 0.13972618982001805, 0.08100103400046232, 0.06836886353830618, 0.07901239738103338, 0.22312605586223266, 0.2581464415818424, 0.22889659966586362, 0.19137970720846564, 0.28747463134918794, 0.22063085493332046, 0.1547316989764107, 0.29272246470522123, 0.20808932927193857, 0.3322979981995655, 0.25535563826368723, 0.3711420897790517, 0.21755161291235126, 0.28664123873824954, 0.2928459402748469, 0.23687294909426104, 0.2688982987138715, 0.23232597836451752, 0.14564189405753036, 0.23033454207492676, 0.3255272254718219, 0.16552443319748034, 0.19934086006082807, 0.2150280353529891, 0.1976700613376272, 0.18874002922488253, 0.14118801338871112, 0.17746844622058655, 0.24881780785601193, 0.20367901977904102, 0.23299485671439357, 0.25104078267602503, 0.20764902337017355, 0.26753900774153117, 0.21106966522527348, 0.18936655644098543, 0.17721905323491405, 0.1713302107575262, 0.17480628232539164, 0.19132035446883744, 0.19736600309460528, 0.19463803446645045, 0.16448511789423503, 0.17225426000075472, 0.18461959864408695, 0.12408838586119875, 0.17467226148796322, 0.18559734688219065, 0.8840864233539545, 0.1990424117200702, 0.1720227429134853, 0.14017819325547043, 0.16115503036110002, 0.8657465168823701, 0.6730839034347307, 0.2095153835924335, 0.07327626213342975, 0.5369786635879079, 0.15421097920018967, 0.15346266008324871, 0.10452654326053523, 0.104460325198232, 0.78832419728891, 0.23107447935162106, 0.2117953276922192, 0.251759123961417, 0.20003318227189737, 0.21776535825272414, 0.23096831812695695, 0.2241145546703247, 0.24420725772211838, 0.25098922457367545, 0.10851039977154453, 0.08811679236044478, 0.05479199070721896, 0.05894514177171006, 0.09614316312280025, 0.0747240681651099, 0.1033432189313429, 0.10389305931947779, 0.08115835410562444]}, "mutation_prompt": null}
{"id": "3e9afd77-87df-41a4-afdb-b02468962612", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            swarm_size_factor = 1 + 0.5 * np.sin(np.pi * function_evaluations / self.budget)\n            inertia = self.inertia_weight * swarm_size_factor * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                stochastic_component = np.random.normal(0, 0.1, self.dim)\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]) +\n                                 stochastic_component)\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced Multi-Swarm Optimizer with Dynamic Swarm Sizes and Stochastic Velocity Update to improve convergence.", "configspace": "", "generation": 8, "fitness": 0.2058048538391213, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.38856185052555525, 0.39690902204412404, 0.38236808921300636, 0.38508116494160527, 0.38728773703381014, 0.38613807230818975, 0.407307791932053, 0.38313535220624184, 0.38410167568153464, 0.00010398691948865224, 0.026043487271408372, 0.019466151737808857, 9.999999999998899e-05, 0.021552962092812766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10657344122259294, 0.10663180433390029, 0.08560483949707576, 0.11353212023792825, 0.09378132398284611, 0.0983703478984671, 0.07226047639181776, 0.09743331844769854, 0.12206393434815821, 0.06088605680861037, 0.09401157816398698, 0.10055722604892503, 0.10308373485872102, 0.10141822949654522, 0.09686271866587648, 0.09730346109277654, 0.09621563881110706, 0.08533236142038136, 0.9583088076484513, 0.9517822607130748, 0.9564551438688578, 0.9535169198140439, 0.9496212166550605, 0.9536260339354539, 0.9578216508167018, 0.9455560572126546, 0.9569661560996922, 0.24581928479258763, 0.26723571633817333, 0.2460822112252703, 0.2794570998353021, 0.2749910827469494, 0.26342759767031765, 0.2465822972002074, 0.25267413590780863, 0.26147726426889106, 0.3241435241419134, 0.30714563566265807, 0.2223685705483579, 0.28991223545325717, 0.24867047023879763, 0.2972064182985218, 0.2013915802310895, 0.301181229138091, 0.4839037960001179, 0.11593274674624299, 0.09481840847024048, 0.07774943185248817, 0.16227633651669626, 0.13298999991780658, 0.10955384245602096, 0.13358775593865957, 0.16667419985516752, 0.12387990048905972, 0.15164121073723402, 0.11978765219351495, 0.14965096614796003, 0.14900337391407426, 0.12342678482940195, 0.12665214639909317, 0.1417179201009665, 0.15267606479690932, 0.1454051305166173, 9.999999999998899e-05, 9.999999999998899e-05, 0.028553584288433687, 0.03160529991225247, 9.999999999998899e-05, 9.999999999998899e-05, 0.008959441619803332, 9.999999999998899e-05, 0.03380650201632107, 0.09868415620798388, 0.050033882938944174, 0.04037516951482034, 0.05387130324771028, 0.03242225530489684, 0.039507620165519786, 0.10801605745839482, 0.09538650659811831, 0.09813055879974764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.074679814094058, 0.0809524156371676, 0.08054255180879022, 0.03432765021411743, 0.07812325177894741, 0.08560501807750354, 0.04963872977972128, 0.06753664566740847, 0.06759774632275839, 0.3827907117399958, 0.375025203510978, 0.3573347953338495, 0.3752371202783038, 0.3714262509152071, 0.3867462508766255, 0.3805995734737426, 0.37609594620723397, 0.3765709940785784, 0.08628048399826271, 0.09309896031788811, 0.10337745481616278, 0.12368701014153227, 0.09784043157843336, 0.09302916764319202, 0.08460424060885852, 0.1172503910153686, 0.0918608965744454, 0.22899617376654546, 0.23561495276879674, 0.22140004582607076, 0.15244353550485934, 0.22059390851531346, 0.23170418772102075, 0.22548011069217688, 0.23234329938254117, 0.21413444410939286, 0.27969201349443795, 0.26917998598970716, 0.2750291012509125, 0.2703313535681686, 0.23795513647005484, 0.275469470247413, 0.26423552420630125, 0.2715636978223017, 0.26161136383281625, 0.24012582386279246, 0.18320689859361705, 0.21775082090136488, 0.19999302475932212, 0.2118473497276372, 0.21631231863412426, 0.1928304674120569, 0.21336185392528373, 0.19825988681932527, 0.2015728419807371, 0.19936713751928836, 0.19139288766896756, 0.20358104785314612, 0.23867903733805063, 0.2502753867659828, 0.22010116516888945, 0.20570324483360336, 0.20690494309203133, 0.20104679766438982, 0.198914653714103, 0.17657712734072362, 0.18294635799505554, 0.18140554899937644, 0.1812238284241795, 0.19815874941450462, 0.1909280634169097, 0.20890932652521266, 0.12428469973457812, 0.18550958537366025, 0.1856309944171619, 0.5772497911320038, 0.193530800613546, 0.5606434012725933, 0.13988808260305374, 0.1619827170975906, 0.567845971878399, 0.4096638784414306, 0.20766180842457527, 0.07305476029548774, 0.20873400989498647, 0.5244989680491541, 0.1537668696306238, 0.4599553419220467, 0.10410934191593246, 0.4085292399114233, 0.18946069852701541, 0.1936372346133065, 0.18604919728553637, 0.1838501109992503, 0.19654283016128282, 0.20233015742154192, 0.17406535944738066, 0.18944766914128663, 0.17312991275795886, 0.0861417109492062, 0.08474694206767108, 0.08270810295626474, 0.08654157351160208, 0.07823618873351501, 0.08848582088274304, 0.08427875936016227, 0.08179220055391156, 0.07886853321521814]}, "mutation_prompt": null}
{"id": "5f04c663-dc68-43fe-87db-69e8c0f68f28", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "A dynamic multi-swarm particle optimization leveraging adaptive exploration-exploitation balance for efficient search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.8239049675248243, 0.8204093691457087, 0.8355088040076538, 0.8299666679057591, 0.8161400678335301, 0.8282721433735332, 0.8169924701374343, 0.7980185114456165, 0.8239648307567436, 0.08110456168630242, 0.39371072859491707, 0.39430849227224496, 0.16826264718748185, 0.09161639049684833, 0.13151535950445103, 0.6247975978109348, 0.6374327784626551, 0.26571965796958785, 0.06902972464562918, 0.13932058971224381, 0.0755412376551523, 0.05548122503275921, 0.10737558794076008, 0.11628336471009948, 0.06763311670095751, 0.13862590891540927, 0.09015569663410006, 0.05663508575173004, 0.07050085314814791, 0.09401219610615685, 0.09339173604584905, 0.09060477501287845, 0.11149919413143816, 0.09480226839299466, 0.0913189341466425, 0.17678748577805603, 0.957427935321915, 0.9515287385727481, 0.9581406410355722, 0.9519818098095244, 0.9375279139990159, 0.9360582316035894, 0.9538487852666019, 0.9386069775609288, 0.9564035405952274, 0.20579868436182636, 0.5411949485506761, 0.2993220137652223, 0.5408993772551054, 0.736063542761216, 0.7487356825476315, 0.7682737753957498, 0.5703487152845351, 0.6615797451633953, 0.22685392276790417, 0.21686263569771713, 0.21569193027474953, 0.1938667344041245, 0.3225363859531327, 0.2170387331467788, 0.10734388365523628, 0.1260665733080758, 0.13461679110725622, 0.1677583629831595, 0.2855444132242163, 0.1567167792942542, 0.16852377867252455, 0.13962329306614196, 0.12877464711364717, 0.14083335899083926, 0.22722988288431656, 0.2432844752777853, 0.36175436543479567, 0.2174963927855269, 0.12156904293872162, 0.29619734847681034, 0.2230463038438235, 0.1320033554734824, 0.11911249840691995, 0.13095958981141853, 0.2826216560693303, 0.01312731431914893, 0.1696797448028825, 9.999999999998899e-05, 9.999999999998899e-05, 0.002436459190251483, 9.999999999998899e-05, 0.05277356471437966, 0.015028271070205101, 9.999999999998899e-05, 0.14890347394425518, 0.021465782014701285, 0.07798160892531847, 0.05273859621735555, 0.017341784592802778, 0.013123131664380394, 0.05929635252948884, 0.08981826959564365, 0.04323807834735416, 0.18145989100428206, 0.10933539476200693, 0.15885648616255565, 0.14592231192699368, 0.209920100152314, 0.11900930627103046, 0.3533538102511885, 0.13914355959735825, 0.06621412528275827, 0.18294818047036143, 0.016046995925759977, 0.08294791304277116, 0.09222504707260815, 0.13092576600028027, 0.17159328791722384, 0.07610497356704105, 0.061565679173173016, 0.08053626673863656, 0.5133138563297359, 0.5485016276530972, 0.5512816919970147, 0.5253097600461871, 0.5079464750424072, 0.5027122013637189, 0.5748197935533119, 0.5219089070281999, 0.5053050463822458, 0.09888007162366796, 0.06123056498789625, 0.06866206835569033, 0.06888244000807076, 0.1199648445997773, 0.13972618982001805, 0.08100103400046232, 0.06836886353830618, 0.07901239738103338, 0.22312605586223266, 0.2581464415818424, 0.22889659966586362, 0.19137970720846564, 0.28747463134918794, 0.22063085493332046, 0.1547316989764107, 0.29272246470522123, 0.20808932927193857, 0.3322979981995655, 0.25535563826368723, 0.3711420897790517, 0.21755161291235126, 0.28664123873824954, 0.2928459402748469, 0.23687294909426104, 0.2688982987138715, 0.23232597836451752, 0.14564189405753036, 0.23033454207492676, 0.3255272254718219, 0.16552443319748034, 0.19934086006082807, 0.2150280353529891, 0.1976700613376272, 0.18874002922488253, 0.14118801338871112, 0.17746844622058655, 0.24881780785601193, 0.20367901977904102, 0.23299485671439357, 0.25104078267602503, 0.20764902337017355, 0.26753900774153117, 0.21106966522527348, 0.18936655644098543, 0.17721905323491405, 0.1713302107575262, 0.17480628232539164, 0.19132035446883744, 0.19736600309460528, 0.19463803446645045, 0.16448511789423503, 0.17225426000075472, 0.18461959864408695, 0.12408838586119875, 0.17467226148796322, 0.18559734688219065, 0.8840864233539545, 0.1990424117200702, 0.1720227429134853, 0.14017819325547043, 0.16115503036110002, 0.8657465168823701, 0.6730839034347307, 0.2095153835924335, 0.07327626213342975, 0.5369786635879079, 0.15421097920018967, 0.15346266008324871, 0.10452654326053523, 0.104460325198232, 0.78832419728891, 0.23107447935162106, 0.2117953276922192, 0.251759123961417, 0.20003318227189737, 0.21776535825272414, 0.23096831812695695, 0.2241145546703247, 0.24420725772211838, 0.25098922457367545, 0.10851039977154453, 0.08811679236044478, 0.05479199070721896, 0.05894514177171006, 0.09614316312280025, 0.0747240681651099, 0.1033432189313429, 0.10389305931947779, 0.08115835410562444]}, "mutation_prompt": null}
{"id": "917e75bb-9f9f-4e14-a103-e2e75bb3d192", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget)\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "A dynamic multi-swarm particle optimization leveraging adaptive exploration-exploitation balance for efficient search.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.8239049675248243, 0.8204093691457087, 0.8355088040076538, 0.8299666679057591, 0.8161400678335301, 0.8282721433735332, 0.8169924701374343, 0.7980185114456165, 0.8239648307567436, 0.08110456168630242, 0.39371072859491707, 0.39430849227224496, 0.16826264718748185, 0.09161639049684833, 0.13151535950445103, 0.6247975978109348, 0.6374327784626551, 0.26571965796958785, 0.06902972464562918, 0.13932058971224381, 0.0755412376551523, 0.05548122503275921, 0.10737558794076008, 0.11628336471009948, 0.06763311670095751, 0.13862590891540927, 0.09015569663410006, 0.05663508575173004, 0.07050085314814791, 0.09401219610615685, 0.09339173604584905, 0.09060477501287845, 0.11149919413143816, 0.09480226839299466, 0.0913189341466425, 0.17678748577805603, 0.957427935321915, 0.9515287385727481, 0.9581406410355722, 0.9519818098095244, 0.9375279139990159, 0.9360582316035894, 0.9538487852666019, 0.9386069775609288, 0.9564035405952274, 0.20579868436182636, 0.5411949485506761, 0.2993220137652223, 0.5408993772551054, 0.736063542761216, 0.7487356825476315, 0.7682737753957498, 0.5703487152845351, 0.6615797451633953, 0.22685392276790417, 0.21686263569771713, 0.21569193027474953, 0.1938667344041245, 0.3225363859531327, 0.2170387331467788, 0.10734388365523628, 0.1260665733080758, 0.13461679110725622, 0.1677583629831595, 0.2855444132242163, 0.1567167792942542, 0.16852377867252455, 0.13962329306614196, 0.12877464711364717, 0.14083335899083926, 0.22722988288431656, 0.2432844752777853, 0.36175436543479567, 0.2174963927855269, 0.12156904293872162, 0.29619734847681034, 0.2230463038438235, 0.1320033554734824, 0.11911249840691995, 0.13095958981141853, 0.2826216560693303, 0.01312731431914893, 0.1696797448028825, 9.999999999998899e-05, 9.999999999998899e-05, 0.002436459190251483, 9.999999999998899e-05, 0.05277356471437966, 0.015028271070205101, 9.999999999998899e-05, 0.14890347394425518, 0.021465782014701285, 0.07798160892531847, 0.05273859621735555, 0.017341784592802778, 0.013123131664380394, 0.05929635252948884, 0.08981826959564365, 0.04323807834735416, 0.18145989100428206, 0.10933539476200693, 0.15885648616255565, 0.14592231192699368, 0.209920100152314, 0.11900930627103046, 0.3533538102511885, 0.13914355959735825, 0.06621412528275827, 0.18294818047036143, 0.016046995925759977, 0.08294791304277116, 0.09222504707260815, 0.13092576600028027, 0.17159328791722384, 0.07610497356704105, 0.061565679173173016, 0.08053626673863656, 0.5133138563297359, 0.5485016276530972, 0.5512816919970147, 0.5253097600461871, 0.5079464750424072, 0.5027122013637189, 0.5748197935533119, 0.5219089070281999, 0.5053050463822458, 0.09888007162366796, 0.06123056498789625, 0.06866206835569033, 0.06888244000807076, 0.1199648445997773, 0.13972618982001805, 0.08100103400046232, 0.06836886353830618, 0.07901239738103338, 0.22312605586223266, 0.2581464415818424, 0.22889659966586362, 0.19137970720846564, 0.28747463134918794, 0.22063085493332046, 0.1547316989764107, 0.29272246470522123, 0.20808932927193857, 0.3322979981995655, 0.25535563826368723, 0.3711420897790517, 0.21755161291235126, 0.28664123873824954, 0.2928459402748469, 0.23687294909426104, 0.2688982987138715, 0.23232597836451752, 0.14564189405753036, 0.23033454207492676, 0.3255272254718219, 0.16552443319748034, 0.19934086006082807, 0.2150280353529891, 0.1976700613376272, 0.18874002922488253, 0.14118801338871112, 0.17746844622058655, 0.24881780785601193, 0.20367901977904102, 0.23299485671439357, 0.25104078267602503, 0.20764902337017355, 0.26753900774153117, 0.21106966522527348, 0.18936655644098543, 0.17721905323491405, 0.1713302107575262, 0.17480628232539164, 0.19132035446883744, 0.19736600309460528, 0.19463803446645045, 0.16448511789423503, 0.17225426000075472, 0.18461959864408695, 0.12408838586119875, 0.17467226148796322, 0.18559734688219065, 0.8840864233539545, 0.1990424117200702, 0.1720227429134853, 0.14017819325547043, 0.16115503036110002, 0.8657465168823701, 0.6730839034347307, 0.2095153835924335, 0.07327626213342975, 0.5369786635879079, 0.15421097920018967, 0.15346266008324871, 0.10452654326053523, 0.104460325198232, 0.78832419728891, 0.23107447935162106, 0.2117953276922192, 0.251759123961417, 0.20003318227189737, 0.21776535825272414, 0.23096831812695695, 0.2241145546703247, 0.24420725772211838, 0.25098922457367545, 0.10851039977154453, 0.08811679236044478, 0.05479199070721896, 0.05894514177171006, 0.09614316312280025, 0.0747240681651099, 0.1033432189313429, 0.10389305931947779, 0.08115835410562444]}, "mutation_prompt": null}
{"id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 11, "fitness": 0.27102240728633586, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "421eb201-34f9-40a9-af6b-05e8f2d6b0e1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "305cfc7e-6d0f-4acd-9590-feadff03745d", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "cf01922d-6ef2-4498-9491-b218b6683dfc", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "d977923c-950c-4142-af20-4f781a20de49", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "2fba932a-ad4c-4e45-b572-28d0c670b398", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "5de784e2-f4f5-4bbb-b63e-1a3576728823", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "cbff7f26-76c8-405c-bab1-883e04ef69b7", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "da5f7ac8-b4fa-4fb1-b192-72859c99f2a9", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "fd5f3ade-56ca-481f-839b-61e7d5f7ee54", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n        self.sub_swarm_sizes = np.random.randint(5, 15, self.num_swarms)  # Adaptive sub-swarm sizes\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 3) == 0:  # Enhanced velocity reinitialization\n                    idx = np.random.randint(0, self.num_particles)\n                    velocities[idx] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Improved multi-swarm optimization using adaptive sub-swarm sizes and enhanced velocity reinitialization to balance exploration and exploitation.", "configspace": "", "generation": 19, "fitness": 0.25287283346365713, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.746016436381073, 0.7634600030657184, 0.7762794343449083, 0.7699284820946132, 0.7622958911618387, 0.8004606484477979, 0.7871776046265513, 0.7511317231485405, 0.7732002139293597, 0.1839283695658106, 0.1474913856822373, 0.5628292715122989, 0.3133831246053306, 0.2127494853944064, 0.07664992762083134, 0.6028658800569435, 0.15696799357927105, 9.999999999998899e-05, 0.08807471875908579, 0.12518925949408333, 0.07936534142261298, 0.12423437819908034, 0.06906151591584164, 0.11107298280780509, 0.1140511717655418, 0.08198967955244718, 0.06679112889000971, 0.13385256391785283, 0.13503294740549832, 0.08894454607408864, 0.10543651412024557, 0.07796608756250101, 0.06398502659953897, 0.14919913916759775, 0.09199546078098353, 0.0791564837304588, 0.9576224973037175, 0.9518614254674698, 0.9504432231026494, 0.9367610920979184, 0.9481416628406214, 0.9606700037757088, 0.9618091185520252, 0.9490112134898823, 0.9494402204299142, 0.5469994177656271, 0.5290065877657828, 0.5851407781874645, 0.4765720657135001, 0.5062499396606333, 0.27471548425295866, 0.25043755354948394, 0.59999202850016, 0.3802505429433327, 0.22724115867033, 0.2262694012213332, 0.3656304065708613, 0.20460099293074263, 0.2095671110981452, 0.2041081013181718, 0.3466294218154289, 0.22944855513463047, 0.1304005232540696, 0.31494672078016905, 0.17787767112304753, 0.12637272860589566, 0.14815903236218697, 0.12398371928055274, 0.09275846920403852, 0.21033133362301193, 0.175683763422537, 0.21540203580666906, 0.2500453902925427, 0.12838329139462712, 0.1686113549022299, 0.12612497257237132, 0.12286424162391596, 0.15873462703568442, 0.23735208274987352, 0.17945372454390562, 0.24378794418923833, 9.999999999998899e-05, 9.999999999998899e-05, 0.05595834215652773, 0.024586555376537977, 9.999999999998899e-05, 0.011701060937332475, 0.04649824794412816, 0.13352325896959572, 9.999999999998899e-05, 0.08355773638444752, 0.04518563261706854, 0.058135478107641414, 0.05901513393117297, 0.045541283197340965, 0.08076652920185357, 0.06956519983708898, 0.038573449253978986, 0.03747272953956249, 0.2485929248062837, 0.1371980623701078, 0.20037852096746112, 0.06349345642548743, 0.11752949348814057, 0.09203506537037465, 0.12214433950980552, 0.15677936834245754, 0.08097656118725971, 0.013449150749942462, 0.09525782065114186, 0.05598058522364613, 0.07939391173885102, 0.1914344155331793, 0.20173328797332502, 0.06755954860335023, 0.044904923106953154, 0.053611442778934926, 0.44656272509132366, 0.5124189643539976, 0.4962349808588933, 0.5078444577294079, 0.4277954417167431, 0.5066269556420913, 0.534733875926225, 0.541855494924244, 0.5303079900771575, 0.16930696077035734, 0.103941179749796, 0.11130378690193143, 0.05433620985717902, 0.07172907161652797, 0.11101588860974165, 0.14834604321859046, 0.1084166380835444, 0.09280821638916026, 0.1664774317206249, 0.17601032431990482, 0.3900107136564348, 0.15959609495054317, 0.32397160365493405, 0.300113258146928, 0.22121817261655463, 0.18686449849736642, 0.1746764904380923, 0.25212674039067096, 0.23013016738492953, 0.3059338819703541, 0.35569043418936797, 0.39619057974965166, 0.27765986659276065, 0.2899706886739132, 0.2574171793723812, 0.2727979445026315, 0.15042122112049494, 0.2792884133542518, 0.2556546657723525, 0.22810141955324736, 0.20918104802556448, 0.19802946168010693, 0.2657751900936133, 0.2135525493967677, 0.2263772553155431, 0.20802775266291318, 0.21179213076853953, 0.2265885033112055, 0.2278914570746574, 0.18991366251387776, 0.23467297138224008, 0.1684193040511771, 0.2453441113615028, 0.23842809268208676, 0.18980739091460097, 0.2066514363037708, 0.18452077984804371, 0.1997083870329237, 0.20441673146895656, 0.17804772714810024, 0.18293602578343648, 0.1912032183777732, 0.21972581990432405, 0.18677906910225528, 0.18561821122400624, 0.15344531418561835, 0.1971939740528975, 0.165380227064166, 0.16731557744715175, 0.1626938209415415, 0.15917702127319755, 0.20776539418203444, 0.631667125204498, 0.20793957583647638, 0.609153982097353, 0.16813318557710666, 0.215388303444762, 0.22349915879304594, 0.2099197741999448, 0.15921199907771189, 0.161732634221471, 0.19861529238790399, 0.20503217883239544, 0.20463756622209683, 0.2094190301421549, 0.20268079348427603, 0.19545420262237423, 0.21016165963624422, 0.22599529724108358, 0.199938473764526, 0.09137292689908627, 0.08507623217752569, 0.09995270664137057, 0.07393390582954651, 0.09122116836004768, 0.06699244246403468, 0.08675282360739234, 0.09910129299031156, 0.11012003908646661]}, "mutation_prompt": null}
{"id": "37e680e4-e963-4490-9019-042017c65ea9", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "ed093a7d-0b26-4433-8be6-e7712a19df01", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "777904e7-2f20-4665-af42-c2197d0a9cb1", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "2ab0defb-79cb-48a7-814b-5b4737625a09", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "f901add1-bcd7-4ebc-9840-43e86c7e4a79", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "7ff427d1-cdee-4997-bb75-0c53f2a4fd3e", "solution": "import numpy as np\nfrom scipy.stats.qmc import Sobol\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Use Sobol sequences for initializing particles\n        sobol_sampler = Sobol(d=self.dim, scramble=True)\n        particles = sobol_sampler.random_base2(m=int(np.log2(self.num_particles))) * (self.upper_bound - self.lower_bound) + self.lower_bound\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Integrates quasi-random Sobol sequences for initializing swarms to enhance exploration and convergence.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 32 is out of bounds for axis 0 with size 32').", "error": "IndexError('index 32 is out of bounds for axis 0 with size 32')", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {}, "mutation_prompt": null}
{"id": "ffa52cb8-17fa-43c9-a818-578c4dc9afb1", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "8648100c-20cb-41c8-b524-2fe0824bc3c9", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "f22ccf38-361e-47ff-b583-20a0d6d10a14", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "ec14d575-0089-4dfa-865b-a82e117bfd06", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "65c5de37-6b11-4a7c-b6ec-1dafdf641dc2", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "e0f21909-e592-452b-ad09-a69a8ef51bc0", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "1d491170-46b9-4308-8be0-4d6c45fb8dee", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "03b606be-fa1e-4453-ad03-ff07c7f724ca", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "1b160c87-1203-40b0-86b4-4c017eb1a7b4", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "e760b73b-5e42-45a0-8928-a50a1bfe2604", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "261cc318-b8b2-4e64-8275-9a9b5879e29c", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive parameters update with a decaying inertia weight\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            cognitive = self.cognitive_coef * (function_evaluations / self.budget)\n            social = self.social_coef * (1 - function_evaluations / self.budget)\n\n            # Particle Swarm Optimization core loop\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 cognitive * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 social * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                # Reinitialize velocity periodically for better exploration\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim)\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization using a decaying inertia weight and velocity reinitialization for improved global search.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7566470283905922, 0.7859366359137754, 0.7609999399066292, 0.7839441438101481, 0.7648790082064869, 0.7553616069547269, 0.7734023729821291, 0.7760530843788345, 0.7371188395724246, 0.08535771879617537, 0.5591774871333551, 0.2674186058184549, 0.5482377784001367, 0.14490898042268185, 0.048240713343137176, 0.14645289644266501, 0.14067229295034833, 0.5576362892775345, 0.06987748420481543, 0.12948156535784605, 0.1075641465542263, 0.11699927772340124, 0.11046334505737665, 0.15244256985111604, 0.06432486140172933, 0.1258176290745585, 0.13590697790012707, 0.08181912757027221, 0.12820360921924767, 0.09675059434785094, 0.09073866222203542, 0.14627568755520493, 0.06805810788448341, 0.09226110945989674, 0.09115618029998607, 0.09517619783420228, 0.9584140810551675, 0.9523651047347301, 0.9586900421407749, 0.9531964026620311, 0.9496096121874446, 0.9454568411308302, 0.9578530043881792, 0.9453226901621072, 0.9566769138819687, 0.45730198096255004, 0.6762264458974511, 0.5368762114418424, 0.6074726354850241, 0.4733285149109884, 0.5810242052460837, 0.6431669419997752, 0.36485080422498917, 0.5624026113893896, 0.23855640314459803, 0.22195363854178063, 0.3217499668897297, 0.2141219127607532, 0.20419808354812508, 0.20796542633100312, 0.14413083258565584, 0.12183397517853267, 0.23155585526735167, 0.18585205019231932, 0.20632431783801408, 0.18685790645522582, 0.13630161614575642, 0.2191707144846099, 0.21906154763131336, 0.22433795359900677, 0.21285204577786065, 0.1586993377220257, 0.21420953559653289, 0.12479205739975863, 0.12531489927740092, 0.2101143507675538, 0.2854882302952719, 0.17578723287151332, 0.23967478379233398, 0.21751783394185042, 0.18035089461060905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034649684222402555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11012823573495534, 0.03630346373511584, 0.10183144153588697, 0.07781569533871047, 0.03785495282370288, 0.03262176122845428, 0.11335929310998438, 0.0878894342733636, 0.05626310418008584, 0.07444912616141575, 0.12900473223728126, 0.12625397420434825, 0.14153569016809686, 0.12054638387328165, 0.07123417292268586, 0.0791150472761416, 0.09394103935849485, 0.11588884064506788, 0.10628134819855806, 0.10926521589374316, 0.16023393961836196, 0.0277336433604094, 0.12047409225700745, 0.17054294503384715, 0.07661532114845271, 0.04505265879628717, 0.07574690741169365, 0.49726459829092906, 0.5138174293852851, 0.4751072985328235, 0.5219361794254519, 0.4794478528565588, 0.493833559547623, 0.520428225177918, 0.4377213860971211, 0.5683492392080081, 0.08198491593862178, 0.06704177195843009, 0.12896146749890303, 0.1329846235974279, 0.11046898536644856, 0.10938075218372634, 0.09979355120842515, 0.1247877050578583, 0.12860504867907385, 0.2096592994618176, 0.1845239705515339, 0.24156218408164676, 0.31303627381575994, 0.24365604913954808, 0.47911912392875244, 0.27280467198792857, 0.27261250204310983, 0.2462023855499983, 0.2600895515053171, 0.3338610791253932, 0.23709283620788513, 0.27604925587906814, 0.33888901114845515, 0.36415797794539884, 0.35612359123061754, 0.38241787054670917, 0.22205186631287677, 0.19011486851722936, 0.23880440194812413, 0.21473204061642548, 0.14057534968031837, 0.16148265518962457, 0.26279185872341426, 0.17329624826209677, 0.26236295996869485, 0.190619372595498, 0.209404762324783, 0.20825290857841317, 0.19415784358799015, 0.2051793426216898, 0.21550629393784748, 0.25001414058561344, 0.23768117676087086, 0.25711847767700036, 0.19876631461625016, 0.18135604644689007, 0.6737847386139917, 0.17108179093360965, 0.21940900315712886, 0.24184122489225235, 0.18751260752151178, 0.1757265296863677, 0.20602524998380456, 0.1996899780534659, 0.1241191002397134, 0.7919620751702203, 0.18431574666307315, 0.8261492533484232, 0.19731297003128734, 0.17047178211486702, 0.14045682817878702, 0.16068470611705865, 0.8382617666335215, 0.8051355014953254, 0.2076196823878328, 0.07306021238159488, 0.6998701137499046, 0.15401030056562426, 0.14836011398543558, 0.09345284044794866, 0.10412770058794718, 0.5385932667086178, 0.22565098205491463, 0.20340524567391405, 0.21201293721373327, 0.2600335111601244, 0.20038828881996673, 0.22500745233803476, 0.19209162490151144, 0.20915335154578685, 0.2116570090832569, 0.0955591455722431, 0.08914391679124123, 0.0849698168689913, 0.06857316383484557, 0.08187389147527102, 0.0969944395981025, 0.14330195365552012, 0.07918887346637116, 0.07255498551991513]}, "mutation_prompt": null}
{"id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 37, "fitness": 0.3162769606752192, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "9b8b5f13-8ffa-4051-a936-834ca8abf7b1", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "bd893264-9469-43f8-8e21-bcfbc4e645c2", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "48fb777a-076f-4488-a473-f61ebc4a6e8b", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1 * 10, 0.1 * 10, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -0.1 * 10, 0.1 * 10)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 4) == 0:  # Changed condition for perturbation\n                    velocities[i] = np.random.uniform(-0.1 * 10, 0.1 * 10, self.dim) * np.random.choice([-1, 1])\n\n                if function_evaluations % (self.budget // 10) == 0:  # Additional communication perturbation\n                    swarm_best = particles[np.random.choice(range(self.num_particles))]\n                    velocities[i] += np.random.uniform(0, 0.1, self.dim) * (swarm_best - particles[i])\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Improved dynamic multi-swarm optimization with enhanced perturbation and swarm communication for effective exploration and exploitation.", "configspace": "", "generation": 39, "fitness": 0.31378095401730455, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7500305734663254, 0.725855154132455, 0.7427779490115034, 0.7378174361531475, 0.734569822037227, 0.7624898600026858, 0.7553507731428235, 0.7141901324041025, 0.7150539799914049, 0.5317798109079471, 0.5534844343249865, 0.46834338675337917, 0.544170644815636, 0.5217602405695302, 0.5449923092948821, 0.5388369277157686, 0.5017425510395104, 0.5515464530869103, 0.15165089639211515, 0.11342256521824456, 0.1547910067303494, 0.1317125007988147, 0.14956847168585596, 0.11900907390787985, 0.1562738333590159, 0.15642661157142634, 0.14956372265977513, 0.12040085240330389, 0.10749924202604966, 0.1407065524146306, 0.13430697025405136, 0.14450785680208122, 0.10815524890614381, 0.16150821823899697, 0.12316332489392878, 0.11799548563746853, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5738990658452916, 0.46816785656279836, 0.5583374759790037, 0.6147651102756809, 0.5472408511944334, 0.5624424029374545, 0.5819018295774359, 0.5787585641834823, 0.5442188612639536, 0.7429418680253213, 0.7571591860940716, 0.7316746873523913, 0.7238042837178651, 0.19163986445955028, 0.1977814814557397, 0.7044132028386569, 0.22298634242384086, 0.3639831549287268, 0.12346063688712561, 0.2230241129472199, 0.11037779258908853, 0.10476353756590784, 0.2064781938462138, 0.19690374792329335, 0.1969116592061665, 0.20067782157735137, 0.22622442501387685, 0.13364620125508808, 0.20374176867694582, 0.20813009938375449, 0.23186138745546947, 0.2785260312414669, 0.18667009219539288, 0.22271821028166794, 0.22970542872201416, 0.23029182596858977, 0.052908383292714856, 9.999999999998899e-05, 0.02412204766317949, 0.05272829867454132, 9.999999999998899e-05, 9.999999999998899e-05, 0.006430663964573924, 9.999999999998899e-05, 0.051999923918360946, 0.20064278546685788, 0.10822000421316313, 0.10785561192263793, 0.07483098725432269, 0.0637074210200208, 0.03508558955863883, 0.11960154053862948, 0.09374874469783734, 0.08151364138381956, 0.18106419519052097, 0.22329062727677007, 0.11982676555627803, 0.13431699748198667, 0.12653534199799465, 0.07963217373334464, 0.13293968580728777, 0.07607283042003765, 0.08589769259154223, 0.22599892970350277, 0.07795194011769657, 0.1606827508139832, 0.13576792743892452, 0.08741121571858568, 0.09969075549003759, 0.20698363283277288, 0.10988900237652488, 0.07416363101961343, 0.47863993497468293, 0.5379828736308883, 0.5453620171553017, 0.49875330020138786, 0.5412146073958156, 0.5159129968578489, 0.506344329672147, 0.5110908834214938, 0.5074522568360627, 0.07774696227869649, 0.10169357135109458, 0.09053820637306575, 0.11457572736736588, 0.10000614984525291, 0.12258393858995931, 0.1440525307818038, 0.11193291001035144, 0.09932641653201446, 0.16692041065168728, 0.3531753120801614, 0.2156551699008955, 0.2950218518962032, 0.3807945321564382, 0.26970820439717313, 0.37298129962436677, 0.25855840800618, 0.25546481679595034, 0.3375343711033575, 0.38707540251725303, 0.3358135954174304, 0.39321907112745513, 0.46266096723419825, 0.5261236966446949, 0.3990131419488312, 0.42768341496066264, 0.45521631975943055, 0.351343280548592, 0.31870891513440736, 0.22545279512828909, 0.20511225494386998, 0.3496345650163283, 0.27123306983962325, 0.30478554195115626, 0.23915249660454907, 0.20604648687215432, 0.21988653186906482, 0.2023314910600904, 0.1958426111177829, 0.2129631040999117, 0.24411983162815032, 0.2508359780546219, 0.21597361341911536, 0.2131638930123878, 0.24088803086014388, 0.19740142274994854, 0.21266961884178925, 0.18786723200286515, 0.6500650590008925, 0.608509068428621, 0.1937562370669259, 0.21117455422492581, 0.2330821594616761, 0.5515833320016612, 0.12472200828569369, 0.1764621501773267, 0.1870634787531701, 0.8131985563084501, 0.19817016466274617, 0.8421886356865843, 0.14080028910140385, 0.16637318230900622, 0.8245135101233791, 0.5666340117927209, 0.21026143731573643, 0.4823147072274515, 0.20805301262432685, 0.1551258198744221, 0.15208736672998802, 0.10429249809665031, 0.6902520149207767, 0.6567003469292458, 0.18898141137563085, 0.18649125203888228, 0.20050726124277074, 0.1902337617184071, 0.19377509593936648, 0.22065356241052791, 0.19568713155083328, 0.20363829148024537, 0.19228445139938855, 0.09633738801881064, 0.1310938205292791, 0.096107574172689, 0.09133553908708159, 0.1015349598989922, 0.09520716917354999, 0.09742591808330214, 0.09498489625691131, 0.10341276213605521]}, "mutation_prompt": null}
{"id": "69694049-5f56-45ab-a910-1a258ffb8d99", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "d47ad6da-5429-42bf-bd5f-cd39d01c4496", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "cb3a4ca4-5c53-4bb3-9158-1b5dc4ff39bc", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "f6ff4df1-1be1-46f6-95fc-2593d7ed8980", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def logistic_map(self, x):\n        return 4.0 * x * (1.0 - x)\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        for i in range(self.num_particles):\n            chaotic_val = self.logistic_map(np.random.rand())\n            particles[i] = self.lower_bound + chaotic_val * (self.upper_bound - self.lower_bound)\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Improved adaptive swarm optimization with chaotic maps for initial position diversification and dynamic parameter tuning.", "configspace": "", "generation": 43, "fitness": 0.2908588732989383, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7568297061965855, 0.7385398051449168, 0.7459205019525014, 0.7634275888537926, 0.7479189328742946, 0.7437864192846758, 0.7222436717729824, 0.7298516365668344, 0.7541490728378072, 0.543751423959203, 0.563072562956838, 0.5396071230029758, 0.5338612187477711, 0.5654968569942995, 0.4797689072841075, 0.4406314312976749, 0.533417159982848, 0.5025272798671845, 0.08825241459576483, 0.10473047626260634, 0.15459731138249133, 0.11309185267926114, 0.14885258809474744, 0.4740717674499849, 0.20166561390943383, 0.15702463933998878, 0.13281823775069534, 0.1575203662864697, 0.48152098726601555, 0.13969236089988157, 0.13175273787238873, 0.12009936794542131, 0.10534115178707615, 0.10437935166264345, 0.1334211284972966, 0.1133565827948545, 0.9479405658120983, 0.9554572771579685, 0.9486633544773493, 0.9298150635091664, 0.7687959275313009, 0.9310075163496307, 0.951105987527752, 0.9316419184832337, 0.892347149915584, 0.6010914194526408, 0.5606990688511329, 0.5688666304250973, 0.6233232047450699, 0.5322801308982075, 0.553558246036821, 0.5977817395086138, 0.5764747194785673, 0.6093896580875293, 0.17145700241745165, 0.3083759446219564, 0.7132445003659711, 0.72649887861584, 0.26403874447544806, 0.1976071286158524, 0.711232041214868, 0.6672243628392622, 0.22213201499588797, 0.20652489677215113, 0.2012771871874406, 0.18812389813377473, 0.19095263800798734, 0.2087131733059273, 0.1659138483367253, 0.2074753286201545, 0.19836298018837706, 0.21115270533795405, 0.21195859334352263, 0.2704365253362708, 0.21376451173602906, 0.21226253467021106, 0.23791541311209052, 0.24585867516491922, 0.24974509979250226, 0.2311033889728945, 0.2331603516000792, 9.999999999998899e-05, 0.06122867427504475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031604930132213105, 0.07366109307961599, 0.005961232561331742, 0.10779648661488805, 0.15285320076595021, 0.10551318208916949, 0.09361999202062599, 0.10175929673065898, 0.10275944701219064, 0.02635054446586127, 0.008588036433443302, 0.0425877154869877, 0.09818613041764279, 0.03712377760632535, 0.04974526189503725, 0.055748055836502663, 0.05483013085511179, 0.05558795035933395, 0.11282104157007633, 0.14058837875227204, 0.10364018084009641, 0.0731217981928789, 0.1635866393216684, 0.09564546422666642, 0.09807074778543978, 0.15177947574783013, 0.24671583505576122, 0.07488673741850693, 0.09928000122315139, 9.999999999998899e-05, 0.4996013130214242, 0.5350258348979701, 0.4695899281100666, 0.48956302646678673, 0.4806490212423712, 0.4870839329551522, 0.5128561810942466, 0.481675840072047, 0.47963117613820183, 0.10275358585761174, 0.06628565269050846, 0.09762516957141743, 0.0803660036533409, 0.15813871661583767, 0.09434603678411235, 0.11845618902175359, 0.1345397572016802, 0.1402149765639208, 0.1960008620444208, 0.5144739987340835, 0.4033024605448895, 0.2702667818657566, 0.23807747152410785, 0.31267578261451556, 0.24824497178721394, 0.3711986964390259, 0.16070486727832323, 0.3763726796256337, 0.3173659021268064, 0.3554717306187336, 0.3904390795843077, 0.38190110941435984, 0.4528313636059096, 0.2280410956164779, 0.22296354359025905, 0.22953554324245629, 0.2656881110574668, 0.27614141707249207, 0.23047246765857554, 0.3118328529104534, 0.32138584380846336, 0.24484567236878962, 0.15421776419272615, 0.17418924695821703, 0.21641812790550508, 0.23070550515197596, 0.23580883207048453, 0.2737703583566766, 0.3187206246083245, 0.2530110490825157, 0.23768671772627548, 0.25014035132366774, 0.24517867422089534, 0.22468718287724632, 0.1972178804027117, 0.23172278147671432, 0.20065290724954388, 0.18543184403640045, 0.18992589407963367, 0.21666449076894212, 0.23838550820849191, 0.2106932986521589, 0.20999423596012978, 0.16685707884287693, 0.18693200000692767, 0.18787909872350705, 0.15201447770442156, 0.15309750783690756, 0.15405350476173774, 0.15103193836306472, 0.15164738140336298, 0.08923711274326573, 0.7393206414534796, 0.6044404970460561, 0.07286060672203187, 0.09441907586161502, 0.09470224092547797, 0.09456779452083919, 0.16476548261954327, 0.7850077913871727, 0.16703602572567655, 0.21856859295369213, 0.18980495145273857, 0.18235624180034715, 0.18764959957590266, 0.20884116142471598, 0.2029951717848849, 0.1986694483563195, 0.18956020696596687, 0.21548164157524763, 0.09618652320839394, 0.09552142899186766, 0.08499973556302665, 0.09762792896850514, 0.0697969117519408, 0.13197162171422439, 0.11797575994435161, 0.11656781130610638, 0.1272280953273559]}, "mutation_prompt": null}
{"id": "4855e58b-e359-4517-986f-ecbd208d3a79", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "bbc2556f-1134-4239-9723-fb6603336c93", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95 + 0.05 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Inertia oscillation\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 4) == 0:  # Modified perturbation frequency\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Adaptive multi-phase swarm optimization with inertia oscillations and strategic perturbations to enhance exploration and exploitation balance.", "configspace": "", "generation": 45, "fitness": 0.3069043208393133, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7053283890389326, 0.7192581997193719, 0.7129764307535547, 0.7097474251821767, 0.7178273006225631, 0.7155685479016165, 0.7421969356265181, 0.7310773589543313, 0.7041855756801401, 0.5306141685340064, 0.5192176972818405, 0.525692993900473, 0.486418449588923, 0.5686545775184481, 0.49707125665717145, 0.5022343283902375, 0.5165452676435043, 0.5052314887303755, 0.14885590434573082, 0.4043486577253107, 0.13860469682686893, 0.15144897358181875, 0.5363867716517339, 0.11999564844393484, 0.11636381447152344, 0.1463458508041846, 0.38623524460905734, 0.10635091107382977, 0.10831963145805545, 0.13436624582881196, 0.1154974648084719, 0.13086319342393926, 0.1321232644934489, 0.12754141186596568, 0.42296638054113234, 0.14104949682279733, 0.9635607385616123, 0.9526517490958692, 0.9531988264004501, 0.9546749762509096, 0.9514097695873173, 0.9313146191113193, 0.9579844226137034, 0.928742539938184, 0.9574274965773379, 0.5464018123380114, 0.4324192203028402, 0.6189987683781979, 0.5114720676935351, 0.49971013681064047, 0.6114411640988731, 0.5318592103771063, 0.596324672424088, 0.38306594090260326, 0.26806172181470633, 0.6701924177029789, 0.36396153724795655, 0.2677344351675296, 0.19855156943238128, 0.20365618533396546, 0.7195967258463845, 0.17279474813352458, 0.6932639136224648, 0.20783186462108405, 0.19719064635007932, 0.1073807799872376, 0.1058124945111274, 0.20509187282606545, 0.12448376644754822, 0.1867666986701052, 0.21114732615176734, 0.33601840796219873, 0.19416095210221618, 0.21111775060978766, 0.18322310400237152, 0.20565828267749453, 0.18316032761028977, 0.18688637906407068, 0.21704607860334746, 0.19462333302723078, 0.2250028879435052, 0.027556757584228042, 0.06980422613349979, 0.04238917887529858, 0.034879427307657696, 0.03625675105434689, 9.999999999998899e-05, 0.004198353311103298, 9.999999999998899e-05, 0.010405546003266486, 0.15344210535869263, 0.07235247472504303, 0.09532401804562673, 0.07014403480335862, 0.054891724785541385, 0.018555199121784827, 0.11133210553745887, 0.10307501249891815, 0.11580190063903406, 0.155562656826017, 0.06970852173728859, 0.09758310491109501, 0.09064555381763417, 0.10572322172269888, 0.08683754060383708, 0.19188310739549264, 0.09299685519554646, 0.053489355534509175, 0.1197563825732233, 0.1154286678552291, 0.1389790639085935, 0.20399107604068678, 0.09314863661400541, 0.1914027258816825, 0.156544127054136, 0.08569353924745315, 0.07204293980634979, 0.4747497341628013, 0.45541524832061664, 0.4930538114093991, 0.48539947900749225, 0.5256864012791357, 0.48795389989767346, 0.5156405681024345, 0.5001955568774601, 0.4974837778254294, 0.08110042180950094, 0.12466155393371536, 0.11542164939190136, 0.14879157964822265, 0.12118298401536953, 0.1354803827615798, 0.1135461193574473, 0.1241057821008239, 0.09548582410368234, 0.24258032647085093, 0.3191539588407051, 0.196866309254641, 0.24356171301761365, 0.3113879419639036, 0.3102040922246714, 0.2262772024353119, 0.33496088531351187, 0.41159997518583036, 0.3526575366001523, 0.398473839000581, 0.31697218959127915, 0.4611397156286271, 0.46391236115492607, 0.3423264711326508, 0.28283784079103935, 0.31886123638975816, 0.4833988060388231, 0.24229527879188273, 0.24937488255275098, 0.30160705672258725, 0.2682726604115814, 0.26113310992305194, 0.23214498327602207, 0.3038929623165145, 0.3013030698442163, 0.20999150051631543, 0.24070111727212984, 0.2051490581738623, 0.22336263379912868, 0.20389807659557702, 0.25717670908314094, 0.27892071127671003, 0.2201072797309933, 0.20834305018301857, 0.22892498971988162, 0.18402756593713288, 0.21712375950055507, 0.5900805267597344, 0.21350463496028327, 0.20395754122617238, 0.2103551045530928, 0.23210869808487133, 0.20087272710038806, 0.5983838112295097, 0.12495327676868107, 0.17554541601472207, 0.18687811148492595, 0.8006204964850026, 0.19957740287673686, 0.7817128240047774, 0.14077840613659043, 0.1664056445684451, 0.8090462145494401, 0.7042042606474979, 0.2108477531937638, 0.666417210414705, 0.20870466068675364, 0.15468103310610637, 0.15184233480612308, 0.10427643840322198, 0.5918853873112493, 0.7104865439812048, 0.19434421648693523, 0.20395626651378818, 0.20413696944989468, 0.190331229696296, 0.185043856088703, 0.22050441615385985, 0.18569311115101006, 0.19651536068548736, 0.203797724694874, 0.11007716398836054, 0.13305395399677022, 0.08953135984775995, 0.07944600844697558, 0.09140699359153637, 0.09003048335286024, 0.09281902067513748, 0.09577640512103391, 0.09385448538661989]}, "mutation_prompt": null}
{"id": "840577e7-3aae-4a8a-922f-d812764f89dd", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "41305ff0-77ed-4e3b-a6f7-9e5c4f3b3533", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "77e116b1-4b6f-43e4-90f4-9c6c78f5db89", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "d898954b-db9c-4911-9c3c-cb3e6fd381bc", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "329edc8a-ceae-4b97-9c87-fda8c374155c", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "e61a2ddc-1ed8-4f04-b3f2-889673bffd00", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "7930e145-ebf9-4af5-b765-375250cdd5ea", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "73aacebc-bf1b-47c8-a8c3-582dd9387df9", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "d874fd87-3c11-4257-98c4-d404453d9aeb", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "059b7032-a476-415c-81a2-c952ddccdd7c", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "3b6a016f-70af-4cdb-8dea-fc737aea5ffa", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "4c9c2e1c-6885-4c7f-b521-7096385ece33", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "138204a0-eda4-468c-b487-c012791c703f", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = max(0.4, self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95)  # Adaptive scaling\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])\n\n            # Re-evaluate elite solutions\n            if function_evaluations < self.budget:\n                elite_indices = np.argsort(personal_best_values)[:self.num_swarms]\n                for idx in elite_indices:\n                    value = func(personal_best[idx])\n                    function_evaluations += 1\n                    if value < personal_best_values[idx]:\n                        personal_best_values[idx] = value\n                        if value < global_best_value:\n                            global_best = personal_best[idx]\n                            global_best_value = value\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Improved dynamic multi-swarm particle optimization with adaptive velocity scaling and elite re-evaluation for enhanced exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": 0.3070635581571458, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7390567500352658, 0.7233210917215516, 0.7142295398383691, 0.7216976366659811, 0.7046921595029384, 0.7496419960739368, 0.761046187097908, 0.729173902053118, 0.7337506445688053, 0.5140692858243422, 0.5396954516272551, 0.5736710307115023, 0.5447364366522784, 0.5457539755713667, 0.5574144373194669, 0.51343369245805, 0.510753050806226, 0.5695311718057477, 0.12598467084506393, 0.12995593039172926, 0.1168715740802887, 0.13276582670102, 0.1587865263231979, 0.12344087413859905, 0.138483950614969, 0.16089834475588727, 0.12134978867790902, 0.1196438669175568, 0.09940915701265163, 0.1320829500337608, 0.15262195785937405, 0.1347150844733982, 0.10329964984701512, 0.1260522960217788, 0.10820297486873365, 0.1104009017455937, 0.9594589928317087, 0.9485911522124474, 0.9491000966046423, 0.9507018981567775, 0.9470977034695142, 0.9350057236997575, 0.9544259278604754, 0.9224528764505674, 0.9538800741612908, 0.562137165239146, 0.6001875054300606, 0.5738353847888817, 0.6173308195998357, 0.6089450198341799, 0.4766306438717274, 0.6072714516348543, 0.5839122933329786, 0.5995588661882991, 0.6563119620845264, 0.6919214672118209, 0.6721484822832144, 0.2189333554239271, 0.1917988270299963, 0.19714840606052608, 0.22289893428346008, 0.31711604223690504, 0.289412291030252, 0.19706533955441008, 0.1985297364659987, 0.10390065635283097, 0.1083937178654707, 0.25861787535887704, 0.1955389901816712, 0.20195213183638316, 0.21909851666391778, 0.19536319292250692, 0.13472314895087034, 0.29273788098258, 0.2034596828300964, 0.23308509024455404, 0.23451926112633015, 0.12811053052649657, 0.20440273015828347, 0.23904070401155053, 0.2310397326674003, 0.003349734623814604, 0.047747702302349704, 0.00444194966189515, 0.022158937863715034, 9.999999999998899e-05, 9.999999999998899e-05, 0.00036878911980753326, 0.004328666380513768, 0.04618818160335281, 0.15319403441409285, 0.09129681366440723, 0.108200657567188, 0.06648456565432648, 0.06927469629996452, 0.044668994904620174, 0.08434095406269948, 0.12793930976394963, 0.07656405827788437, 0.12138644674604693, 0.10400119749677073, 0.04307372471246673, 0.2522836315622765, 0.13070973028325694, 0.13160752067899972, 0.22322506054853464, 0.07333431907616073, 0.08502600305600339, 0.14954248601174824, 0.10714749917091337, 0.21642212141189798, 0.13267000446898325, 0.13768134114967778, 0.19424381335856256, 0.21286205733912034, 0.11791539630400605, 0.07344628191312108, 0.4817958027065856, 0.48916638210651286, 0.4950985611255644, 0.48541879535744115, 0.5132481887486964, 0.5018115198200959, 0.49856392154810314, 0.5082288104062151, 0.4936740539092336, 0.06736917784073759, 0.07889550488156061, 0.0937711368319547, 0.1101938810173837, 0.10829750191501297, 0.11823467548097288, 0.12321493898886093, 0.0908910838947784, 0.08755645188584427, 0.3221968493932259, 0.33358231942739525, 0.19238836078063026, 0.3798420609737807, 0.2389354084509091, 0.24476016354338603, 0.6544739116480243, 0.18338713143347019, 0.3333589807362427, 0.3406162619052526, 0.4234212491748123, 0.3388227436026915, 0.3346698172654212, 0.3922833113934646, 0.473923500135078, 0.4606246341045481, 0.45269468406325475, 0.3157565843947018, 0.2700383302467658, 0.2746577780311332, 0.29237895943907743, 0.19491375730718363, 0.2899932447283311, 0.2876843643272151, 0.2402724579338975, 0.2848286663218881, 0.20758429268695067, 0.26771438913060297, 0.19128855556895352, 0.21490039471558398, 0.2034353993909701, 0.24072393537272996, 0.23205942175834382, 0.2566653071754863, 0.23279965220836174, 0.23740975158558641, 0.21196062413518657, 0.2165248886922011, 0.20576744907771505, 0.6040760851336092, 0.1978254140958402, 0.21191524880818702, 0.21183569970073657, 0.23551455921333075, 0.6397135490407684, 0.12437767879765327, 0.1771684397348725, 0.1861300583749036, 0.7697361127331293, 0.19826830303166243, 0.8116299873078666, 0.1411336136527236, 0.16590388886384988, 0.7938273130332222, 0.6149108136989271, 0.20962561986876838, 0.6357672425303886, 0.20691612637154477, 0.15520871002281855, 0.1506722146885735, 0.10411528944818749, 0.6712186753154349, 0.6465362250524951, 0.22203495305967968, 0.18798200212302463, 0.17901684769949133, 0.20604377411367725, 0.23953267430144076, 0.18870840839891156, 0.1900771687358399, 0.19654223504968493, 0.18694511988055074, 0.08643034283538198, 0.098996081844967, 0.09328187257855569, 0.09683516081156396, 0.09754928480857783, 0.10007177521724875, 0.09436220170833853, 0.08523381306812461, 0.11153426765515906]}, "mutation_prompt": null}
{"id": "f63e4f1e-655f-4773-9d5d-0907a7e822f7", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "f3d7992d-00e0-4a6f-ba3c-313bc0543373", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "64c39705-a00f-47b5-9dff-ffb38edf4fa2", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "ead486f0-8603-4aaa-9a0c-e2ee7b527fe5", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "d7e156a1-3c7f-4a81-9156-4948e4c71d09", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "2e64d239-400c-43fe-9996-6c9a432d8c0b", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "448dc7a4-85c1-4592-adeb-5b60424dd3de", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "ba9f0a30-188a-497b-8d86-a7532b745c74", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "55c77945-9acf-4d2c-8a1f-cd962e4d8d1a", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "42a0196c-480f-4d3d-a5df-30b70845e3a9", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "38fd2ed8-8c72-4362-8eae-d5cf785c62e5", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "66064e6e-435a-45e2-8eeb-3004d29d6380", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "916f2814-f171-474f-b5b2-758be71023ba", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "d8a74ad8-57de-448f-ae62-f73d06397f5c", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "86ffdaf1-179e-46c4-a7e1-c318a0120f89", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "c0d41d88-bf69-430e-a662-efc30a98049c", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "91101038-dd5e-4c51-9e20-463b8242f6d8", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n            # Swarm communication: share information with neighboring particles\n            if function_evaluations % (self.budget // 10) == 0:\n                for j in range(self.num_particles):\n                    neighbor_idx = (j + 1) % self.num_particles\n                    neighbor_value = func(particles[neighbor_idx])\n                    if neighbor_value < personal_best_values[j]:\n                        personal_best[j] = particles[neighbor_idx]\n                        personal_best_values[j] = neighbor_value\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Introduced swarm communication and adaptive momentum injection to enhance exploration and convergence.", "configspace": "", "generation": 75, "fitness": 0.3092889937029988, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7327035767919265, 0.7039090114253769, 0.7296085905318019, 0.7152785047345909, 0.7215196116541128, 0.7173225697417983, 0.7355625081389461, 0.7298097069385869, 0.7200636797986992, 0.5419112600463716, 0.48788513974123016, 0.4869741205271557, 0.5263090159811266, 0.5580038310423459, 0.5374995058418783, 0.548332625218539, 0.5278904981036745, 0.5279663453445347, 0.45463018934321675, 0.1156620427821985, 0.13564129038998873, 0.4189331648362141, 0.48797001444271926, 0.12676607108326976, 0.12569883184624964, 0.14927745317345975, 0.13631567745147455, 0.1267579470749941, 0.09186957873880508, 0.13865034820037203, 0.13077331750742782, 0.15791616071538483, 0.10829709309074786, 0.12756630254439683, 0.10734466038420831, 0.14017715454797475, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.603431556211512, 0.5513885061430845, 0.4772634015044773, 0.5760160966458505, 0.57814206976691, 0.45882831242430644, 0.5943645821647714, 0.5866362407539631, 0.4691396618767312, 0.2271151612858583, 0.3456574380015127, 0.3467341307179781, 0.33641597044204785, 0.19234814297372171, 0.19123544423548233, 0.32046236641824355, 0.21763141620019033, 0.712239093375887, 0.18066615078873205, 0.1869026226620043, 0.11007998338294056, 0.10516845016107323, 0.20060152222674055, 0.20038931254148673, 0.20661004207711642, 0.19938489222989675, 0.36778300047420664, 0.1350976016763823, 0.19840792688505526, 0.20772779567779776, 0.23563322478247217, 0.22828117325036235, 0.2536834689470159, 0.2116615907056666, 0.23410951826683757, 0.2268394074921558, 0.03846664861972382, 0.003702339063528015, 0.0013650497321449073, 0.09486198194669537, 9.999999999998899e-05, 9.999999999998899e-05, 0.018357181726664562, 9.999999999998899e-05, 0.008063957141769773, 0.14195188858241126, 0.09326890004866106, 0.12458554554290802, 0.0638676963650674, 0.05896015476425731, 0.0342811087715128, 0.09152882543591656, 0.0818807955674753, 0.0723663621276881, 0.2301979290799986, 0.12785980687762133, 0.11346410652296768, 0.13957020846148882, 0.15386448062135327, 0.11032641636412277, 0.2097410484604657, 0.06557773101609599, 0.0820609125803714, 0.18072664147770157, 0.21585072449954612, 0.1645050248660791, 0.28384202933872227, 0.17513225923392184, 0.26102464798633773, 0.20769673336229888, 0.1209107127974628, 0.0750713773280608, 0.4919111842334676, 0.5210697398058697, 0.5323750574767722, 0.47562960141263777, 0.5157902429446221, 0.46518875708561325, 0.5501530702276379, 0.5229596978158009, 0.5134193426927409, 0.07652191296755739, 0.10383774264742007, 0.12854387120516386, 0.15963698141337956, 0.08706019744086713, 0.11360686115738006, 0.11925200540390901, 0.11243653457629788, 0.100301047090947, 0.19070569477740984, 0.46622351409599694, 0.20267904868810982, 0.5764828662662486, 0.2728176577477367, 0.25947650203149397, 0.5051748313969903, 0.23532657850590777, 0.4591429079883057, 0.32778487564733827, 0.37076919662515906, 0.37724319089072555, 0.42255090774830717, 0.40013148781535934, 0.4175798476512902, 0.4391423614069144, 0.43316257890621845, 0.388350447657447, 0.25689016260282616, 0.28930019899044834, 0.24004440925643922, 0.2069085197162953, 0.2977256240572377, 0.2694679415065754, 0.22988418559647217, 0.24688577884470164, 0.23254940010676328, 0.23566868510860317, 0.21578143081857493, 0.226926532766491, 0.2436097583614284, 0.252607419511918, 0.24297606997381527, 0.23359829841876512, 0.20351490100060243, 0.23883777257063654, 0.21279291281316415, 0.6131100439534741, 0.19474011457705032, 0.23279209092646613, 0.22854112677934302, 0.19394551519602654, 0.19481804397313351, 0.23194267462615892, 0.24106016543713027, 0.12491451721809976, 0.17594811086102413, 0.1868367833468224, 0.7740396139676151, 0.1987867708961386, 0.7691800277887201, 0.14104410962241876, 0.1663127070067867, 0.7768202672828783, 0.5275864073837088, 0.21030374808941454, 0.7326851272976378, 0.20835268275018315, 0.1549059983032699, 0.15258618179788774, 0.10424209983999155, 0.6684763200740043, 0.6125075536448734, 0.21348779110890848, 0.18231279269602962, 0.19983988070206338, 0.18491289973075975, 0.1880854801830435, 0.1978054771146125, 0.1903599376782904, 0.2107166718308322, 0.1876472900691628, 0.08673126749438831, 0.11854063813579452, 0.09901406531143986, 0.09401764909127741, 0.09905175828792201, 0.09391277194716063, 0.08691893120515903, 0.09775383964046958, 0.14154826594663406]}, "mutation_prompt": null}
{"id": "5a8a1912-3fa9-4fa2-b9bf-c69d130fb3df", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles using a chaotic map\n        particles = self.lower_bound + (self.upper_bound - self.lower_bound) * np.mod(np.arange(self.num_particles) * 3.7, 1).reshape(-1, 1)\n        particles = np.repeat(particles, self.dim, axis=1)\n        \n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            # Adaptive inertia based on cosine function\n            inertia = self.inertia_weight * (0.5 + 0.5 * np.cos(np.pi * function_evaluations / self.budget))\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced multi-swarm optimizer with chaotic map initialization and adaptive inertia for improved exploration and convergence.", "configspace": "", "generation": 76, "fitness": 0.2688410455598363, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.6870983096680353, 0.692218791790524, 0.6861919302322226, 0.6931245247166635, 0.6584303693195332, 0.6714584863047979, 0.7019333341864457, 0.6846413016578817, 0.7018896103864996, 0.4729945200935939, 0.4842578098877257, 0.472425046864293, 0.4241371716825941, 0.4676131976874225, 0.47393893127921616, 0.46140876064492564, 0.43872597547098846, 0.42818681260744884, 0.10286030425601311, 0.10032375733486554, 0.10786687031084474, 0.15064636873911408, 0.13270288767936766, 0.11473274542304623, 0.15090232747897658, 0.24535765451770009, 0.12919111320774845, 0.10240747182785814, 0.14452126718387903, 0.13093670181424732, 0.11751751143545519, 0.13095997926611413, 0.09715823735457785, 0.11736382592627781, 0.11925717159335836, 0.07971989324400708, 0.9387888686285359, 0.21922009634598094, 0.9547279421038158, 0.9337078213859229, 0.0974615110502215, 0.22300927989956731, 0.9518099848831707, 0.953871833037302, 0.9559592125427936, 0.06301085684199004, 0.5170511614380102, 0.4801942941680325, 0.5403907465546968, 0.5422735380291955, 0.5509681079349564, 0.0938982734577759, 0.40715700467959437, 0.4042264608765631, 0.599797908383723, 0.3319279751133425, 0.2869501657576006, 0.3349329222382922, 0.26816545163479355, 0.6628965078036586, 0.6559164981195813, 0.31518597793957903, 0.6493302719422368, 0.18887230406994981, 0.17957434946874695, 0.1687805856755965, 0.2095931600685852, 0.18135882432843287, 0.17547548534742785, 0.18007952323184295, 0.17563527656732336, 0.1873547494995167, 0.20738619529435376, 0.18697239464886872, 0.22413437752309817, 0.19418744276341082, 0.1614713250269011, 0.18151271548228554, 0.20708083225664853, 0.22963891868604258, 0.22720711842050645, 0.050515848303868904, 0.07115439482519337, 0.004976668213105717, 9.999999999998899e-05, 9.999999999998899e-05, 0.048096966395859475, 0.022742519328990407, 0.04358841815399306, 0.04344431210409261, 0.12282007379474547, 0.13598208095684206, 0.13362284193387208, 0.056264820976618446, 0.11789695186526172, 0.09081123135240599, 0.007895165918306524, 0.0772778147451636, 0.03320380400002809, 0.03138958494842159, 0.10462938747060346, 0.09860680003423061, 0.047832356211649496, 0.10916828770460818, 0.09182562990207321, 0.06320224671223329, 0.21467706654620156, 0.11933567005679158, 0.11558983858035754, 0.05985903574038909, 0.21281719137223087, 0.06928584856791242, 0.13312880259773407, 0.10688162601943318, 0.06689673015578579, 0.10876479955513818, 0.16793260510464747, 0.463249188384523, 0.4867164449009155, 0.4551368246373365, 0.4586141561955608, 0.48960759373327933, 0.4644357365441798, 0.5005972217360197, 0.46460992521822053, 0.46494341526023586, 0.07508523891478436, 0.11361918706204566, 0.10480779612653846, 0.07582902371292699, 0.15090219251304515, 0.1461135481886191, 0.12242680534149497, 0.1242087820914699, 0.09754461019795146, 0.24028877197367615, 0.37549544185377104, 0.45414585164936505, 0.21478422798661623, 0.2624483650030136, 0.23468904857821737, 0.2723396273032952, 0.3037109517832314, 0.19524905721008168, 0.3363000619276144, 0.3728286195749414, 0.48313079673770387, 0.3477377423915966, 0.39397685563796914, 0.4122402826066769, 0.23491085909066534, 0.2388105164814186, 0.2131130836255659, 0.24793546427948387, 0.2718176515599231, 0.2495929319285034, 0.26076267516281537, 0.22510300220576274, 0.27648695145241986, 0.14554791357260588, 0.19627060944719144, 0.14325874515917736, 0.3262675365401051, 0.28100935013283945, 0.3187885512818306, 0.3232629550973075, 0.27983714301393425, 0.3218284580839377, 0.3270116753849315, 0.3299684134937655, 0.27786259064213936, 0.20572079861099024, 0.19741080319961446, 0.20091919912930667, 0.18536524145475786, 0.6070929954366708, 0.22813032871852934, 0.2008975794617368, 0.2059282820146222, 0.22702196356535342, 0.18513798239010293, 0.1841963066935608, 0.18581654573530604, 0.15336649097898203, 0.15180957100263182, 0.15043093344404002, 0.15199591901893694, 0.1504782417947257, 0.15124831653928728, 0.644938055248145, 0.71392681820481, 0.07274838597889999, 0.2073618961245357, 0.2087306048339802, 0.2075452972566052, 0.1667094700356998, 0.1663249962582697, 0.6547708911648698, 0.19731724137768136, 0.1777687453746175, 0.20120362093844302, 0.18658126956915533, 0.19954517404583416, 0.18568134416749849, 0.20169652315187125, 0.18688523792056522, 0.21685691276154884, 0.09854591339423036, 0.12091051639250183, 0.09492052303039422, 0.13709972293326955, 0.11566163012415731, 0.07801822637677847, 0.12807457353261775, 0.08947991957954837, 0.08356971697220306]}, "mutation_prompt": null}
{"id": "e958d67c-c862-44b3-a58d-3745eb75ef44", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "5340f1ba-afe0-48fa-94f8-a1136b206739", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "a59ae856-50fe-440f-80b7-679f008b9b87", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "dc0feef5-6acb-45d1-87c7-732b65dec70b", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "7a4a00ff-ea87-46f1-83ce-0bb93c7476cd", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "d763c3fd-be17-424b-a740-bf2455b35dce", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "424e49e7-b98a-4ee2-830b-b713a0c20493", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "14122483-e969-4315-9606-6fc1753db286", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "db80b8d8-d7c5-4b34-a4eb-1489db9a86f0", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "8bc12801-c3f4-43b8-a92f-5bda81487ff9", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "ca390ba2-b8c7-404e-a598-1a3a3a0b2cd4", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "1289dad9-f5d0-4506-acd3-a585c3ec3467", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "324108c7-36a8-491a-97a0-647ce4c1bda7", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "3b77d8a7-db5a-41a5-b259-a5f4846b5587", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            self.inertia_weight = 0.5 + 0.4 * (1 - function_evaluations / self.budget)  # Adaptive inertia weight\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (self.inertia_weight * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    # Dynamic regrouping of particles\n                    sub_swarm_size = self.num_particles // self.num_swarms\n                    for j in range(self.num_swarms):\n                        start = j * sub_swarm_size\n                        end = start + sub_swarm_size\n                        best_local = np.argmin(personal_best_values[start:end]) + start\n                        for k in range(start, end):\n                            if k != best_local:\n                                velocities[k] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Introduce adaptive inertia weight and dynamic swarm regrouping to improve convergence and maintain diversity.", "configspace": "", "generation": 90, "fitness": 0.25519123335900656, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.487663781283462, 0.5720643868300536, 0.5788194195869676, 0.5931367324643132, 0.5490123549683033, 0.5202796408714954, 0.5681713180984229, 0.6176166367127147, 0.590276299864332, 0.17011502178340865, 0.26917038609086597, 0.14927295723569456, 0.1339722676195494, 0.24406362686375715, 0.16420968457809226, 0.20211799096286098, 0.20378213225424324, 0.24981921140562635, 0.11749592859739355, 0.13375949491057726, 0.17187198479191723, 0.2680167564273903, 0.12604808762970876, 0.13729440560810913, 0.1342413475768519, 0.13438259228393112, 0.1422522054687252, 0.11824230703466032, 0.10916486722654883, 0.1295304861602835, 0.10201502115359584, 0.13003792065023279, 0.11840659326740821, 0.10944069837051684, 0.10328983595464802, 0.12431772943925079, 0.963695376385941, 0.9525689157896905, 0.9542718143554534, 0.9546377960008264, 0.9506384308817438, 0.9526986874692495, 0.9586656671359869, 0.911293416399782, 0.9574532494377489, 0.37487202869730063, 0.35811216178210736, 0.35095144644372844, 0.35625068336451593, 0.35579158091296736, 0.39933845095481035, 0.33684841669916354, 0.37062871324838165, 0.37031780592674746, 0.35512785105859834, 0.5303071408028265, 0.5366701017311607, 0.5774205268433961, 0.20314937330609795, 0.24672925333865692, 0.5068175713595514, 0.4595579320069759, 0.3677581168511378, 0.15163964357564197, 0.1575078574494161, 0.09921819661407083, 0.0981888848195498, 0.1531680924395432, 0.17108947027584198, 0.1730338317143738, 0.15316338972203958, 0.1528302231140135, 0.1739617545455585, 0.16473889109830941, 0.10324665597379046, 0.16085735790061118, 0.17272992145084354, 0.19139589912362087, 0.13264507428344863, 0.18546720812443596, 0.22701275998070025, 0.04693056193784817, 0.0071657828345645935, 0.03019789833262132, 0.019956582340000417, 0.01215167963849817, 0.02596047592061279, 0.002179782460830948, 0.03218809314219728, 0.004595118365230522, 0.13697996134404422, 0.10092041943465324, 0.11350462138028139, 0.06716246223512667, 0.07166323834662258, 0.051571527365733894, 0.12312614595566573, 0.07876294118499938, 0.07593973449411462, 0.1509352301057375, 0.05686367896547995, 0.0599562131410708, 0.06756086187906218, 0.07339180142096269, 0.042155536459276166, 0.10146839468705982, 0.09582207040698054, 0.035681789280964216, 0.0964467988280252, 0.08962396576619136, 0.13547568210635985, 0.12034802072673478, 0.17654733166222725, 0.1183337398928781, 0.0644506848037707, 0.13850755487847832, 0.0667945949277795, 0.46635652367311786, 0.4472907471429618, 0.4145844627184564, 0.4280916184575647, 0.4384257172930378, 0.48680535805336445, 0.42650301187538087, 0.4349982113100044, 0.4364927794748754, 0.1121393555423732, 0.13152193670712908, 0.09771505376399003, 0.12123335206840125, 0.09772037252302102, 0.10677545403816002, 0.13250112912194179, 0.11392907717035616, 0.11743777541269951, 0.35708688597766214, 0.28040359644268886, 0.27626316567228437, 0.29450590582888103, 0.3096498139406082, 0.26801271393180937, 0.22338052410184928, 0.2167934443618652, 0.25695822650941413, 0.28625892141680076, 0.3216070493563582, 0.32697981989826885, 0.3639965921386583, 0.3067584995864918, 0.33525234766625034, 0.3424161294046253, 0.3573387578075976, 0.22725731866874044, 0.2086610199148209, 0.30248800057892977, 0.22105802639153838, 0.1860255439318973, 0.21155483278878195, 0.26834267723610306, 0.23346026780541818, 0.2418963732142413, 0.2145243941788597, 0.22809426741391858, 0.22149103928640612, 0.21035735693804647, 0.21317139611136304, 0.24770166362812107, 0.2122611479843406, 0.23949224314637518, 0.21334904076684258, 0.23140891853057255, 0.17546153554314892, 0.19636960960869743, 0.18809293101487645, 0.391514134692007, 0.19790718005083296, 0.23326831861191233, 0.20091668352254444, 0.20180263820784816, 0.22186580742457473, 0.12392705092472989, 0.17527420038645491, 0.18563668092668772, 0.6937589985777803, 0.19841884168500645, 0.714162026775071, 0.14126878878075078, 0.16380677770509444, 0.7001162515944073, 0.5304137827098515, 0.2076894553837152, 0.07313834509140582, 0.2067742123294477, 0.15290574686410197, 0.1512444799766659, 0.1042798212479854, 0.5649141820499628, 0.5404399459269228, 0.18843828595308165, 0.18147825882616408, 0.18370540679899916, 0.18468890359943257, 0.18295438489227123, 0.18809721384800293, 0.23182836456053135, 0.18919898776781596, 0.19131076265371805, 0.08579217869201206, 0.12802661446749153, 0.11023917341359357, 0.09596046251768875, 0.09218211191603365, 0.08804384940849141, 0.1140741155934396, 0.08915158644925336, 0.09482674760169152]}, "mutation_prompt": null}
{"id": "e51c42a8-d723-46e3-907d-7f7b3545b742", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "2366a551-3a9c-4084-baca-6e1826512fb8", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            swarm_size_factor = 1 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Variable swarm size\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] *= swarm_size_factor  # Adaptive velocity scaling\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Improved dynamic multi-swarm particle optimization with variable swarm sizes and adaptive velocity scaling for enhanced exploration and exploitation balance.", "configspace": "", "generation": 92, "fitness": 0.2564951821004097, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.6440597815753875, 0.6258960976260691, 0.6450299840363987, 0.6204804090859091, 0.6488969819411228, 0.6480778692014383, 0.6506756327220267, 0.6404580788579411, 0.638599349501044, 0.17287972521675232, 0.45590876629313715, 0.3452123241484887, 0.08915692465568648, 0.1481085288620657, 0.1420522994624469, 0.0779366325237324, 0.14905093856303742, 0.3687240176455112, 0.11971882076199203, 0.13080095042102835, 0.11754720755619297, 0.11464775067342103, 0.1095984589434893, 0.13720906058852556, 0.11439384352460125, 0.14183142189209152, 0.10188115551220467, 0.09410366794100156, 0.12492054682168596, 0.1092105853906965, 0.12052650447491653, 0.10865966392819737, 0.10085390616532353, 0.10362972994610353, 0.12255881568671811, 0.10147660993330698, 0.9636368978334844, 0.9525038593998828, 0.9535052106317049, 0.9548265646583447, 0.9513613777357404, 0.9314125657040518, 0.9586661524911846, 0.9153224071504407, 0.9574915041759794, 0.34968367389294597, 0.28388361889336233, 0.3164051322888738, 0.3366981879455667, 0.30024206505810636, 0.35997436633577495, 0.3515300084714216, 0.37652984400451095, 0.40503487385641623, 0.5988704637189572, 0.3305996838043702, 0.31563306951990566, 0.3073862152464065, 0.18993148528475778, 0.19076006271694046, 0.2849658635782334, 0.6207064848990507, 0.3158430722185238, 0.14681763531092673, 0.1451289315283999, 0.13064845966463567, 0.08751876072232445, 0.13389656796581495, 0.13086232230895678, 0.18353687201238578, 0.17081827302112196, 0.1402989588448651, 0.12155001307667701, 0.13680791631991962, 0.13549606891296317, 0.1343309182578587, 0.1662512959068323, 0.14198964357694044, 0.13875558498293372, 0.17608408525049435, 0.1553106526317879, 0.016692672666085318, 0.056412496048317884, 0.006310792322896108, 0.032392066278627896, 0.04361160173187728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1925191593089547, 0.08534053286051135, 0.18870968510329733, 0.10957101388258939, 0.07581637596262059, 0.03206197371256181, 0.10211896200196025, 0.16946876143795908, 0.12860030480767526, 0.05258859125325721, 0.13309984974197686, 0.14662769929449748, 0.17233368503827828, 0.05893189431792778, 0.05463864652871453, 0.09040996567734094, 0.05531558572019424, 0.06685233562761828, 0.23182389925457447, 0.13035457290213948, 0.10468542606165121, 0.10057408630102238, 0.10325071016715937, 0.12970429675084216, 0.061076927240554135, 0.1411990098689072, 0.06442852700504043, 0.40134405937826456, 0.43665772068577646, 0.4459427209542435, 0.4149140009114578, 0.39970913364195715, 0.4470013521104381, 0.46460709549323187, 0.4342608167230929, 0.4378633550670219, 0.1481739237348042, 0.14042275491695932, 0.10402976449024115, 0.14472859494421608, 0.09869553442413159, 0.11951881843015677, 0.16389482891979656, 0.10914744878613092, 0.09707985268327379, 0.2965768277832722, 0.2786247975894556, 0.30349602238072726, 0.22751807041531424, 0.22166651707380547, 0.18714014130506285, 0.2760174135566651, 0.3403821288974501, 0.21467013776161037, 0.3090113743735947, 0.2856359963476257, 0.3280594423676413, 0.3257425958245954, 0.3477726021392553, 0.34801490084385844, 0.32277955184460994, 0.3130547524411583, 0.3260830432958113, 0.2226144657109631, 0.2378469012088088, 0.27412995612570745, 0.21205886305441168, 0.19662321395574522, 0.2783120611283312, 0.24871721635738786, 0.3125330253337604, 0.23143482831525075, 0.20998337098322428, 0.20291393109459865, 0.2461785909090276, 0.241622689439965, 0.22574853767340575, 0.24894360023464668, 0.21547564324810486, 0.252826280965059, 0.22278519557481336, 0.20247318332837927, 0.4924219096428476, 0.1839874037810193, 0.31528392381143366, 0.18884014180628006, 0.2016892439163025, 0.20571532653004931, 0.18699253216216394, 0.21672786421674384, 0.12392085487650073, 0.1748709165325676, 0.1854895063486488, 0.6781620415944023, 0.1975035697844838, 0.7100604854681449, 0.13914134697264957, 0.1596680620900114, 0.7125815714154073, 0.45301633649024664, 0.20905088822882367, 0.5039565208473069, 0.20470513708153626, 0.15433861770319468, 0.15128590957447918, 0.10394181184192108, 0.38241323383930226, 0.5308920231824015, 0.19546386854352393, 0.19930485124888075, 0.19327592755634826, 0.19060811300774327, 0.19806898757861513, 0.18478118116190712, 0.20175252353100548, 0.18842363635757708, 0.191403563374535, 0.0870347815350817, 0.12350530921051417, 0.0879975137597232, 0.08810391352180524, 0.09184677982716671, 0.09982160823865871, 0.08765875935738732, 0.09511886956808735, 0.11646949862467848]}, "mutation_prompt": null}
{"id": "2ec7afdd-3b32-41b3-b93c-aa62c77f0054", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n        self.elite_influence_prob = 0.1  # Probability for elite particle influence\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                elite_particle = particles[np.random.randint(0, self.num_particles)] if np.random.rand() < self.elite_influence_prob else global_best\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (elite_particle - particles[i]))  # Elite influence\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Adaptive multi-swarm particle optimization with strategic velocity diversity and enhanced convergence through random elite particle influence.", "configspace": "", "generation": 93, "fitness": 0.30136445740108647, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7024629038532094, 0.6902983894489233, 0.7175487973367967, 0.7022143055035821, 0.6910285714322864, 0.6912663190761266, 0.7060889625818807, 0.7176729758849076, 0.6747955632349634, 0.4497798492873939, 0.5131247969763444, 0.47749581852288625, 0.4670674396917781, 0.4407294991001065, 0.5305630111450713, 0.4875451859538552, 0.48741537205539776, 0.42411852127799454, 0.12990115016201254, 0.15559880147537042, 0.13755512990759167, 0.10499167223022265, 0.12128333764710564, 0.15160369517087435, 0.1578100677680453, 0.11466066496073002, 0.12003025317930338, 0.13571904246124034, 0.10003367851430756, 0.12482899576019024, 0.10989644429260681, 0.1348684554519317, 0.11440119277815897, 0.1281940322300359, 0.11452245188298815, 0.0971264680570928, 0.9334504970911834, 0.9470458891972491, 0.9636436788217523, 0.9548224171094754, 0.9532133362004622, 0.9347610582991535, 0.9601354879928129, 0.9256714975329081, 0.9545180124556333, 0.47902607646222983, 0.5525354297479479, 0.5319265348200672, 0.5298807032898942, 0.4944641326142517, 0.5717221333835139, 0.536190749244523, 0.5207076227950452, 0.5575173475868095, 0.6316903097331643, 0.356435620932527, 0.5883999180743315, 0.752765390162979, 0.35147697539354394, 0.20741412275539806, 0.3116534230937241, 0.3148795236918761, 0.6963908506934877, 0.1614370186110866, 0.1679074060979452, 0.1799415729144146, 0.10983202919579982, 0.17456133483749436, 0.18093566350859225, 0.16337726220383686, 0.19593896185241466, 0.19446123326641274, 0.18946100956790302, 0.19986644934297115, 0.20250642928128815, 0.1947588637965455, 0.18033673410258777, 0.2029391356629282, 0.21955072781548735, 0.20310096866237803, 0.22054100783564312, 0.0796162327590717, 0.006173124994037105, 0.020120411730034315, 0.033343928462868044, 9.999999999998899e-05, 0.0016590218278833557, 0.04153330037396041, 0.0033476634604058253, 0.056773750088063735, 0.13905653519375716, 0.08029430693521333, 0.23612347177585502, 0.0897205093808141, 0.026814194041277606, 0.05300603242392987, 0.1036926598639426, 0.09953174078808191, 0.08591902278628838, 0.0434556956964256, 0.1345949968872241, 0.17348210674967635, 0.10414822114795719, 0.22230057878467768, 0.17583335620380203, 0.059308103884527896, 0.13937558801032757, 0.052052505592692255, 0.13926540731848513, 0.20773028070315036, 0.10435970934063865, 0.10975273769785765, 0.19964890102881605, 0.12450250328559942, 0.10170068062988935, 0.07156111597302206, 0.07020457776903244, 0.460736172662927, 0.5236956039935563, 0.469775394625626, 0.48053893905500533, 0.4797353808013597, 0.4607561693341953, 0.5185431869337015, 0.49137925587964637, 0.48669801272607327, 0.11293830888909884, 0.10423447534052888, 0.08193148139837536, 0.12076253740964582, 0.12051165551656373, 0.09284740648024947, 0.1146244271364032, 0.11752152975813202, 0.10553857622569829, 0.20703001124791298, 0.3019683336634327, 0.28894859136752904, 0.37828509285896617, 0.39081254173407476, 0.29633393756276605, 0.24569271384051372, 0.28007176320005933, 0.275370011898461, 0.36959248886918783, 0.40987951888657814, 0.3828928170903724, 0.4519378895098598, 0.4051450740107926, 0.3469168956921532, 0.45736933136763136, 0.5503112694756069, 0.4236039521311804, 0.3151439542526162, 0.2681501770636233, 0.2936800427084061, 0.24895944299810835, 0.26328484429986587, 0.3066727596349166, 0.37941635116406547, 0.23273319143863047, 0.19063509880614593, 0.23826574323899152, 0.2190566513636366, 0.2339444905968766, 0.21429433801757036, 0.24285200049367406, 0.22519203943640664, 0.2370152690827545, 0.23453352130896843, 0.23520274153597542, 0.18495319229541196, 0.20818814560179588, 0.19199167840304143, 0.2292057913377593, 0.2300197105387446, 0.19500745895585458, 0.20874575825677733, 0.20980925914881177, 0.21700808076667133, 0.18670312899648212, 0.18612194456470565, 0.18579853903807975, 0.7989545945723348, 0.19925149337848747, 0.786323952373695, 0.14104736456486477, 0.7659504193950919, 0.7788073446758017, 0.7133159441524396, 0.21078910338132806, 0.22244578444919338, 0.20530404585633055, 0.1529164907033984, 0.15116782181908217, 0.6721648613996619, 0.10431825590247334, 0.6595412726625656, 0.20535176885548934, 0.2059246085558748, 0.19848702113259853, 0.19387017930277928, 0.19839181571800368, 0.20424350020639825, 0.22031654838698644, 0.190421421329657, 0.20310381402015354, 0.093932643350215, 0.08842988176617583, 0.08806890567691716, 0.0945869793319305, 0.09668096111486013, 0.09224655118824754, 0.0872645560891877, 0.09613650171293597, 0.0893129600760072]}, "mutation_prompt": null}
{"id": "86caa3dd-de65-49f9-9cd2-c143cdf9c976", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "8cd7fe27-d9c9-4d49-b25f-e95adabd4634", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])\n\n            # Introduce random restart for diversity\n            if function_evaluations % (self.budget // 3) == 0:\n                stagnant_particles = personal_best_values == global_best_value\n                particles[stagnant_particles] = np.random.uniform(self.lower_bound, self.upper_bound, (sum(stagnant_particles), self.dim))\n                velocities[stagnant_particles] = np.random.uniform(-self.vel_max, self.vel_max, (sum(stagnant_particles), self.dim))\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates, velocity perturbation, and diversity maintenance using random restarts.", "configspace": "", "generation": 95, "fitness": 0.3162769606752192, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "592e001e-d34c-41d3-8fd2-e633237e2221", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "e37d0534-7517-470e-a777-c0d5d987791a", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "17cf4304-641d-4292-a4c2-5887964d76f3", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)  # Adaptive learning rate\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(-self.vel_max, self.vel_max, self.dim) * np.random.choice([-1, 1])  # Velocity perturbation\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Enhanced dynamic multi-swarm particle optimization with adaptive learning rates and velocity perturbation for improved convergence and diversity.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7195390552821661, 0.7259734018698765, 0.7307703583737752, 0.7408222469891983, 0.7478670559111888, 0.7654897101101243, 0.7719187027793223, 0.7474865074669905, 0.7329374193928224, 0.5363499756028556, 0.511217889528055, 0.5473277448942961, 0.5532293783045396, 0.582114855951979, 0.5592189099243379, 0.5321957353514891, 0.489129718495934, 0.5473582911289328, 0.1582434122511015, 0.11737035230414494, 0.10613727029453224, 0.1558466611126489, 0.45528035480735884, 0.12714874193089432, 0.12473731641204289, 0.15407869120939244, 0.14477307323993505, 0.12785632490180365, 0.10448121536526866, 0.15346550996134933, 0.128283167994102, 0.4963851352992664, 0.10938205054702399, 0.12840681527041287, 0.12167791892002244, 0.13852646056243412, 0.9626508441458397, 0.9526437250728502, 0.9531679722504909, 0.9546537629382276, 0.9512237720496275, 0.9403136600777268, 0.95796225433908, 0.9287323957334694, 0.9574237955221241, 0.5861967203776459, 0.5244194019589721, 0.6108822232873448, 0.5573554861937735, 0.5761478972555649, 0.6207243835864349, 0.6156868125569288, 0.6031674452093874, 0.5770900122642217, 0.22708871481338444, 0.674126040954819, 0.34986911352564476, 0.7579762021827345, 0.19239362321543862, 0.19665462269367107, 0.6081905065985784, 0.5908187445472173, 0.7290212297586334, 0.12329578177444855, 0.20007161991444544, 0.10990165642904937, 0.10762820555059005, 0.19721049590210182, 0.20229172164892062, 0.18878833610291024, 0.210212952740931, 0.34068156548478923, 0.13528305199730006, 0.2092750808119216, 0.20487480487802567, 0.23591516053988448, 0.22422922509156407, 0.20924195494616638, 0.21386573678285226, 0.23031022722609396, 0.2375004661124931, 0.04185477128639392, 0.0008828934195891369, 9.999999999998899e-05, 0.04688894474568517, 9.999999999998899e-05, 9.999999999998899e-05, 0.008569416647994488, 9.999999999998899e-05, 0.007108442137611526, 0.1438347376362552, 0.08242038213379088, 0.12506547287347491, 0.065831199154193, 0.051851410824805155, 0.03640356554448154, 0.0917991347109628, 0.07406874186576584, 0.0725477247618479, 0.2866818584665738, 0.1318477599202451, 0.12543158156242973, 0.21959526739880086, 0.14748107672699973, 0.097198847230208, 0.21987419139919073, 0.07109989624270674, 0.09351044782414808, 0.17259213619903657, 0.16923835543638122, 0.13327395386166696, 0.22470950207494367, 0.09878540280918224, 0.10910804914507732, 0.20869493028419506, 0.12212037433499279, 0.07561511463509796, 0.5284370265217468, 0.5455273009673626, 0.4909969679818812, 0.5691724965383866, 0.5017937231129499, 0.47490758013204226, 0.5285373833814606, 0.49724880181323183, 0.5162602483157406, 0.07256892943356086, 0.09304195445716701, 0.13008435813896724, 0.16223170991747105, 0.08728226684964646, 0.11385883873462188, 0.11428783137068044, 0.11248651161038126, 0.10312140465868302, 0.3000900081905755, 0.3966079762125372, 0.20265355543584096, 0.38887498286023425, 0.37698297186783214, 0.25976405604025654, 0.36811827315058077, 0.27830029225337505, 0.37637237265207335, 0.33182196119311824, 0.40412962462785085, 0.3791785843715214, 0.4227883409804405, 0.3664396553978926, 0.3897024114688551, 0.3567983147117444, 0.37818804628362357, 0.4668444723909465, 0.25876619725603556, 0.29731155200226744, 0.22155407921947368, 0.2073098225948654, 0.30382902171852677, 0.3011017636666884, 0.22858346351236503, 0.24424871307418083, 0.2393842368089364, 0.22584446506430567, 0.21690569484674926, 0.2217554170704027, 0.24868395093466666, 0.2538645516885989, 0.23937881218230417, 0.23145282461338834, 0.21751870170446386, 0.2401233956119504, 0.19783735560076132, 0.6495895589953865, 0.19521897356678575, 0.23390258733731062, 0.6030402895732745, 0.1972760430849979, 0.19507241355458305, 0.21401261259295712, 0.24178602051137144, 0.12499123726620542, 0.1760402641712957, 0.18689314371927557, 0.7918967767710271, 0.19888609054625217, 0.8055103253075822, 0.14108701081002362, 0.166340001209342, 0.7870740813037145, 0.4955639611061602, 0.2104533946175281, 0.48036023177934695, 0.20843056427881135, 0.1549600412051625, 0.15262301478911522, 0.10425096506280174, 0.681683693521365, 0.7154321783362014, 0.20427443499763454, 0.17992039840098129, 0.17795343735900426, 0.18542605754385189, 0.1887877695611072, 0.19076904737526823, 0.19049554277628178, 0.19422224578018754, 0.1906764913101784, 0.08653128290259171, 0.1175550237407309, 0.10130036876766768, 0.09554310576315839, 0.09871849133968968, 0.09626913455482156, 0.08688706599681828, 0.09840634261478332, 0.15218411676782928]}, "mutation_prompt": null}
{"id": "c0ba1d55-04cc-45e6-9da2-0b9ba6311ff0", "solution": "import numpy as np\n\nclass DynamicMultiSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.num_particles = 50\n        self.num_swarms = 5\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        personal_best = particles.copy()\n        personal_best_values = np.array([func(p) for p in personal_best])\n        global_best_idx = np.argmin(personal_best_values)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_values[global_best_idx]\n\n        function_evaluations = self.num_particles\n\n        while function_evaluations < self.budget:\n            inertia = self.inertia_weight * (1 - function_evaluations / self.budget) * 0.95\n            group_inertia = np.random.uniform(0.85, 0.95)\n            self.cognitive_coef = 1.5 + 0.5 * np.sin(2 * np.pi * function_evaluations / self.budget)\n            self.social_coef = 1.5 + 0.5 * np.cos(2 * np.pi * function_evaluations / self.budget)\n\n            for i in range(self.num_particles):\n                velocities[i] = (inertia * group_inertia * velocities[i] +\n                                 self.cognitive_coef * np.random.rand(self.dim) * (personal_best[i] - particles[i]) +\n                                 self.social_coef * np.random.rand(self.dim) * (global_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                function_evaluations += 1\n                if value < personal_best_values[i]:\n                    personal_best[i] = particles[i]\n                    personal_best_values[i] = value\n                    if value < global_best_value:\n                        global_best = particles[i]\n                        global_best_value = value\n\n                if function_evaluations >= self.budget:\n                    break\n\n                if function_evaluations % (self.budget // 5) == 0:\n                    velocities[i] = np.random.uniform(0.5, 1.5, self.dim) * np.random.choice([-1, 1]) * velocities[i]\n\n        return global_best", "name": "DynamicMultiSwarmOptimizer", "description": "Improved dynamic multi-swarm particle optimization with adaptive group inertia and enhanced velocity perturbation for robustness.", "configspace": "", "generation": 99, "fitness": 0.33385874806012683, "feedback": "The algorithm DynamicMultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "b1c19eeb-68a1-4bde-8196-26f82b761782", "metadata": {"aucs": [0.7774298871538137, 0.7603274237937397, 0.7930037528946364, 0.7657414246033505, 0.788159005752954, 0.7829956372431559, 0.7630312776816137, 0.7858603659715637, 0.7596899078756805, 0.6096031246889209, 0.5986985759836507, 0.5874708698647214, 0.6080942487769913, 0.5821758040750615, 0.5981444919908218, 0.5781291840965646, 0.5888248783113582, 0.5789567649822298, 0.44996799785249975, 0.1402976694483652, 0.1588697902209002, 0.1657466552229635, 0.1492249964277278, 0.17094738909647, 0.5575701434390151, 0.1355301735364698, 0.5321316927432685, 0.10569365566477318, 0.13852595707782034, 0.1375404763557161, 0.5203459120411639, 0.14138283838404897, 0.11658972309392068, 0.1123729937194543, 0.12607477980487747, 0.4893329589426846, 0.9609594214042715, 0.9563582712213282, 0.9613083261206068, 0.9587346338906053, 0.9507623937645161, 0.9384224460004866, 0.9598553308983739, 0.9434074302524814, 0.9500190987532982, 0.6404537421365901, 0.6428307216673841, 0.5116864642016317, 0.6348585190566295, 0.5870425727729693, 0.477699479259036, 0.6495635416290548, 0.6423692897070226, 0.5631073406494149, 0.3672107026619166, 0.5707171971525831, 0.20247047373708382, 0.20045083519934292, 0.3651752513753459, 0.7163138325840412, 0.23525304443031514, 0.2259970546661083, 0.7033456158024936, 0.20080951535951208, 0.10616033047076434, 0.20861307170708288, 0.2515825634117145, 0.21057754418110042, 0.189027784518217, 0.40600447405189855, 0.20973582997507723, 0.21918582414256393, 0.15061477226699427, 0.12869483716386398, 0.12593349268685072, 0.22524257148486626, 0.21958517588559245, 0.21298051406712526, 0.24045312917372108, 0.24240082318643785, 0.22758600903212756, 0.0002779448426288855, 0.1581422184624327, 0.1554386908580041, 0.0017612365801167318, 9.999999999998899e-05, 0.045209903846868627, 0.012843416365514893, 0.004394338062874703, 9.999999999998899e-05, 0.14564586963025317, 0.08060822888340591, 0.1032552152737175, 0.07366855604659561, 0.052356794085067104, 0.03620236006115718, 0.10941455842840364, 0.060326981730425944, 0.10564799964042737, 0.26559371049378333, 0.07790567121533853, 0.18563277832964808, 0.13259887627864464, 0.07401639492751944, 0.07577413883930861, 0.2078750683378897, 0.2150628692120916, 0.09806520956198761, 0.1734598595176935, 0.13464455983164647, 0.17796446874980065, 0.13010068993807655, 0.22273167483293588, 0.16736238683031734, 0.10302778219288378, 0.07951989338323073, 0.08052266427871035, 0.5257618459311687, 0.5192825369187504, 0.5051818429151342, 0.5087818036865897, 0.5001616052514923, 0.53548134349687, 0.5036223214968525, 0.5091418190959367, 0.5544630963800162, 0.1643865603249518, 0.11821508623934862, 0.11636353977121383, 0.560535098683218, 0.10445334200845013, 0.1252576218642586, 0.1261797354946621, 0.1370679507835132, 0.1289608676462436, 0.25923820592758084, 0.330572618709817, 0.2995798322382297, 0.24823071998555513, 0.41130525406216345, 0.19101707761872966, 0.3186191930346326, 0.40183954290389035, 0.26920502341978203, 0.30535695112619166, 0.33110176009465153, 0.47305379655501145, 0.5369360615071613, 0.540639367216801, 0.3713913638657663, 0.446940638765861, 0.39419943539389946, 0.4962799290242458, 0.25922652394118095, 0.262213006099154, 0.22736348002605256, 0.3181045636370773, 0.2639237519027897, 0.35360413902843935, 0.3357069978859254, 0.333673520655269, 0.24102565445262436, 0.27882435120984994, 0.1864894390319769, 0.21341572450368007, 0.19762823195802492, 0.28201381567450146, 0.2525261712857144, 0.23679330066763082, 0.22301762513665246, 0.22438514038113222, 0.24643087851350942, 0.23923411555565488, 0.23685483171371158, 0.21665166945693726, 0.20785991223360756, 0.19150494220089365, 0.2442476143352149, 0.20532998289981974, 0.2126868697500729, 0.18752746469965864, 0.18728112034463795, 0.1873240526521912, 0.8289232986241304, 0.199684513592856, 0.8364403176628167, 0.8363408523464929, 0.17786345611969478, 0.16726479619751788, 0.7977715776830625, 0.211804360126855, 0.7862798310598342, 0.2090001445581623, 0.7728787513849288, 0.16701909371946144, 0.6977649668414685, 0.16658279557649147, 0.6839540947720331, 0.17692656336941004, 0.20055055080774087, 0.1741701851317632, 0.19666065812304734, 0.1828657688527725, 0.19550890736398174, 0.2155756285081265, 0.21548066089303497, 0.18967592808068368, 0.0724298543245917, 0.12505967148284436, 0.15554280910159923, 0.08962273857152048, 0.09698952714143483, 0.1257277748601604, 0.14168349733006758, 0.10177248543257189, 0.10270310795120474]}, "mutation_prompt": null}
