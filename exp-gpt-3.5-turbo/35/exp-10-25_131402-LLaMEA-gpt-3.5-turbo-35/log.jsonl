{"id": "1d14c38b-4b35-4dee-b676-d353e063918d", "solution": "import numpy as np\n\nclass DynamicBoundaryEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicBoundaryEA", "description": "Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 0, "fitness": 0.19464102841610995, "feedback": "The algorithm DynamicBoundaryEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5019180527573885, 0.4873946701155082, 0.5191676333292046, 0.4872824041952545, 0.49556261683032576, 0.5102236924278242, 0.4923277432931865, 0.4964109363852708, 0.48085864436577974, 0.005495799091266629, 0.019429583349672375, 9.999999999998899e-05, 0.007031619371788311, 0.03250182326461237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025020484741542726, 0.046038786899379236, 0.046990109761628984, 0.027093758477584773, 0.03823225264376162, 0.025850152702765583, 0.04110400534404146, 0.11437478346248098, 0.07146907886265019, 0.014147036654036715, 0.024266292753547747, 0.024509757103232888, 0.06538539267807664, 0.017229178100352516, 0.006125074443320444, 0.04334873545502138, 0.022339768530908466, 0.009934038598112038, 0.9701353750683511, 0.9631258829727577, 0.9748707187806563, 0.9617184947690323, 0.9703857153673202, 0.9607631214681945, 0.9793919257609175, 0.9672379210162716, 0.9702816580164184, 0.3627108916316123, 0.3655121728260692, 0.3381237960103084, 0.3566698835556531, 0.3514816509051105, 0.34516897611559305, 0.355690223504851, 0.3541192136318626, 0.35999235413056596, 0.15856792856189716, 0.2163560872879603, 0.07243320034297507, 0.22260255066045986, 0.27572841203616594, 0.16855857255418905, 0.050166936248519756, 0.1293576713222615, 0.047546350839975604, 0.22770423133114492, 0.12858319318106737, 0.22715667808231255, 0.18605916894875707, 0.2024728363164754, 0.20491611288844058, 0.1918446432009161, 0.25015961242350315, 0.1327244834902238, 0.18274913459823583, 0.2207270063508412, 0.197163661870442, 0.1317655290799603, 0.1805968172965935, 0.19320528943181958, 0.20013084586962582, 0.13725165133073391, 0.22867120885751457, 9.999999999998899e-05, 0.009047529290427181, 9.999999999998899e-05, 0.04320662460946911, 0.04767782416396493, 9.999999999998899e-05, 0.012187680529390454, 0.002469801005275052, 0.007177076103507041, 0.08404013895283513, 0.043736897762998383, 0.09770292252445256, 0.1061327637557049, 0.027941996399154623, 0.018463979298053212, 0.07159458676039798, 0.08831376828193183, 0.055884444883527284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0778249630018718, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12634983859207582, 0.08302886022910494, 0.10386941189813825, 0.08710136935356583, 0.10221772225587589, 0.13772359326931505, 0.11871289462444179, 0.12864146361534168, 0.09541728499089275, 0.4637610718227325, 0.44470144087829455, 0.44530705843969665, 0.4364295359637761, 0.44497155467163196, 0.45282680467910463, 0.4497536773209305, 0.4916133523779478, 0.4642527060769156, 0.060318306580695036, 0.018354903356406438, 0.048210317136150094, 0.06691691319405291, 0.015049362760773843, 0.09982910692711089, 0.0019441112031735042, 0.029923710015385963, 0.0725706486219524, 0.17027340470633467, 0.22140793493942423, 0.19438060620253128, 0.2351029964909337, 0.2212380551849904, 0.24088914090508784, 0.19535914821657518, 0.12155732604989111, 0.12796711913920522, 0.11255294466803101, 0.15849223754385477, 0.1661087266181176, 0.19403154150161006, 0.14752100627098697, 0.13591146057633774, 0.20178172618385293, 0.3109661935610466, 0.15532161933112498, 0.0803034923776037, 0.041046301574749644, 0.2245971607771765, 0.16325872377403716, 0.07723597977938079, 0.14517401107539407, 0.16855256933243923, 0.22016798716387287, 0.16049404155669367, 0.20021503859409773, 0.13607071439138596, 0.15698199159798498, 0.25953879780471256, 0.2076285788184774, 0.16856704736496342, 0.196387306148753, 0.13246107830681664, 0.17335888707113845, 0.16087670320722713, 0.17896270233720502, 0.18372332924369617, 0.19817863798394564, 0.19190155423881006, 0.1832191899711384, 0.19145862579870032, 0.2224628243358403, 0.19748682709753862, 0.10562925277460433, 0.12745001807295497, 0.15499986170838564, 0.17343962310541106, 0.2024277849470052, 0.20209342065733749, 0.14353131003434716, 0.16513834672426542, 0.21418152884954367, 0.7139039801238334, 0.21477071690463778, 0.07362811869463459, 0.10536244034823317, 0.1697778091947788, 0.15680376329206736, 0.10541915098806165, 0.10538399578642688, 0.687983938570143, 0.18822715474613483, 0.18775525926555148, 0.20303281080998736, 0.1885699706838696, 0.18568718926096295, 0.178773473785938, 0.17364226973806363, 0.19385657496223285, 0.18729674711622912, 0.03579986848055983, 0.033656211881417986, 0.06877208212053354, 0.04428047806285995, 0.06783993220038542, 0.06467952325366955, 0.023188108071144797, 0.06968773559954022, 0.03817468314774464]}, "mutation_prompt": null}
{"id": "c6e23077-f49b-4ad2-8817-47ba787547e5", "solution": "import numpy as np\n\nclass DynamicBoundaryEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "DynamicBoundaryEA", "description": "Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1d14c38b-4b35-4dee-b676-d353e063918d", "metadata": {"aucs": [0.5019180527573885, 0.4873946701155082, 0.5191676333292046, 0.4872824041952545, 0.49556261683032576, 0.5102236924278242, 0.4923277432931865, 0.4964109363852708, 0.48085864436577974, 0.005495799091266629, 0.019429583349672375, 9.999999999998899e-05, 0.007031619371788311, 0.03250182326461237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025020484741542726, 0.046038786899379236, 0.046990109761628984, 0.027093758477584773, 0.03823225264376162, 0.025850152702765583, 0.04110400534404146, 0.11437478346248098, 0.07146907886265019, 0.014147036654036715, 0.024266292753547747, 0.024509757103232888, 0.06538539267807664, 0.017229178100352516, 0.006125074443320444, 0.04334873545502138, 0.022339768530908466, 0.009934038598112038, 0.9701353750683511, 0.9631258829727577, 0.9748707187806563, 0.9617184947690323, 0.9703857153673202, 0.9607631214681945, 0.9793919257609175, 0.9672379210162716, 0.9702816580164184, 0.3627108916316123, 0.3655121728260692, 0.3381237960103084, 0.3566698835556531, 0.3514816509051105, 0.34516897611559305, 0.355690223504851, 0.3541192136318626, 0.35999235413056596, 0.15856792856189716, 0.2163560872879603, 0.07243320034297507, 0.22260255066045986, 0.27572841203616594, 0.16855857255418905, 0.050166936248519756, 0.1293576713222615, 0.047546350839975604, 0.22770423133114492, 0.12858319318106737, 0.22715667808231255, 0.18605916894875707, 0.2024728363164754, 0.20491611288844058, 0.1918446432009161, 0.25015961242350315, 0.1327244834902238, 0.18274913459823583, 0.2207270063508412, 0.197163661870442, 0.1317655290799603, 0.1805968172965935, 0.19320528943181958, 0.20013084586962582, 0.13725165133073391, 0.22867120885751457, 9.999999999998899e-05, 0.009047529290427181, 9.999999999998899e-05, 0.04320662460946911, 0.04767782416396493, 9.999999999998899e-05, 0.012187680529390454, 0.002469801005275052, 0.007177076103507041, 0.08404013895283513, 0.043736897762998383, 0.09770292252445256, 0.1061327637557049, 0.027941996399154623, 0.018463979298053212, 0.07159458676039798, 0.08831376828193183, 0.055884444883527284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0778249630018718, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12634983859207582, 0.08302886022910494, 0.10386941189813825, 0.08710136935356583, 0.10221772225587589, 0.13772359326931505, 0.11871289462444179, 0.12864146361534168, 0.09541728499089275, 0.4637610718227325, 0.44470144087829455, 0.44530705843969665, 0.4364295359637761, 0.44497155467163196, 0.45282680467910463, 0.4497536773209305, 0.4916133523779478, 0.4642527060769156, 0.060318306580695036, 0.018354903356406438, 0.048210317136150094, 0.06691691319405291, 0.015049362760773843, 0.09982910692711089, 0.0019441112031735042, 0.029923710015385963, 0.0725706486219524, 0.17027340470633467, 0.22140793493942423, 0.19438060620253128, 0.2351029964909337, 0.2212380551849904, 0.24088914090508784, 0.19535914821657518, 0.12155732604989111, 0.12796711913920522, 0.11255294466803101, 0.15849223754385477, 0.1661087266181176, 0.19403154150161006, 0.14752100627098697, 0.13591146057633774, 0.20178172618385293, 0.3109661935610466, 0.15532161933112498, 0.0803034923776037, 0.041046301574749644, 0.2245971607771765, 0.16325872377403716, 0.07723597977938079, 0.14517401107539407, 0.16855256933243923, 0.22016798716387287, 0.16049404155669367, 0.20021503859409773, 0.13607071439138596, 0.15698199159798498, 0.25953879780471256, 0.2076285788184774, 0.16856704736496342, 0.196387306148753, 0.13246107830681664, 0.17335888707113845, 0.16087670320722713, 0.17896270233720502, 0.18372332924369617, 0.19817863798394564, 0.19190155423881006, 0.1832191899711384, 0.19145862579870032, 0.2224628243358403, 0.19748682709753862, 0.10562925277460433, 0.12745001807295497, 0.15499986170838564, 0.17343962310541106, 0.2024277849470052, 0.20209342065733749, 0.14353131003434716, 0.16513834672426542, 0.21418152884954367, 0.7139039801238334, 0.21477071690463778, 0.07362811869463459, 0.10536244034823317, 0.1697778091947788, 0.15680376329206736, 0.10541915098806165, 0.10538399578642688, 0.687983938570143, 0.18822715474613483, 0.18775525926555148, 0.20303281080998736, 0.1885699706838696, 0.18568718926096295, 0.178773473785938, 0.17364226973806363, 0.19385657496223285, 0.18729674711622912, 0.03579986848055983, 0.033656211881417986, 0.06877208212053354, 0.04428047806285995, 0.06783993220038542, 0.06467952325366955, 0.023188108071144797, 0.06968773559954022, 0.03817468314774464]}, "mutation_prompt": null}
{"id": "f53756c0-5784-49f3-a878-67438501239e", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 2, "fitness": 0.1994238296687686, "feedback": "The algorithm ProbabilisticRefinedEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "1d14c38b-4b35-4dee-b676-d353e063918d", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "f307d7c6-9aec-4516-b928-88a2685e8132", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "ecb299f0-2fdf-47c1-a884-fbbdad8a3aef", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "54f3fa78-14f8-43ea-8012-ab6656a79dff", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "4e77e9b8-8c61-44be-bc39-75eab73d06cf", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "f2e6f003-3fda-4b77-954b-58f99b27dff3", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "5ba01f9f-eaf0-48bf-81e5-4f75b682fe23", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "fef4818c-c7a2-4c94-bd61-51e36163b503", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "c4adf9a9-450e-42f3-ba43-601f8e7861cd", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "64ba2f68-6152-4045-a0c2-f640ea8b7d8b", "solution": "import numpy as np\n\nclass HybridEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 20\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.inertia_weight = 0.9\n        self.temperature = 10.0\n\n    def __call__(self, func):\n        swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        swarm_best = swarm.copy()\n        swarm_best_fitness = np.array([func(individual) for individual in swarm_best])\n        global_best_idx = np.argmin(swarm_best_fitness)\n        global_best = swarm_best[global_best_idx]\n        global_best_fitness = swarm_best_fitness[global_best_idx]\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                r1 = np.random.uniform(0, self.c1)\n                r2 = np.random.uniform(0, self.c2)\n                swarm_velocity[i] = self.inertia_weight * swarm_velocity[i] + r1 * (swarm_best[i] - swarm[i]) + r2 * (global_best - swarm[i])\n                swarm[i] = swarm[i] + swarm_velocity[i]\n                swarm[i] = np.clip(swarm[i], -5.0, 5.0)\n                candidate_fitness = func(swarm[i])\n\n                if candidate_fitness < swarm_best_fitness[i]:\n                    swarm_best[i] = swarm[i]\n                    swarm_best_fitness[i] = candidate_fitness\n                    if candidate_fitness < global_best_fitness:\n                        global_best = swarm[i]\n                        global_best_fitness = candidate_fitness\n\n            self.temperature *= 0.95  # Simulated Annealing temperature reduction\n        \n        return global_best, global_best_fitness", "name": "HybridEvolutionaryAlgorithm", "description": "A Novel Hybrid Evolutionary Algorithm incorporating Particle Swarm Optimization and Simulated Annealing for Black-Box Optimization", "configspace": "", "generation": 11, "fitness": 0.1677321921401197, "feedback": "The algorithm HybridEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.2739615758357603, 0.29633564407048996, 0.3623326905824882, 0.4055104639861473, 0.18838686197499077, 0.3462859834727129, 0.3122663170924441, 0.3508456288005477, 0.374753679754807, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025897538619396032, 9.999999999998899e-05, 0.0011735877098016934, 9.999999999998899e-05, 9.999999999998899e-05, 0.00629995343976586, 9.999999999998899e-05, 0.10560127159576005, 0.08507664008036031, 0.07213773232445142, 0.08207534505923453, 0.07698784930930613, 0.09077742486267504, 0.08176100023476651, 0.07686186580667687, 0.07382340617514549, 0.06645706995163891, 0.07133237682752547, 0.05588755807403556, 0.09388755621547862, 0.04245614553108623, 0.06434590289220032, 0.08626845306789588, 0.041767942371443656, 0.07238296448317671, 0.9945427386295842, 0.9881420678285497, 0.995800763217755, 0.09985229022182085, 0.9539355411968251, 0.988076375165338, 0.9946791700764511, 0.9949393022952858, 0.9911363775982284, 0.1820834883089103, 0.10046290641144529, 0.05522848906820288, 0.14045463273129066, 0.22705548750883897, 0.14358058731994572, 0.17130902936887593, 0.0866392146492333, 0.08545945159573987, 0.24660138576046753, 0.17219180435979253, 0.22126880527927195, 0.31649944129782104, 0.19455179784063203, 0.18435689018561396, 0.23081129434606595, 0.18873587016806936, 0.1992395550316418, 0.05053063473601849, 0.08773617856329474, 0.009531834275881557, 0.07445174621775674, 0.10681639336766857, 9.999999999998899e-05, 0.09796705665693739, 0.10719543670205223, 0.0766748261349598, 0.12306568292034459, 0.08570960431231922, 0.13703264831789896, 0.10328645101793221, 0.13524274641811684, 0.07720051050432353, 0.1269091524640804, 0.04289141705747057, 0.058487845042801356, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006282736002648948, 0.05809653271465576, 0.022725957678970565, 0.03520130052287673, 0.08894342262815447, 9.999999999998899e-05, 0.02332379263013773, 0.032513463739026194, 0.0481281952614554, 0.025853321169602927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023346622627150593, 0.027129687656859303, 0.05815361951361242, 0.04688348897978212, 0.04825159121457567, 0.0014136924221713754, 0.045476478262014064, 0.0375795978058161, 0.04942576431107282, 0.3371099736156149, 0.30821814291181693, 0.3113066431105904, 0.3265179323232885, 0.3232564510128264, 0.2807271382783486, 0.33173629323382636, 0.2834610570582696, 0.33925560250151254, 0.06152280701367441, 0.06779114991990087, 0.04703954229539975, 0.07925056234495731, 0.07315782314402108, 0.0948593356291425, 0.10081701608190852, 0.08246637429075998, 0.07696336760101807, 0.18705821876732487, 0.16166154277625133, 0.15876045780749193, 0.2588286792675726, 0.18366437022968907, 0.19064073184346386, 0.17890979593074896, 0.21870796710821117, 0.175779208668566, 0.18415420291019946, 0.19907676805917274, 0.23836151428604857, 0.23759535705471857, 0.16373147712425684, 0.25426595064707946, 0.21920953859128034, 0.23158192017510992, 0.15600556100976304, 0.1516846005802629, 0.18827171233955664, 0.14482440181174938, 0.17806130668788245, 0.14874984200826802, 0.15243445670465428, 0.18428959126941835, 0.20000006295046524, 0.11544216250635086, 0.1802140270531738, 0.21218140997134538, 0.2035091687084648, 0.17973986726830427, 0.19948836478404242, 0.20291872233875097, 0.17105281374684633, 0.19384892010299815, 0.19305397472560204, 0.1735746443706685, 0.16841009817320196, 0.175735094649488, 0.1812317805769147, 0.19227345356416958, 0.18438825754594312, 0.1697186502432816, 0.18764218185461168, 0.18768429065708292, 0.48982124372067815, 0.1615453702718994, 0.15381230001905533, 0.4551400639574674, 0.19504851168882686, 0.19740848988216864, 0.10012609342470058, 0.1700035154300844, 0.14114910809946835, 0.37978193483363243, 0.1898724269753007, 0.3957885254466197, 0.2765753237749946, 0.2177595310176924, 0.2720585496764363, 0.20302438732455697, 0.12018694109745065, 0.1843736275189557, 0.17736554158379625, 0.1825011196216254, 0.21487942609686606, 0.19259003210637138, 0.21286079679589853, 0.175281689118846, 0.1890322236265708, 0.19115726905620378, 0.18728655052299126, 0.07110425299563672, 0.08083376579322121, 0.07272983904540231, 0.07817472126886282, 0.0641492605404752, 0.07927236170130925, 0.06532844281770067, 0.08415776895496274, 0.07387333188491263]}, "mutation_prompt": null}
{"id": "b498c1b2-a5ef-462a-b00c-94ac0d2f58eb", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "72a8d8b4-dd04-4109-9b3f-8000d26b5224", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "564ce99c-87e4-462c-af0f-7c3769c78e24", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "8f19705a-54ba-49e7-a204-785f3c0e2063", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "fdc17acc-107c-4173-ad8d-ccb8a66f0e1a", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "df1f5dbf-0c72-47f1-b910-7d9437415bcc", "solution": "import numpy as np\n\nclass HybridFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 20 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        alpha = 0.2\n        beta0 = 1.0\n        gamma = 0.1\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                for j in range(pop_size):\n                    if fitness[j] < fitness[i]:\n                        attractiveness = beta0 * np.exp(-gamma * np.linalg.norm(population[i] - population[j])**2)\n                        step_size = alpha * (np.random.rand(self.dim) - 0.5)\n                        population[i] += attractiveness * (population[j] - population[i]) + step_size\n                        population[i] = np.clip(population[i], lower_bound, upper_bound)\n                        fitness[i] = func(population[i])\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "HybridFireflyAlgorithm", "description": "Implementing a Hybrid Firefly Algorithm with Gaussian Perturbation for Black-Box Optimization", "configspace": "", "generation": 17, "fitness": 0.12480628368130102, "feedback": "The algorithm HybridFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.4344290050072762, 0.34130016605502467, 0.359442971969804, 0.3040422736736066, 0.20044605834631435, 0.2713741288934586, 0.29387217560854617, 0.24738800030688912, 0.2949709338394231, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042468189898731024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06566939330620913, 0.060061931339688956, 0.08582690867141407, 0.08790454960781191, 0.03137322277058063, 0.04799192252546747, 0.08242933701112032, 0.06252467383359328, 0.053626935923200114, 0.038372222567666925, 0.06773057843781405, 0.07369198486071205, 0.07114709522443496, 0.024807747802911728, 0.05769635731559519, 0.054301371835231316, 0.05120393197066442, 0.023837172617678926, 0.053785281810807106, 0.08410623597597222, 0.06257516488412607, 0.06679594284562895, 0.05374688653429405, 0.06298541490282483, 0.07957735263259014, 0.06514160394191659, 0.07141292945535893, 0.14284390513209633, 0.12480220245477014, 0.04657400737369921, 0.11585397483644388, 0.12016876071062199, 0.1166854982531007, 0.08589758525920466, 0.07134421741041408, 0.13855813925609706, 0.15194092126546588, 0.13313528080624037, 0.1328978921152313, 0.21709601830334646, 0.13244627164196354, 0.10792362568951885, 0.10013629882849218, 0.12934516362434045, 0.16190298490999466, 0.21518968741568956, 0.06940963549784263, 0.05870137426298605, 9.999999999998899e-05, 0.0053963675866778305, 0.1630739370247195, 0.12087051102609203, 0.1592083012964709, 0.10423576148988101, 0.13163043080637415, 0.11703952966944031, 0.1316108585890392, 0.17713440683625636, 0.10402886181174364, 0.14155919660084815, 0.2055463563397868, 0.1859725883480826, 0.12602079309659253, 0.00484777952986315, 9.999999999998899e-05, 9.999999999998899e-05, 0.02444257266873462, 0.003662816321533535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07907463387906932, 0.040192013066340015, 0.08239500490640672, 0.04223429425774716, 0.05836838296433866, 0.04550327144405675, 0.05939396908396721, 0.08902818404143487, 0.07750869669166427, 0.01489781830661252, 9.999999999998899e-05, 0.014103053188313841, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06952655179827638, 0.024759944475839624, 0.03562381048427288, 0.03623699054430729, 0.04465267263667283, 0.0770709496438643, 0.0028101364547310492, 0.0031707748263201108, 0.04825818854128916, 0.3403320301645978, 0.32755011730204775, 0.35064930291193985, 0.2650064264560763, 0.1654468653841228, 0.25175471189362886, 0.37782459140754454, 0.32600592179429655, 0.3614716860408457, 0.06058936366315992, 0.054305089021336794, 0.04667119157041866, 0.14097814363268502, 0.03481029636336119, 0.09972112650273124, 0.08398708611300065, 0.06279724542357668, 0.04579916075088131, 0.21778498506944965, 0.1516044190470498, 0.1349389029832917, 0.13766266535167793, 0.1935290587393278, 0.2735945255528155, 0.12300983620712591, 0.13326499543157477, 0.17395090541661462, 0.16650849456667272, 0.1409925673075637, 0.18735125436027145, 0.19543496275595484, 0.2063894429024523, 0.30481061099201057, 0.16628667894370486, 0.21780323249282396, 0.16805789639411473, 0.11961317622606371, 0.08535701080350877, 0.11655903770639087, 0.1212499616361159, 0.1478224774740935, 0.1708656615312828, 0.12282300139538616, 0.1846308863150743, 0.1667898460365479, 0.1980560852870069, 0.22315009302768818, 0.24155539343898136, 0.2502034982702458, 0.21428671392917376, 0.22434023611844567, 0.21818303449803678, 0.16681436870831234, 0.2039323242001081, 0.14593979294571857, 0.14634793488353426, 0.16951094667929834, 0.16279164489791909, 0.1844495884529771, 0.16764587825293387, 0.18385491377137164, 0.16157423707558705, 0.17221132176889242, 0.1749203335817101, 0.17056333892455533, 0.18195402743859723, 0.3902177380558579, 0.15711539547874676, 0.11340365088887572, 0.11894901006366687, 0.10954720572620968, 0.13609077704411754, 0.3431496244905524, 0.21267604784180272, 0.21571046765406376, 0.137059769879739, 0.05905837005675152, 0.19114829929515786, 0.2338555129756078, 0.17934746266077217, 0.2064671110823243, 0.19187714376027032, 0.19960316233072284, 0.1879667889819734, 0.20633228357291422, 0.17928589852826882, 0.19385449162761093, 0.19342836338905578, 0.182735765448514, 0.19237335510196052, 0.06727041029214398, 0.07900255856824101, 0.06566220951334201, 0.08515285181960985, 0.07589735761001926, 0.07618877288049153, 0.07391068335433082, 0.07777103220605863, 0.0831732372653331]}, "mutation_prompt": null}
{"id": "d9924d4d-f58a-46c6-a236-8337c19bc703", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "1004cf7a-caab-4216-8aa7-24464af67fbc", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "89acb7f1-2565-40e8-ae97-4b6e469f8d92", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "9c14d343-93c2-40e0-abcc-5061bb00bf03", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "7c1e8ee7-4bff-4877-aeb5-2aba33f3168d", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.4  # Pitch Adjustment Rate\n        self.bandwidth = 0.01  # Bandwidth for pitch adjustment\n\n    def __call__(self, func):\n        harmony_memory_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        harmony_memory = np.random.uniform(low=lower_bound, high=upper_bound, size=(harmony_memory_size, self.dim))\n\n        for _ in range(self.budget - harmony_memory_size):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = np.random.choice(harmony_memory[:, i])\n                else:\n                    new_solution[i] = np.random.uniform(lower_bound[i], upper_bound[i])\n\n                if np.random.rand() < self.par:\n                    new_solution[i] += np.random.uniform(-self.bandwidth, self.bandwidth)\n\n                new_fitness = func(new_solution)\n                if new_fitness < func(harmony_memory[-1]):\n                    harmony_memory[-1] = new_solution\n\n        best_idx = np.argmin([func(individual) for individual in harmony_memory])\n        best_solution = harmony_memory[best_idx]\n        best_fitness = func(best_solution)\n\n        return best_solution, best_fitness", "name": "AdaptiveHarmonySearch", "description": "Utilizing an Adaptive Harmony Search Algorithm with Dynamic Harmony Memory Consideration for Black-Box Optimization", "configspace": "", "generation": 22, "fitness": 0.08292793070587605, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.16368005356112592, 0.14207902240829373, 0.1653915070108487, 0.12469926869376635, 0.16072536482018862, 0.1473247634199002, 0.15566712144475336, 0.14702286534741293, 0.13330822896754269, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030571542182599498, 0.02898254617360485, 0.054088479061998096, 0.04450030196297594, 0.036920762335476476, 0.03753848090521572, 0.027902507358866346, 0.036969737037833905, 0.02541244955518307, 0.014071789757200692, 0.009671054583884842, 0.043093549909457574, 0.04020338051005423, 0.018436654633069538, 0.014830090532268914, 0.01892283167046549, 0.02360585156947359, 0.019077822584233406, 0.06484645033838154, 0.06580310675197054, 0.06503867885223313, 0.07054854824074863, 0.06751048110605917, 0.060250235969659616, 0.0687638612602488, 0.07352900832858922, 0.061812587867988045, 0.044918554017263856, 0.02777248753816186, 0.05087247710736886, 0.05032460392120608, 0.04190063201236094, 0.06975128199750213, 0.04949245935854929, 0.042119987719339, 0.016759188502938893, 0.11043603646321776, 0.12338737041470593, 0.11521498127888896, 0.07851230735499704, 0.0960062093608618, 0.07034933454646763, 0.10104562454847421, 0.12506365938414077, 0.14344911976176755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031234792350736784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01433249749582488, 0.060111896375535046, 0.0769089223702134, 0.06992500034682403, 0.10464727624065673, 0.10235727440597564, 0.10586796101585738, 0.06139583166406082, 0.06884605405501665, 0.08504300380599994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07345424622377872, 0.07453648474982033, 0.1057297422661937, 0.033190878492373455, 0.003100753639404652, 0.012499482219328062, 0.029641408696216787, 0.0030248018460022896, 0.024767647949465066, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1723346832070669, 0.15045738420536947, 0.1882996978714433, 0.20188265562957486, 0.15990450101645548, 0.17959923817711987, 0.20000217472008042, 0.17276611161330313, 0.17801149693779805, 0.021477928726519546, 0.01934423217308545, 0.02680957083788127, 0.03825412167886044, 0.03494640379079994, 0.06155159564045842, 0.03651678804246261, 0.018797795848436882, 0.027377514530036562, 0.11363332453403785, 0.11609207326069104, 0.13440322903557755, 0.1306524922087101, 0.1489887763664578, 0.12667288203880112, 0.1226479547635867, 0.15572304497049372, 0.12249668143521852, 0.15932401798466667, 0.14975663210206225, 0.1565854891889651, 0.1593599850657047, 0.15231343474456793, 0.1648413570453735, 0.14898338893623497, 0.16157073559718504, 0.16054621651725232, 0.09621500218853651, 0.08958377179326693, 0.08920529596342164, 0.1044717538130151, 0.0999273602679126, 0.11225177251174212, 0.08627362362244761, 0.0965650035569302, 0.10739532987579259, 0.2539916393718601, 0.20211224381479154, 0.24214672007282, 0.2534097606885173, 0.2054629924671063, 0.23478493856187066, 0.2687695929586781, 0.21807746991962818, 0.276486020472162, 0.12903828357429792, 0.10723954373622036, 0.11729720977170288, 0.0998032581652234, 0.041775000312083255, 0.04666007689907803, 0.13622907344095403, 0.10276792289363224, 0.1550649145398415, 0.1149942896836661, 0.11369607319395691, 0.12581432512765656, 0.1391943783545947, 0.12112740467571625, 0.1567610159103633, 0.1793110754910957, 0.1722956025371315, 0.17125158860294287, 0.14836578991563676, 0.1659729462922005, 0.16097355423392035, 0.11228409422753083, 0.1160942478167768, 0.16016045602089413, 0.09613817909328826, 0.09560237911741098, 0.09176752610342787, 0.18516478197362984, 0.17960090716194577, 0.1791303994247493, 0.19014897665364106, 0.18442030158429856, 0.17461798729588895, 0.17422121767265453, 0.1752199774521661, 0.17212350641676655, 0.0445417289502249, 0.04636435831495345, 0.05269442975810579, 0.04703209461971947, 0.04407540667445997, 0.04114483172766126, 0.06382922132231639, 0.05330519368907738, 0.05196834147181728]}, "mutation_prompt": null}
{"id": "cd7b130d-3d8e-4e6e-8956-d95d1977cb98", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "5c002147-8179-4f1b-8eb9-0b0bf6f76f06", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "1e954157-916b-40b9-a401-e82c3148aeab", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "e2679871-b7e5-40f3-a32c-223e94f25eed", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "ca111270-dc93-4a37-a15c-edb7f156cb8d", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "fe6dbf97-3ebb-454b-ab9d-5b7c955e6287", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "beaeb09a-b2c6-4668-96e7-04352ea69df3", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "4b8fcbf5-4438-494b-aeee-ed7e78e99808", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.adaptive_prob = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.adaptive_prob:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Adaptive refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "AdaptiveDifferentialEvolution", "description": "Enhancing Differential Evolution with Adaptive Differential Mutation Probability for Black-Box Optimization", "configspace": "", "generation": 30, "fitness": 0.1994238296687686, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "04d97ca6-491b-45bf-9a29-befd24c6ade4", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "d472a0cb-1f6f-4f8a-83cc-f19e8254d03e", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA_AdaptiveStep:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                step_size = np.random.normal(0, 0.1, size=self.dim)  # Adaptive step sizes\n                new_individual = best_individual + step_size\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA_AdaptiveStep", "description": "Utilizing a Probabilistic Line Refinement Strategy with Adaptive Step Sizes in Evolutionary Algorithm for Black-Box Optimization", "configspace": "", "generation": 32, "fitness": 0.19494170562313717, "feedback": "The algorithm ProbabilisticRefinedEA_AdaptiveStep got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.4824462301995591, 0.46636170129552157, 0.496311547982597, 0.478497656426516, 0.5031275121919178, 0.4725811502423499, 0.4773322854741112, 0.481406820306595, 0.5163844434710626, 0.008114254639891239, 0.047482186003052984, 0.0029486486101408804, 0.010296074011731937, 0.01677870986562724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024785619302209905, 0.047444641666011145, 0.04004100364854457, 0.027015715087749914, 0.038674111792328714, 0.06373625630553181, 0.04103696679148472, 0.12109398084373113, 0.06966729675379446, 0.014239776464305964, 0.008728697531952045, 0.022112188198814886, 0.07093047773282413, 0.017077854815552018, 0.006234685890078029, 0.043540266914085635, 0.01914544146501851, 0.002848788149200865, 0.9732063001865809, 0.9606999174806183, 0.9744014106908884, 0.9658535346413255, 0.9670156737982439, 0.9640983822246749, 0.9779973080277728, 0.9689996079325157, 0.9739325844576143, 0.34259361045475, 0.34519229850903466, 0.3559699322249348, 0.3569230484650675, 0.3636107287450091, 0.3625249099151945, 0.3430184591150457, 0.3452124233462208, 0.3848121128212879, 0.229577180735396, 0.1840727716817161, 0.09515216763376211, 0.1966662520048288, 0.28153153797287256, 0.18204824256153473, 0.06214061351832023, 0.12084784869126564, 0.03417624136550601, 0.23676925540328908, 0.12945429923915341, 0.23280345701260519, 0.11211573455719825, 0.19244165353577436, 0.18516537460434135, 0.20481524781126914, 0.2411628397840927, 0.20275686511861413, 0.19937926823761298, 0.1920561822988921, 0.21783938519343327, 0.19470359251525793, 0.18708924559060958, 0.2093473300732952, 0.21112419292653717, 0.14952129881616494, 0.11817466398206011, 9.999999999998899e-05, 0.001999843338245433, 0.04746392508088282, 0.052317895938708725, 9.999999999998899e-05, 9.999999999998899e-05, 0.001980940785642593, 0.0026076847902486433, 0.06375073765706407, 0.08981958844134019, 0.0389877329902496, 0.0799819156706355, 0.09540121428231974, 0.02899563616239975, 0.027158222527384313, 0.05656792717175163, 0.07151111687527867, 0.06218437113406616, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16832389622329702, 0.06613672647232594, 0.12719188008964866, 0.08459014641742146, 0.13112608008321225, 0.08835864607759358, 0.1497173024715256, 0.1486736404442217, 0.06576174281631741, 0.4590642679314162, 0.45154516609568596, 0.473493589835812, 0.5030620177698674, 0.46602353565421917, 0.4489785718052208, 0.453101651866895, 0.45091007132977345, 0.478703821495023, 0.06006462328370399, 0.01882732651537522, 0.04829678413403382, 0.05121822145265664, 0.018918954080340722, 0.08280609656345728, 0.0019744387071591873, 0.016306196385347582, 0.07167210924874667, 0.1929878068917672, 0.1852223220868351, 0.2012675542094714, 0.22721077972417147, 0.19898177867625955, 0.30771872557413904, 0.3120634943145614, 0.15038379759067888, 0.1313388360280251, 0.11242880807874966, 0.1495263542065599, 0.16872997944608326, 0.19230399950615884, 0.14867617374086817, 0.13641126160610006, 0.2014903893309461, 0.31843949207806554, 0.15769240413813368, 0.12245051888989111, 0.040913617078367714, 0.1878943301437841, 0.16263537633538183, 0.07749579660331418, 0.15177990193626667, 0.17019190804662943, 0.21355460727925102, 0.1770019762588625, 0.23225025232581642, 0.12817354393990243, 0.15339011544394454, 0.2380778835688775, 0.17371473075357358, 0.14442049254327516, 0.19797422591122904, 0.1148183349959192, 0.1998544811739542, 0.16585172986494567, 0.18761784446672147, 0.16823925857951616, 0.17607851095136007, 0.19105072806824575, 0.18511287219862904, 0.1999545022459719, 0.2548686896388992, 0.1782911653715149, 0.10562062710448139, 0.12739796979170404, 0.15492382175831532, 0.17364657314523013, 0.20248105420503826, 0.20197904724663884, 0.143525425706036, 0.1653108599555595, 0.21448832650025984, 0.6410632450782987, 0.21473458158512826, 0.07363185910964165, 0.10523015858279339, 0.16960688498051169, 0.156614170199889, 0.10544040690991896, 0.1053269799898775, 0.6065406458718375, 0.18277058647629263, 0.18156324949739033, 0.20274915810115735, 0.18425487971382182, 0.19199217018869752, 0.18358287893553749, 0.19011885759355418, 0.20785195016800873, 0.2075791861400772, 0.0353889845727583, 0.03063967296787018, 0.06498762740599617, 0.04423631964176766, 0.07374416329379818, 0.06453816516395527, 0.019357700251370624, 0.0684119844864235, 0.04495265636378076]}, "mutation_prompt": null}
{"id": "7994a6eb-f415-41f7-ab5e-dc76da76b2ec", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "ec3b65c0-1d15-4266-8352-3a193f054786", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "d628c700-a0ca-4a4c-b13f-535a1289ad90", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "52714549-2707-4e59-9547-0662c8b35d60", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "511f65e0-5129-459f-981d-b68b2433aad9", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "e0198708-9f2a-4690-beb1-fcd227c2b494", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "3dd90fb0-46ac-4a1c-add9-cbda036b9689", "solution": "import numpy as np\n\nclass MultipleTrajectorySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_trajectories = 5\n        self.diversification_rate = 0.2\n\n    def __call__(self, func):\n        population = np.random.uniform(low=-5.0, high=5.0, size=(self.num_trajectories, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget - self.num_trajectories):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            \n            for i in range(self.num_trajectories):\n                if i != best_idx and np.random.rand() < self.diversification_rate:\n                    new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n                    new_fitness = func(new_individual)\n                    \n                    if new_fitness < fitness[i]:\n                        population[i] = new_individual\n                        fitness[i] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "MultipleTrajectorySearch", "description": "Utilizing a Multiple Trajectory Search Algorithm with Adaptive Diversification for Black-Box Optimization", "configspace": "", "generation": 39, "fitness": 0.1808944369237007, "feedback": "The algorithm MultipleTrajectorySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.22.", "error": "", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.4916966887112115, 0.4805260771624519, 0.4853526619113685, 0.514604602178991, 0.4995070266665298, 0.4629748228044196, 0.5025082574721011, 0.4854642173851985, 0.4851388786815959, 0.0, 0.0, 0.0, 0.08899392702658937, 0.0, 0.0, 0.010348348205987734, 0.0, 0.0009756260995221755, 0.017090225758138344, 0.0, 0.0, 0.026112403797164174, 0.007687850669182095, 0.020974436812649544, 0.04089747332079863, 0.03190232516716873, 0.00925458712786309, 0.022448459740945337, 0.0, 0.0, 0.000709511165641552, 0.0016363829197314494, 0.001805210530326451, 0.0022803223423190078, 0.014855171922082633, 0.004467880002246183, 0.9733562912341889, 0.9673624727989751, 0.9784542850508668, 0.9793321667061284, 0.968198096865184, 0.9658518854178001, 0.9616616336257183, 0.9700044554792034, 0.9604715769063181, 0.35028226275956753, 0.34049213203382644, 0.3326641654463064, 0.35523558460624827, 0.37540812467809215, 0.34272225298130266, 0.3726956250365375, 0.3482028491775647, 0.3483919397861528, 0.1370248067510309, 0.0610725123707887, 0.014619799557029411, 0.07184656664412392, 0.024580778502096057, 0.08892123186143308, 0.055399727994141945, 0.04278762769535138, 0.04907275135236744, 0.1844547678881816, 0.18480449727737303, 0.20933864390501666, 0.25029021690559383, 0.19141748333344377, 0.200319807527376, 0.19703174056285233, 0.20589866712217442, 0.21527320031214403, 0.2044821501881774, 0.2077903374622614, 0.19711332791451774, 0.2029136978362749, 0.2054236290890088, 0.1834835023818212, 0.24684821290293324, 0.18188877266846626, 0.2058299626229233, 0.0, 0.009465142692910211, 0.0, 0.03647835903629071, 0.0, 0.06514627803523143, 0.0035881420856227475, 0.0022609666414078466, 0.007218597894655954, 0.051483336431988214, 0.07234165711154605, 0.12166956741027479, 0.09139345499228235, 0.007371217127359331, 0.04606506451520942, 0.18994267236294293, 0.039547077318601076, 0.04725753891935669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13636260599199013, 0.10222229571999175, 0.04525242492049397, 0.13466851296503868, 0.13251813077896646, 0.12039296710907743, 0.10287437990947179, 0.10237083026910165, 0.06384885517038896, 0.46412096629172916, 0.4718927511975981, 0.45131958424790575, 0.4304272177234474, 0.4499140917812319, 0.4454985724904602, 0.4786113944938596, 0.46127976715417807, 0.4470469204709049, 0.0, 0.0046761648198829775, 0.0, 0.0, 0.013464960949301386, 0.011757379002835466, 0.0, 0.002480271257867206, 0.07006487780122339, 0.2313088058230227, 0.26838023244214215, 0.2353586332997527, 0.2780252686173107, 0.13289504253320106, 0.19135383114716986, 0.11814018636579271, 0.20087163309193534, 0.13196599952313537, 0.11464329641477145, 0.1258092240062717, 0.1182975354732334, 0.17088001549171927, 0.12192456710107358, 0.09896722720340345, 0.1494433019844661, 0.1278823322539523, 0.07921638304091738, 0.06623108369345587, 0.1529889356648646, 0.0617206608893055, 0.1215596383203329, 0.10384867373316864, 0.0652640414663983, 0.1311814132357535, 0.06433546605082052, 0.016374626878770338, 0.18142799642867324, 0.1412656071544065, 0.14166062806860535, 0.19143273375276415, 0.11296800836600118, 0.10056513442524395, 0.18704340183039048, 0.1441582163479852, 0.13439898416161578, 0.168298873934696, 0.1801228933460598, 0.1916764454276848, 0.16774629908160243, 0.18217025783889906, 0.2125979150899424, 0.17289791047633807, 0.19318086327686634, 0.16641604913474983, 0.1599177092522075, 0.07661035247178793, 0.16011712208199136, 0.17395347304961017, 0.20288636815420136, 0.1016660086395812, 0.10874370319507487, 0.11525777042797813, 0.10400215415432135, 0.157052506985213, 0.1132891961504855, 0.7060681917284554, 0.7586699333572237, 0.15627499182787996, 0.21387890692215905, 0.11300741433858419, 0.0947038942242101, 0.11343949972341216, 0.19304890913099393, 0.18376308464065083, 0.18360730534013148, 0.18042100766449765, 0.18358617203141214, 0.19365080166409598, 0.19748301373328303, 0.1839499772098615, 0.18392645323990586, 0.03580591497237895, 0.024222752544361348, 0.03837848230094765, 0.04015771978257121, 0.051890505325111747, 0.034174934803020585, 0.06322521875831322, 0.034106548674285087, 0.03413951123674219]}, "mutation_prompt": null}
{"id": "a5351323-2f18-47ef-8aed-599b2f68979c", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "9827ebaa-699f-4daf-b654-23e1bf07f769", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "f643c264-3d46-42ce-9e24-f98d7452d16e", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "55b33f03-10e2-4c34-a7b7-c1ef95f17c71", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "91a4496a-efb2-49c9-bfef-6be58c97b592", "solution": "import numpy as np\n\nclass ProbabilisticRefinedDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedDE", "description": "Utilizing Probabilistic Line Refinement with Differential Evolution for Black-Box Optimization", "configspace": "", "generation": 44, "fitness": 0.1994238296687686, "feedback": "The algorithm ProbabilisticRefinedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "1aa86188-2cb9-443a-ac54-de8de7ce0aba", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "cc5c5c33-e8aa-4706-aa4e-febef323f036", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "7bb50107-99c1-4890-b4e7-bc170da8f3cb", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "54a25cce-0ab5-4671-b9b0-1145ab8313cf", "solution": "import numpy as np\n\nclass HybridFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.5\n        self.beta = 0.2\n        self.gamma = 0.1\n\n    def __call__(self, func):\n        population = np.random.uniform(low=-5.0, high=5.0, size=(10 * self.dim, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - 10 * self.dim):\n            for i in range(len(population)):\n                for j in range(len(population)):\n                    if fitness[j] < fitness[i]:\n                        distance = np.linalg.norm(population[j] - population[i])\n                        attractiveness = 1 / (1 + self.alpha * distance**2)\n                        population[i] += self.beta * attractiveness * (population[j] - population[i]) + self.gamma * np.random.normal(0, 1, self.dim)\n                        fitness[i] = func(population[i])\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "HybridFireflyAlgorithm", "description": "Introducing a Hybrid Firefly Algorithm with Dynamic Attraction Control for Black-Box Optimization", "configspace": "", "generation": 48, "fitness": 0.07557547134986704, "feedback": "The algorithm HybridFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.2428909223164517, 0.1599755424781517, 0.21387641462441398, 0.10615632391169949, 0.10973716913528819, 0.12109856839190358, 0.14088531144732008, 0.09659396091664252, 0.10110142943062606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02998073245188937, 0.03311500967454428, 0.03360109411051182, 0.046517666135166835, 0.01900932057049254, 0.03325822742873641, 0.03624126856028942, 0.021693172760159696, 0.029688981567753348, 0.031548222510982105, 0.03387579882390346, 0.0320729571169861, 0.03971071717547181, 0.02485157450285802, 0.02300388354249261, 0.02860586599440762, 0.02354516532124129, 0.010808673707628946, 0.04586102224594246, 0.04682854203138598, 0.04289688135408265, 0.05334573213438998, 0.04687545855643349, 0.040011764570709984, 0.0638860334912611, 0.048986754550083944, 0.039682086694726615, 0.07747364094943787, 0.02934064487429111, 0.012660334423889807, 0.07744431408156793, 0.014306514502419265, 0.050028221348059065, 0.009745615345261416, 0.014331581128962378, 0.014824785349155878, 0.13395248634768686, 0.11906405040922541, 0.10216397271909405, 0.1077292370162044, 0.0977895431030702, 0.030458644295304982, 0.0695334478984343, 0.07236216624986391, 0.06710036312384016, 0.0007949184257493025, 0.004252247968496881, 0.0038119355231650554, 0.00017229689599806974, 0.027587287366950486, 0.00012308143406702943, 0.03560388009487547, 0.027445710756787034, 0.03415029915150514, 0.0752444244374999, 0.05554760450830165, 0.06558668543424906, 0.06832697039474556, 0.05538489074335007, 0.05422520190986457, 0.08312017912613723, 0.06489504106833754, 0.06526071103068065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05022682921093968, 0.0487027488377626, 0.05385630838919098, 0.027480568012032247, 0.021809523124822983, 0.028656642249458297, 0.048019671780484385, 0.045759531614511406, 0.03188021206247216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007019299733452833, 9.999999999998899e-05, 0.000141727715547324, 9.999999999998899e-05, 9.999999999998899e-05, 0.00436886837315742, 9.999999999998899e-05, 9.999999999998899e-05, 0.009023676825312354, 0.19676719499327178, 0.21960991859231804, 0.21646409349235096, 0.12524868497135522, 0.11745510904213474, 0.12380432316863754, 0.24148362265026457, 0.1503526106196037, 0.23697779381461936, 0.010065039066159076, 0.007050432159191766, 0.022202665217527118, 0.04614317071562013, 0.015421353217984102, 0.04237248124563198, 0.043905151616369764, 0.022408645856153653, 0.044413087898603765, 0.1304422600695232, 0.12569766319659625, 0.16097399065774576, 0.14688025550033745, 0.15352935844517956, 0.12262078702455437, 0.13548711865586482, 0.1284707793053974, 0.11310310935407997, 0.12893001425096007, 0.12736202553450326, 0.16380491789512286, 0.16818103445149335, 0.17089775413380826, 0.18674412258279516, 0.137280022389899, 0.17377774300845283, 0.13907909481628433, 0.07481314197015576, 0.06350796244377666, 0.09099618601476522, 0.11816673442131809, 0.10407123043678135, 0.11204272803603066, 0.0837317855149382, 0.10831766744375892, 0.09697276548483202, 0.180529607523222, 0.17865146749147387, 0.19852602054060275, 0.1970461441919763, 0.1641013198502964, 0.19299932932602615, 0.19300317117134425, 0.15662462738380656, 0.20376789929038264, 0.08060561969783009, 0.07429315637444411, 0.08551491075307183, 0.09251586866302519, 0.07651314358222394, 0.09664704899550558, 0.08223647753906793, 0.07033855564711777, 0.07434690791209031, 0.11061102747777418, 0.12508174305169473, 0.1055477666784842, 0.10718338160819008, 0.1207914665021157, 0.08737101441245099, 0.10704041594372282, 0.10511484148144368, 0.09331914698869381, 0.18395240609761454, 0.15896133210966124, 0.14057776272203737, 0.06846000340705793, 0.05126207304568087, 0.08407511904877518, 0.09642855524048899, 0.08247511828251097, 0.1023725586217652, 0.21073433434028188, 0.17372721323302465, 0.18747497793483558, 0.17716938248787484, 0.20095186338324156, 0.1921440423812253, 0.1870306676618959, 0.21239460342963756, 0.1751527128805892, 0.047570674578294114, 0.05002211873735485, 0.05899725874710571, 0.05680736623299176, 0.050066712911701505, 0.06440778063377817, 0.05018304750483371, 0.04737754970119967, 0.0576854469183945]}, "mutation_prompt": null}
{"id": "44e20171-398b-497d-b60f-f009612ae44e", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "9dea9dfb-745d-43c3-98fb-df0fb932e188", "solution": "import numpy as np\n\nclass ProbabilisticRefinedEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            best_idx = np.argmin(fitness)\n            best_individual = population[best_idx]\n            new_individual = best_individual + np.random.normal(0, 0.1, size=self.dim)\n            \n            if np.random.rand() < self.prob_refinement:\n                new_individual = best_individual + np.random.normal(0, 0.05, size=self.dim)  # Refinement step\n            \n            new_fitness = func(new_individual)\n            \n            if new_fitness < fitness[best_idx]:\n                population[best_idx] = new_individual\n                fitness[best_idx] = new_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "ProbabilisticRefinedEA", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.5306486473518345, 0.51249354440105, 0.5328561585901499, 0.5732030753010815, 0.5703491318091807, 0.5283961869732099, 0.5207890000353941, 0.5070114888817938, 0.5297157197210278, 0.0014703622712551878, 0.038111492926580115, 0.017002039061676855, 0.003425768138832219, 0.03144074730270763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0250577576392379, 0.04964138885549496, 0.037758366578955815, 0.026654280002131547, 0.038648640650196464, 0.034656336366002294, 0.04134993376460283, 0.12512870956327948, 0.07288799336756269, 0.014291704319552623, 0.007938476286182272, 0.0185459337405236, 0.07335142766364511, 0.0174729619787779, 0.00609998653024213, 0.049805062925280974, 0.019317263977561616, 0.002201385305381387, 0.9668848277663703, 0.9563136551446423, 0.9713574949244589, 0.9571899833203358, 0.9634202911472077, 0.9583071552936975, 0.9732663542211002, 0.9651226221545728, 0.9689906869388916, 0.3623562115593203, 0.3858475603259126, 0.37437348200737874, 0.4031901216768776, 0.36375937941316494, 0.37471092446700827, 0.38866314489050646, 0.38808735655296456, 0.3963082840647365, 0.17210892066671857, 0.2148397582077849, 0.08558961318767011, 0.2753229296177746, 0.2200562585687933, 0.1267109426183226, 0.05248234146653119, 0.12084787057264146, 0.03204051304583155, 0.2768553546686049, 0.13734969800523145, 0.20999242360843007, 0.17474642246162564, 0.20867373148241786, 0.20495830970491125, 0.2260673153399232, 0.2690346874626043, 0.1937167040930431, 0.19594785412858973, 0.19788145625696274, 0.1335309853954122, 0.2130298498984854, 0.19721062537446288, 0.1996869539760585, 0.21171114079785736, 0.16840868572735923, 0.12253740304971072, 9.999999999998899e-05, 9.999999999998899e-05, 0.01946014545652508, 0.030404253193648922, 0.010320403438553005, 9.999999999998899e-05, 0.0044044636743432175, 0.0018163057624491774, 0.0899335388210919, 0.08276338501487168, 0.03636912339641618, 0.07908447309790956, 0.0931814851113788, 0.022293894240041245, 0.024034843981773135, 0.06094347564677005, 0.08495611398532787, 0.05411955071765684, 0.0073624241859839845, 9.999999999998899e-05, 9.999999999998899e-05, 0.001656964826684093, 9.999999999998899e-05, 0.0005551270522861085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14332441094198822, 0.06244117442334318, 0.14504208091273574, 0.08345547183691782, 0.12129865015621233, 0.07467541825396351, 0.1465955733184292, 0.1594544270916698, 0.05426129524631307, 0.47854059528353565, 0.48389760282227934, 0.4800962351193906, 0.4662533395845484, 0.501575110772523, 0.48613146366566506, 0.47949987465416477, 0.49754094853510555, 0.49758604243518023, 0.0623551424376203, 0.005146018836432398, 0.04911606502333066, 0.06690841284757787, 0.019277609274052754, 0.08439652037604206, 0.0020030062371184654, 0.0232351603335188, 0.07301947297414246, 0.1280078124599484, 0.2646087110651911, 0.20255482896056465, 0.3541858046289541, 0.3312724001495754, 0.23103528471487245, 0.3260019765440252, 0.1286592205067938, 0.1302836003668688, 0.1124908639802994, 0.12117402217406525, 0.17023033213140715, 0.19789550161717828, 0.14800718844337657, 0.12424155071223975, 0.20210005201000225, 0.32337197037738097, 0.1520553306504302, 0.07649897248935322, 0.04109145870250008, 0.19884676325979034, 0.1564276440863217, 0.07765602529343563, 0.09633220456916247, 0.18229549236912312, 0.2715366816616598, 0.17304555815232725, 0.19208619319310005, 0.1271774120885497, 0.15555965217447154, 0.22026699609144373, 0.16959269988165293, 0.1648304442959998, 0.18758432833870042, 0.1315884746254551, 0.1709790132273623, 0.16679433440527336, 0.1876394281677598, 0.1724320518754403, 0.2006704988490544, 0.19173664471171836, 0.19855292349634257, 0.18666355462050765, 0.2274833819383627, 0.17564568913483358, 0.10560555483838796, 0.12755464995444077, 0.1549037952082457, 0.17360386599001854, 0.20252594041225735, 0.20206310864963084, 0.14356319220968072, 0.1654259460354539, 0.21460667177828352, 0.6833045739690131, 0.21493517882184565, 0.07364335536566502, 0.10518599784553895, 0.16948708354609443, 0.1568071950721962, 0.10541083026700548, 0.10530378175848332, 0.6788538239648905, 0.17970002605687352, 0.20235685413335236, 0.214965313115286, 0.20549217352781135, 0.18618213296864683, 0.18160414484151766, 0.19011885759355418, 0.18771020257512205, 0.1839152692147813, 0.031602005335734984, 0.029685505327671335, 0.0677674553311719, 0.046610698397056116, 0.07317558707644745, 0.0586312480084582, 0.018177372597548147, 0.06061094687744062, 0.055969544064735643]}, "mutation_prompt": null}
{"id": "ef5f5a79-d180-4637-8246-12f8b1596948", "solution": "import numpy as np\n\nclass NovelMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        # Your novel metaheuristic algorithm implementation here\n        pass", "name": "NovelMetaheuristicAlgorithm", "description": "Utilizing a Probabilistic Line Refinement Strategy in Evolutionary Algorithm with Dynamic Boundary Control for Black-Box Optimization", "configspace": "", "generation": 51, "fitness": 0.0, "feedback": "The algorithm NovelMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 52, "fitness": 0.21033224497312822, "feedback": "The algorithm NovelDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "f53756c0-5784-49f3-a878-67438501239e", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "4a939641-29fc-4c77-b638-c16ff2200259", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "0d27b479-d20c-4651-b840-4b428ee53ad0", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "37f6d139-9d3d-42bf-bf59-5ac45bba3f66", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "6181643d-e498-4ef6-8f3f-258478f9b3cb", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "b9271250-a14b-4336-b8ea-fe42c0b363cf", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "94d31338-0ec3-4eac-ad57-e9d912271eaa", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "1d757a48-d728-4d18-aaaa-d9b765ca86b5", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "dac2e3fb-c408-4925-b9bf-916eda6780be", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "04860416-bbe8-4b08-8d68-eea4356208b2", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "65183ef9-6f5e-4ded-a0fc-801468e37917", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "5de5d6a0-1d7a-4dcc-8f38-3ac96f158180", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "ba188a08-bb39-4522-9e91-4e0f10b695da", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "4ba0461b-7c41-446e-9bbf-5fe7945ba886", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "559705bf-2647-4be5-b66e-8f2251bf0079", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "4c63c3d6-7d7c-4d66-a1c0-47c110ab3fcf", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "cce3f78c-1bac-4727-ba28-a022d246c631", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "81e6f854-438a-4b41-baa2-fbeb78aaf257", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "ba1b8c7b-3176-452e-a225-6a945adaf41e", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "ef757310-c8f3-48bc-8382-19cd359d67bf", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "e3f90a20-9f5c-4016-add1-e70009fe8e57", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "23810565-7ef1-4254-9e4a-5c89d460c49f", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "0df25727-65f5-4586-bcb2-496e49240b47", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "f5ead7e3-3c0e-48bb-b944-acc4af84f25e", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "e1e8d400-791e-428b-9ecc-6d636be2ccf3", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "a714e7ba-4a87-4dad-aae0-059be9002a78", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "154e163a-5127-46fe-a09c-26d090f9b63f", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "cee322af-946d-4e37-8232-fca861ac8e42", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "8cefac63-647b-472d-84ae-8eee852096cb", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "396a794b-a3a7-46ae-a939-68f4db57c26b", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "371f5223-a5e8-4282-a84d-623d13924c1f", "solution": "import numpy as np\n\nclass FireflyOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 1.0\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                for j in range(pop_size):\n                    if fitness[j] < fitness[i]:\n                        beta = self.beta_min + (1.0 - self.beta_min) * np.exp(-self.gamma * np.linalg.norm(population[j] - population[i])**2)\n                        population[i] += beta * (population[j] - population[i]) + self.alpha * np.random.normal(size=self.dim)\n                        population[i] = np.clip(population[i], lower_bound, upper_bound)\n                        fitness[i] = func(population[i])\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "FireflyOptimization", "description": "A Metaheuristic Optimization Algorithm based on Firefly Algorithm with Dynamic Attraction", "configspace": "", "generation": 82, "fitness": 0.1719607168272139, "feedback": "The algorithm FireflyOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.12.", "error": "", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.3977618131730315, 0.3866530965264908, 0.4226277388703744, 0.37188239140007473, 0.38816821754579245, 0.4188387378993098, 0.40175645379685443, 0.40565711251714454, 0.3840267157465076, 0.00361846731922999, 9.999999999998899e-05, 0.0005556646739222071, 9.999999999998899e-05, 0.0008825244729210313, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082255820024001, 0.08167577766678569, 0.05657097664728006, 0.0966397916114109, 0.10061160261290192, 0.08903643833511377, 0.08748029707129357, 0.095280019510396, 0.08842075357226253, 0.08890132980093635, 0.06836813670913866, 0.05936335819806904, 0.08777682047059754, 0.0899828330356871, 0.0716659757020478, 0.09494406762319063, 0.08498786765817734, 0.07174393364602061, 0.1632532451548412, 0.4650808841953159, 0.568461016428573, 0.13180472769819385, 0.5122427584813264, 0.22840190145685524, 0.5770413152587001, 0.38198080433934245, 0.47152953427198696, 0.229406958819652, 0.25232907520677605, 0.18927400541559236, 0.22966466120901508, 0.23647929904482667, 0.23708583559750163, 0.2377652193510711, 0.2022579591552719, 0.22526221266166235, 0.2499794244601189, 0.20949661898718552, 0.16969935900942823, 0.2762969483887209, 0.30328621646765586, 0.2355961652457741, 0.1670605664158471, 0.21318126117601155, 0.21887330345015954, 0.17888070942404488, 0.1676751637704399, 0.13895740422233538, 0.10676928463374047, 0.14818585658351113, 0.12082672632656544, 0.1738449834930207, 0.1814003512011717, 0.15322914166772028, 0.15593866414471647, 0.14578474406414466, 0.14651350000770524, 0.14688661850766604, 0.18341614806612816, 0.12864175705824132, 0.15819213901215878, 0.18285085613284724, 0.15096519553726517, 9.999999999998899e-05, 0.009860384319660853, 9.999999999998899e-05, 0.026534542110007497, 9.999999999998899e-05, 9.999999999998899e-05, 0.019423018664002645, 9.999999999998899e-05, 0.0234651021590071, 0.19128956725928203, 0.07553809627052466, 0.12151047739964271, 0.0414754781667418, 0.030763492835048756, 0.027457171630890898, 0.08411529777930771, 0.09244435878627433, 0.10673125108752324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07289685024932546, 0.09947674648613558, 0.08087591865870325, 0.07208314478430966, 0.08245843888300552, 0.08331159709801761, 0.06979266389245908, 0.07660605106043783, 0.07521226954592841, 0.44239649934502445, 0.3840601515662271, 0.3765048304911669, 0.3704101361735844, 0.3797435143022736, 0.35149711269232997, 0.4032710770850779, 0.37964986960714353, 0.38608085841728756, 0.0643975381939681, 0.06593561591313535, 0.06537050518370013, 0.09530119239323431, 0.07113181081604725, 0.08720675366197916, 0.09811472427932111, 0.08198965647982426, 0.10919864687844105, 0.14488564176612184, 0.23320550592999656, 0.12431385413365403, 0.1540544781002705, 0.11269810816869263, 0.1852690028468862, 0.17259685447211082, 0.18809610882786887, 0.17115944530784055, 0.20460554851845014, 0.19711396751114152, 0.2809535847450476, 0.2618278947875865, 0.24270606628286673, 0.25411832777775933, 0.21167268126156258, 0.2756822862851436, 0.2258118110590862, 0.1815960639015336, 0.20278436299754055, 0.22276158261405477, 0.20728596179599246, 0.22082886797182633, 0.2152506495959814, 0.15583167373364126, 0.2022232383659751, 0.18059714972328234, 0.22859498226134278, 0.23396875019973062, 0.22944567062535803, 0.2421957885427113, 0.21789283508953372, 0.2359262490702192, 0.22404900167141817, 0.20443719320430154, 0.21521908945022716, 0.17091884883690633, 0.18751199061833845, 0.1751808227024485, 0.18160058819187863, 0.185226583985436, 0.17502777087426258, 0.18418241355154175, 0.16589408169161668, 0.16905227064198047, 0.18586241043992224, 0.18686774805826356, 0.1821250401463842, 0.5591675182012303, 0.1207914665021157, 0.11636943347445028, 0.17705785731749457, 0.10876417604642974, 0.16158011879467338, 0.4472260272820143, 0.49214246068609013, 0.2791645988255398, 0.20142332711897049, 0.14376832874347367, 0.14847760436049595, 0.3028955641208524, 0.36460967013707746, 0.2437379844729497, 0.18766419864705863, 0.18915737850968817, 0.1750141135423624, 0.20935429983358755, 0.18364821303644174, 0.16854223821044412, 0.17404795304391207, 0.1995146437602643, 0.18679201436225223, 0.08091837352750264, 0.08679781063008596, 0.07737355907660914, 0.07836595869588892, 0.09601841404483535, 0.0890488105147289, 0.0891372101606015, 0.09777005947529338, 0.08859493354325498]}, "mutation_prompt": null}
{"id": "07f000b1-f796-493c-b913-76c6cabd37bb", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "624ad0b8-93fb-4fdd-8584-425247c7a65d", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "b2088bf9-a744-4ace-9338-53d25dc7b8c6", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "98a70378-e193-46a2-8df8-0ae5d88dc578", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "529f9f3c-b9e2-40f8-8c7a-6b7cafb6e509", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "2e1d817d-e9c8-4e35-b347-b45898d59beb", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "c9333488-d000-46e2-9c66-810e8a11bed5", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "2dfc8db6-4a35-4ba9-8baa-0bce5315255c", "solution": "import numpy as np\n\nclass MyMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "MyMetaheuristicAlgorithm", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization utilizing population-based search with adaptive mutation and refined crossover strategy.", "configspace": "", "generation": 90, "fitness": 0.21033224497312822, "feedback": "The algorithm MyMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "5e824c89-f99c-4ff6-9e26-6cae91e1f935", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "ac5243ab-a749-41b2-99a5-3e71983283d9", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "c8ce41e7-7f76-4a9d-bb4b-b50631b4376a", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "b7ad8bcc-e1c5-4e06-b8c0-ad012e85f056", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "0dcc825f-54dc-4645-aba8-012bfaaf9844", "solution": "import numpy as np\n\nclass EnhancedDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "EnhancedDE", "description": "An Enhanced Differential Evolution Algorithm with Adaptive Mutation and Refinement Strategy for Black-Box Optimization", "configspace": "", "generation": 95, "fitness": 0.21033224497312822, "feedback": "The algorithm EnhancedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "80854a9f-1a85-450e-95f7-76ed529553fc", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "adaec321-eeb1-4a73-8323-a7240a5c9c2b", "solution": "import numpy as np\n\nclass EnhancedNovelDE(NovelDE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.prob_refinement = 0.35\n", "name": "EnhancedNovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization with enhanced refinement using probability 0.35.", "configspace": "", "generation": 97, "fitness": 0.21033224497312822, "feedback": "The algorithm EnhancedNovelDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "3d31e227-84da-4b7d-b9f4-7329aeae3acf", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
{"id": "4c0bfd1c-eeb4-4353-a5ba-db5932fd30ef", "solution": "import numpy as np\n\nclass NovelDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.scale_factor = 0.8\n        self.prob_refinement = 0.35\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        lower_bound = -5.0 * np.ones(self.dim)\n        upper_bound = 5.0 * np.ones(self.dim)\n        \n        population = np.random.uniform(low=lower_bound, high=upper_bound, size=(pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                indices = np.arange(pop_size)\n                indices = np.delete(indices, i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                \n                mutant = population[a] + self.scale_factor * (population[b] - population[c])\n                crossover = np.random.rand(self.dim) < self.prob_refinement\n                trial = np.where(crossover, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n        \n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        best_fitness = fitness[best_idx]\n        \n        return best_solution, best_fitness", "name": "NovelDE", "description": "A Novel Differential Evolution Algorithm with Adaptive Mutation Strategy for Black-Box Optimization", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a020e41b-f76a-4997-80b5-79a3a0ddff50", "metadata": {"aucs": [0.6317954070723313, 0.6697529718900832, 0.645970430958255, 0.6387017590867279, 0.6557771478620793, 0.6376852445671057, 0.6560633681535926, 0.6559581657464488, 0.6320140905856241, 0.35391729669199745, 0.35171947248055024, 0.34515453018170317, 0.3178913405771936, 0.32737232313793463, 0.34903319191536064, 0.3204856431482713, 0.3428160199739053, 0.3280313005039822, 0.28077965612350386, 0.22014512396542862, 0.19958182542284253, 0.1898281596778787, 0.21358895080841778, 0.23011588038961794, 0.2139587668592945, 0.2108382882608727, 0.2531948296635492, 0.1708217753708805, 0.15535123191815203, 0.16496533318599582, 0.1781996399289646, 0.17722290947091968, 0.14769505981936004, 0.1680750256515925, 0.19383498492796303, 0.18358979016327737, 0.9562810278556901, 0.9639458665484044, 0.9603135703096557, 0.9571665483350947, 0.9620264588769227, 0.9621907199396366, 0.9537098877089812, 0.9641630828042879, 0.9620401698363144, 0.1524841084927837, 0.149933571620524, 0.17850364286492315, 0.16077104778853424, 0.1701738076785292, 0.1761694741593447, 0.1245273378395304, 0.12724353040249547, 0.12173235285057493, 0.18011568211519935, 0.18135963375317365, 0.16154514749261395, 0.1941308606384402, 0.19718687977463256, 0.15870207698519934, 0.18689556812394725, 0.19664855298410866, 0.15672839316385856, 0.1126831737122822, 0.12516395742445907, 0.13017339524937976, 0.12599044715251206, 0.11547626346233608, 0.11901236855847364, 0.10598642870616637, 0.21233080341281307, 0.13533630190977786, 0.10946774198265508, 0.1141444666421747, 0.12313576667920623, 0.12648589679654165, 0.13799637029927248, 0.13438078293023992, 0.12362834584524485, 0.0826965602954941, 0.11225383755976859, 9.999999999998899e-05, 0.006599253481945899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006138198709615961, 0.055996412708728016, 0.049679906431616794, 0.024260296530423497, 0.021731978275443598, 0.06328793447861814, 0.03607151482564064, 0.009817793097599004, 0.05322634095108081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829049865766833, 0.03613603187378922, 0.06156128331699984, 0.07485032192798646, 0.07944292181774049, 0.056209233962667526, 0.05096942761918222, 0.04411419949831474, 0.0521297827869972, 0.380701731929735, 0.3818981489294624, 0.38301234672518236, 0.3885816253612936, 0.3986594598909241, 0.37157457632629476, 0.3978279054084166, 0.38172244890376583, 0.40206348584542106, 0.0804087501636519, 0.08092092059837774, 0.09555963083563479, 0.08797052215441126, 0.07635344213749995, 0.09038387819931903, 0.09152660270017499, 0.07677447142812166, 0.09328629201748284, 0.1345981436293432, 0.12461142619304177, 0.17969369411729152, 0.18010544272998796, 0.1451774576938224, 0.14714756752406322, 0.13302666768812965, 0.14211957248876228, 0.12336703422960926, 0.20434543775315106, 0.20709219795768163, 0.20110918177051784, 0.21324269869129564, 0.2219966497882846, 0.22922465818442228, 0.2297245765609267, 0.23186252497859483, 0.25039859989894475, 0.14234836417206098, 0.1374809127663018, 0.14480837000656777, 0.1505308101150804, 0.16333030227761702, 0.14178177164267292, 0.15539048773581765, 0.1614358116156771, 0.16083302768585872, 0.18310057152138692, 0.19685373803193562, 0.1987450100013436, 0.19605907007877632, 0.18465844458781144, 0.1849667096623252, 0.23247864645488558, 0.1882123197665253, 0.18143202431233463, 0.22074035195080355, 0.2066462194098697, 0.195845793562214, 0.188815467472784, 0.18798011894740474, 0.18730437387618282, 0.19786904549580187, 0.1860334740806293, 0.19615300099066357, 0.23940896395794298, 0.1692264893006894, 0.22329154240806837, 0.20540134469815152, 0.2029684729585416, 0.2081531458599919, 0.20653182891863808, 0.2086105385567797, 0.22183936429896844, 0.20089647876945482, 0.22558899584405834, 0.1885491034595973, 0.18958880224315222, 0.1619111119634068, 0.24160911086435632, 0.17218419864425938, 0.1874362996633624, 0.195847509400364, 0.18324329125725525, 0.17372137502714813, 0.1849517131279812, 0.1889382101196142, 0.18255589352903034, 0.1808423868081751, 0.17509126004808184, 0.16822616459671913, 0.1666670550668765, 0.07061277571636604, 0.0627479675043282, 0.06061129100077911, 0.07201224530582695, 0.07275216219318026, 0.07074777721828307, 0.08346793090790472, 0.05971591603103299, 0.07874001061704072]}, "mutation_prompt": null}
