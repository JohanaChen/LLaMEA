{"id": "f5b53246-0440-4284-9577-9dc0a613d107", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.0976014849243864, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "eb910069-3a23-401e-b08b-6a1f839a22e5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "00ffd856-15c5-4571-8eb0-60a9bbc9d0e6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "29110f78-5adc-44d9-a958-ab97ef2a7e80", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "8d4d64e3-268d-4aba-a54b-514c519bfb90", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "a15d5273-9fa3-4df8-80e3-3520307bf878", "solution": "import numpy as np\n\nclass GASimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iters = budget // self.population_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(dim, population_size, lb, ub):\n            return np.random.uniform(lb, ub, (population_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def select_parents(population, fitness_values):\n            idx = np.argsort(fitness_values)\n            return population[idx[:2]]\n\n        def mutate(parent, lb, ub):\n            return parent + np.random.normal(0, 1, parent.shape)\n\n        population = initialize_population(self.dim, self.population_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            fitness_values = np.array([func(individual) for individual in population])\n            parents = select_parents(population, fitness_values)\n            child = mutate(np.mean(parents, axis=0), self.lb, self.ub)\n            population = np.vstack((population, clip_position(child, self.lb, self.ub)))\n        best_individual = population[np.argmin([func(individual) for individual in population])]\n        return best_individual", "name": "GASimulatedAnnealing", "description": "A novel metaheuristic algorithm combining Genetic Algorithm (GA) and Simulated Annealing (SA) for efficient global exploration and local exploitation in black box optimization.", "configspace": "", "generation": 5, "fitness": 0.08327443067381866, "feedback": "The algorithm GASimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.23613296498650727, 0.2000220230790123, 0.2030623705076524, 0.20277537408184043, 0.1789634100765788, 0.2056129317209756, 0.2350902973532185, 0.20478466134673623, 0.21849009092986338, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05130208042993123, 0.04255638203759404, 0.037531170085037924, 0.05493229514877218, 0.0337875212522899, 0.044457984992987254, 0.04911202880257004, 0.042251041384163135, 0.03499676972461074, 0.037919596053150983, 0.03453484987774369, 0.021344019140720594, 0.03753979715240219, 0.015513019325112176, 0.030314918189481066, 0.03235726486748414, 0.008541297530786918, 0.024458735340736948, 0.11129805106463952, 0.21478216265931693, 0.16206587876214107, 0.1028893444794472, 0.10989124577893727, 0.16351119827051375, 0.232844181879856, 0.1004419758654791, 0.11737241559696054, 0.06959081717005922, 0.058143478069876076, 0.07326160549692828, 0.06216983107091001, 0.06714485419619054, 0.09004461962645327, 0.17030189147452368, 0.08169578341832329, 0.041668854814385536, 0.11657287302188402, 0.09550445194363, 0.08753436822596417, 0.15482181888212454, 0.17710433518384616, 0.11531351946501567, 0.09211295563518418, 0.09748651360983784, 0.06487933278834002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034930903631135157, 9.999999999998899e-05, 9.999999999998899e-05, 0.037568379215643155, 0.0019104733172947697, 0.009054009629688387, 0.020565831763724396, 0.007425553122777817, 0.031112743648323726, 0.03838584535032863, 0.04001557682846213, 0.0026874751701913002, 0.027211787937827858, 9.999999999998899e-05, 0.03143669744500144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012012593863600207, 9.999999999998899e-05, 0.03313252410355183, 9.999999999998899e-05, 0.002365332954508137, 0.004347285943621548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007064903823169488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006509418118969212, 0.2886994210162911, 0.22892564783103497, 0.21432449720441804, 0.19279134698257605, 0.18115611298719947, 0.18342887124248786, 0.21427496678460645, 0.21182989374830763, 0.24128737306692416, 0.053391528929861654, 0.051811310362991025, 0.039889993563710036, 0.057530648878973634, 0.043694460825644765, 0.05271120600590895, 0.037957955950547295, 0.039248675369141894, 0.038347211590875174, 0.07384748505231642, 0.08609370886951495, 0.08421057483921246, 0.09855305120349966, 0.10852972522114013, 0.08633464539415692, 0.11695433120226062, 0.08234399644471246, 0.10578404582296885, 0.149131667415751, 0.1379556124199871, 0.15951453729440568, 0.20418287695057802, 0.1594208182776118, 0.17313843267307072, 0.14926765345380977, 0.2149056939093129, 0.151464360430413, 0.08109284189136345, 0.060178714432502556, 0.10360436545283447, 0.15383308072310609, 0.09334051618492434, 0.11897608706687823, 0.11315486636613481, 0.12212103873125002, 0.10123950878168309, 0.15919180141640676, 0.12047988508106078, 0.1360700374446362, 0.12643036481342607, 0.13965497569434682, 0.1448134916632987, 0.15231463566652126, 0.12389300275565696, 0.15539956960464185, 0.1569880164016091, 0.1107107912907006, 0.1456131616755274, 0.14064274626402662, 0.1458901008023189, 0.15548517912369986, 0.14707849492429448, 0.13264333410194395, 0.1506845553081676, 0.16879262479922474, 0.10122254590743429, 0.08167024703901915, 0.16973575857442869, 0.1334885060467943, 0.15633575931911325, 0.07245568600050101, 0.10146516603286437, 0.213473998022933, 0.29110164863515053, 0.10051730792859848, 0.0665844762842942, 0.06816016525330082, 0.0713855053322826, 0.045511073114331335, 0.05919046270800332, 0.09276062490575077, 0.11218182488746076, 0.14455768967617022, 0.14306956028179485, 0.14763022729669195, 0.17054409745012689, 0.13565395204342112, 0.1551760183168842, 0.15541344115670985, 0.13531272105911363, 0.14689007985489466, 0.052416325366306915, 0.031636415414077246, 0.06485755487116873, 0.051756892613183614, 0.047471666733665874, 0.0556056083070976, 0.06594317534075178, 0.05648654942821196, 0.046729390195366816]}, "mutation_prompt": null}
{"id": "d1b5f0a4-249b-4aa4-9133-cf8cde8b116e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "6f510f10-c4e5-471f-a619-66f55eedc5fd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "aa704042-9af5-4319-90fa-e1803292ae6a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "526c9078-925b-48f7-9826-041e535f8c92", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "d0a9de35-905a-43b0-93e2-b42010430d27", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "2cea9543-e418-452b-99d3-154cb7e14ffb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "2607eecf-d4f8-4d7b-924a-0b8652466b2f", "solution": "import numpy as np\nfrom scipy.stats import norm\n\nclass QEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iters = budget // self.population_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(dim, pop_size, lb, ub):\n            return np.random.uniform(lb, ub, (pop_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def fitness_score(population, func):\n            return np.array([func(p) for p in population])\n\n        population = initialize_population(self.dim, self.population_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            fitness = fitness_score(population, func)\n            fitness_prob = norm.cdf(fitness)\n            parents = population[np.random.rand(self.population_size) < fitness_prob]\n            children = np.repeat(parents, 2, axis=0)\n            noise = np.random.normal(0, 0.1, children.shape)\n            children += noise\n            population[:len(children)] = clip_position(children, self.lb, self.ub)\n        best_solution = population[np.argmin(fitness_score(population, func))]\n        return best_solution", "name": "QEA", "description": "Implement a novel metaheuristic algorithm named Quantum Evolutionary Algorithm (QEA) that utilizes quantum-inspired operators to evolve solutions and navigate the search space efficiently.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('could not broadcast input array from shape (60,5) into shape (30,5)').", "error": "ValueError('could not broadcast input array from shape (60,5) into shape (30,5)')", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {}, "mutation_prompt": null}
{"id": "61e03f37-8a74-4ca3-ad9d-517e3f559f0c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "8e71f333-4978-4202-b40d-bbd85eed116d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "7ba28ef0-c330-4bb2-8290-91d7a6b1bf7c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "27ff1a3b-d45f-4915-9812-f65d3bdd9f00", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "81678df8-7076-442f-a7b8-2604dabfe7cd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "04b3a63c-28e5-40b7-a4c1-aaf6321f95b1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "bf440f87-e5bb-4632-952b-b6ce626d5920", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "c6350efe-f93a-4fbd-bbc2-24354f04a814", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "a51420bf-d238-473f-b242-44e3a8628e8a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "f3fd311f-75c3-4211-9979-a9ba09a2e396", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "6941ffd1-1e46-454f-82d7-9cc0c868523c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "8989243a-c432-4997-ad27-4f96863d3d21", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "dfcc9d70-ca5e-4211-8b39-0fd09f9c9f57", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "62bce239-a4e9-453d-83ac-92d297e08d46", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "75b1edc1-a3c5-4580-a861-c9e4fef6f134", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "c9c51e48-a239-4185-bb9c-fdeb49eca825", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "AdaptiveHybridPSODE", "description": "An adaptive Hybrid Metaheuristic Algorithm utilizing a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) with enhanced exploration and exploitation capabilities.", "configspace": "", "generation": 28, "fitness": 0.0976014849243864, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "7127850f-2508-4840-acbd-7fb517e5cf2a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "ee3ea45d-64b9-4e62-a0cb-bb13ca3ce468", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "aebe6f4b-f5bd-4d3d-b8d1-21b651e97122", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "ae9bf8ee-c02a-475f-ac3f-b3adc7683841", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "1fca0831-ac7d-42df-aa08-fbf612c8766b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "57f2e8a4-b41c-4fdf-ab02-c4117ce4c662", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.w = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = self.w * swarm[i] + self.c1 * r1 * (p_best - swarm[i]) + self.c2 * r2 * (swarm[i] - p_best)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "EnhancedHybridPSODE", "description": "A metaheuristic algorithm using a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) with enhanced diversity maintenance for improved exploration-exploitation balance.", "configspace": "", "generation": 34, "fitness": 0.06896112284192667, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.18551868147151063, 0.14394928492364956, 0.1921741534114243, 0.08952233024927114, 0.08807612733437431, 0.10682992544674486, 0.12219652498187838, 0.11338534761873431, 0.0943746833161958, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03815095574953575, 0.021128932606283568, 0.020070132184624168, 0.03522247174607818, 0.03034798040890896, 0.03667587279406215, 0.029125025425026263, 0.011460670449025767, 0.022184551265907793, 0.0374418638371008, 0.01894652263530916, 0.016513504850490968, 0.027288302941190667, 0.008817755676767902, 0.026762888775576532, 0.010935869826030786, 0.003267321478108487, 0.011826201898481159, 0.04955742467906499, 0.04219942533172094, 0.06676599881637046, 0.053340261193588256, 0.04687545855643349, 0.0410033934691999, 0.0638860334912611, 0.048986754550083944, 0.055013833270072254, 0.024154998712025755, 0.043881942964964615, 0.01643717646304177, 0.020742248803471197, 0.054011291974571995, 0.03407597335319479, 9.999999999998899e-05, 0.01303120142228198, 9.999999999998899e-05, 0.13915076308615515, 0.14355290866501214, 0.1213926031991337, 0.0667108215001172, 0.03425932010729138, 0.10056647980526834, 0.07040606833103269, 0.10848946631464973, 0.0452916080917517, 9.999999999998899e-05, 9.999999999998899e-05, 0.02258942994750901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11624033260541256, 0.04975598116418589, 0.05208521514192821, 0.05119777634296374, 0.0830974966497241, 0.03895258177552152, 0.06680714076289862, 0.06772342557015054, 0.04599128702159627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023851388524160022, 0.028877991062474795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17646210115327088, 0.19188070840152915, 0.16349333161566104, 0.1672337734512488, 0.1216366435339361, 0.1925527435397294, 0.21517161478330626, 0.16438734825863266, 0.1852464981115215, 0.010674082357831738, 9.999999999998899e-05, 9.999999999998899e-05, 0.024903244802564783, 0.030318767091045418, 0.03203347921506827, 0.025636868326673223, 0.01967305509762607, 0.04254947423514843, 0.11512563559223576, 0.08609370886951495, 0.08367964956685958, 0.09855305120349966, 0.12410222853618524, 0.08540328786300411, 0.10797046047403824, 0.08508264812611321, 0.10913736120500539, 0.13202600916772822, 0.13268601813654735, 0.14395684034890988, 0.160865609049601, 0.1701572597083526, 0.16431643129197815, 0.13863960240023165, 0.17377774300845283, 0.1280822551729165, 0.0699061439246017, 0.0537865589506864, 0.09035985112263611, 0.09052960735607862, 0.12371296385151398, 0.11163491251830515, 0.0858760820369342, 0.0997711199450243, 0.07522739729394745, 0.1513093401838871, 0.14954650243923462, 0.1717076712609774, 0.1683272906371025, 0.1667263288039671, 0.1740661837922125, 0.14521752764867357, 0.15350608200722038, 0.1474288823643295, 0.11961011373858532, 0.12382625347782594, 0.1478490614936785, 0.1334273003770513, 0.14040163072335488, 0.11806747281931473, 0.13181749637975904, 0.12021158682356958, 0.10067756367692804, 0.10987166169289408, 0.1467544317814543, 0.13001122383683905, 0.12919674306359685, 0.1207914665021157, 0.14919281556019837, 0.12862061639459277, 0.10083282869937304, 0.14186282483011892, 0.11386611668297597, 0.1533349035598116, 0.08040653644740492, 0.08930184161030863, 0.10503417493094824, 0.11129873406723323, 0.0815556301223076, 0.10990029972396809, 0.10116251271874244, 0.14411524067627857, 0.151223743648068, 0.1724224384745634, 0.1363654185383948, 0.15591840496988985, 0.14106862348641447, 0.14969714796693134, 0.14581611562719865, 0.1623092928583847, 0.033277333765469486, 0.035806641127816285, 0.040685684099487474, 0.04038936365540524, 0.05905061609575646, 0.038183367048613914, 0.039632667936792876, 0.040045822945649734, 0.03991340334421545]}, "mutation_prompt": null}
{"id": "ad89c25c-54bf-46d8-bb3e-0d7f4afe6731", "solution": "import numpy as np\n\nclass HybridFPADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_iters = budget // self.population_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(dim, population_size, lb, ub):\n            return np.random.uniform(lb, ub, (population_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, population):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(population)):\n                fitness = func(population[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = population[i]\n            return best_pos\n\n        population = initialize_population(self.dim, self.population_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.population_size):\n                p_best = optimize(func, population)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = population[i] + 0.5 * (population[i] - population[i]) + 0.5 * (p_best - population[i]) + 0.5 * (r1 - r2)\n                population[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, population)", "name": "HybridFPADE", "description": "Implementing a novel Metaheuristic Algorithm called HybridFPADE, a hybrid algorithm combining Firefly Algorithm (FA) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 35, "fitness": 0.0976014849243864, "feedback": "The algorithm HybridFPADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "f8320e63-9ce8-41a3-955f-c13765d1804c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "39dbaec6-3d04-4c57-8644-02730bfae07f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "b9532255-22e1-46ed-b1e5-572214624b05", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "6eb86e1d-ced7-4e63-b7a8-ba4ea8f9fba1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "a9187e3a-ebca-422e-acc6-2ffba68c10cf", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "582d25b3-04d9-4440-a500-e9661c8df08c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "7715837b-095d-4fff-8836-fe6c807a349c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "073e1140-e5d3-4cfc-9cd4-1e695f68b21c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "8f973399-40c7-45cf-9bb5-0a4be3764793", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "45195252-b5a0-4621-b0bc-1de906c759ef", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "ce8a40d6-c7a9-41a1-a369-a0e2d9f7bab5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "43253830-14d2-4565-9d7e-5838365e6882", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "c357d251-1236-4f34-a7d1-c0d892901f5f", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        inertia_weight = 0.5\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = inertia_weight * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(swarm[i] + v, self.lb, self.ub)\n            inertia_weight *= 0.99  # Update inertia weight\n        return optimize(func, swarm)", "name": "DynamicInertiaHybridPSODE", "description": "Modifying the velocity update equation in the PSO component of HybridPSODE to incorporate a dynamic inertia weight for better exploration and exploitation balance.", "configspace": "", "generation": 48, "fitness": 0.09760148492438632, "feedback": "The algorithm DynamicInertiaHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402338, 0.16901993633603485, 0.15772096883794307, 0.1713982720896654, 0.17133768181461295, 0.1505363223623445, 0.18126341095382026, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.1362502137670195, 0.15916146500871942, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "598c5b95-eee5-4437-afea-400b39abd14b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "18ff3b0d-b64a-4def-bea1-7d776b922727", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "ab6b2b89-16a9-4225-9474-068d6bd8c2df", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "15b01ff0-f5b2-4565-99e0-fabc06189a43", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "afaed180-63f3-400b-88c2-f09a30a9a02e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "c261b132-9047-44d1-bd73-421a836d9888", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 40\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = 0.9 * swarm[i] + 0.1 * p_best + 0.1 * (swarm[i] - p_best) + 0.2 * (np.random.uniform() - 0.5)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "ImprovedHybridPSODE", "description": "An improved version of HybridPSODE with enhanced exploration and exploitation strategies using adaptive velocity updates and dynamic population size.", "configspace": "", "generation": 54, "fitness": 0.04429144962167261, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.11869729595922507, 0.08108763387163931, 0.09278781341770681, 0.09549614079830171, 0.06226643331670656, 0.07938529772436831, 0.07828051422791593, 0.07431300570909605, 0.06909589153413676, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005021805467560814, 0.01467079663371329, 0.005647520074024803, 0.019794276848081438, 0.006592353378601756, 0.006669962766643223, 0.01860745369271133, 0.021596992246867175, 0.016754665771445243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02606595668878997, 0.0030349772323461366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045263059100511094, 0.0422610835215379, 0.04295171782269713, 0.05364076601323797, 0.04687545855643349, 0.03890235793773866, 0.06448953140938629, 0.048986754550083944, 0.041118373669900565, 0.06297348375577572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006018428666613174, 9.999999999998899e-05, 9.999999999998899e-05, 0.012338302972180304, 9.999999999998899e-05, 0.10041697580032838, 0.04045329357724825, 0.060226931683617146, 0.08226648837164974, 0.02830166338504836, 0.00013369628877624162, 0.040000693120513464, 0.05931056463008866, 0.03390965306696503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011373417879185554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10955950665892489, 0.14406870837066654, 0.14838054695461433, 0.1028540081077548, 0.09736113388243539, 0.097506812454898, 0.16112956940342849, 0.09716898369721727, 0.12478200895905234, 0.008528750886613534, 9.999999999998899e-05, 0.030225960790484563, 0.03266886175302153, 0.000980664171421397, 0.01759993274736349, 0.0008153359963085638, 9.999999999998899e-05, 0.0267656688986897, 0.078488530217247, 0.08609370886951495, 0.1273819618585994, 0.11146043261513894, 0.10980883553620902, 0.06718470840997592, 0.10960829136011563, 0.08099219012337167, 0.08200767507133444, 0.09613312101458527, 0.09823081104476272, 0.14352810184653642, 0.13800672315110074, 0.1138073754026484, 0.10979462739608792, 0.13196553283703838, 0.17377774300845283, 0.12462079215722366, 0.055024531409562094, 0.04917352119884977, 0.0627230583138384, 0.07086408092598062, 0.06733343040880413, 0.06459841474577643, 0.0837317855149382, 0.10134898338977472, 0.07165618032715704, 0.12604597475343216, 0.10152686745741302, 0.13345086981233123, 0.12583748477314294, 0.09183970683433418, 0.11996744494780565, 0.12245976138762271, 0.08313877782906198, 0.12682859916700473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0558788662368952, 0.07473765611438354, 0.08173230295553624, 0.08177660295978584, 0.1261537808422758, 0.07485760980746459, 0.1070176662487543, 0.09644297813555713, 0.0693612576838919, 0.11040265245322212, 0.10267165755511809, 0.02659281044983086, 0.0506857903344724, 0.037911619654850126, 0.05903250263678039, 0.04706239050298788, 0.040199637022313106, 0.04188890585975402, 0.14372283898978966, 0.14611066452893706, 0.14763022729669195, 0.14807387423884522, 0.1669070163544939, 0.14365474929414868, 0.14969714796693134, 0.15692246237167784, 0.14703588173607873, 0.02013121222880654, 0.018326249353005863, 0.03389748816773863, 0.027897706427822744, 0.03553197143947595, 0.02130775967347709, 0.016228383701229143, 0.0174802506760241, 0.039890560193123537]}, "mutation_prompt": null}
{"id": "e20fab63-5166-4b31-9d8f-d96fa8382169", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "ad02f54c-a66a-4f81-97ff-8b3f0399ff22", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "ba0d63df-a006-4d5c-935c-579361a4a52a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.max_iters = budget // self.swarm_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_swarm(dim, swarm_size, lb, ub):\n            return np.random.uniform(lb, ub, (swarm_size, dim))\n\n        def clip_position(p, lb, ub):\n            return np.clip(p, lb, ub)\n\n        def optimize(func, swarm):\n            best_pos = None\n            best_val = np.inf\n            for i in range(len(swarm)):\n                fitness = func(swarm[i])\n                if fitness < best_val:\n                    best_val = fitness\n                    best_pos = swarm[i]\n            return best_pos\n\n        swarm = initialize_swarm(self.dim, self.swarm_size, self.lb, self.ub)\n        for _ in range(self.max_iters):\n            for i in range(self.swarm_size):\n                p_best = optimize(func, swarm)\n                r1, r2 = np.random.uniform(0, 1, (2, self.dim))\n                v = swarm[i] + 0.5 * (swarm[i] - swarm[i]) + 0.5 * (p_best - swarm[i]) + 0.5 * (r1 - r2)\n                swarm[i] = clip_position(v, self.lb, self.ub)\n        return optimize(func, swarm)", "name": "HybridPSODE", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3124468796765497, 0.27347154751768976, 0.2947300229121561, 0.13669561860633717, 0.11927162556000237, 0.24466810651645887, 0.22435654497986102, 0.21325117852489883, 0.1750153698352478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05850263531183786, 0.07913693587737247, 0.04244377044222036, 0.06496896393242746, 0.05006568155104085, 0.06225580946089082, 0.055118268608111975, 0.05835490158892187, 0.04479070045494826, 0.050208700030488385, 0.05363906155017972, 0.03770920445941428, 0.04002724806430902, 0.03531658099041268, 0.03409557956580722, 0.05325004831955937, 0.017121130272040652, 0.04586514856492507, 0.05008161601864636, 0.06499224098579637, 0.05826738523402364, 0.05837800808405269, 0.05423639095110333, 0.04800117394954684, 0.06836518498272037, 0.05736489471238915, 0.05022095488464695, 0.09130456672875353, 0.06131069416283097, 0.07848198283667063, 0.10279561044240604, 0.11028061915774812, 0.08201600394567743, 0.15859873526924617, 0.05391660709426882, 0.027911660925332815, 0.18102646686674484, 0.11232718320904311, 0.12497498683881281, 0.18444299561832356, 0.18549666164286005, 0.14299139168495167, 0.10252460379257777, 0.1278575200274883, 0.1276205950541215, 0.04141857032557905, 0.09120510261408032, 0.06148497599294822, 0.04803393777775855, 0.07183058102430584, 9.999999999998899e-05, 0.10455957884260136, 0.07018258387909004, 0.09015779961452286, 0.09338828317625081, 0.09745157788415815, 0.053276198587705714, 0.07878953133736999, 0.09879738939661342, 0.10036644666878314, 0.0868856083056666, 0.06659388225175644, 0.038843675128067634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05422701213060699, 0.021081952316549524, 0.07626194531540786, 0.028554960329093992, 0.004932312139110051, 0.005401220519566041, 0.07586352146871234, 0.046066687716433075, 0.051890135340454946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007145338180871708, 0.0163011336348583, 0.006849137678062278, 0.00016446380776580227, 0.0007966232223804992, 0.02668608265312855, 0.009660378506464395, 0.007893010264671485, 0.03571651672917575, 0.28948443399703505, 0.27702437078002773, 0.25448151727636537, 0.19287555005683732, 0.20246049484911544, 0.16669758455722294, 0.2934074518919284, 0.2780952670764836, 0.2651617454829608, 0.03487523251102376, 0.004004171522488331, 0.002950880175619064, 0.04797756196529113, 0.048094545987731774, 0.05408493879810117, 0.06362421372219507, 0.0406448837803709, 0.06344942695971423, 0.141379986155603, 0.10368448865648972, 0.1097001081381721, 0.10005617697335911, 0.13936844011697558, 0.10059622139387903, 0.09422617840539582, 0.09744308161782878, 0.11466149655890201, 0.1340924597814963, 0.16176198999705704, 0.16391481294553156, 0.19765204612007659, 0.1945667644173269, 0.18025127408447483, 0.15493899750677664, 0.20807336746073546, 0.15143346102154354, 0.07688978433084592, 0.050876017098725024, 0.09686019245148803, 0.14996986168693038, 0.13224376625542156, 0.14822459392423004, 0.13080048868416383, 0.1504786063725615, 0.07991406969850234, 0.16746954132850478, 0.16397071626402282, 0.16901993633603674, 0.15772096883793763, 0.1713982720896654, 0.17133768181461295, 0.15053632236236159, 0.18126341095382126, 0.159466601277635, 0.15138952409419304, 0.16309037249043357, 0.15065106577459741, 0.15544162898208191, 0.14756283514801039, 0.15269668006262616, 0.14001680929295635, 0.15574645252456754, 0.13992315305737735, 0.16719093201644297, 0.16650834756224253, 0.13012352523414827, 0.3818216615628498, 0.17546610617169112, 0.11580730273381756, 0.10777167776085261, 0.15176547613145197, 0.2941379147452704, 0.26766734009936666, 0.1414881166813715, 0.19218804643751375, 0.13928897139386587, 0.14449503053329393, 0.0954224974185397, 0.2064850909463829, 0.11468274961021285, 0.09622196037096509, 0.14446724143817535, 0.1399876514335494, 0.14909429693149123, 0.1393427460301676, 0.13625021376702096, 0.1591614650087233, 0.16244808898436947, 0.13915754381244483, 0.15790394241823347, 0.06308295139421805, 0.04452251069147228, 0.05229007281540876, 0.05023758830377756, 0.05015650138442673, 0.05558965333067212, 0.04992606140574607, 0.04574374192920261, 0.05417940056895676]}, "mutation_prompt": null}
{"id": "d7fbafd9-fd63-4b13-8d5e-ce44fa7bff0e", "solution": "import numpy as np\n\nclass GeneticSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_iters = budget // self.pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(dim, pop_size, lb, ub):\n            return np.random.uniform(lb, ub, (pop_size, dim))\n\n        def mutate(individual, lb, ub, T):\n            new_individual = individual + np.random.normal(0, T, len(individual))\n            return np.clip(new_individual, lb, ub)\n\n        def accept_move(new_fitness, current_fitness, T):\n            if new_fitness < current_fitness:\n                return True\n            else:\n                acceptance_prob = np.exp((current_fitness - new_fitness) / T)\n                return np.random.rand() < acceptance_prob\n\n        population = initialize_population(self.dim, self.pop_size, self.lb, self.ub)\n        T = 1.0\n        for _ in range(self.max_iters):\n            for i in range(self.pop_size):\n                current_fitness = func(population[i])\n                new_individual = mutate(population[i], self.lb, self.ub, T)\n                new_fitness = func(new_individual)\n                if accept_move(new_fitness, current_fitness, T):\n                    population[i] = new_individual\n            T *= 0.95  # Cooling schedule\n        best_individual = min(population, key=lambda x: func(x))\n        return best_individual", "name": "GeneticSimulatedAnnealing", "description": "A novel metaheuristic algorithm utilizing a combination of Genetic Algorithm (GA) and Simulated Annealing (SA) to explore the search space effectively while incorporating both global and local search strategies.", "configspace": "", "generation": 58, "fitness": 0.1475320564846861, "feedback": "The algorithm GeneticSimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.09.", "error": "", "parent_id": "f5b53246-0440-4284-9577-9dc0a613d107", "metadata": {"aucs": [0.3346417506743783, 0.3091787241680696, 0.3624641529818423, 0.3028420879735465, 0.2844207918495061, 0.32350488434675895, 0.2936054988917304, 0.26534801728032265, 0.26748148126115756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0534403707283343, 0.07414484625606688, 0.06105395031179217, 0.0784854311113049, 0.10203923489201283, 0.09209476372621517, 0.0851002774452354, 0.07588333067077002, 0.06994391548921775, 0.06846262645686851, 0.06609080558594649, 0.061674712786295105, 0.06898671787555721, 0.0670008234830819, 0.04605301493430847, 0.06948741910875922, 0.056234146286767484, 0.08774022766252343, 0.1139776704237262, 0.10240066970812745, 0.1419455322487445, 0.09447114550901081, 0.16156743100294102, 0.11916604853818302, 0.13896444211539105, 0.12222392128226034, 0.151826069743204, 0.24323690261449316, 0.08891767641504777, 0.15593515587131168, 0.22334599394227994, 0.21847087213355787, 0.13633947931020962, 0.1968653493582101, 0.09374097228442646, 0.18515981059238729, 0.24537621561374923, 0.12106969765909892, 0.14463644914231388, 0.22351092019962493, 0.2124758844761757, 0.16532189164694355, 0.1381068672900173, 0.14230859629196713, 0.16841501276802706, 0.11652488860456689, 0.12836012174432876, 0.14324711889777864, 0.16836283277332842, 0.12251028355420945, 0.10677621357576317, 0.17589343503651766, 0.2729691256733683, 0.15077546517092455, 0.17056597704073373, 0.14522347349871312, 0.1187258942724918, 0.2008482966199041, 0.16233055536200958, 0.20367682848234803, 0.14594796512549124, 0.12661853972051962, 0.14836926743329693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055083985283989945, 0.0046339797190702026, 0.004369142563889206, 0.11268711659240582, 0.08015995668235698, 0.08112069282605439, 0.09451393703727207, 0.14646640356020668, 0.07952213897076166, 0.11170429872183463, 0.10510002964508425, 0.08313195494609149, 0.034570492270900255, 0.0731018384386023, 0.06527822356076862, 0.05534983032717977, 0.07445378734725927, 0.044522670154411026, 0.04954757972732571, 0.06166279498299687, 0.06763549114058875, 0.09204159693838954, 0.09022737594663288, 0.04780653253784062, 0.09391303385568628, 0.10479871529556861, 0.14360322676397663, 0.13070261165645403, 0.08460640099464323, 0.10890519903555762, 0.2545240010270139, 0.2016782933489074, 0.2915143869641651, 0.3156759876340963, 0.29026710652407206, 0.254418683651902, 0.2612997464182685, 0.18136458833457025, 0.2802861602771102, 0.05522202820032529, 0.05582475189665348, 0.04832736832258211, 0.07193351970209838, 0.07389421203335456, 0.08717195405686429, 0.08046302795981097, 0.051181200459384124, 0.11829837766135465, 0.18754523758150898, 0.20722384856150888, 0.15859570397667977, 0.2517755925518286, 0.251346898067191, 0.18618719412163376, 0.21761653298126948, 0.24990427091586698, 0.1684269109476978, 0.17491676467103334, 0.17058211936169076, 0.1583347936312055, 0.22049599972012335, 0.14791265274792187, 0.19931935594459305, 0.18053918250551582, 0.23093959803751696, 0.2054975420009859, 0.17070538588564654, 0.120420683855479, 0.1390873459445775, 0.1368358992980795, 0.0937390216986067, 0.17034096279959499, 0.1228541002779795, 0.22354290512681085, 0.19405773033903218, 0.17937501171905756, 0.21137648079112437, 0.16734483094424157, 0.17864709421462044, 0.15982183991291654, 0.17989291133538898, 0.21769686737764427, 0.20988924700696554, 0.16674650490043386, 0.17732181875434327, 0.18127718214577115, 0.17748615170758042, 0.1810481536684293, 0.1776242258745242, 0.2022832811019779, 0.2180304825683489, 0.18574581466045947, 0.20662047320074484, 0.3084206005489022, 0.2968421355950429, 0.334583737201812, 0.35330705184106403, 0.1901569651620023, 0.3476226520131023, 0.32075965722993927, 0.18855890547759446, 0.1862258578448731, 0.30428124893984554, 0.20765019138461316, 0.23070679517823223, 0.2913011753107345, 0.24267486253398307, 0.24117137514420794, 0.24826397033933223, 0.1958962872515564, 0.18713580935952334, 0.19986522968697418, 0.19310955810755426, 0.19471748076231254, 0.19951292700319878, 0.19166057757633648, 0.20370771826623824, 0.21755187496471795, 0.19504415837652112, 0.20419713704535336, 0.034349295218533915, 0.07888424006730488, 0.0685365390410041, 0.06526170034672485, 0.08476908481443224, 0.08755734476270849, 0.06967117667320488, 0.07015302215500485, 0.07486985502913501]}, "mutation_prompt": null}
{"id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 59, "fitness": 0.24347045384683177, "feedback": "The algorithm ParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "d7fbafd9-fd63-4b13-8d5e-ce44fa7bff0e", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "8c2ddc71-4de9-40ee-a8ec-8c007a176d56", "solution": "import numpy as np\n\nclass FireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.alpha = 0.2\n        self.beta0 = 1.0\n        self.gamma = 0.1\n\n    def __call__(self, func):\n        def initialize_population(pop_size, dim, lb, ub):\n            return np.random.uniform(lb, ub, (pop_size, dim))\n\n        def attractiveness(distance):\n            return self.beta0 * np.exp(-self.gamma * distance**2)\n\n        population = initialize_population(self.population_size, self.dim, self.lb, self.ub)\n        for _ in range(self.budget // self.population_size):\n            for i, firefly_i in enumerate(population):\n                for j, firefly_j in enumerate(population):\n                    if func(firefly_j) < func(firefly_i):\n                        distance = np.linalg.norm(firefly_i - firefly_j)\n                        attractiveness_ij = attractiveness(distance)\n                        step_size = attractiveness_ij * (firefly_j - firefly_i)\n                        population[i] += self.alpha * step_size\n                population[i] = np.clip(population[i], self.lb, self.ub)\n        return population[np.argmin([func(p) for p in population])]", "name": "FireflyAlgorithm", "description": "A novel metaheuristic algorithm, Firefly Algorithm (FA), inspired by the flashing behavior of fireflies where each firefly moves towards brighter fireflies in the swarm.", "configspace": "", "generation": 60, "fitness": 0.04255946664650438, "feedback": "The algorithm FireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.08873855912835549, 0.06432200401872246, 0.09176876395170874, 0.08941166170853654, 0.06212363807448351, 0.07704234677281896, 0.07811448821774192, 0.0742884758450515, 0.07024151841427717, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005714574749654533, 0.014662048031711894, 0.0053634779112166076, 0.01132796468095787, 0.0012184275388182897, 0.010576961999907653, 0.018244632740415323, 9.999999999998899e-05, 0.010656728868577936, 0.0037147108297457265, 9.999999999998899e-05, 0.0001072521831211315, 0.019586060842702313, 0.0014247821496186086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04517359092145712, 0.0421733640541988, 0.042865668013927105, 0.05330630272638193, 0.04686888833603975, 0.03741046220055777, 0.06382586091920006, 0.04897996297581486, 0.03917414170812028, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.008496709791630974, 9.999999999998899e-05, 0.01128661298981437, 9.999999999998899e-05, 0.10022929771034561, 0.039652003218198506, 0.05212911296016498, 0.06696943705892988, 0.02721144619335991, 9.999999999998899e-05, 0.047223526959755735, 0.05920972515916978, 0.013833501122368252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10881506278759645, 0.13870466655006808, 0.1493030172653489, 0.09424022135747889, 0.09759921037461006, 0.09574491542644514, 0.16100796556167574, 0.09715041492943055, 0.1224721347764125, 0.0041431380283989405, 0.0009972993549465237, 9.999999999998899e-05, 0.01129729068722296, 9.999999999998899e-05, 0.017591177527858215, 0.004406940424894534, 9.999999999998899e-05, 0.026760334164489863, 0.07069156813735866, 0.08603708386328379, 0.06809005703746296, 0.09853410524321404, 0.10847910920321024, 0.06364338675823855, 0.08800054716861672, 0.06166356310402643, 0.09105033900211235, 0.10110274411995435, 0.09646759385589432, 0.14342640674946183, 0.13794061771827382, 0.1230814208576414, 0.10994535561771224, 0.1266096634610756, 0.17365418936972254, 0.1135453647461343, 0.043749775147259196, 0.037093231722345577, 0.06271669775955724, 0.06478732639380447, 0.06399547114182091, 0.06382508944680287, 0.08366897173808396, 0.10181030204938724, 0.06402804308596621, 0.14821064318923804, 0.09378320999465728, 0.13345058423095613, 0.11884934731077135, 0.08230159372226553, 0.1221198682771204, 0.12245976138762271, 0.08300028584177976, 0.12934144140111326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05565935821033585, 0.07462539026258563, 0.08163450597850697, 0.08488075773712311, 0.12076337156869488, 0.06657584191718158, 0.07240936540299003, 0.09637622088424669, 0.07004555494011988, 0.11480426005842548, 0.10041403930439519, 0.020570465091074408, 0.0506453535405732, 0.037359605755074465, 0.04550781131567705, 0.04687329020308084, 0.040140850696081865, 0.04147438077299326, 0.18059758395466108, 0.1513674463512964, 0.1577287356286573, 0.15520117067355532, 0.19000707159369135, 0.1798714785373008, 0.17044216381025945, 0.1283654211655868, 0.14862371560713672, 0.018846931312546444, 0.020540070006253353, 0.033208257650110706, 0.031405011471336564, 0.04200855838711737, 0.026269706214610555, 0.023401805326165093, 0.021725095749886347, 0.03244452654839247]}, "mutation_prompt": null}
{"id": "0e3565c6-1813-4524-aa71-9b634d93ca7a", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "f1c2b24a-bca5-42dd-b7e2-bb5996c43aa6", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best, inertia_weight):\n            inertia_term = inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        inertia_weight = 0.5\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best, inertia_weight)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n            inertia_weight = 0.4 + 0.5 * (1 - _ / (self.budget/self.swarm_size))\n        return g_best", "name": "AdaptiveParticleSwarmOptimization", "description": "Enhancing the Particle Swarm Optimization algorithm by introducing adaptive inertia weight and dynamic parameter tuning.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 34, 9, '        inertia_weight = 0.5\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 34, 9, '        inertia_weight = 0.5\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "ee6f57a5-fee8-4d67-a655-18a2810f54c7", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                self.inertia_weight *= 0.99  # Adaptive inertia weight update\n                self.cognitive_weight = max(0.5, self.cognitive_weight * np.exp(0.01 * np.random.randn()))  # Adaptive cognitive weight update\n                self.social_weight = max(0.5, self.social_weight * np.exp(0.01 * np.random.randn()))  # Adaptive social weight update\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "AdaptivePSO", "description": "Enhancing the Particle Swarm Optimization algorithm by introducing adaptive parameters for inertia, cognitive, and social weights to improve convergence rate and exploration-exploitation balance.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget // self.swarm_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget // self.swarm_size):\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "831965b1-edfd-4413-8c65-bb6691770392", "solution": "import numpy as np\n\nclass EnhancedParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.min_inertia_weight = 0.4\n        self.max_inertia_weight = 0.9\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best, inertia_weight):\n            inertia_term = inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        for t in range(self.budget // self.swarm_size):\n            inertia_weight = self.min_inertia_weight + (self.max_inertia_weight - self.min_inertia_weight) * (t / (self.budget // self.swarm_size))\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best, inertia_weight)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "EnhancedParticleSwarmOptimization", "description": "Enhancing Particle Swarm Optimization by incorporating dynamic inertia weight and adaptive learning rates.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 36, 9, '        for t in range(self.budget // self.swarm_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 36, 9, '        for t in range(self.budget // self.swarm_size):\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "470c991c-9d3c-480e-9830-113180a6debb", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "b4d7fc0f-7ee2-4659-b5b8-6d1b2f156b8a", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "4a981115-4209-4cfd-92c9-79dea073466f", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "e0d82b2a-1701-4301-8439-064115f39fa3", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "47b0bb4d-e802-4e3c-88f3-1834bd986f56", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "a4c294af-bdd4-428e-958b-a154ec870f93", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "5d08c260-7948-41c5-8140-d95a927808a6", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "759da7ea-3526-4e52-bb66-d3836c0d0149", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "1dc14ac5-a43c-417d-9520-4f11ea7296e9", "solution": "import numpy as np\n\nclass EnhancedParticleSwarmOptimization(ParticleSwarmOptimization):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.inertia_decay = 0.95\n\n    def __call__(self, func):\n        def adaptive_update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = self.inertia_weight * inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        swarm, velocities = self.initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = self.adaptive_update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = self.update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n            self.inertia_weight *= self.inertia_decay\n        return g_best", "name": "EnhancedParticleSwarmOptimization", "description": "Enhancing Particle Swarm Optimization (PSO) by introducing a dynamic parameter adaptation strategy to improve convergence speed and optimization performance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedParticleSwarmOptimization' object has no attribute 'initialize_swarm'\").", "error": "AttributeError(\"'EnhancedParticleSwarmOptimization' object has no attribute 'initialize_swarm'\")", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "0c744169-0ab0-4c46-ac70-0e59b7afaece", "solution": "import numpy as np\n\nclass DynamicInertiaWeightPSO(ParticleSwarmOptimization):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.distance_weight = 0.5\n\n    def __call__(self, func):\n        def calculate_distance_matrix(swarm):\n            distances = np.linalg.norm(swarm[:, np.newaxis] - swarm, axis=2)\n            np.fill_diagonal(distances, np.inf)\n            return distances\n\n        def update_inertia_weight(swarm, distances):\n            inertia_weights = np.ones(self.swarm_size) * self.inertia_weight\n            for i, particle in enumerate(swarm):\n                neighbors = np.argsort(distances[i])[:3]  # Consider the 3 nearest particles\n                fitness_difference = np.abs(func(particle) - func(swarm[neighbors]))\n                inertia_weights[i] = np.mean(fitness_difference) * self.distance_weight\n            return inertia_weights\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        for _ in range(self.budget // self.swarm_size):\n            distances = calculate_distance_matrix(swarm)\n            inertia_weights = update_inertia_weight(swarm, distances)\n            for i in range(self.swarm_size):\n                self.inertia_weight = inertia_weights[i]\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "DynamicInertiaWeightPSO", "description": "Enhancing Particle Swarm Optimization by incorporating a dynamic inertia weight strategy based on particle proximity and fitness diversity.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 25, 9, '        for _ in range(self.budget // self.swarm_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 25, 9, '        for _ in range(self.budget // self.swarm_size):\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "2a3b86fd-233b-4774-8a11-7f86fd59b156", "solution": "import numpy as np\n\nclass EnhancedParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_inertia_weight = 0.9\n        self.final_inertia_weight = 0.4\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best, inertia_weight):\n            inertia_term = inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        for t in range(self.budget // self.swarm_size):\n            inertia_weight = self.initial_inertia_weight - ((self.initial_inertia_weight - self.final_inertia_weight) * t / (self.budget // self.swarm_size))\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best, inertia_weight)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "EnhancedParticleSwarmOptimization", "description": "Enhancing Particle Swarm Optimization algorithm by incorporating variable inertia weight and dynamic adjustment of cognitive and social weights during optimization.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 36, 9, '        for t in range(self.budget // self.swarm_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 36, 9, '        for t in range(self.budget // self.swarm_size):\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "015ddc12-6459-46b9-b0c6-06e78c7c56af", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best, inertia_weight):\n            inertia_term = inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        inertia_weight = self.inertia_max\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best, inertia_weight)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            new_g_best = p_best[np.argmin([func(p) for p in p_best])]\n            if func(new_g_best) < func(g_best):\n                g_best = new_g_best\n            inertia_weight = self.inertia_max - (self.inertia_max - self.inertia_min) * _ / (self.budget // self.swarm_size)\n        return g_best", "name": "DynamicInertiaPSO", "description": "Enhancing Particle Swarm Optimization by incorporating dynamic inertia weight adjustment to balance exploration and exploitation.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 36, 9, '        inertia_weight = self.inertia_max\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 36, 9, '        inertia_weight = self.inertia_max\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "4456ecb1-3839-4f68-b99c-590ad85f031f", "solution": "import numpy as np\n\nclass DynamicInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best, inertia_weight):\n            inertia_term = inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        inertia_weight = self.inertia_max\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best, inertia_weight)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n            inertia_weight = self.inertia_min + (_ / (self.budget // self.swarm_size)) * (self.inertia_max - self.inertia_min)\n        return g_best", "name": "DynamicInertiaPSO", "description": "Enhancing Particle Swarm Optimization (PSO) algorithm by adding dynamic inertia weight updating to improve global and local search abilities.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 36, 9, '        inertia_weight = self.inertia_max\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 36, 9, '        inertia_weight = self.inertia_max\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "9875b2de-12ef-44b3-8439-52e4fb001226", "solution": "import numpy as np\n\nclass DynamicWeightParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                self.cognitive_weight = 1.5 / (_ + 1)  # Update cognitive weight\n                self.social_weight = 1.5 / (_ + 1)  # Update social weight\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "DynamicWeightParticleSwarmOptimization", "description": "Enhancing Particle Swarm Optimization by dynamically adjusting cognitive and social weights during the optimization process.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget // self.swarm_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget // self.swarm_size):\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "7ae0873a-3354-4e2d-87f6-028c6983522b", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "5c606ac4-fbd3-4bf6-9973-5e0660ac7efc", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "20e2e0ce-9da4-4b27-9d50-011c8a9597d7", "solution": "import numpy as np\n\nclass DynamicInertiaPSO(ParticleSwarmOptimization):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n\n    def __call__(self, func):\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (self.budget - i) / self.budget\n            inertia_term = inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        for i in range(self.budget):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "DynamicInertiaPSO", "description": "Enhancing the Particle Swarm Optimization algorithm by incorporating a dynamic inertia weight strategy for better convergence performance.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 21, 9, '        for i in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 21, 9, '        for i in range(self.budget):\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "a99915a7-a5c4-45cd-93bf-6d7224729dea", "solution": "import numpy as np\n\nclass DynamicParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5  # Dynamic cognitive weight\n        self.social_weight = 1.5  # Dynamic social weight\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                self.cognitive_weight = 1.5 - 0.1 * (_ / (self.budget // self.swarm_size))  # Dynamic cognitive weight adjustment\n                self.social_weight = 1.5 + 0.1 * (_ / (self.budget // self.swarm_size))  # Dynamic social weight adjustment\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "DynamicParticleSwarmOptimization", "description": "Improving Particle Swarm Optimization by dynamically adjusting cognitive and social weights during optimization based on individual particle performance.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget // self.swarm_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget // self.swarm_size):\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "02c89d2b-c448-4a62-9dc1-694f7768af51", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "35512d24-bafb-4df9-b124-7dc1172f1da7", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "44290edc-c984-4975-a472-6120ea7550fa", "solution": "import numpy as np\n\nclass DynamicWeightedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                self.cognitive_weight = 1.5 * np.exp(-0.1 * _ / (self.budget // self.swarm_size))  # Dynamic cognitive weight\n                self.social_weight = 1.5 * np.exp(-0.1 * _ / (self.budget // self.swarm_size))     # Dynamic social weight\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "DynamicWeightedPSO", "description": "Enhancing Particle Swarm Optimization by dynamically adjusting cognitive and social weights during the optimization process.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget // self.swarm_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget // self.swarm_size):\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "eb0cb65d-c4a4-4dd7-9b54-a9f82d8a7269", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "bd5aa9d2-6b4a-4a2e-b1a3-30a3b84e2298", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.min_inertia = 0.4\n        self.max_inertia = 1.0\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best, inertia_weight):\n            inertia_term = inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for t in range(self.budget // self.swarm_size):\n            current_inertia = self.min_inertia + ((self.max_inertia - self.min_inertia) * t) / (self.budget // self.swarm_size)\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best, current_inertia)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "AdaptiveInertiaPSO", "description": "Enhancing Particle Swarm Optimization using Adaptive Inertia Weights based on Fitness Value", "configspace": "", "generation": 87, "fitness": 0.23891162240917066, "feedback": "The algorithm AdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8654501630248375, 0.8559960510143777, 0.8539973633218746, 0.7802390745227444, 0.814327100364052, 0.8207398310733915, 0.7994595585486941, 0.5286554297787469, 0.8062283702884643, 0.19522405224054762, 0.17499383749965358, 0.1081803630685112, 9.999999999998899e-05, 0.08095539317765688, 0.040993459344802585, 0.19697372962516357, 0.018724794454791138, 0.049207363303687135, 0.0837810841601806, 0.11307238239305373, 0.0786988259419652, 0.057457317405543606, 0.08721875857079775, 0.14498499348747007, 0.06402584517552001, 0.10932820605294413, 0.08634972045591638, 0.07537979735537992, 0.107678323367431, 0.09415412767185949, 0.06591624961523701, 0.06614711031158771, 0.12116835556702332, 0.0832073285014554, 0.10813885960499248, 0.0892812427851184, 0.8713067192886264, 0.8472367821623129, 0.8931839758958845, 0.8233355160247666, 0.844828503370086, 0.8680469050336017, 0.8632941579877519, 0.8223739579018143, 0.8207087763360479, 0.18854297072914128, 0.10924195821379412, 0.11542006293833962, 0.4577956092100025, 0.2901802867667338, 0.24498963795689488, 0.23473359058698995, 0.12727743502444788, 0.1938642390704779, 0.18527313465703898, 0.11289175369956361, 0.140296945987186, 0.2744820667844521, 0.20779491845446796, 0.17027790004450327, 0.130776447859276, 0.12662206966679046, 0.14788239468754671, 0.3378209465801276, 0.11624966189680885, 0.046817866040003486, 0.3638447341790958, 0.1737455156205484, 0.3430199872472022, 0.20571483304461424, 0.1242247764996055, 0.13741197974791175, 0.21161376047409264, 0.05703377499474349, 0.20134686234764843, 0.1307452680262533, 0.1629037473101942, 0.27635907539236604, 0.14392902059768842, 0.1033264694961874, 0.22373721174024697, 0.06184183990289671, 9.999999999998899e-05, 9.999999999998899e-05, 0.044377843436712805, 0.04735773454257708, 0.036161886151252154, 0.026670694531438, 9.999999999998899e-05, 0.030548030485475053, 0.17130891344830457, 0.08120554158868631, 0.10041407953697612, 0.11307205152080246, 0.03850772765575361, 0.05699448875581925, 0.14052710847095573, 0.0993765685947352, 0.10916524611452583, 0.13133456612337435, 0.21582836690624185, 0.15673516634447493, 0.08860328432033915, 0.11392612327419538, 0.07540651356955408, 0.19422175078408233, 0.24509557157724837, 0.06713009525906055, 0.19463397542395522, 0.2066296635132916, 0.18295674605420986, 0.08941860385334255, 0.09867629809579193, 0.11664497800653095, 0.061091049840011014, 0.1361281659900736, 0.11052669868114773, 0.5083290286008109, 0.39250384532836613, 0.5149542841433002, 0.5545315230408239, 0.4910085651740955, 0.32179404115228194, 0.6956397385477475, 0.4527977711326654, 0.43054377615782313, 0.0639415348656377, 0.028501565762129255, 0.011570861997558302, 0.09413283029093544, 0.07634592974821752, 0.09003259611588332, 0.0604707485745023, 0.13984896898249533, 0.07748605920963869, 0.18869033913535327, 0.22960520480397428, 0.1714636679102206, 0.25180445347932023, 0.17684554801247354, 0.15105107684911945, 0.2311920797911149, 0.2317459272303255, 0.18595208843071087, 0.1483187060949398, 0.2530626251175653, 0.3006748592773869, 0.33197580174040253, 0.2708850701262042, 0.2202031785358306, 0.22605445064644758, 0.2990667796364601, 0.16168297838855994, 0.12202788831312883, 0.24037811513502327, 0.13219611531765418, 0.22493320405434625, 0.19776644227363827, 0.16781160641231652, 0.2018189119354199, 0.316761277501007, 0.1647073612800798, 0.2245045246579841, 0.1748147467327319, 0.21060340145735768, 0.28000669724841665, 0.24190983842112723, 0.21401723472937806, 0.25880291636898733, 0.19202800647959206, 0.1936450654557681, 0.1597284278004899, 0.2059947902097541, 0.17786216949029954, 0.1767376403628821, 0.16704845949498448, 0.18396305403903612, 0.18862911855059095, 0.16250092813419814, 0.19471451197085776, 0.12485592249081401, 0.12385548335653895, 0.1740886284990083, 0.8214144243043109, 0.20057256763524145, 0.9126175225662776, 0.12178867753951994, 0.8867794013810751, 0.85834810495038, 0.565252178245311, 0.15622124702397955, 0.5054360821391959, 0.1781203630352698, 0.16587730778314458, 0.6292201272869264, 0.10388934402554273, 0.16124567205471918, 0.24738316328323595, 0.220068218339301, 0.1752542152460197, 0.18464172854442218, 0.17521171048079653, 0.18160206679653224, 0.20536735675132534, 0.17087824947570318, 0.21934856633608124, 0.21731153327422503, 0.10079689564767191, 0.08119978554251706, 0.06671376864742273, 0.09779221670692295, 0.07069288350623881, 0.0839727595308003, 0.06653379080114441, 0.09990231079122991, 0.09827916550046123]}, "mutation_prompt": null}
{"id": "5061cc0e-ebd7-41aa-825a-87a4331f2afb", "solution": "import numpy as np\n\nclass WhaleOptimizationAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.a = 2  # Parameter for spiral updating\n        self.a_max = 2  # Maximum value for parameter a\n        self.b = 1  # Parameter for spiral updating\n        self.max_iters = 100\n\n    def __call__(self, func):\n        def initialize_population(population_size, dim, lb, ub):\n            return np.random.uniform(lb, ub, (population_size, dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma1 = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, 1)[0]\n            v = np.random.normal(0, sigma2, 1)[0]\n            step = u / abs(v) ** (1 / beta)\n            return step\n\n        population = initialize_population(self.population_size, self.dim, self.lb, self.ub)\n        g_best = population[np.argmin([func(p) for p in population])]\n        for _ in range(self.budget // self.population_size):\n            a = self.a - (self.a / self.max_iters) * _  # Update parameter a\n            for i in range(self.population_size):\n                r = np.random.rand()  # Random number\n                A = 2 * a * r - a  # Parameter A\n                distance_to_g_best = np.abs(g_best - population[i])\n                if r < 0.5:\n                    if np.linalg.norm(distance_to_g_best) < 1:\n                        population[i] = g_best - A * distance_to_g_best\n                    else:\n                        population[i] = g_best - A * levy_flight()\n                else:\n                    population[i] = np.random.uniform(self.lb, self.ub, self.dim)\n            g_best = population[np.argmin([func(p) for p in population])]\n        return g_best", "name": "WhaleOptimizationAlgorithm", "description": "A novel metaheuristic algorithm, Whale Optimization Algorithm (WOA), inspired by the hunting behavior of whales where the leader whale moves towards the prey while others follow, updating their positions based on the leader's. ", "configspace": "", "generation": 88, "fitness": 0.10328175837611514, "feedback": "The algorithm WhaleOptimizationAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.1789676695707525, 0.1891103507144043, 0.1817738888727114, 0.17531604392131106, 0.20406130901613695, 0.1526261161085769, 0.23234124155470393, 0.18503094378177165, 0.23140798561740572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045208241815598016, 0.05247535835287853, 0.07302854092000233, 0.04754164194501376, 0.03858316185843924, 0.0536910344826248, 0.05899974954377851, 0.06283892078558206, 0.056649420809466555, 0.03773932435538441, 0.04178116760361772, 0.05398278519738653, 0.045728061730100356, 0.04025850069148196, 0.057637573025132616, 0.03766681162831753, 0.04336457975680874, 0.04925761569393039, 0.0720959634032502, 0.07667869007498462, 0.07357396511698411, 0.08316347904386912, 0.08392950784198361, 0.09310592336689949, 0.09126751729686278, 0.11526385994555421, 0.08068236727674516, 0.07195625699779451, 0.06716671474206781, 0.11319701256604564, 0.06560533217193076, 0.06549662778793719, 0.07486964034780463, 0.07489779902015559, 0.06638704384326322, 0.10272675053188174, 0.168843333757561, 0.17087900862499505, 0.133463755232185, 0.1421158210806951, 0.1320276197558955, 0.13488201913268916, 0.13763056936692342, 0.1324129354345347, 0.14496261400567378, 0.013783388589451162, 0.005717125454987038, 0.003419438075706105, 0.06469697452103484, 0.053405254174741956, 0.011996530143520978, 0.02866005514159764, 0.026843023561586965, 0.063079194210784, 0.040901749791648956, 0.026576799162552178, 0.01801312035562841, 0.015443117186069277, 0.024998951234640132, 0.08027409142132835, 0.04110335477273308, 9.999999999998899e-05, 0.03431454679204349, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06521444772242502, 0.13386792263413294, 0.07224985376410498, 0.0960547556124195, 0.09360069727010956, 0.08437540992618431, 0.07984745142526484, 0.12021915543047201, 0.057697461179306075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008477351658904064, 0.0026565744041791017, 0.004781735023742795, 0.0008195033057192269, 0.004603954972861035, 9.999999999998899e-05, 9.999999999998899e-05, 0.20052313219417528, 0.21510887322702188, 0.19029351584555454, 0.1990489956789222, 0.22341357410682428, 0.20266091142210885, 0.21203024423267447, 0.20839721308298165, 0.21222899800168749, 0.07607660869823596, 0.07396523696507717, 0.05379795152686495, 0.05575373738881606, 0.04379430154589958, 0.058013943470026974, 0.05076129018713127, 0.09645387827667895, 0.07163078450753346, 0.16555984781487876, 0.20413674752076827, 0.1604043648041512, 0.15223143658767346, 0.16371962525891848, 0.15202792476471372, 0.15256642721554348, 0.15331074985550552, 0.1278787120702598, 0.1730316135700254, 0.19136109580865523, 0.17891635879731616, 0.19663331813535767, 0.2118484098232808, 0.17232226831938502, 0.19180791953723442, 0.18083757272373147, 0.18163328697906067, 0.12937745332995332, 0.13670843205640326, 0.11353105984228296, 0.11375747780991674, 0.10713227146895421, 0.11953917638006983, 0.12536855496448351, 0.11831315873901427, 0.10918615903182927, 0.171497878496347, 0.19262927240301753, 0.208624072267792, 0.1930928388576948, 0.17570474388030888, 0.17985884792639828, 0.17284129268005177, 0.19266193848042945, 0.17702824589417565, 0.16126826194384591, 0.17028318659835373, 0.17084747965467628, 0.1587373216069745, 0.152269816792315, 0.15450913116606024, 0.15645531262362888, 0.15523172694804344, 0.15948919276019247, 0.19242850507069775, 0.16586944753730748, 0.1644745980338177, 0.2108357864137177, 0.19385880745861628, 0.22319316354628105, 0.19117529232751984, 0.24817898845230424, 0.18464017833829682, 0.22398591572829396, 0.16490825846040058, 0.22613276513660185, 0.15673740363782962, 0.25690937688374704, 0.20967751087501274, 0.14991717212603983, 0.1724314739374806, 0.13739565400328246, 0.1984174869463563, 0.1853164247052106, 0.17964883868154935, 0.1865829585304819, 0.21976367248561957, 0.1950757206927365, 0.183863395352997, 0.1732819213628063, 0.19537738233256252, 0.0686880599544567, 0.07351435088136438, 0.08477267150615353, 0.06179788806288966, 0.06517795745937782, 0.06047788465170856, 0.0780762178804294, 0.060521888744403673, 0.05838646045426865]}, "mutation_prompt": null}
{"id": "422f78e0-d42d-4ddd-ae93-7c7e5e85c7e2", "solution": "import numpy as np\n\nclass AdaptiveParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best, inertia_weight):\n            inertia_term = inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        inertia_weight = self.initial_inertia_weight\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best, inertia_weight)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n            inertia_weight = max(0.4, 0.9 - 0.7 * _ / (self.budget // self.swarm_size))  # Adaptive inertia weight\n        return g_best", "name": "AdaptiveParticleSwarmOptimization", "description": "Introducing adaptive inertia weight and dynamic velocity clamping to enhance Particle Swarm Optimization.", "configspace": "", "generation": 89, "fitness": 0.22720191471749526, "feedback": "The algorithm AdaptiveParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.5554831507662332, 0.6011887004040704, 0.5500364292225742, 0.5683301643360785, 0.6281610715841756, 0.5452467847613316, 0.6044147422972139, 0.5707059627811841, 0.5521538701835971, 0.026424043795404528, 0.014081527672697325, 0.009301682828403157, 0.048333228411998386, 0.05931305092324035, 0.06367256177139957, 0.011379737584800709, 0.021292266338960864, 0.040176979956360825, 0.099962022124223, 0.26038086143260675, 0.1049924601211858, 0.07330909210025749, 0.07915166699068055, 0.13700711054369097, 0.07678846497904013, 0.10433690935899864, 0.11803081032147988, 0.0810494732999899, 0.0682701159667849, 0.10019602059505361, 0.11753223091905307, 0.09029921813172437, 0.07548132616195036, 0.08781926654210437, 0.08425229933470268, 0.09080363829758131, 0.908831971473768, 0.924435006925729, 0.9273637826575647, 0.8938283533896523, 0.9210131162829798, 0.9224362597460677, 0.9316129521351025, 0.8979416996812501, 0.9160946224027897, 0.33103299206775805, 0.3788904043296002, 0.33112481733803967, 0.2852514208648791, 0.28873149177742796, 0.21073856051877238, 0.3047533141387687, 0.31118211428365217, 0.28324671751603236, 0.23741120536244364, 0.1840952505696024, 0.20932656314365927, 0.2108711136357081, 0.22662526094998836, 0.2093942365567829, 0.22052442514396975, 0.12780072944835807, 0.14945918830671456, 0.21642895055359457, 0.15386085710793573, 0.14299731844781405, 0.24100087015491878, 0.12575043274886744, 0.17996525571836686, 0.13503689443600742, 0.12371312878921814, 0.12308688902995579, 0.12548329373249123, 0.19075598206455602, 0.208171494946102, 0.1791934839901509, 0.12422503763592818, 0.13166307802262256, 0.16388036175645304, 0.11958467420097729, 0.15134525250260467, 9.999999999998899e-05, 0.0005242066032251635, 0.034105938682782444, 0.047082526648440925, 0.0030899605665918317, 0.011654453533233577, 0.013100421306854293, 0.044086586302105935, 0.02325224298569284, 0.16466089332569922, 0.05906634563563695, 0.09745885315357661, 0.06549533124830709, 0.004880009994698065, 0.022249227447464937, 0.13766581845385428, 0.06669235934386797, 0.04395933906398164, 0.04949365977272391, 0.06639197245269246, 0.07568086434653687, 0.0471622694668975, 0.07710557406582264, 0.03512043275017329, 0.05581123961736101, 0.0809107225064124, 0.051131588407725026, 0.11315322422618024, 0.055324561112174875, 0.16052666633360624, 0.032718151084827674, 0.004996161656969922, 0.103286436027345, 0.0711744738475496, 0.08520836791950892, 0.0805425336147455, 0.4400126349654502, 0.44880646596317453, 0.4898808388744733, 0.424576456252298, 0.4101233708284793, 0.44324505273030723, 0.48992684139756515, 0.4379931445263172, 0.42879685111504284, 0.06363030104668255, 0.10305546362357054, 0.12313271801500136, 0.08416478659534987, 0.0967670101577085, 0.10623313543606072, 0.10016844757984655, 0.09323977320125432, 0.08551515655084752, 0.17225277479645063, 0.17388944404873163, 0.17867709246935337, 0.18300116122420873, 0.36268955298544114, 0.19802211556104532, 0.1827484531740673, 0.17038624632914157, 0.19207162222627772, 0.2774211221888784, 0.28016408632837797, 0.26383656836278346, 0.3404658904559167, 0.31375243356971505, 0.3226612056046877, 0.34027878292425273, 0.3012472459009855, 0.2802414982789584, 0.10924609281609521, 0.23714709821574076, 0.2138770660906022, 0.1666776667912807, 0.18492799368598245, 0.20560849698810557, 0.20610184792810426, 0.24230014045046233, 0.29367600458795906, 0.2011053730158806, 0.1701086146302594, 0.20074276148061598, 0.19870110990282674, 0.18603758698647632, 0.21663988130520384, 0.20349562162578427, 0.21876867216968632, 0.19314029444141234, 0.17679413168029257, 0.16535113500719256, 0.21140755174482395, 0.1753375549923154, 0.19878214385279147, 0.1875980407725859, 0.17926704814427408, 0.17615215361687564, 0.19733643918937793, 0.1247309805106801, 0.12354179609156368, 0.18328397009915032, 0.8159130298664876, 0.19958262044304864, 0.7756216056987089, 0.09969968741565738, 0.7959078134089218, 0.6985444741875011, 0.7358148552773558, 0.1554827824069276, 0.6417328661744934, 0.19678042451318178, 0.46418062373279745, 0.2037715048317994, 0.10441588980509753, 0.1612886048132377, 0.46395778896388407, 0.19631747491650642, 0.19279252169223882, 0.18844757842786397, 0.16574943571391776, 0.17348725589206548, 0.17947456479792523, 0.17858373306957132, 0.20900479123472104, 0.17182690314148508, 0.08610610019178999, 0.08983230903403416, 0.0671896469524279, 0.09738833357468224, 0.08576585702154826, 0.07703439687486136, 0.10860646197859036, 0.07953208563076619, 0.08043536036004784]}, "mutation_prompt": null}
{"id": "fd4dbb24-6ab1-4d11-b691-ef60be832702", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "1187f8c1-3a6d-4354-9cef-e13f3d5e8900", "solution": "import numpy as np\n\nclass DynamicParameterAdaptationPSO(ParticleSwarmOptimization):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.min_inertia_weight = 0.4\n        self.max_inertia_weight = 0.9\n        self.min_cognitive_weight = 0.5\n        self.max_cognitive_weight = 2.0\n        self.min_social_weight = 0.5\n        self.max_social_weight = 2.0\n\n    def __call__(self, func):\n        def update_parameters(iteration):\n            self.inertia_weight = self.min_inertia_weight + (self.max_inertia_weight - self.min_inertia_weight) * (iteration / (self.budget // self.swarm_size))\n            self.cognitive_weight = self.min_cognitive_weight + (self.max_cognitive_weight - self.min_cognitive_weight) * (iteration / (self.budget // self.swarm_size))\n            self.social_weight = self.min_social_weight + (self.max_social_weight - self.min_social_weight) * (iteration / (self.budget // self.swarm_size))\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for iteration in range(self.budget // self.swarm_size):\n            update_parameters(iteration)\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "DynamicParameterAdaptationPSO", "description": "Enhancing the Particle Swarm Optimization algorithm by incorporating a dynamic parameter adaptation mechanism for better exploration and exploitation balance.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_swarm' is not defined\").", "error": "NameError(\"name 'initialize_swarm' is not defined\")", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "3df43b7b-9fd7-4ce5-ad06-2ea4baf7b91a", "solution": "import numpy as np\n\nclass EnhancedPSO(ParticleSwarmOptimization):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.decay_rate = 0.95\n\n    def __call__(self, func):\n        def update_velocity(position, velocity, p_best, g_best):\n            self.cognitive_weight *= self.decay_rate\n            self.social_weight *= self.decay_rate\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        swarm, velocities = self.initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = self.update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "EnhancedPSO", "description": "Enhancing Particle Swarm Optimization by incorporating dynamic adaptation of cognitive and social weights during the optimization process", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedPSO' object has no attribute 'initialize_swarm'\").", "error": "AttributeError(\"'EnhancedPSO' object has no attribute 'initialize_swarm'\")", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "e2df9691-f0b9-4459-9934-22a9cf416624", "solution": "import numpy as np\n\nclass DynamicParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.min_cognitive_weight = 0.5\n        self.max_cognitive_weight = 2.5\n        self.min_social_weight = 0.5\n        self.max_social_weight = 2.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best, cognitive_weight, social_weight):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        for _ in range(self.budget // self.swarm_size):\n            cognitive_weight = np.interp(_, [0, self.budget // self.swarm_size], [self.min_cognitive_weight, self.max_cognitive_weight])\n            social_weight = np.interp(_, [0, self.budget // self.swarm_size], [self.min_social_weight, self.max_social_weight])\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best, cognitive_weight, social_weight)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "DynamicParticleSwarmOptimization", "description": "Introducing Dynamic Particle Swarm Optimization (DPSO) by dynamically adjusting the cognitive and social weights during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 37, 9, '        for _ in range(self.budget // self.swarm_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 37, 9, '        for _ in range(self.budget // self.swarm_size):\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "c5f3298a-4c6c-4d5c-abd9-0bbfc707bfaa", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "13a7f44b-e22a-40ec-a634-c1165e17b719", "solution": "import numpy as np\n\nclass EnhancedParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight_min = 0.4\n        self.inertia_weight_max = 0.9\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best, inertia_weight):\n            inertia_term = inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])\n        for _ in range(self.budget // self.swarm_size):\n            inertia_weight = self.inertia_weight_max - (_ / (self.budget // self.swarm_size)) * (self.inertia_weight_max - self.inertia_weight_min)\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best, inertia_weight)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "EnhancedParticleSwarmOptimization", "description": "Enhancing Particle Swarm Optimization (PSO) with dynamic inertia weight and adaptive cognitive and social weights to improve convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 36, 9, '        for _ in range(self.budget // self.swarm_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 36, 9, '        for _ in range(self.budget // self.swarm_size):\\n'))", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {}, "mutation_prompt": null}
{"id": "52c41ee9-cb89-409b-9f34-0b120f024bbf", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.firefly_pop_size = 20\n        self.de_pop_size = 10\n        self.lb = -5.0\n        self.ub = 5.0\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.gamma = 0.1\n\n    def __call__(self, func):\n        def initialize_firefly_pop(pop_size, dim, lb, ub):\n            return np.random.uniform(lb, ub, (pop_size, dim))\n\n        def levy_flight(dim):\n            sigma = (np.math.gamma(1 + self.beta_min) * np.sin(np.pi * self.beta_min / 2) / (np.math.gamma((1 + self.beta_min) / 2) * self.beta_min * 2 ** ((self.beta_min - 1) / 2))) ** (1 / self.beta_min)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / (abs(v) ** (1 / self.beta_min))\n            return step\n\n        fireflies = initialize_firefly_pop(self.firefly_pop_size, self.dim, self.lb, self.ub)\n        best_firefly = fireflies[np.argmin([func(f) for f in fireflies])]\n        for _ in range(self.budget // self.firefly_pop_size):\n            for i in range(len(fireflies)):\n                for j in range(self.de_pop_size):\n                    candidate = fireflies[i] + self.alpha * levy_flight(self.dim) * (fireflies[np.random.randint(self.firefly_pop_size)] - fireflies[np.random.randint(self.firefly_pop_size)])\n                    if func(candidate) < func(fireflies[i]):\n                        fireflies[i] = candidate\n            new_best = fireflies[np.argmin([func(f) for f in fireflies])]\n            if func(new_best) < func(best_firefly):\n                best_firefly = new_best\n        return best_firefly", "name": "HybridFireflyDE", "description": "Implementing a Hybrid Firefly Algorithm with Differential Evolution (HFA-DE) for efficient optimization by combining the exploration capability of firefly algorithm with the exploitation power of differential evolution.", "configspace": "", "generation": 96, "fitness": 0.08655218467228604, "feedback": "The algorithm HybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.20.", "error": "", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.10395529865807018, 0.10231868723001358, 0.10083398974367175, 0.09426771557930702, 0.0689450407992992, 0.0820273635166745, 0.1229846410302523, 0.10099113807200899, 0.11975513856004105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016605395205899542, 0.01527457968554502, 0.006181095191425845, 0.013164186804612843, 0.021087918279423135, 0.015455030797568048, 0.027739360258017265, 0.00047774878144069, 0.02762851603770955, 0.0026793321841787066, 0.005625522753607393, 9.999999999998899e-05, 0.01959972157639278, 0.0036645524546853325, 0.001124670465317834, 0.005221185535333794, 9.999999999998899e-05, 0.0006859321275638486, 0.9849470913741046, 0.9924597592633461, 0.9966509793164813, 0.9912561947825784, 0.9950916858395995, 0.9836785536637124, 0.9914592901377595, 0.9954545551547586, 0.9870214395026665, 0.004669123404869802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02209682776259292, 0.024074985253243586, 0.03814923903670353, 0.011293333694524565, 0.006922730418038925, 0.11184132618654363, 0.08041115716899017, 0.07314472901138847, 0.03537490311576563, 0.041855176821027684, 0.010912590496546692, 0.037225797198858546, 0.07814931486713828, 0.050450732167348855, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13620607551816988, 0.12744031170699366, 0.15062925457462006, 0.13032173830990046, 0.1126528268008733, 0.11804227031371306, 0.12587324464215344, 0.12060871152099029, 0.14033307202911782, 0.004921060463630278, 0.002187970918251292, 0.01036254565190442, 0.009794865939940056, 0.008331512029926325, 0.024407001418468854, 0.031738644131428684, 0.014936502938143303, 0.040916783514506117, 0.08940882259850735, 0.10071134360161227, 0.09265982000966255, 0.10044829964535962, 0.10852972522114013, 0.0814970841838798, 0.08808199726801991, 0.05896947407605091, 0.08286731582515694, 0.1080943524200122, 0.12457426449259434, 0.10910991032394834, 0.13754510086791039, 0.12835355884232036, 0.1250394283901598, 0.12932960121682358, 0.17377774300845283, 0.1116773719286952, 0.06277207216824898, 0.050730855520465634, 0.05375420003555298, 0.061162581110314584, 0.0749708465184824, 0.06503498340342762, 0.06887075127481657, 0.10405079869279432, 0.03828157888088135, 0.1055017210009519, 0.10611827261262674, 0.14097722722393569, 0.10942762977267995, 0.09916158568565425, 0.11576881936527184, 0.12245976138762271, 0.12475346078318894, 0.1261963614278906, 9.999999999998899e-05, 0.03776895716215456, 9.999999999998899e-05, 9.999999999998899e-05, 0.05434848480794585, 0.0486769674820593, 0.018812925903624045, 9.999999999998899e-05, 0.026457958597240983, 0.09667694107274494, 0.10647035573748376, 0.1079309136420259, 0.09879125381197718, 0.1207914665021157, 0.0938717593581283, 0.08849808740408793, 0.09643604708838482, 0.08065912481973647, 0.06772901711352042, 0.106044458774611, 0.04596165917768724, 0.06641643673710873, 0.0457638073511758, 0.06318833184067296, 0.07204754179922768, 0.04411039169851971, 0.07109976434318377, 0.13949348402672912, 0.1540793641315582, 0.15088630122170288, 0.12954534569754284, 0.1398404254882888, 0.1482961752677846, 0.13576074126097304, 0.1370601935851551, 0.14689007985489466, 0.021022074571466653, 0.029762289995331037, 0.031393493129599714, 0.027015293023570086, 0.028277979381586937, 0.03010054718689914, 0.018555526265890188, 0.023768288394823145, 0.02451324433007973]}, "mutation_prompt": null}
{"id": "dbe6cafb-0fed-48a1-b9ca-562f591cfaf5", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "9ed7b851-929f-49d0-97ff-350e37968f50", "solution": "import numpy as np\n\nclass ParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n\n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n\n        def update_velocity(position, velocity, p_best, g_best):\n            inertia_term = self.inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n\n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n\n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n        return g_best", "name": "ParticleSwarmOptimization", "description": "A novel metaheuristic algorithm, Particle Swarm Optimization (PSO), inspired by the movement of bird flocks, where each particle adjusts its position based on its own best known position and the swarm's best-known position.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8055425511539356, 0.8338827831077924, 0.8424036463907468, 0.7484150333959676, 0.8014326737170117, 0.8177376668024315, 0.8130271008719512, 0.8208521098347542, 0.834609113642456, 0.1278980832629557, 0.12524963272958445, 0.10145281939971462, 0.04944945046604643, 0.1027673558780896, 0.048763415619407335, 0.10851029363997078, 9.999999999998899e-05, 0.059949007286231204, 0.12853764602428386, 0.10922367734109173, 0.07155992304510561, 0.07917042033396504, 0.08176733555662563, 0.14442671929790518, 0.06260056000941805, 0.11403156253027569, 0.09655274979709916, 0.08251671223471946, 0.09784781498694739, 0.0895239401073612, 0.09633187064628546, 0.061605020422759504, 0.04877507585259877, 0.06320295835583023, 0.10933858801680274, 0.09369885999751404, 0.9000688661039725, 0.8469722144872196, 0.8870298799995766, 0.8771015398347056, 0.875567334862629, 0.8620054536486493, 0.8870583127380492, 0.7707430419220035, 0.8680807935616701, 0.3935798430011569, 0.31846225800051275, 0.26743565463444774, 0.42431549635801613, 0.3927010425004688, 0.29494831788596254, 0.2877718423477782, 0.13267450496014666, 0.12862326400283342, 0.21038391832164638, 0.13863824113193224, 0.14016366982652617, 0.2753294521935453, 0.1890157128130353, 0.19119557428776424, 0.14341297279831, 0.12903363618173902, 0.19131886600198644, 0.34670137261697853, 0.09105864282805864, 0.12712513360302968, 0.3950895725274557, 0.08226205010930132, 0.4325419042444746, 0.17994568683720513, 0.12916730501224316, 0.10278707067478832, 0.1569407037159417, 0.12126105443879698, 0.12556735166548894, 0.14420196346529868, 0.13662467194802808, 0.12825798269853783, 0.1463044786146369, 0.11668830357084303, 0.14568372502835158, 0.030621952215351467, 0.06148091419247026, 0.01981765673361713, 0.05454296646002854, 0.03326683515630269, 9.999999999998899e-05, 0.07705396483229343, 9.999999999998899e-05, 0.01668386494826468, 0.08923881603376849, 0.12197627530843147, 0.16147739110205817, 0.07643707637418062, 0.048297301927891056, 0.06818999583931129, 0.1454189327436718, 0.15126098645407404, 0.09026063265598572, 0.15716403705432025, 0.14633166745229553, 0.1251358860973898, 0.06877561993765358, 0.09776603014101404, 0.1462477803918033, 0.1354640939269076, 0.09043992063663153, 0.07009705333867333, 0.17764792405879593, 0.10737514017645222, 0.200637638094316, 0.047650287190189045, 0.057293190520268045, 0.20078310836836955, 0.0776523840112997, 0.06165055257879681, 0.10474980133315659, 0.5677903708784025, 0.46680583682787047, 0.556241529531033, 0.5515292371745479, 0.3137083521714191, 0.4589726696399895, 0.4335888379490832, 0.4940362546890753, 0.5675157802790873, 0.05285901303707963, 0.05186627144465805, 0.03279014067906705, 0.07526249462902235, 0.06374208727356268, 0.14124033680735648, 0.11962993484424655, 0.08549560177563909, 0.08907960023060257, 0.1616995380572236, 0.15906463528021453, 0.22096727728950394, 0.18928043742063705, 0.25002311126147947, 0.27692442190332844, 0.18765587404047301, 0.21015223585912035, 0.16796803650661718, 0.14534944267338068, 0.26978742852427917, 0.23503356352270122, 0.26262616701569375, 0.2530042746427329, 0.2466851180170625, 0.2331675459220145, 0.4423990080103577, 0.25226676013440996, 0.18267692040353722, 0.2627101127043263, 0.11489555542116581, 0.17876561291576476, 0.24239611466970445, 0.189505283674964, 0.2036659340740219, 0.24480726632574423, 0.14487986439764577, 0.21847081157097537, 0.1732465795253585, 0.198920542182204, 0.1956793724722925, 0.22319310717692875, 0.21004615108209213, 0.2239012653817003, 0.2682542497079822, 0.19260488679000975, 0.17183888629773791, 0.18019439807051207, 0.17846205496304357, 0.18157753908549334, 0.17971949170420665, 0.17921358983082258, 0.18612381579465354, 0.20012881650011216, 0.18916229068532153, 0.12496116458917528, 0.12342220421696926, 0.17502779810101798, 0.8742187937850292, 0.2012211523536922, 0.8306779464195113, 0.12141793605564344, 0.8844087999159336, 0.8354060153870028, 0.8313952050447292, 0.15611769264770192, 0.628441411202528, 0.20061553132947663, 0.16597336415948571, 0.5483099378693228, 0.10401273945813194, 0.16275215086593364, 0.29376042440064865, 0.19684470734363835, 0.22587632645500122, 0.17963279898822715, 0.17984790098569048, 0.1940961803958492, 0.23226019797932695, 0.21559502725268698, 0.1924646729141467, 0.21389621575261109, 0.10493030510361878, 0.09055133793483983, 0.07428451824505633, 0.08586728911550912, 0.08567509571059073, 0.08082326941649987, 0.09941998800167329, 0.0786074062993588, 0.07187225782070017]}, "mutation_prompt": null}
{"id": "29bb6dd2-16fb-47f7-9994-73ab3cbead98", "solution": "import numpy as np\n\nclass EnhancedParticleSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = 30\n        self.lb = -5.0\n        self.ub = 5.0\n        self.initial_inertia_weight = 0.5\n        self.final_inertia_weight = 0.1\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.max_velocity = 0.1 * (self.ub - self.lb)\n        \n    def __call__(self, func):\n        def initialize_swarm(swarm_size, dim, lb, ub):\n            positions = np.random.uniform(lb, ub, (swarm_size, dim))\n            velocities = np.random.uniform(-0.1, 0.1, (swarm_size, dim))\n            return positions, velocities\n        \n        def update_velocity(position, velocity, p_best, g_best, inertia_weight):\n            inertia_term = inertia_weight * velocity\n            cognitive_term = self.cognitive_weight * np.random.rand() * (p_best - position)\n            social_term = self.social_weight * np.random.rand() * (g_best - position)\n            new_velocity = inertia_term + cognitive_term + social_term\n            return np.clip(new_velocity, -self.max_velocity, self.max_velocity)\n        \n        def update_position(position, velocity, lb, ub):\n            new_position = position + velocity\n            return np.clip(new_position, lb, ub)\n        \n        swarm, velocities = initialize_swarm(self.swarm_size, self.dim, self.lb, self.ub)\n        p_best = swarm.copy()\n        g_best = p_best[np.argmin([func(p) for p in p_best])]\n        inertia_weight = self.initial_inertia_weight\n        inertia_decay = (self.initial_inertia_weight - self.final_inertia_weight) / (self.budget // self.swarm_size)\n        \n        for _ in range(self.budget // self.swarm_size):\n            for i in range(self.swarm_size):\n                velocities[i] = update_velocity(swarm[i], velocities[i], p_best[i], g_best, inertia_weight)\n                swarm[i] = update_position(swarm[i], velocities[i], self.lb, self.ub)\n                if func(swarm[i]) < func(p_best[i]):\n                    p_best[i] = swarm[i]\n            g_best = p_best[np.argmin([func(p) for p in p_best])]\n            inertia_weight -= inertia_decay\n        \n        return g_best", "name": "EnhancedParticleSwarmOptimization", "description": "Enhancing Particle Swarm Optimization by incorporating a dynamic inertia weight modification strategy to adaptively adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 99, "fitness": 0.23958387373982792, "feedback": "The algorithm EnhancedParticleSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "0b5734ee-f39b-44f4-bbb5-bd182822c897", "metadata": {"aucs": [0.8406590231542933, 0.8239231330729494, 0.8446499560469836, 0.803843701291419, 0.7456271239330726, 0.8329923129757951, 0.8093767314227256, 0.7999373102293057, 0.8442276049700665, 0.10769841880524911, 0.14602284316641367, 0.10518654772313674, 0.12981356875136063, 0.04947569647147698, 0.06636607911419268, 0.03634227055409578, 9.999999999998899e-05, 0.049461758222432595, 0.08989469547611295, 0.1151096128411877, 0.0836831586585206, 0.07908541090746635, 0.08444090211322453, 0.14242210113249443, 0.071081413492325, 0.11322525370736913, 0.09669049052301981, 0.08588962980746073, 0.09803640949035775, 0.09806468471963037, 0.10502204360540401, 0.06353095270046505, 0.055930654724057005, 0.05447176842239332, 0.10987020218507515, 0.09364559916629644, 0.8995179604799587, 0.8475454669769613, 0.8826900579563091, 0.8731485451808101, 0.8828603907423935, 0.8625558629563445, 0.9074856051106122, 0.7686603825887977, 0.865342115931876, 0.2791481437476787, 0.21958827351465848, 0.21083793937037887, 0.5806561004551634, 0.36133364622528963, 0.3262895105779676, 0.3607286511826252, 0.14147602163451178, 0.12381865491772459, 0.18495703301988975, 0.13863824113193224, 0.14014697349048144, 0.2695824261186546, 0.20446492186462095, 0.19119084228390926, 0.13058186826040508, 0.12902436556378216, 0.16472131071387053, 0.34364161132757554, 0.10110728964193871, 0.17970555282948586, 0.3671507848360932, 9.999999999998899e-05, 0.29130499081715666, 0.17974819258181574, 0.12919296566662342, 0.057072485502888015, 0.14642783844660867, 0.11750979189795285, 0.16933221456144898, 0.14300807912935976, 0.136203182595947, 0.12751647050385362, 0.13862054202065266, 0.12474640284850924, 0.15187537345281976, 0.024400097200330317, 0.06318327503981436, 0.025861247405057686, 0.05761074051365689, 0.0320843890235597, 9.999999999998899e-05, 0.03421249425325368, 0.11252787182106494, 0.015226303507109185, 0.11933358497821178, 0.08593715910218291, 0.1419084844568559, 0.09266952004651707, 0.04710818661317173, 0.05708468537715361, 0.12578006784059614, 0.11833040947750506, 0.14137434654823477, 0.16171864368103583, 0.14395735455377112, 0.12130662952229376, 0.0711160036801759, 0.10228666911608364, 0.14455773587000365, 0.13341190046468965, 0.09778784625829506, 0.07271881767267718, 0.17245255478822796, 0.10201898725871783, 0.26247188285063183, 0.04773701512173778, 0.11382408672846012, 0.2507989085599819, 0.07756991638363708, 0.06819292191255644, 0.10313452713141835, 0.6743531734375936, 0.44765632270963684, 0.4650169240183334, 0.5198857972775353, 0.40252763240828504, 0.3712217641687764, 0.48854306631308264, 0.48123614018102856, 0.43265868337508495, 0.05775565219291601, 0.051559044443614366, 0.03273254395216807, 0.07564206046737709, 0.06511352383807312, 0.14106236656850346, 0.12042846375100302, 0.07318889988387944, 0.08912737291666362, 0.30324923403987514, 0.17506596119452011, 0.1847988065650238, 0.20163732127855394, 0.19425560066321634, 0.15149602700788545, 0.17861977391916228, 0.2193793727476807, 0.1671966827610395, 0.14398604003187554, 0.253889292280296, 0.20169859010522273, 0.2812243719868489, 0.20870691683922948, 0.26339866213528873, 0.22622582368222777, 0.2807414097063583, 0.24356879443021484, 0.13439731269532462, 0.3107469548109145, 0.1173293367107684, 0.21456561776271266, 0.23121870764534203, 0.1701099828596223, 0.14872016946085276, 0.2499242042584794, 0.20032822102027925, 0.22451342556157183, 0.19006392060131505, 0.20551712030918268, 0.2606423695969623, 0.21737946814807096, 0.21192253026998842, 0.1651286285273159, 0.27363190566968054, 0.2054931691720523, 0.17228600500868707, 0.17404565486778478, 0.19716477915334407, 0.181609088053728, 0.1799783368936947, 0.16742202708805687, 0.18682687476275062, 0.2003818546681756, 0.19610650430663068, 0.12418959280108155, 0.12299134272838996, 0.1751211829214666, 0.878101171194995, 0.20120140808306564, 0.8892678106302897, 0.12143758567085838, 0.8713826366063456, 0.856930505201756, 0.7136487691953033, 0.15617024152888626, 0.42436251850078854, 0.1990900368740719, 0.16597656069333566, 0.4899666366889256, 0.10400162944612112, 0.1628587266168704, 0.22319732709586748, 0.2010466435869046, 0.1850686517540402, 0.17557446627676054, 0.1900839425277312, 0.19186778901784096, 0.2023684469450613, 0.245783930445014, 0.19886152285901504, 0.2021637888298331, 0.11123104356922264, 0.0847203351817365, 0.0801975323283648, 0.09065807032388129, 0.08556724392289072, 0.07784014197702127, 0.08003424219005861, 0.07720082768764935, 0.06480073374518724]}, "mutation_prompt": null}
